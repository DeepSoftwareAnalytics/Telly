0	Prints a summary of the status
1	Find bad files from kubectl output .
2	Confirm that the EJSON keys are not prunable .
3	Returns the compressor for the current system .
4	Create . bff file
5	Returns an array of all files matching + pattern + .
6	Copy the source directory to the destination directory .
7	Returns the relative path for a given path
8	Remove previously mounted disks
9	Copy assets to dmg
10	Renders the document transform .
11	Render the package metadata file
12	Check for bad libraries
13	Check for any missing libraries
14	Check for missing dependencies
15	Read shared libraries
16	Check for bad libraries
17	Update the digest of a file
18	Update the digest with the contents of a file .
19	Find all packages matching the pattern
20	Write the distribution file
21	Returns an artifact for the given artifact .
22	Upload the package to Artifactory
23	Initializes the Artifactory client
24	Metadata properties for a package
25	Returns the remote path for the given package .
26	Sets the parameters of the request .
27	add a wix light extension
28	set wix light delay validation
29	Adds a Candle Extension
30	Write the localisation file
31	Write the parameters file
32	Write the source file .
33	Write the bundle file
34	Resolve a dependency
35	Appends the build start time if the timestamp is not set
36	Returns true if the version has a timestamp
37	Construct the build version
38	Render template content
39	Add a deprecation warning .
40	Add a message to the log
41	Defines a shell command
42	Executes the make command .
43	Deploys an app bundle .
44	Run a rake command
45	Create a touch command .
46	Delete a directory
47	Copies a source file to a destination .
48	Update the config guess .
49	Write the tarball to the staging directory
50	Create a tarball for this package
51	Clean the project directory
52	Copies the downloaded file to the project directory .
53	Extract file to temporary directory
54	Returns the type of the checksum .
55	Verifies the checksum of the downloaded file .
56	Sets the signing identity .
57	Sign a Windows package .
58	Returns the subject of the certificate
59	Returns the manifest entry for the given name .
60	Sets the source for this fetcher .
61	Defines a version constraint .
62	Adds a file to the whitelist .
63	Returns the path to the downloaded file .
64	Prepend a path to the PATH environment variable .
65	Returns the overrides for this project .
66	Returns the version for the cache .
67	Returns a fetcher for the source .
68	The SHA256 of the project .
69	Canonicalizes the given source .
70	Write the makeselfinst . erb file
71	Create the cache directory
72	Generates a unique tag for this software .
73	Perform incremental cache
74	Remove all git directories
75	Write the AppxManifest . xml file
76	Run a shell command
77	Shellout command .
78	Retry a block of code
79	Returns a Windows safe path
80	Returns a compiler safe path
81	Create a directory
82	Remove a directory
83	Copy a file
84	Remove a file
85	Create a file
86	Create a symlink
87	Validates the license information
88	Get project license content
89	The license map for the project .
90	Process the transitive licenses .
91	Collects the licenses for a given software .
92	write the prototype file
93	The content of the package file .
94	Validates the package file .
95	Returns the key for the given package .
96	Build a semantic version string .
97	Get build start time
98	Save the hash to disk
99	The name of the vendor .
100	Sets the license .
101	Returns the full path to a build file .
102	Renders the signing template and removes the temporary directory .
103	Publish a package
104	Defines a build version
105	Add a block to a package
106	Adds a block to the compress list .
107	Override a configuration setting
108	Returns the path to the LICENSE file .
109	Returns true if the given software is a dependency
110	Build the manifest for this release
111	Write the text manifest to disk
112	Write the conffiles file
113	Returns the package size in bytes .
114	Returns true if the given directory is empty .
115	Force removal of existing directory before cloning
116	Returns the current revision of the repository .
117	Returns true if the given revision is a commit
118	Convert to SSH format
119	Compute the number of bits needed to encode this parameter .
120	Request the DH key parameters .
121	Build the signature buffer
122	Execute the block when the page is loaded .
123	Returns true if all validation passes
124	Raise an exception if the block is not supported .
125	Merges two sets of arguments .
126	Recombine find and runtime arguments .
127	Returns the list of elements to check .
128	Returns true if the given URL matches the expected mappings
129	Matches a URI against a component .
130	Returns a URI with substitutions applied
131	Returns the substitution value for the given index .
132	Builds an enumerator for the given number of times .
133	Builds an enumerator from an Array .
134	Builds an enumerator for the given LockQueue .
135	Builds the active record enumerator on the given scope .
136	Builds an enumerator for iterating over the active record batches .
137	Returns an enumerator of batches of the specified size .
138	Reify the object .
139	Returns the maximum number of records to be returned by the API .
140	after_create callback
141	called when a record is destroyed
142	after_save and after_update hooks
143	on touch
144	Check the presence of the item subtype column .
145	Returns true if the record should be saved
146	Given a list of changes return a hash with the changes squashed .
147	Returns the node for the given object
148	Returns a scope with the given depth .
149	Set the orphan strategy
150	Arrange the nodes in the tree .
151	Arrange nodes for serialization
152	Builds the ancestry from parent_ids
153	Rebuilds the depth cache .
154	Returns the conditions that should be added to the query .
155	Request default params
156	Returns a hash of options
157	Reset all configuration options to defaults
158	Get HTTParty config
159	Start a timer
160	Set the deadline for this socket .
161	Returns the time remaining after the deadline .
162	Build the schema for the parent schema .
163	Given a parent schema and an object handle the schema .
164	Returns true if the given subject matches the conditions .
165	Alias an action
166	Expands aliased actions
167	Returns all aliases for an action
168	Returns relevant rules
169	Create missing file .
170	Iterates over each filename in the directory .
171	Yields all the children of this node
172	Yields all files in the directory .
173	calculate checksum
174	Calculate the k - value checksum
175	Annotates a PDF document .
176	Returns an array of all characters in the string .
177	Returns an array of all characters in the string .
178	Calculate checksum
179	Returns a string suitable for use in a bar chart .
180	Renders the barcode to a given Cairo context .
181	Renders the image to a PNG file .
182	Renders the image as a PSSurface .
183	Renders the image as a PDF document .
184	Renders the graph to a string .
185	Sets the maximum number of threads to use .
186	Returns true if the browser is online
187	HTTP HEAD request
188	Returns a Sequel connection
189	Ensures that the commit with the given SHA exists .
190	Ensure commit parents exist
191	ensure user followers
192	Ensures that a user is a follower of another user .
193	ensure_user_byemail
194	Ensure that a repo exists
195	Ensures that the languages exist in the database .
196	Ensure that the fork commits exist
197	Ensure that a fork point exists
198	Ensures all orgs exist for the user
199	Ensures that a user is part of the organization .
200	Ensure a user is an organization
201	Ensures that there are no comments for a commit .
202	Ensure watchers exist for a repository
203	Ensure pull requests exist
204	ensure pull request history exists
205	Check if the request is a PR with the head repo
206	ensure_forks ensures that all forked projects exist
207	Ensure that a fork exists
208	Ensure issues exist in the repository
209	Ensures that the issue exists in the repository
210	Ensure issue events exist for the issue
211	Ensures that an issue event exists .
212	ensure issue comments
213	Ensures that the issue comment is present in the database .
214	Ensures that the issue labels exist for the specified repository .
215	Ensures that a repo label exists .
216	ensure issue labels
217	Ensure issue label existence
218	Creates a transaction .
219	Store a commit
220	Log a message
221	Perform a paged API request
222	Returns the time at which the resource was last updated .
223	Returns the number of pages for a given URL .
224	Parse links
225	Parse the request result
226	Perform an API request
227	Attach this socket to the given ip address .
228	Connect to the given adapter .
229	Retrieve a commit
230	Get a list of commits for a repository
231	Retrieve all orgs for a user
232	Retrieve a list of watchers for a repository .
233	Retrieve a watcher
234	Get repository events
235	Get the diff between two branches
236	Retrieve the default branch for a repository .
237	Parse command line options
238	Validate options
239	Queue client
240	Read a value from a nested hash
241	The location filter to apply to a location
242	Validates that the usage is valid .
243	Validates the options .
244	Send all messages to Kafka
245	Send a notice signal to the monitor .
246	Performs a lookup and transform .
247	Given a set of params and an array of ids returns a new set of ids .
248	Loads the contents of + pbfile + .
249	Asserts that two values are equal .
250	Computes the gradients of a tensor .
251	Create a random standard normal distribution .
252	Creates a new matrix .
253	Returns an initializer for a glorot uniform distribution .
254	Returns an initializer for a random uniform distribution .
255	Slice an array .
256	Create a new array of the specified shape .
257	Logical AND operation .
258	Reduce the mean of a tensor
259	Concatenate values along a given axis .
260	Perform a dynamic partition .
261	Adds a where clause to the query .
262	The SassScript == operator .
263	The SassScript Acos function .
264	The SassScript atan function .
265	Casts the given input to the given data type .
266	Print data to STDOUT
267	The SassScript sec function .
268	Calculates the square root of a number .
269	Perform a log operation .
270	The SassScript exponential function .
271	Applies padding to a tensor .
272	Performs a gather operation .
273	Pack an array of values .
274	Unpack a value into an array .
275	Create a case statement .
276	Adds an operation to the graph .
277	Broadcast dimensions of an array .
278	Performs a vector operation .
279	Transpose an array with permutations
280	Adds two arrays together .
281	Computes the argmax of a tensor .
282	Computes the ceil of a floating point value .
283	Cos - operator
284	Returns the floor of a floating point number .
285	Mod operation .
286	Pow operation .
287	Returns the product of two tensors .
288	Generates a random uniform distribution .
289	Create a range operation .
290	Rank a tensor .
291	Applies a round operation to the input tensor .
292	Computes the square root of a floating point value .
293	Returns the shape of a tensor .
294	Sigmoid operation for real numbers
295	The SassScript sin function .
296	Subtraction operator .
297	Sum elements of a tensor
298	Calculates the tangent of a floating point tensor .
299	Computes the hyperbolic tangent of a tensor .
300	Returns the top k elements of an array .
301	Create a new array of the specified shape .
302	Converts a checkpoint to a YAML file
303	Add a device to the graph
304	Loads a serialized operation from a YAML string .
305	Adds a variable to the graph .
306	Create a variable scope
307	Creates a new session .
308	Create a placeholder tensor .
309	Check if value is dense .
310	Apply data type coercion
311	Add audio to customization
312	Create an event
313	Zero pad a string to the specified length .
314	Check the length of a string
315	Checks if a string is valid .
316	Checks the HMAC key .
317	Checks if a string can be converted into a String .
318	Compute the authenticator for the message .
319	Verifies the authenticity of the message .
320	Creates a new cipher object .
321	Opens an encrypted message .
322	Reopens all appenders .
323	The logger for this processor .
324	Measure a message .
325	Log a backtrace
326	Calls the given block with the given tags .
327	Pushes a list of tags onto the logger .
328	Returns true if the log matches the filter
329	Log an internal message
330	Measure the execution time of a block .
331	Execute the given block and log the result .
332	Log a log message .
333	Assigns a message and payload .
334	Assigns a message and payload .
335	Yields each exception to the given block .
336	Extracts file name and line number from call stack .
337	Returns the message for the given corrections
338	Gather all variables from the message .
339	do_run
340	Add a route to the message .
341	Returns true if row waiter
342	Returns the node with the specified ID .
343	Get all variables for a given node .
344	lookup on error parent
345	Decrement the number of items in the cache .
346	work the job
347	Acquire a lock on all queues .
348	Call the receiver .
349	Dynamically merge options
350	Remove params from the url
351	Parse User Info
352	Run a command asynchronously .
353	Returns a random exit code
354	Import a method
355	Imports the given methods .
356	Imports all methods from + source + .
357	Returns a wrapped function .
358	Fetch a function from the store .
359	Generates the AST for this command .
360	Returns a proc that can be used as a decorator .
361	Given a set of keys and a pattern and a match return an interpolated match group .
362	Interpolates the given replacement with the given match .
363	Adds commands to the before list .
364	Creates a window .
365	Creates a new tab .
366	Add commands to the context
367	Set write operation .
368	Write a delete command .
369	Set touch command .
370	Set the existence of a key
371	Set read header
372	Set the operation policy for the given key .
373	Write message header .
374	Write header with policy .
375	Check all nodes done
376	Get a connection from the pool .
377	Parse a record from the data buffer .
378	Returns a random node .
379	Get a node by name
380	Prepend a set of bins to a key .
381	Get the header for a given key .
382	Execute a batch exists command .
383	Register a UDF
384	Remove a UDF
385	List UDFs
386	Execute a UDF on a query
387	Create an index .
388	Drop an existing index
389	Scan a node
390	Drop a user
391	Change user s password
392	Grants roles to a user
393	Queries the users in the cluster .
394	Returns the next record in the queue .
395	Iterates over all records in the table .
396	Creates a new script tag
397	Move the robot to the given point .
398	Returns the absolute size of this tile .
399	Returns the screen position of the map .
400	Returns the position of the map
401	Returns true if the given coordinate is in the map
402	Animate one or more images once .
403	Draw a map .
404	Update image state
405	Draw the image .
406	Sets the text of the node .
407	Sets the position of the node .
408	Draw the node .
409	Draw the image .
410	Update all buttons
411	Sets the value of the button .
412	Draw the buttons .
413	Draw the text
414	Write a line
415	Write a breaking line
416	Add a global message .
417	Returns the index of the local message .
418	Check all the monitorings .
419	Create a global definition
420	Check the device info record
421	Open the log file
422	Set the type of the file
423	Check if the activity is valid .
424	Compute the total distance between the GPS coordinates of all the records .
425	Returns the value of the VO2max field .
426	Writes the file to the given IO .
427	Creates a new fit data record .
428	Check the laps .
429	Register a field
430	Register an alternate field
431	Check if the captcha is spam
432	Delivers the notification to the contact .
433	Returns a hash of all mail attributes
434	Start the Solr server
435	Restart the container
436	Create a new collection
437	Sets up the upconfig command
438	Run the downconfig command .
439	Create a new collection .
440	Cleans everything up .
441	Returns all registered signals
442	Returns a new Duration with + other + added .
443	Returns the number of days to the beginning of the week
444	Reset the timer
445	Advance the progress bar .
446	Iterates over a collection .
447	Update configuration options
448	Renders the barcode .
449	Move the cursor to the next row .
450	Write data to terminal
451	Finishes the progress bar .
452	Stop rendering .
453	Log a message
454	Add a space to the end of a message
455	Lock the job exclusively .
456	Setup the tracery
457	Expand and post the given text .
458	Run the interactor .
459	Sends a reply to a user or group chat .
460	Run the reply
461	Store the mention data
462	Setup streaming client
463	Parses the service name from the given path .
464	Connect to the server
465	Write data to socket
466	Read data from the socket
467	Close the socket
468	Check if socket is alive
469	Connect to a socket .
470	Write data to socket
471	Connect to an SSL socket
472	Join all speakers in a party mode .
473	Discover first device ip
474	Returns an array of TopologyNodes
475	Find a resource by id
476	Get all resources
477	validates a record
478	Adds a validation to the model .
479	Updates the given XML element with the given value .
480	Calculates the IPMT for a given rate and number of parameters .
481	Calculate the number of records per period
482	Calculate the pmt for a given rate and nper .
483	Returns a guess at a given rate .
484	Calculates the npv of a given discount
485	Computes the relative error between two values .
486	Generate a newton iteration .
487	Returns a summary of the event
488	Load the directory structure .
489	repack the file
490	Loads a relation .
491	Returns the native representation of the response body .
492	Calls a function .
493	Send a function call to the server .
494	Parse the URL
495	Call an RPC
496	generate rpc params
497	Returns a Faraday connection
498	Transfer data from one account to another .
499	Replaces all occurrences of + new + with + new + .
500	Serialize the object to JSON
501	Time a block of code .
502	Creates a new group .
503	Creates a new group .
504	Authenticate the request
505	Creates a new instance of the given class with the given UUID .
506	Creates a new file reference
507	Add a file reference to the project .
508	Remove all seeds
509	Configure phases
510	Returns true if the source file is valid
511	Returns an Aspell instance
512	Returns a list of files to check
513	Reads the config file .
514	Report any dictionary duplicates
515	Returns the global spell configuration .
516	Check the contents of a file
517	Check if a path is writable
518	Check if the given option is already used
519	Performs post processing on the options .
520	Returns a list of all subdirectories of the current directory
521	convert a string to bytes
522	Packs the given files .
523	Pack symbolic links
524	Given a list of entities pack them into a single entity .
525	Sets a header .
526	Sets a list body .
527	generate td content
528	Adds a card body to the card .
529	Displays a card footer .
530	Displays a card list group .
531	Adds a card image to the card .
532	Add an item to the collection .
533	Merge the options with the default options .
534	Displays a Bootstrap - styled nav .
535	Displays a Bootstrap - styled alert body .
536	Check if the content is a tap
537	To stimulusjs
538	Add data to html options
539	Set header
540	Adds a column to the table .
541	Displays a Bootstrap - styled link .
542	Scaffold the engine .
543	Copy plugin files
544	Make a Sass map
545	Add a list of files to the asset .
546	Find all files with the given extension .
547	Dispatch a command to all threads
548	Starts the Spark Engine watcher .
549	Load setup fixtures
550	Avoid duplicate image names
551	Returns the params for the dynamic scaffold
552	Convert pkey string to hash
553	Update the values of the form
554	Check if update params are valid for scope
555	Acquire a lock .
556	Unlocks the lock .
557	Apply options
558	Show notification
559	Updates the notification .
560	Download the video from the URL
561	Provides access to the information hash .
562	Convert options to commands
563	Returns a new options with the given hash .
564	Returns the value stored for the given method .
565	Manipulate the keys in the store
566	Sanitizes keys
567	Returns the representer for the given format .
568	Creates a text box with a variable field
569	Defines the position of the home label .
570	Draw a border .
571	Reset all the fields to default
572	Draw a Barcode 39
573	Add a field to the label
574	Builds the slug .
575	Returns true if we need to create a new record
576	Returns true if the model has changed since the last save .
577	Returns the distance in words between two times
578	Returns the approximate distance of time in words
579	Track an error
580	Process a batch
581	Runs the pre - processors on the control .
582	Runs the post - processors on the control .
583	Execute dependencies
584	Execute screens
585	Validates redis keys
586	Specify a metric to be normalized .
587	Defines a redis alias
588	store old redis keys
589	Returns a hash with all the configuration options
590	Returns true if the record exists
591	Check if an alias exists
592	Check if the item is valid for redis key
593	Validates redis key
594	Returns a hash representation of the object .
595	Find record by alias
596	get record by id or by key
597	Get an item from the cache by its alias key .
598	Create a new instance from a key
599	Transforms a value to a redis value
600	Transforms the given value according to the given type .
601	Parse a value
602	Update the attributes of the object
603	delete all aliases
604	Add a user to the keychain
605	Discover nsqds by lookup
606	Discover nsqlookupd instances until one of them fails .
607	Retry the given block with exponential backoff .
608	Show all fields
609	parse repeats
610	Find a field by name .
611	Allows accessing a field in a segment .
612	Parse the given string using the regexp .
613	Render a repeater
614	Returns the regexp used to match this field .
615	Find a field by its name
616	Parse a loop definition
617	Create a new loop
618	Processes a loop .
619	Process a segment
620	Returns a string representation of this node .
621	Calculates the sortable values for each response field .
622	Normalizes the response fields .
623	Audit the responses of the form .
624	Adds a tag to the stack .
625	Create a new builder .
626	Rewrites the given CSS selector .
627	Selects elements by CSS selector .
628	Adds a hash of configuration options to this object .
629	Returns true if the given process ID exists .
630	Wait for a process to exit .
631	Uploads the changes of a module .
632	get_branches_and_revision_infos
633	Get revision info
634	commit changes
635	Get info for a revision
636	Copy revision files
637	Get the status of a revision
638	Get the status of a revision
639	Get the status of a module
640	Get the status of a directory
641	builds the status of a revision
642	Returns a status object for the given revision .
643	Synchronizes the current workspace branch .
644	Synchronizes all modules .
645	Returns true if the given revision is an ancestor of the given revision .
646	Get the parent of a given revision .
647	Get commit message
648	Returns a list of OpenStructs for each OpenStruct in data .
649	Returns a list of OpenStructs grouped by path
650	Calculate the checksum
651	Returns the name of the current branch
652	Check if a branch exists
653	Get SHA1 of a revision
654	Given a revision and a hash of desired information return a hash of the desired information .
655	Returns an array of branch revs
656	Export a revision to a directory .
657	Export the contents of a revision within the export directory
658	Upload modules
659	Upload all modules
660	get all revisions for a given revision
661	Fetch the module s remote repository
662	Assign a value to an attribute
663	Creates a new instance of Factory
664	Crank a job
665	Delegates missing methods to the view context
666	Creates a new presenter .
667	Push a gem .
668	1D interpolation
669	Returns a line selector for the given target .
670	Run the command
671	Adds a date select control .
672	Creates a label
673	Read a value from the stream .
674	Pack a value
675	Creates a new matcher .
676	Returns an array of static files
677	Returns an array of absolute paths to stylesheets .
678	Get daily activity report
679	Run a report request
680	Generates a random unique value .
681	draw a paperback QR code
682	Produce Xcov report
683	Output the coverage report
684	Processes a report .
685	Update the CRC32 checksum .
686	Perform an HTTP request
687	Returns a proc that returns a random string .
688	Convert a tag to a Time
689	Returns a hash representation of the values
690	Displays a notification .
691	Run a command eagerly .
692	Wrap a list of strings to a certain width .
693	Save data to JSON file
694	Delete a reference
695	Merges another hash into self .
696	Add a strong reference .
697	Returns the object associated with this ref .
698	Delete a key from the map
699	Monitor a reference
700	Returns OAuth2 client
701	Default middleware
702	Loads the adapter configuration .
703	Returns an error hash
704	Setup the configuration
705	Sets the arguments for this command .
706	Reset all configuration options to defaults
707	Returns an array of invalid fts filters
708	Extend object with params
709	Sets a list of parameters
710	Defines a class parameter
711	Returns true if this module has a parameter with the given name .
712	Returns the parameter with the given name .
713	Set a parameter
714	Iterates over all parameters of this module .
715	Link multiple objects together .
716	Commit the transaction .
717	Execute a block within a transaction .
718	Read the next message .
719	Renders a query report .
720	Infer the type of a field
721	Validates the instance node
722	Returns true if the given instance node is the root of the tree
723	Build a link to this question
724	This method is called before a survey is destroyed
725	Validates an instance node
726	Returns true if the instance has been answered
727	Returns true if the instance has text
728	clone this node s children
729	ancestors_until_node_not_ancestor_of
730	Returns all the children of this node that are not an ancestor of the given class .
731	Check if this node has an infinite loop
732	Validates an instance node
733	Validates an instance node
734	Validates a node
735	Question of this question
736	Returns the next question in the survey .
737	remove a link to this question
738	Returns the index of the sibling of this node
739	Move this node up
740	Move this node down
741	Validates an instance node
742	Returns the number of nodes above this node
743	Return the number of nodes below this node
744	Validates an instance node
745	Build the first question node map
746	Returns an array of all edges in the graph .
747	Validates parent instance node
748	Update the question type
749	Remove an answer from the question .
750	Build the answer for this question
751	Remove the link to the next question
752	This is called before a survey is destroyed
753	Creates a table .
754	Returns the default class for a collection
755	Returns the list of events for the given targets .
756	Returns the writer for the given format .
757	Creates an animation group .
758	Defines a mouse move action .
759	Adds a notification for the given parameter .
760	Fire events for held buttons
761	Fire events for notification
762	Fire event for notification
763	Add a model
764	After initialize callback
765	Fire all event notifications for the current state
766	Add events for target
767	Defines a control .
768	Starts the window .
769	Show the graph .
770	Generates HTML table body .
771	Add a cell to the table .
772	Generate links to action cells
773	creates a link to a resource
774	Add a scene
775	Apply post filters
776	Returns a new HashWithIndifferentAccess
777	Returns an array of all scenes
778	Returns the actor with the given name .
779	Fire a notification for the given event .
780	Enqueue a block of code after a given interval .
781	Add actors to scene
782	Register all animations
783	Registers an actor .
784	Update all updaters
785	Base draw method
786	Transitions to a new scene .
787	Prepares the transition from this scene to another scene .
788	Returns all the drawers that are saveable to the view
789	Create a new model
790	Loads properties from the options hash
791	Get activity for a user
792	Request body measurements
793	Returns a list of weight measurements
794	Get sleep series
795	Perform request
796	Set the content type of the file
797	Send a request to a channel
798	Fetch a response from a channel .
799	Register an event handler
800	Download the source to a temporary file
801	Check required files and optional files
802	Check columns
803	Fetches the HTTP fallback identifier .
804	Defines a parameter with the given names .
805	Find columns
806	Maps a set of models to a set of objects .
807	Generates a schema for the given path .
808	Recursively resolves references to array items
809	Runs the mapper with the given schema and options .
810	Read a JSON schema from a file
811	生成签名
812	Iterate over each resource file
813	Iterates over each resource .
814	Converts a URL to a real URL .
815	Convert a filter to a filter proc .
816	Add a child folder
817	Returns the data system for this object
818	Run the job
819	Sets the migration error
820	Returns true if the task is runnable .
821	Returns true if the task is completed
822	Adds a step to the status .
823	Prints the time it took to execute the given block .
824	Print a list of paragraphs
825	Returns a hash of all columns
826	Render all pages
827	Add a page
828	Add aliases to path_hash
829	returns an array of headers
830	Returns a hash of all variable files
831	Returns the last menu at the given depth .
832	nameize a string
833	Removes HTML tags from a string .
834	Recursive method to populate a node
835	Returns an HTML representation of the list .
836	Returns the parent for the given heading .
837	Returns the type id for the given string .
838	link_to_function
839	Link to a route
840	link_to_function
841	Makes a request to the specified trust_url
842	Renders the page to a file
843	Symlinks a file or directory .
844	Render all content files
845	Create a friend
846	Get user listing
847	Create a comment
848	Submit a new comment
849	vote a user
850	returns true if answer is correct
851	Displays a Bootstrap - styled question .
852	Delete an image
853	Set a stylesheet on a subreddit
854	Subscribe to a subreddit
855	List my reddits
856	Get all reddits
857	Add a moderator
858	Add a contributor
859	Ban a user .
860	Remove a user from a subreddit .
861	Remove a contributor
862	Unbans a user from a subreddit .
863	Perform a get request
864	Log a user in
865	Authenticates the user
866	Delete a user
867	GET /message
868	Clear flair templates
869	Delete a user s flair
870	Delete a flair template
871	Configure flair for a subreddit
872	Send a CSV file to a subreddit .
873	Create a new flair template
874	Select a flair template
875	Toggle flair on or off
876	Get a list of comments
877	Get a listing
878	disinguish a user
879	Remove a user
880	Get modlog for a subreddit
881	Perform a POST request
882	Sets the lifespan
883	Returns a div with line numbers
884	Sets instance variables .
885	Render a method on an object
886	Joins collection with glue .
887	Opens a publication session .
888	Post publication
889	Expire a publication
890	Validates presence of values
891	Validates an XML document
892	Adds default options to the given options hash .
893	Reads the publication of a session .
894	Opens a consumer session .
895	Send a POST request to the IG Markets endpoint .
896	Expire a request
897	Reads a response from the server .
898	Removes a response from a request .
899	Opens a provider request session .
900	Post message response
901	Create a channel
902	Adds security tokens to a channel .
903	Removes security tokens from a channel .
904	Get a channel
905	Get all channels
906	Update the Redis backend
907	set the phrase
908	Returns a formatted date
909	Convert to latitude and longitude
910	Get all projects
911	Retrieve a project
912	Get all Experiments for a project
913	Retrieve an Experiment
914	Get stats for an experiment
915	Get Variations for an experiment
916	Retrieve a variation
917	List all audiences for a project
918	Retrieve a specific audience
919	Perform a GET request
920	Get list of keys
921	Generate a random number
922	Returns a random number with the given bit length .
923	Add a condition to the query
924	Returns a list of all keys in the database .
925	Renders an autocomplete add item .
926	Fetch a record from the database .
927	Perform a search .
928	Returns a hash of frequencies for a given string .
929	Returns the top n scores
930	Recolor the path
931	Creates a deep copy of the database .
932	Returns a list of all keys in the database .
933	Get a value from the database .
934	Set a value in the map .
935	Delete a key
936	Returns an array of all keys in the map .
937	Create a new list .
938	Returns a list of all keys in the table .
939	Get a list of keys .
940	Raises a TokyoError
941	Iterate over each row in the table
942	Find an icon
943	Get all columns in a table
944	Check if column is numeric
945	Given a list of temp tables and a list of temp columns and a list of column types returns an array of converted tables
946	Adds a context to the current block .
947	The subject should raise
948	It should not raise an error
949	Login to Janus
950	Logout the user .
951	Sets a user in the session
952	Removes a user from the session .
953	Returns the user with the given scope .
954	Returns the namespace for the application .
955	Extracts the version from the cache .
956	Attempts to warm up the cache .
957	Warm up from local files
958	Warm up from CDN
959	Returns the path to the cache directory
960	Downloads the cache .
961	Send a message to the shell
962	validate cache version
963	Fetches the current cache version .
964	Create a new database .
965	Runs all registered strategies .
966	Runs a strategy
967	Executes the given script .
968	Prints a hex string
969	Read input by 6 words
970	Generates a select statement .
971	Update an index
972	Executes a query on the connection pool .
973	Dispatch a method to the worker .
974	Adds a node to the layout .
975	Returns the node with the given name .
976	Canonicalizes an attribute list .
977	I imagine a character .
978	Merges current with the given block .
979	Creates a new Danger instance .
980	Check the length of the audio file
981	Perform API call
982	Performs a multi search .
983	Defines a has_whereabouts relationship .
984	Sets the validators for the given class .
985	Creates a new address class
986	Start the receive loop
987	Returns a hash of the attributes with their values
988	Raise an error if the version is not supported
989	Run the application
990	Validates options
991	Find emails in an IMAP mailbox .
992	Convert a string to a rainbow color .
993	tries to find a prime larger than input
994	Enhances the given value with the given separator .
995	Converts an integer to a string .
996	Convert a string to an integer .
997	Convert a character to a Unicode codepoint .
998	Returns true if the string is a subset of the character set .
999	returns an array of points
1000	Validates the metadata .
1001	Notifies create channel publications
1002	Notifies all publications that a record has changed .
1003	Notifies that this record has been destroyed
1004	Define a logger
1005	Fetches rates from the API .
1006	Parse the input string .
1007	Grab a portion of the source
1008	Get the comments for a list of bugs .
1009	Saves the current state of the workers .
1010	read all pages
1011	Reads a single response from the broker .
1012	Add a line filter
1013	Write a mixml template to STDOUT
1014	Replaces all occurrences of + template + with + value + .
1015	Rename a template
1016	Commit a revision of a page
1017	commit all revisions
1018	Scan a string for a format specifier .
1019	Convert Markdown to HTML
1020	Print a debug message
1021	Execute a command .
1022	Upload a file to the SFTP server .
1023	Download remote file to local file
1024	Write data to a remote file
1025	Calculates the distance between two points .
1026	Returns true if the point is within the bounds of this region
1027	Delegates to the subject
1028	Prints the result of the match .
1029	Get user info
1030	Set options
1031	Add a column
1032	Declares multiple columns .
1033	Read a spreadsheet
1034	Given a file path and an exception return the line number of the exception .
1035	Given a file path and an exception return a filtered backtrace .
1036	Drains the queue .
1037	Get all nodes as a hash
1038	Get a sentence from the request .
1039	Get all nodes in the sentence
1040	Build sentence from hash
1041	Read all pages
1042	Filter the results by the given params
1043	Get all sites
1044	Perform a site query
1045	Returns the hourly rate for the given currency
1046	Set the output file
1047	Logs a message at the DEBUG level .
1048	Returns a hash of all options
1049	Returns an array of all selected options
1050	Transmit a packet .
1051	Returns true if this block is an ancestor of the given block .
1052	Returns a hash of built - in object IDs
1053	Daemonize the child process .
1054	Reopen an IO object
1055	Returns the PID of the process at the given path .
1056	Write pid to file
1057	Parse the mead attribute .
1058	Load a document from a file
1059	Save all XML documents to disk
1060	Print all the documents
1061	Work the given list of files .
1062	Returns a new Selection object with the selected nodes .
1063	Add a CSS selector to the document .
1064	Execute a Ruby program .
1065	Yields all nodes in the selection .
1066	tagify a string
1067	Creates an option group .
1068	Create a new command
1069	Declares a workflow for a job .
1070	Check if we should retry publishing exceptions
1071	Run the MixML tool
1072	List all entities
1073	Returns true if the current request matches the status
1074	Perform a GET request
1075	Perform a PUT request
1076	Make a request to the V3 API
1077	Add a token to the marketplace
1078	Authorizes the request .
1079	Perform a GET request
1080	Perform a POST request
1081	Perform a POST request
1082	Perform a PUT request
1083	Perform a PUT request
1084	Authenticate with AMEE
1085	Check if the response is ok
1086	Perform the request
1087	Run the request
1088	Create a new Timed Place
1089	Create a transition
1090	Runs the simulation .
1091	Defines an output arc .
1092	Fire the transition .
1093	Send the request to the server
1094	Install librarian packages
1095	Installs the specified modules in the specified directory .
1096	Get crises by identifier
1097	Get crises stat
1098	Get user statistics
1099	Sets the pose content proc .
1100	Add multiple objects to the token .
1101	Delete one or more tokens
1102	Add joins
1103	Add the where clauses to the query .
1104	Loads the classes from the database .
1105	Search for a word
1106	Creates a new Search object .
1107	Returns the Authorization header for a client login request .
1108	Returns the full path to the app folder
1109	Find the version file in the app folder .
1110	Returns the app version
1111	Bumps the app version to the specified version .
1112	Loads the project .
1113	Prints a help message .
1114	Add objects to the queue
1115	Sets the clock to the given time .
1116	Send a message over the connection
1117	Perform a POST request
1118	Delete a resource
1119	Return the metadata for a given instance
1120	Returns a hash of all the metadata for all the instances
1121	Read CSV file
1122	Write data to a CSV file
1123	Returns a CSV formatted string .
1124	Add a value
1125	Rotate EC2 instances
1126	Wait for all instances to reach the given state
1127	Read data from + path +
1128	Write a value to a path
1129	Get a list of all fields in a directory
1130	Returns a hash of total queries for each model
1131	Returns a hash of the summed totals for each model
1132	Convert to label
1133	Store an object in the cache
1134	Configures the objects in the configuration
1135	Run the Httperf job
1136	Generates a URL for a request .
1137	Returns true if the given string matches the URL pattern .
1138	Asserts that two objects are equal .
1139	Asserts that the given object is of the given class
1140	Asserts that the given argument is a non - empty string .
1141	Asserts that the given block returns true .
1142	Wait for a response
1143	sync main data
1144	Add trackers to a torrent .
1145	Download a command
1146	delete a torrent and its data
1147	Set the location of a torrent .
1148	Increase priority of torrents
1149	Decrease priority of torrents
1150	Maximize torrent priority
1151	Minimizes the priority of a torrent .
1152	Set file priority
1153	Set download limit
1154	set upload limit
1155	Returns the MD5 checksum of a file
1156	Returns all keys in the bucket .
1157	Yield each key in the bucket
1158	Run a command
1159	Returns an array of click objects .
1160	Create multiple instances
1161	Given a scope name and an array of key - value pairs raise an exception if the scope already exists .
1162	configure the config file
1163	Mark new entries as seen .
1164	Set the HTTP header options for the request
1165	Store summary information in backend
1166	Raises an exception if the response is not a success
1167	Perform an HTTP request
1168	Perform a get request
1169	Perform a DELETE request
1170	Perform a PUT request
1171	Perform a POST request
1172	Get a single article
1173	Upload an image from a file
1174	PUT /octects
1175	Returns a path relative to the current working directory .
1176	Create a new index
1177	Sets the accessors from the headers
1178	Adds a row to the table .
1179	Creates an inline footnote
1180	Returns the HTML for a footnote .
1181	Perform an instance action
1182	Add an error
1183	Returns an array of coords of neighbors of x and y
1184	Returns a single merchant
1185	Encodes the given data using the given opcode .
1186	Defines a challah permission
1187	Perform a POST request
1188	Create a network
1189	Create a port
1190	Move a port to one or more subnets
1191	Send JSON response
1192	Redirects to the given URL .
1193	Get information about a server
1194	Create a server
1195	Perform a server action
1196	Delete an image
1197	Make a GET request
1198	Sets the basepath for this file .
1199	Returns a list of all commissions
1200	Returns all leagues
1201	Creates a new matcher .
1202	Fetch a column from the table .
1203	Returns the value at the given column .
1204	Returns an array of the values at the given columns .
1205	Allows accessors to be accessed
1206	Authorizes the request .
1207	List routers
1208	Create a router
1209	Delete a router interface
1210	Find the first element that matches + method + .
1211	Load config files
1212	Returns a list of providers
1213	Returns a list of categories
1214	Class methods
1215	Check to see if the plan ID has changed
1216	Delegates missing methods to the underlying object
1217	List deals
1218	Find a deal by id
1219	Total deals for the current page
1220	Given an array of deals returns an array of deals with unique titles .
1221	Load cookies from a file
1222	Dumps cookies to + file + .
1223	Set the value of a radio button .
1224	Update the expiration time of the resource
1225	Perform a GET request
1226	list images
1227	Create an image
1228	Replace image memberships
1229	Add a member to an image
1230	Create a directory
1231	Copies a file or directory .
1232	Move a file or directory .
1233	Create a symlink .
1234	Change file permission
1235	Remove and create a directory
1236	Copy file metadata
1237	Create a temporary file and write it to it .
1238	Handle requests
1239	returns a hash of the config file
1240	Replaces mail addresses in + text +
1241	Add a plural rule .
1242	Add a singular rule .
1243	Irregular version of pluralize
1244	Execute the command
1245	Output all results
1246	Run all jobs
1247	Authenticate a user
1248	Add a service
1249	Add an endpoint
1250	Get endpoints for a token
1251	Disable a method
1252	Returns a proc that evaluates the disabled method .
1253	Executes the method .
1254	Alias a method
1255	Converts a secret to a public key .
1256	Check if two points are equal
1257	recover x from y
1258	Decompress a point in compressed form .
1259	convert secret to public key
1260	Returns the part with the given name .
