0	Prints the summary of the report .
1	Find bad files from kubectl output
2	Confirm that the EJSON keys are not prunable .
3	Returns the compressor for the current system .
4	Create . bff file
5	Returns a list of files matching the given pattern .
6	Copy files from source to destination .
7	Returns the relative path for the given path .
8	Clean previously mounted disks
9	Copy assets to dmg
10	Renders the document transform .
11	Render the package metadata .
12	Runs otool to check for bad libraries
13	Check if the current library is a AIX library
14	Check for bad libraries
15	Read shared libraries
16	Check for bad libraries
17	Returns the digest of a file .
18	Update the digest with the contents of a file .
19	The list of packages to publish
20	Write the distribution file
21	Returns an artifact for the given artifact .
22	Create a build for the given packages
23	Initializes the Artifactory client
24	Metadata properties for a package
25	Returns the remote path for the given package .
26	Set parameters
27	adds a wix light extension
28	wix light delay validation
29	Adds a Candle Extension
30	Write localisation file
31	Write the parameters file
32	Write the source file .
33	Write the bundle file
34	Resolve dependency
35	Appends a timestamp if it is not already present .
36	Returns true if the given version has a timestamp
37	Construct the build version
38	Render template content
39	Add a deprecated warning message .
40	Add a message to the log .
41	Executes a shell command .
42	Executes the make command .
43	Creates an app bundler for the specified software .
44	Run a rake command
45	Touch a file
46	Delete a file or directory
47	Copies a source file to a destination .
48	Update config guess
49	Write the tarball to the staging directory
50	Create a tarball for this package
51	Clean the project directory
52	Copies the downloaded file to the project directory .
53	Extract file to temporary directory
54	Returns the digest type of the file .
55	Verify checksum
56	set signing identity
57	Sign a Windows package .
58	Get the certificate subject
59	Returns the manifest entry for the given name .
60	Sets the source for this request .
61	Create a new version constraint
62	Adds a file to the whitelist .
63	Returns the path to the downloaded file .
64	Prepend a path to the PATH environment variable .
65	Returns the overrides for this project .
66	Returns the version for the cache .
67	Returns a fetcher for the given source .
68	The SHA256 hash of the project s content .
69	Canonicalizes the given source .
70	Write the makeselfinst . erb file
71	Create the cache directory
72	Returns a unique identifier for this software .
73	Perform incremental cache
74	Remove git directories
75	Write the AppxManifest . xml file
76	Create a new shell out instance
77	Shellout command .
78	Retry a block of code .
79	Returns a Windows safe path
80	Returns compiler safe path
81	Create a directory
82	Remove a directory
83	Copy a file
84	Remove a file
85	Create a file
86	Create a symlink
87	Validates the license information
88	Get project license content
89	The license map for the project .
90	Process transitive licenses
91	Collects the licenses for a given software .
92	write the prototype file
93	The content of the package file .
94	Validates the package file .
95	Returns the key for the given package .
96	Build a semantic version string
97	Get build start time
98	Saves the configuration to disk .
99	Sets the value for the vendor property .
100	Sets the license
101	Returns the full path to a build file .
102	Create a temporary directory for signing .
103	Publish a pattern
104	Sets the build version
105	Add a package
106	Adds a block to the compressor .
107	Sets the value of a configuration option .
108	Returns the path to the license file .
109	Check if a software is a dependency of another software
110	Builds the manifest
111	Writes the text manifest to disk .
112	Write the conffiles file
113	Returns the size of the package in bytes .
114	Returns true if the given directory is empty .
115	Force recreating the project directory
116	Returns the current revision of the repository .
117	Determines if a given revision exists in the repository .
118	Create a new SSH client .
119	Compute the number of bits needed to connect to the server .
120	Get the DH key parameters for the given number of bits .
121	Build the signature buffer
122	Check if the page has actually been loaded .
123	Returns true if all validations passed
124	Raise an exception if a block is not supported .
125	Merges the given find and runtime arguments .
126	Recombine the find and runtime arguments .
127	Returns an array of elements to check
128	Returns true if the given URL matches the expected mappings .
129	Returns the mappings for a component that matches the given URI .
130	Returns a URI with substitutions applied .
131	Returns the substitution value for the given index .
132	Builds an enumerator for the given number of times .
133	Builds an enumerator for the given enumerable .
134	Builds an enumerator for the given lock queue .
135	Builds the active record enumerator for the given scope .
136	Builds an enumerator for iterating over active records .
137	Returns an enumerator for each batch of rows in the CSV file .
138	Reify the object .
139	Returns the PaperTrail version limit for this record .
140	on_create callback
141	Called when a record is destroyed
142	on_update callback
143	called on touch
144	Raises an exception if the item subtype column is not present .
145	Returns true if the version should be saved .
146	Splits changes into modified and added and removed actions .
147	Returns the node corresponding to the given object .
148	Creates a new Scope instance .
149	Set orphan strategy
150	Arrange the nodes in the tree .
151	Arrange nodes for serialization
152	Builds the ancestry from parent_ids
153	Rebuild depth cache
154	Returns the conditions for the given object .
155	Request defaults
156	Returns a hash of options
157	Reset all configuration options to defaults
158	Get HTTParty config
159	Start a timer
160	Set socket timeout
161	Returns the number of seconds remaining for the given timeout .
162	Build the schema for the parent schema .
163	Handle a schema
164	Returns true if the subject matches the conditions .
165	Alias an action
166	Expands the given list of actions .
167	Returns all aliases for an action
168	Returns an array of relevant rules
169	Create missing file .
170	Iterate over all filenames in the directory .
171	Given a block yielding each element to the block .
172	Ascends the path to the first occurrence of the given block .
173	Calculate checksum
174	calculate k checksum
175	Annotates the PDF with the barcode .
176	Returns an array of all characters in the string .
177	Returns an array of characters
178	Calculate checksum
179	Returns the character encoding for the given bars .
180	Renders the barcode to a Cairo context .
181	Renders the image to a PNG file .
182	Renders the image as a PSSurface .
183	Renders the image to a PDF file .
184	Renders the image to a string .
185	Sets the maximum number of threads to use .
186	Returns true if the browser is online
187	HTTP HEAD request
188	Returns the database connection
189	Ensure that a commit with the given SHA exists .
190	Ensure commit parents exist
191	ensure user followers
192	Ensures that a user is a follower of another user .
193	Ensures a user exists by email and name
194	Ensure repo exists
195	Ensure languages exist for a repository
196	Ensure that a fork commit exists .
197	Ensure that a fork point exists
198	Ensure all orgs exist for the user
199	Ensures a user is participating in an organization
200	Ensure an organization exists
201	ensure_commit_comments
202	Ensure watchers exist for a repository
203	Ensure pull requests exist
204	ensure pull request history exists
205	Returns true if the request is for an inter - branch request
206	Ensure that all forked repos exist
207	Ensure a fork exists
208	Ensure issues exist for a repository
209	Ensure that the issue exists in the repository
210	ensure_issue_events
211	Ensures that an issue event with the specified ID exists .
212	Ensure issue comments exist for an issue
213	ensure_issue_comment ensures an issue comment exists
214	Ensure labels exist for a repository
215	Ensure repo label exists
216	Ensure issue labels exist
217	Ensure issue label exists
218	Creates a transaction .
219	Store a commit
220	Log a message
221	Get a paged API request
222	Returns the time at which the resource was last modified .
223	Returns the number of pages for a given URL .
224	Parse links
225	Parse the result of a request .
226	Perform an API request
227	Attaches the given block to the socket .
228	Connect to the given adapter .
229	Retrieve a commit
230	Retrieve all commits for a repository
231	Retrieve all orgs for a user
232	Retrieve a list of watchers for a repository .
233	Retrieve a watcher
234	Get events for a repository
235	Retrieve the diff between two branches
236	Retrieve the default branch for a repository .
237	Parse command line options
238	Validate options
239	Create a queue client
240	Read a value from a hash
241	Returns the location filter for a given location
242	Validates the usage for this broker .
243	Validates the options .
244	Send messages to Kafka
245	Notifies the monitor of a given signal .
246	Initialize a new EmbeddingLookup instance .
247	Given a set of params and a set of ids returns a new set of ids .
248	Loads the contents of + pbfile +
249	Asserts that two values are equal .
250	Computes the gradients of a tensor .
251	Create a random standard normal distribution .
252	Creates a new matrix .
253	Returns an initializer for a glorot uniform distribution .
254	Returns an initializer for a random uniform distribution .
255	Create a slice operation .
256	Create a new array of the specified shape .
257	Logical AND operation .
258	Reduce the mean of a tensor .
259	Concatenate values along axis .
260	Perform a dynamic partition operation .
261	Adds a where clause to the query .
262	Calculates the arccosine of a point .
263	Calculates the arccosine of a point .
264	Calculates the arc tangent of a point .
265	Cast the given input to the given data type .
266	Prints data to STDOUT .
267	Perform a sec op .
268	Calculates the square root of a floating point number .
269	Log a floating point value .
270	Expands a floating point number .
271	Pads a tensor .
272	Perform a gather operation .
273	Pack an array of values .
274	Unpack a value into an array .
275	Adds a case statement to the pipeline .
276	Add an operation to the graph
277	Returns a new array with broadcast dimensions .
278	Performs a vector operation .
279	Transpose an array with permutations .
280	Adds two arrays .
281	Computes the argmax of a tensor .
282	Computes the ceil of a floating point number .
283	Computes the cosine of a floating point value .
284	Computes the floor of a floating point number .
285	Modulo operation .
286	Pow operation .
287	Returns the product of two tensors .
288	Create a random uniform distribution .
289	Create a range operation .
290	Computes the rank of a tensor .
291	Applies a rounding operation to a floating point number .
292	Computes the square root of a floating point number .
293	Returns the shape of the tensor .
294	Outputs a floating point negative value .
295	Computes the square of a floating point number .
296	Subtraction operation .
297	Sum elements of a tensor
298	Computes the tangent of a floating point tensor .
299	Computes the hyperbolic tangent of a tensor .
300	Returns the top k elements of an array .
301	Create a new array of the specified shape .
302	Converts the model to YAML .
303	Add a device to the graph
304	Loads an operation from a YAML string .
305	Assign a variable to the graph
306	Create a variable scope
307	Creates a new session .
308	Creates a TensorStream placeholder .
309	Check if a tensor is dense .
310	Apply data type coercion
311	Add audio to customization
312	Create an event
313	Zero pad a string to the specified length .
314	Check the length of a string
315	Check string length and description
316	Validates the HMAC key .
317	Checks that the given string is a valid string .
318	Returns the authenticator for the message .
319	Verifies the authenticity of a message .
320	Creates a new cipher object .
321	Opens a new session .
322	Reopens all appenders .
323	The logger for this processor .
324	Measure a message .
325	Log a backtrace
326	Create a new logger .
327	Pushes a list of tags to the logger .
328	Returns true if the log matches the filter
329	Log a log message .
330	Measure a log entry
331	Create a new instance of the logger .
332	Log a log message .
333	Assigns a message and payload to this logger .
334	Assigns a message or payload to the exception .
335	Yields each exception to the given block .
336	Extracts the file name and line number from the call stack .
337	Returns the message for the given corrections .
338	Gathers the variables for a message .
339	do_run
340	Route the message .
341	Is this a row waiter?
342	Returns the node with the specified ID .
343	Get all variables for a given node .
344	lookup on error parent node
345	Decrement the number of items in the cache .
346	This method is called when a job is locked .
347	Acquire a lock on all queues .
348	Call a method on the receiver
349	Method missing handler
350	Remove params from the URL
351	Parse user info
352	Run a command asynchronously
353	Returns the exit code of the test .
354	Import a method
355	Imports the given methods .
356	Imports all methods from the given source object .
357	Returns a wrapped function .
358	Fetch a function from the store .
359	Convert arguments to AST
360	Convert to proc
361	Given an array of keys and a pattern match returns the interpolated value .
362	Interpolates the given replacement with the given match .
363	Add commands to the beginning of the command chain .
364	Creates a new window .
365	Creates a new tab .
366	Run a list of commands
367	Set write operation .
368	Write a delete command .
369	Set touch policy
370	Set the existence of a key
371	Set read header
372	Sets the value of an operation .
373	Write message header .
374	Write header with policy .
375	Check if all nodes are done
376	Get a connection
377	Parse a single record
378	Returns a random node
379	Get a node by name
380	Prepend a key to a list of bins
381	Get the header for a key
382	Execute a batch exists command .
383	Register a UDF
384	Remove a UDF
385	List UDFs
386	Execute a UDF on a query
387	Create an index .
388	Drop an existing index
389	Scan a node .
390	Drop a user
391	Change user password
392	Grants roles to a user
393	Query users
394	Returns the next record from the queue .
395	Iterates over all records in the table .
396	Creates a new script tag
397	Move the robot s free .
398	Returns the absolute size of this tile .
399	Returns the screen position of the map .
400	Returns the position of the map
401	Returns true if v is in the map .
402	Animate one or more images .
403	Draw a map
404	Update image state
405	Draw the text
406	Sets the text content .
407	Sets the position of the node .
408	Draw the node .
409	Draw the image .
410	Update all buttons
411	Sets the value of the button .
412	Draws the buttons .
413	Draw the text
414	Write a line
415	Write a breaking line
416	Add a global message .
417	Returns the index of the local message .
418	Check all the monitorings
419	Create a new global definition
420	Check the device info record
421	Open the log file
422	Set the FIT file type
423	Check the validity of this activity .
424	Calculate the total distance between two GPS coordinates .
425	Returns the value of the VO2max field .
426	Write the data to an IO object
427	Creates a new fit data record .
428	Check the laps of an activity .
429	Register a field
430	Register an alternate field
431	Check if the captcha is spam
432	Delivers the contact
433	Returns a hash of mail attributes
434	Start the Solr server
435	Restart the container
436	Create a new collection
437	Run the upconfig command
438	Run the downconfig command
439	Create a new collection
440	Cleans the configuration .
441	Returns all registered signals
442	Add another Duration to this one .
443	Returns the number of days from the beginning of the week
444	Reset the renderer .
445	Advances the progress bar .
446	Iterates over a collection yielding each element to a block .
447	Update configuration
448	Renders the barcode .
449	Move to next row
450	Write data to terminal
451	Finishes the progress bar .
452	Stop rendering .
453	Log a message
454	Pads the given message with a space
455	Lock the job exclusively .
456	Setup the tracery
457	Expand and post the given text .
458	Run the interactor .
459	Sends a reply to a user .
460	Runs a reply to a user .
461	Store the mention data
462	Setup streaming client
463	Parses a path to a service name .
464	Connect to one or more servers
465	Write data to socket
466	Read data from socket
467	Close the socket
468	Check if socket is alive
469	Connect to a socket .
470	Write data to socket
471	Connect to an SSL socket
472	Sets the party mode .
473	Discover first device
474	Returns a list of TopologyNodes
475	Find resource by id
476	Get all items
477	validates a record
478	Creates a new validation instance .
479	Updates the given XML with the given value .
480	Calculates the IPMT for a given rate .
481	Calculates the nper for a given rate
482	Calculates the pmt for a given rate and nper
483	Calculates the rate for a given number of periods .
484	Calculates the npv of a given discount
485	Computes the relative error between two values .
486	Returns a newton iterator
487	The summary of the event
488	Load the directory structure .
489	Repack the contents of the file .
490	Loads a single resource relationship .
491	Returns the native representation of the response body .
492	Call a function .
493	Send a function call .
494	Parse the URL
495	Call an RPC method
496	generate rpc params
497	Returns a Faraday connection
498	Transfer a value to a private key
499	Replaces the data with a new value .
500	Serialize the object to JSON
501	Execute the given block with the given label .
502	Creates a new group .
503	Creates a new group .
504	Authenticate the request
505	Creates a new instance of the given class with the given UUID .
506	Create a new file reference
507	Adds a file reference to the project .
508	Remove all seeds
509	Configure phase
510	Check if a source file is valid
511	Returns an instance of Aspell
512	Returns a list of files to check
513	Reads the spell config file .
514	Report any dictionary duplicates
515	Returns the global spell configuration .
516	Check a single file
517	Check if a path is writable
518	Check if the given option is already used
519	Perform post processing on the options
520	Return a list of all subdirectories of the current directory
521	convert string to bytes
522	Packs the given files .
523	Pack symbolic links
524	Packs the given entities .
525	Sets header .
526	Sets the list body .
527	render td content
528	Creates a card body .
529	Renders a card footer .
530	Displays a card list group .
531	Displays a card image .
532	Create a new Item
533	Returns the component HTML options
534	Displays a Bootstrap - styled nav .
535	Creates an alert body .
536	Check if content is a tap
537	Component html data
538	Adds an HTML data attribute
539	Set header
540	Adds a column
541	Renders a dropdown link .
542	Scaffold the engine .
543	Copy plugin files
544	Create a map from a hash
545	Add files to an asset
546	Find all files with the given extension
547	Dispatch a command to all threads
548	Start watching for changes .
549	Loads fixtures with the given name .
550	Avoid duplicate image names
551	Returns a hash of params for the dynamic scaffold .
552	Convert pkey string to hash
553	Update the values of the form
554	Check if update params are valid for scope
555	Acquire a lock .
556	Unlock the lock
557	Apply options
558	Show notification
559	Updates the notification .
560	Downloads the video from Youtube
561	Returns the value for the given method .
562	Convert options to command line
563	Merges this options with the given hash .
564	Delegates missing method calls to the store .
565	Manipulate the keys of the store
566	Sanitize keys
567	Returns the representer for the given format .
568	Creates a text box for a variable field .
569	Set the home position
570	Draw a border .
571	Resets the barcode fields to default values .
572	Draw a Barcode 39
573	Add a field
574	Builds the slug .
575	Returns true if we are creating a new record .
576	Returns true if the object is persisted with slug changes
577	Returns the distance in words between two times
578	Returns the approximate distance of time between two times in words .
579	Track errors
580	Process a batch
581	Pre - process a Control
582	Executes the post - processing logic .
583	Execute dependencies
584	Execute screens
585	validates redis key
586	Initialize a new RedisClient
587	Defines a redis alias
588	store redis keys
589	Returns a hash with all configuration options
590	Check if a record exists
591	Check if an alias exists
592	Check if item is valid for redis key
593	Validate redis key
594	Returns a hash representation of the object .
595	Find a record by alias
596	Get record by id or by key
597	Get an item from the cache by its alias key .
598	Create a new instance from a key
599	Transforms a value to redis
600	Transforms a value according to the given type
601	Parses the given value and returns it .
602	Update an object
603	destroy all aliases
604	Add a user to the keychain
605	Get nsqds for a topic
606	Discover multiple nsqlookupd instances at once .
607	Calls the given block with exponential backoff .
608	Show all the fields in the object .
609	Parse repeats
610	Find an element
611	Method missing
612	Parse the given string and return the result .
613	Render a repeater
614	Returns the regexp for this field .
615	Find a field
616	Parse a loop definition
617	Creates a new Loop instance
618	Processes a loop .
619	Process a segment
620	Returns a string representation of this node .
621	Calculates the sortable values for each response field .
622	Normalizes the responses .
623	Audit the responses of the form .
624	Create a new node .
625	Create a new builder .
626	Rewrites the selection .
627	Selects all elements matching a CSS selector .
628	Adds the given configuration to the configuration object .
629	Returns true if the given PID exists .
630	Wait for a process to exit .
631	Uploads changes to the module repository
632	Get the list of branches and revisions for a given revision .
633	Get revision info
634	Commit changes
635	Get info for a revision
636	Copy revision files
637	Get the status of a revision
638	Get the status of a revision
639	Get the status of a module
640	Get the status of a directory
641	builds the status of a revision
642	Get the status of a revision .
643	Synchronize the local repository with the remote repository .
644	Synchronizes the modules .
645	Returns true if the given revision is an ancestor of the given revision .
646	Get the parent of a revision
647	Get commit message
648	Returns a list of OpenStructs for each OpenStruct
649	Returns a list of OpenStructs for each OS
650	Calculate the checksum
651	Returns the current branch
652	Check if a remote branch exists
653	Get SHA1 of a revision
654	Return a hash of information about a revision
655	Returns a list of remote branch revs
656	Export a revision to a directory .
657	Export the contents of a revision to a temporary directory
658	Upload modules
659	Upload all the modules
660	Get the revisions for a given revision .
661	Fetch the module s remotely
662	Assigns the given attribute to the given value .
663	Creates a new instance of Factory
664	Crank a job
665	Delegates missing method calls to the view context .
666	Creates a new presenter .
667	Push a gem
668	1D interpolation
669	Returns the lines selector for the given target .
670	Run the command
671	Creates a date select control
672	Creates a label
673	Read a value from the stream .
674	Pack a value
675	Creates a new matcher .
676	Returns an array of StaticFiles
677	Returns an array of asset files
678	runs a daily activity report
679	Runs a report request .
680	Generates a random unique value .
681	Draw a paperback QR code .
682	Produce an Xcov report
683	Output the coverage report
684	Process a report
685	Updates the CRC checksum .
686	Perform an HTTP request
687	Generates a random string .
688	Convert a tag to a Time
689	Returns a hash representation of the values .
690	Displays a notification .
691	Run a command eagerly .
692	Wrap a list of strings to a given width .
693	Save data to JSON file
694	Delete a reference
695	Merges another hash into this one .
696	Add a strong reference
697	Returns the object associated with the reference .
698	Removes a key from the map .
699	Monitor a reference
700	Returns OAuth2 client
701	Default middleware
702	Loads the adapter .
703	Returns error hash
704	Sets up the configuration
705	Parse arguments
706	Reset all configuration options to defaults
707	Returns an array of invalid fts filters
708	Extend object with params
709	Set parameters
710	Define a class parameter
711	Returns true if a parameter with the given name exists .
712	Returns the parameter with the given name .
713	Sets a parameter .
714	Iterates over all parameters of this module .
715	Links the given objects .
716	Commit the transaction .
717	Begins a transaction .
718	Read the next message .
719	Renders a query report .
720	Infer the type of a field
721	Validate the instance node
722	Is this node a root node?
723	Build a link to this node
724	This method is called before the survey is destroyed
725	Validates an instance node
726	Returns true if the given instance is currently answered .
727	Returns true if instance is answered
728	Makes a deep clone of this node map
729	Returns all ancestors of this node that are not an ancestor of the given class .
730	Returns all children of this node that are not an ancestor of the given class .
731	Returns true if this node has an infinite loop .
732	Validates an instance node
733	Validates an instance node
734	Check if this node is valid
735	Question of this question
736	Returns the next question in the survey .
737	Remove a link to this question
738	Returns the index of the sibling of this node
739	Move up
740	Move this node down
741	Validates the instance node
742	Returns the number of nodes above this node
743	Returns the number of nodes below this node
744	Validates an instance node
745	Build the first question node map
746	Returns all edges that are marked for destruction
747	Validate parent instance node
748	Update the question type
749	Remove an answer from the question .
750	Build the answer for this question
751	Remove the link to the next question
752	This method is called before the survey is destroyed
753	Creates a table tag .
754	Returns the default class for a collection
755	Returns the list of events for the given targets .
756	The writer to use .
757	Creates an animation group .
758	Defines a mouse move action .
759	Add a notification
760	Fire events for held buttons
761	Fire events for notification
762	Fire event for notification
763	Add a model
764	After initialize callback
765	Fire all notifications for an event .
766	Add events for a target .
767	Defines a control .
768	Starts the window .
769	Show the graph
770	Generates the table body .
771	Add a cell to the table .
772	Renders a list of actions
773	Renders a link to a resource
774	Add a scene
775	Apply post filters
776	Returns a hash with default missing scene
777	Returns all scenes for the given scenes
778	Returns the actor with the given name .
779	Fire a notification for the given event .
780	Enqueue an operation to be performed after the given interval .
781	Add actors to the scene
782	Register all animations
783	Registers an actor .
784	Update all updaters
785	Base draw method
786	Transitions to a new scene .
787	Prepares a transition from this scene to another scene .
788	Returns a hash of all saved drawers
789	Create a new model
790	Loads the properties from the options hash
791	Get activities for a user
792	Returns a list of measurements for a user .
793	Returns a list of weight measurements
794	Get sleep series
795	Perform an HTTP request
796	Sets the content type of the file .
797	Send a request to a channel
798	Fetches a response from a channel .
799	Register an event handler
800	Download the source to a temporary file
801	Check required files and optional files
802	Check columns
803	Fetches the HTTP fallback identifier .
804	Defines a single parameter .
805	Find columns
806	Maps a set of models to a set of objects .
807	Generates a schema for the given path .
808	Recursively resolves references to array items
809	Run the migrations .
810	Read a JSON schema from a file
811	生成签名
812	Iterate over each resource file
813	Iterates over each resource in the directory .
814	Converts a URL to a real URL .
815	Convert a filter to a filter proc .
816	Add a child to this node
817	Returns the data system for this object .
818	Run the job .
819	Sets the migration error
820	Returns true if the status is runnable .
821	Returns true if the task is completed
822	Step the status
823	Time it takes to execute the task
824	Print a list of paragraphs
825	Returns a hash of all columns
826	Render all pages
827	Add a page
828	Add aliases for a page
829	Parse headers from a file .
830	Returns a hash of all the variable files
831	Returns the last menu at the given depth .
832	nameize a string
833	Strip HTML tags from a string .
834	Recursive method to populate a node
835	Returns an HTML representation of the menu .
836	Returns the parent for the given heading .
837	Returns the ID for the given type .
838	link_to_info method
839	Link to a route
840	link_to_trust_request link_to_function text
841	Creates a request_trust javascript tag
842	Renders the page to a file .
843	Symlink a file or directory .
844	Render the content files
845	Create a friend
846	Get user listings
847	Create a comment
848	Submit a new comment
849	vote a user
850	Check if answer is correct
851	Returns a random gotcha
852	Delete an image
853	Set a stylesheet on a subreddit .
854	Subscribe to a subreddit
855	List your reddits
856	Get all reddits
857	Add a moderator
858	Add a contributor
859	Ban a user .
860	Remove a moderator
861	Remove a contributor
862	Unbans a user from a subreddit .
863	Perform a get request
864	Log in a user
865	Authenticates the user
866	Delete a user
867	GET /message
868	Clear flair templates
869	Delete a user s flair
870	Delete a flair template
871	Configure flair for a subreddit
872	Sends a CSV file containing the flair data for the specified subreddit .
873	Create a new flair template
874	Select a flair template
875	Toggle flair on or off
876	Get comments
877	Get a listing of all submissions
878	disinguish a user
879	Remove a user
880	GET /r
881	Make a POST request
882	Sets the lifespan
883	Returns a div with line numbers
884	Sets instance variables .
885	Render a method on an object
886	Joins a collection into a single string .
887	Opens a publication session .
888	Post publication
889	Expire a publication
890	Validates the presence of a value .
891	Validates an XML document
892	Set default savon options
893	Read a publication
894	Opens a consumer session .
895	Post request method
896	Expire a request
897	Reads a response from the server .
898	Removes a response to a request .
899	Opens a Session .
900	Post message response
901	Create a new channel
902	Add security tokens to a channel .
903	Removes security tokens from a channel .
904	Get a channel
905	Get channels
906	Update the Redis backend
907	sets the phrase
908	Returns a formatted date
909	Convert to latitude and longitude
910	Get all projects
911	Retrieve a project
912	Get all experiments for a project
913	Retrieve an Experiment
914	Get statistics for an experiment
915	Get all Variations for an experiment
916	Retrieve a variation
917	Retrieve all audiences for a project
918	Retrieve an audience
919	Perform a GET request
920	Get list of keys
921	Generate a random number
922	Returns a random number with the given bit length .
923	Add a condition to the query .
924	Returns a list of keys in the database .
925	Autocomplete to add an item
926	Fetch a record from the database .
927	Perform a search .
928	Calculates the frequency of each character in a string .
929	Returns the top n scores
930	Recolor the path
931	Creates a deep copy of the database .
932	Returns a list of keys in the database .
933	Get a value from the database .
934	Set a key value pair .
935	Delete a key
936	Returns an array of all keys in the map .
937	Create a new list .
938	Returns a list of keys in the database .
939	Get a list of keys .
940	Raise an error
941	Iterate over each row in the table
942	Find an icon
943	Get all columns in a table
944	Check if column is numeric
945	Deals with valid options
946	Create a new instance of the context class .
947	The subject should raise an error
948	The subject should not raise
949	Login to Janus
950	Logout the user .
951	Sets a user session .
952	Unset a user from the session
953	Returns the user with the given scope .
954	Returns the namespace for the application .
955	Extracts the release version from the CDN .
956	Warms up the cache .
957	Warm up from local files
958	Warm up from CDN
959	Returns default cache path
960	Downloads the cache from the CDN .
961	Send a message to the shell
962	validate cache version
963	Fetches the current cache version .
964	Create a new database .
965	Runs all registered strategies .
966	Runs an authentication strategy .
967	Executes the given script .
968	Print a hex string
969	Read input by 6 words
970	Generates a select statement for the given query .
971	Update an index
972	Executes the given SQL query .
973	Dispatch a method to the worker .
974	Add a node to the layout .
975	Returns the node with the given name .
976	Canonicalizes the given attribute list .
977	Create a new character .
978	Apply a block to the current map .
979	Create a new Failure instance
980	Check the length of the audio file
981	Perform an API call
982	Performs a multi - search .
983	Defines a has_whereabouts relationship .
984	Sets the validators for the given class .
985	Creates a new address class
986	Start the receive loop
987	Returns the attributes values as a hash
988	Raise an error if the version is not supported
989	Run the command
990	Validates options
991	Find emails in an IMAP mailbox .
992	Convert a string to a rainbow color .
993	Check if input is a large enough prime
994	Enhances the given value with the given separator .
995	Converts an integer to a string .
996	Convert a string to an integer .
997	Convert a character to a Unicode codepoint .
998	Returns true if the string is a subset of the character set .
999	Returns an array of points
1000	Validates the XML file
1001	Notifies that a Channel is created
1002	Notifies that the model has changed .
1003	Notifies that this channel has been destroyed
1004	Set logger
1005	Fetch rates for this object
1006	Parse the input string .
1007	Grab a portion of the source
1008	Get the comments for a set of bugs .
1009	Saves the persisted state of the worker .
1010	Read all pages
1011	Reads a single response from the broker .
1012	Add a line filter
1013	Write a mixml template
1014	Replaces all occurrences of + template + with + value + .
1015	Rename a template
1016	Commit a revision to the repository .
1017	Commit a list of revisions
1018	Scan a string for a format specifier .
1019	Convert Markdown to HTML
1020	Print a debug string
1021	Execute a command .
1022	Upload a file to the SFTP server .
1023	Downloads a remote file to a local file .
1024	Write data to a remote file .
1025	Calculates the distance between two points .
1026	Returns true if the point is covering this region .
1027	Send the request to the target .
1028	Output the result of the match
1029	Get user info
1030	Set options
1031	Add a column
1032	Create a new column
1033	Read data from a spreadsheet
1034	Given a config file path returns the line number of the config file .
1035	Returns the backtrace from the given exception .
1036	Drains the queue .
1037	Get all nodes as a hash
1038	Get a sentence from a hash
1039	Returns an array of nodes
1040	Build sentence from hash
1041	Read all pages
1042	Filter the results by the given params
1043	Get all sites
1044	Perform a site query
1045	Returns the rate_time for the given currency
1046	Sets the output file .
1047	Create a new Logger instance .
1048	Returns a hash of options
1049	Returns an array of selected options
1050	Transmit a packet .
1051	Returns true if this block is an ancestor of the given block .
1052	Returns an array of built in object IDs
1053	Daemonize the shell .
1054	Reopen an IO object
1055	Check if the process is running
1056	Write pid to file
1057	Parses the mead and sets instance variables .
1058	Loads the documents from the specified files .
1059	Save all XML documents to disk .
1060	Print all the documents
1061	Load the given files and execute the given block .
1062	Create a new Selection object .
1063	Add a CSS selector to the document .
1064	Execute the DSL
1065	Yield each node in the selection
1066	tagify a string
1067	Creates an option group .
1068	Create a new configuration file
1069	This method is used to check if the model has a Machete workflow
1070	Check if we should retry publishing exceptions
1071	Run MixML
1072	Returns a list of all entities
1073	Override method_missing to check the status
1074	Perform a GET request
1075	Perform a PUT request
1076	Make a request to the V3 API
1077	Add a token to the marketplace
1078	Authorizes the user using the provided credentials .
1079	Make a GET request
1080	Perform a POST request
1081	Perform a POST request
1082	Perform a PUT request
1083	Perform a PUT request
1084	Authenticate with AMEE
1085	Check if the response is ok
1086	Perform the actual request
1087	Run the request
1088	Create a new Timed Place .
1089	Get a transition by name
1090	Starts the simulation .
1091	Defines an output arc .
1092	Fire the transition .
1093	Send the request and return the response body
1094	Install librarian
1095	Install librarian modules
1096	Get crises by identifier
1097	Get crises stat
1098	Get user statistics
1099	Initialize a new instance .
1100	Add one or more tokens .
1101	Delete a set of tokens .
1102	Add joins
1103	Add the where clauses to the query .
1104	Loads the classes from the database .
1105	Search for a word
1106	Returns an array of words that match the query .
1107	Generates the Authorization header for the client .
1108	Returns the app folder
1109	Find the app version file .
1110	Returns the app version
1111	Bumps the app version to the given version .
1112	Loads the project from the configuration file .
1113	Print a help message .
1114	Add objects to the queue
1115	Sets the clock time
1116	Sends a message to the server .
1117	Perform a POST request
1118	Delete a resource
1119	Return the metadata for an instance
1120	Gathers metadata for all instances in the vagrantfile
1121	Reads a CSV file .
1122	Write a CSV file to disk .
1123	Convert a CSV file to a string .
1124	Add a value
1125	Rotate EC2 instances
1126	Wait for all instances to reach a certain state
1127	Read data from + path +
1128	Write a value to a path
1129	Get a list of files in a directory
1130	Sums the totals of all queries for a given model
1131	Returns the sum of all the totals for all the models
1132	Convert to a label
1133	Store an object in the cache
1134	Configures the objects with the given options .
1135	Initialize a new Client
1136	Generates a URL for a request .
1137	Check if a string is a URL
1138	Asserts that two objects are equal .
1139	Asserts that the given object is of the given class .
1140	Asserts that the given argument is a non - empty string .
1141	Assit a block
1142	Wait for a response
1143	sync main data
1144	Add trackers to a torrent .
1145	Download a command
1146	delete a torrent and its data
1147	Set the location of a torrent .
1148	Increase the priority of a torrent .
1149	Decrease priority of torrents
1150	Maximizes the priority of a torrent .
1151	Minimizes the priority of a list of torrent hashes .
1152	Set file priority
1153	Set download limit
1154	Set upload limit
1155	Returns the MD5 checksum of a file .
1156	Returns a list of keys in the bucket .
1157	Yields each item in the bucket .
1158	Run a command
1159	Returns an array of click objects
1160	Create multiple instances
1161	Creates a new Scope instance .
1162	config file default options
1163	Mark new entries as seen .
1164	Set the header options for a curl request
1165	Store the summary for the given feed
1166	Handles errors from the API .
1167	Perform an HTTP request
1168	Perform a GET request to a URI
1169	Perform a DELETE request
1170	Perform a PUT request
1171	Perform a POST request
1172	Get an article
1173	Upload an image from a file
1174	PUT an Octect
1175	Returns the relative path to a file .
1176	Create a new index
1177	Sets the accessors from the headers
1178	Adds a row to the table .
1179	Renders an inline footnote
1180	Returns the HTML for a footnote .
1181	Perform an instance action
1182	Add an error to the collection
1183	Returns an array of coords of neighbors of x y
1184	Get a single merchant
1185	Encodes data into a binary string .
1186	Defines a challah permission
1187	Perform a POST request
1188	Create a network
1189	Create a new port
1190	Move a port to one or more subnets
1191	Send JSON response
1192	Redirects to the specified URL .
1193	Get a specific server
1194	Create a server
1195	Perform a server action
1196	Delete an image
1197	Make a GET request
1198	Sets the basepath for this file .
1199	Returns a list of all commissions
1200	Returns all leagues for a given season
1201	Create a new matcher .
1202	Fetch a column from the table .
1203	Returns the value at the given column .
1204	Returns an array of values at the given columns .
1205	Initialize a new Table instance .
1206	Authorizes the request .
1207	List routers
1208	Create a new router
1209	Delete a router interface
1210	Returns the results of the search .
1211	Load config files
1212	Returns an array of providers
1213	Returns a list of categories
1214	Create a new role
1215	Check if the plan has been upgraded
1216	Delegates missing method calls to self .
1217	Returns an array of deals
1218	Get a single deal
1219	Returns total deals for all pages
1220	Returns an array of all deals with the same title .
1221	Load cookies from a file
1222	Dumps the cookies to a file .
1223	Set the value of a radio button .
1224	Update by expire time
1225	Perform a GET request
1226	List images
1227	Create an image
1228	Replace image memberships
1229	Add a member to an image
1230	Create a directory .
1231	Copy a file or directory .
1232	Move a file or directory .
1233	Copies a file or directory .
1234	Change file mode
1235	Remove and create a directory
1236	Copy metadata from source to destination .
1237	Create a temporary file and write it to the given path .
1238	Handle requests
1239	Returns a hash of the config file
1240	Email addresses
1241	Add a plural rule .
1242	Add a singular rule
1243	Irregularization
1244	Execute the command
1245	Output all results
1246	Run the benchmark
1247	Authenticate a user
1248	Add a service
1249	Add an endpoint
1250	Get endpoints for a token
1251	Disable a method
1252	Returns a proc that evaluates the disabled method .
1253	Executes the command .
1254	Alias a method
1255	convert secret to public key
1256	Check if two points are equal
1257	recover x from y
1258	Decompress a point from a string .
1259	convert secret to public key
1260	Returns the part with the given name .
