0	Prints a summary of the status
1	Find bad files from kubectl output .
2	Confirm that the EJSON keys are not pruned .
3	Returns the compressor for the current system .
4	Create . bff file
5	Find all files that match the given pattern .
6	Copies the contents of the source directory to the destination directory .
7	Returns the relative path for the given path .
8	Clean up previously mounted disks
9	Copy assets to dmg
10	Renders the document transform .
11	Render the package metadata file
12	Check for bad libraries
13	Check for any missing libraries
14	Check for missing dependencies
15	Read shared libraries
16	Check for a bad library
17	Update the digest of a file
18	Update the digest with the contents of a file .
19	Find all packages matching the pattern
20	Write the distribution file
21	Returns an artifact for the given artifact .
22	Upload the actual package to Artifactory
23	Initializes the Artifactory client
24	Returns the metadata properties for the given package .
25	Returns the remote path for the given package .
26	Sets the parameters of the request .
27	Adds a wix light extension
28	set wix light delay validation
29	Adds a Candle Extension .
30	Write the localization file
31	Write the parameters file
32	Write the source file .
33	Write the bundle file
34	Resolve a dependency
35	Append timestamp if not present
36	Returns true if the version has a timestamp
37	Construct the build version
38	Render template content
39	Add a DEPRECATED log message .
40	Add a message to the log
41	Defines a shell command
42	Executes the make command .
43	Builds the appbundler command .
44	Run a rake command
45	Create a touch command .
46	Delete a directory
47	Copy files from source to destination
48	Update config guess
49	Write the tarball to the staging directory
50	Create a tarball of the package
51	Clean project directory
52	Copies the downloaded file to the project directory .
53	Extract file to temporary directory
54	Returns the type of the checksum .
55	Verify checksum
56	Sets the signing identity .
57	Sign a Windows package .
58	Returns the subject of the certificate
59	Returns the manifest entry for the given name .
60	Sets the source for this fetcher .
61	Defines a version constraint .
62	Add a file to the whitelist
63	Returns the path to the downloaded file .
64	Prepend a path to the PATH environment variable .
65	Returns the overrides for the given name .
66	Returns the version to use for caching .
67	Returns a fetcher for the given source .
68	The SHA256 hash of the project s contents .
69	Canonicalizes the given source .
70	Write the makeselfinst . erb file
71	Create the cache directory
72	Generates a unique tag for this software .
73	Perform incremental cache
74	Remove all git directories
75	Write the AppxManifest . xml file
76	Run a shell command
77	Shellout command .
78	Retry a block of code
79	Returns a Windows safe path
80	Returns a compiler safe path
81	Create a directory
82	Remove a directory
83	Copy a file
84	Remove a file
85	Create a file
86	Create a symlink
87	Validates the license information
88	Returns the content of the project s license file .
89	Returns a map of all license components .
90	Loops through the dependency managers and copies the license files .
91	Collects the licenses for the given software .
92	generate the prototype file
93	The content of the package file .
94	Validates the package file .
95	Returns the key for the given package .
96	Build a semantic version string .
97	Get build start time
98	Saves the configuration to disk .
99	Sets the vendor attribute .
100	Sets the license .
101	Returns the full path to a build file .
102	Yields the destination to the block .
103	Publish a package
104	Defines a build version
105	Add a block to a package
106	Adds a block to the compress list .
107	Override a configuration value
108	Returns the path to the LICENSE file .
109	Returns true if the given software is a dependency
110	Build the manifest for this release
111	Write the text manifest to disk
112	Write the conffiles file
113	Returns the total size of all installed packages .
114	Returns true if the given directory is empty .
115	Force removal of existing directory before cloning
116	Returns the current revision of the repository .
117	Returns true if the given revision is a commit
118	Create a new SSH client .
119	Compute the need bits for the packet .
120	Get the DH key parameters .
121	Build the signature buffer .
122	Execute the block when the page is loaded .
123	Returns true if all validations passed
124	Raise an exception if the block is not supported .
125	Merges two sets of arguments .
126	Recombine find and runtime arguments .
127	Returns the list of elements to check .
128	Returns true if the given URL matches the expected mappings
129	Matches a URI against a component .
130	Returns a URI with substitutions applied
131	Returns the substitution value for the given index .
132	Builds an enumerator for the given number of times .
133	Builds an enumerator from an array .
134	Builds an enumerator for the given lock queue .
135	Builds an enumerator for the active record .
136	Builds an enumerator using the provided scope and cursor .
137	Returns an array of batches of the specified size .
138	Reify the object
139	Returns the maximum number of records to be returned by the API .
140	after_create callback
141	Called when a record is destroyed
142	after_save and after_update hooks
143	on touch
144	Check the presence of the item subtype column .
145	Returns true if the record should be saved
146	Takes a list of changes and squashes them .
147	Returns a node for the given object
148	Given an array of options and a depth returns a scope .
149	Set the orphan strategy
150	Orders the nodes based on the given options .
151	Arrange nodes for serialization
152	Builds the ancestry from parent_ids
153	Rebuilds the depth cache .
154	Returns the conditions for the given object .
155	Request default parameters
156	Returns a hash of options
157	Reset all configuration options to defaults
158	Get HTTParty config
159	Start a timer
160	Set the deadline for this socket .
161	Returns the time remaining after the deadline .
162	Build the schema for the parent schema .
163	Handles the creation of a JSON schema .
164	Returns true if the given subject matches the conditions .
165	Alias an action
166	Expands aliased actions
167	Returns all aliases for the given action .
168	Returns relevant rules
169	Create missing file .
170	Iterates over each filename in the directory .
171	Yields all children of this node
172	Yields the current path to the given block .
173	Calculates the checksum of a string .
174	Calculate the k - value checksum
175	Annotates a PDF document .
176	Returns an array of all characters in the string .
177	Returns an array of characters
178	Calculate checksum
179	Returns the character encoding for the given bar symbols .
180	Renders the barcode to a given Cairo context .
181	Renders the image to a PNG file .
182	Renders the image as a PSSurface .
183	Renders the image as a PDF document .
184	Renders the graph to a string .
185	Sets the maximum number of threads to use .
186	Returns true if the browser is online
187	HTTP HEAD request
188	Create a new database connection
189	Ensures that the commit with the given SHA exists .
190	Ensure commit parents exist
191	ensure user followers
192	ensure_user_follower
193	Ensures that a user with the given email and name exists .
194	Ensure that a repo exists
195	Ensures that the languages exist in the database .
196	Ensure that the fork commits exist
197	Ensure that a fork point exists
198	Ensure all orgs exist for the user
199	Ensures that a user is part of an organization
200	Ensure a user is an organization
201	Ensures that there are no comments for a commit .
202	Ensure watchers exist for a repository
203	Ensure pull requests exist
204	ensure pull request history exists
205	Returns true if the PR has a head repo
206	Ensure all forked projects exist
207	Ensure that a fork exists
208	Ensure issues exist in the repository
209	Ensures that the issue exists in the repository
210	Ensure issue events exist
211	Ensure issue event exists
212	ensure issue comments
213	Ensures that the issue comment exists in the database .
214	ensure_labels ensures that the issue labels exist
215	Ensures that a repo label exists .
216	ensure issue labels
217	Ensure issue label existence
218	Creates a transaction .
219	Store a commit
220	Log a message
221	Perform a paged API request
222	Returns the time at which the resource was last updated .
223	Returns the number of pages for a given URL .
224	Parse links
225	Parse the request result
226	Perform an API request
227	Attach a block to a socket .
228	Connect to the given adapter .
229	Retrieve a commit
230	Get a list of commits for a repository
231	Retrieve all orgs for a user
232	Retrieve a list of watchers for a repository
233	Retrieve a watcher
234	Get repository events
235	Retrieve the diff between two branches
236	Retrieve the default branch for a repository .
237	Process command options
238	Validate options
239	Queue client
240	Read a value from a nested hash
241	Given a location return a string suitable for inclusion in a URL .
242	Validates the usage of the registered responders .
243	Validates the options .
244	Send all messages to Kafka
245	Send a notice signal to a thread .
246	Performs a lookup and transform on the given set of ids .
247	Given a set of params and an array of ids returns a new set of ids .
248	load a pb file
249	Asserts that two values are equal .
250	Computes the gradients of a tensor .
251	Create a random standard normal distribution .
252	Creates an identity matrix .
253	Returns an initializer for a uniform distribution .
254	Returns an initializer for a random uniform distribution .
255	Slice an array .
256	Create a new array of the specified shape .
257	Logical AND operation .
258	Reduce the mean of a tensor
259	Concatenates multiple values .
260	Dynamically partitions data into num_partitions partitions .
261	Adds a where clause to the query .
262	The SassScript == operation .
263	The SassScript Acos function .
264	The SassScript atan function .
265	Cast input to given data type .
266	Print data to STDOUT
267	The SassScript sec function .
268	Calculates the square root of a number .
269	Log a value .
270	The SassScript exponential function .
271	Applies padding to a tensor .
272	Gather values from an array .
273	Pack an array of values .
274	Unpack a value into an array .
275	Create a case statement .
276	Adds an i operation to the graph .
277	Broadcast the dimensions of an array .
278	Performs vector multiplication .
279	Transpose an array with permutations .
280	Adds two arrays together .
281	Computes the argmax of a tensor .
282	Computes the ceil of a floating point tensor .
283	Cos - operator
284	Returns the floor of a floating point number .
285	Mod operation .
286	Pow operation .
287	Product of two tensors .
288	Create a random uniform distribution .
289	Create a range operation .
290	Rank a tensor .
291	Round a floating point value .
292	Computes the square root of a floating point value .
293	Returns the shape of a tensor .
294	sigmoid - operator
295	The SassScript sin function .
296	Subtraction operator .
297	Sum elements of a tensor
298	Calculates the tangent of a tensor .
299	Computes the hyperbolic tangent of a tensor .
300	Returns the top k elements of an array .
301	Create a new array of the specified shape .
302	Convert a checkpoint to a YAML file
303	Add a device to the graph
304	Loads a serialized operation from a YAML string .
305	Assigns a variable .
306	Create a variable scope
307	Creates a new session .
308	Create a placeholder tensor .
309	Check if value is dense .
310	Apply data type coercion
311	Add audio to customization
312	Create an event
313	Pad the given message with zeros .
314	Check the length of a string
315	Checks if a string is valid .
316	Checks the HMAC key .
317	Checks if a string can be converted into a String .
318	Computes the authenticator for the message .
319	Verifies the authenticity of a message .
320	Generates a nonce and signs the message .
321	Opens an encrypted message .
322	Reopens all appenders .
323	The logger for this processor .
324	Measure a message .
325	Log a backtrace
326	Log any number of tags
327	Pushes a list of tags onto the logger .
328	Returns true if the log matches the filter
329	Log an internal message
330	Measure a log entry .
331	Execute the given block and log the result .
332	Log a message to the logger .
333	Assign a message and payload .
334	Assigns a message and payload .
335	Yield each exception to the given block .
336	Extracts file name and line number from stack .
337	Returns the message for the given corrections
338	Gather all variables from the message .
339	do_run
340	Add a route to the message .
341	Returns true if row waiter
342	Returns the node with the specified ID .
343	Get all variables for a given node .
344	lookup on error parent
345	Decrement the number of items in the cache .
346	work the job
347	Attempts to lock a job .
348	Call the receiver of the job .
349	Dynamically merge options
350	remove params from url
351	Parse user info
352	Run a command asynchronously .
353	Returns a random exit code
354	Imports a method into the registry .
355	Imports the given methods .
356	Imports all methods from + source + .
357	Returns a wrapped function .
358	Fetch a function from the store .
359	Returns an AST representation of the command .
360	Convert to proc
361	Given a set of keys and a pattern and a match group return an interpolated match group .
362	Interpolates variables in the replacement string .
363	Adds commands to the before list .
364	Creates a window .
365	Creates a new tab .
366	Add commands to the context
367	Set write operation .
368	Write a delete command .
369	Set touch command .
370	Set the existence of a key
371	Set read header .
372	Set the read and write operations .
373	Write message header .
374	Write header with policy .
375	Check all nodes done
376	Get a connection from the pool .
377	Parse a single record .
378	Returns a random node .
379	Get a node by name
380	Prepend a value to a key .
381	Get the header for a given key .
382	Execute a batch exists command .
383	Register a UDF
384	Remove a UDF
385	List UDFs
386	Execute a UDF on a query
387	Create an index .
388	Drop an existing index
389	Scan a node
390	Drop a user
391	Change user s password
392	Grants roles to a user
393	Queries the users in the cluster .
394	Returns the next record in the queue .
395	Iterates over all records in the table .
396	Creates a new script tag
397	Move the robot to the given point .
398	Returns the absolute size of this vector .
399	Returns the screen position of the map .
400	Returns the position of the map
401	Returns true if + v + is in the map .
402	Animate once
403	Draw a map .
404	Update image state
405	Draw the image .
406	Sets the text of the node .
407	Sets the position of the node .
408	Draw the graph .
409	Draw the image .
410	Update all buttons
411	Sets the value of the button .
412	Draw the buttons .
413	Draw the text
414	Write a line
415	Write a paragraph breaking
416	Add a global message .
417	Find the first entry that matches the message .
418	Check all the monitorings .
419	Create a global definition
420	Check the device info record
421	Open log file
422	Set the type of the record
423	Check if the activity is valid .
424	Calculates the total distance between two GPS timestamps .
425	Returns the value of the VO2max field .
426	Writes the file to the given IO .
427	Creates a new fit data record .
428	Check the first lap index .
429	Register a field
430	Defines an alternate field .
431	Check if the captcha is spam
432	Delivers the message .
433	Returns a hash of mail attributes
434	Start the Solr server
435	Restart the container
436	Create a new container
437	Sets up the upconfig command
438	Run the downconfig command .
439	Create a new collection .
440	Cleans the directory structure .
441	Get all registered signals
442	Add two Durations together .
443	Returns the number of days to the beginning of the week
444	Reset the timer
445	Advance the progress bar .
446	Iterates over a collection .
447	Update configuration options
448	Renders the barcode .
449	Move the cursor to the next row .
450	Write data to terminal
451	Finishes the progress bar .
452	Stop rendering .
453	Log a message
454	Pad out the given message to fit the current width .
455	Lock the job exclusively .
456	setup the tracery
457	Expand and post the given text .
458	Run the interactor .
459	Sends a reply to a user or group chat .
460	Run the reply
461	Store the mention data
462	Setup streaming client
463	Parses the service name from the given path .
464	Connect to the server
465	Write data to socket
466	Read data from the socket
467	Close the socket
468	Check if socket is alive
469	Connect to a socket .
470	Write data to socket
471	Connect to a server using the SSL handshake .
472	Join all speakers in a party mode .
473	Discover first device ip
474	Returns a list of TopologyNodes
475	Find a resource by id
476	Get all resources
477	Validates the attributes .
478	Adds a validation to the model .
479	Updates the given XML element with the given value .
480	Calculate the ipmt for a given rate and number of parameters
481	Calculates the nper for a given rate and pmt .
482	Calculate the pmt for a given rate and nper
483	Returns a guess at the rate of a newton iteration
484	Calculates the total number of cashflows
485	Computes the relative error between two values .
486	Calculates a newton iteration .
487	Returns a summary of the event
488	Load the directory structure .
489	repack a file or a temp file
490	Loads a relation .
491	Returns the native representation of the response body .
492	Call a function .
493	Send a function call to the server .
494	Parse the URL
495	Call a method on the server
496	Build rpc params
497	Returns a Faraday connection
498	Transfer data from one account to another .
499	Replaces all occurrences of + new + with + new + .
500	Serialize the object to JSON
501	Time a block of code .
502	Creates a new group .
503	Creates a new group .
504	Authenticate the request .
505	Creates a new instance of the given class with the given UUID .
506	Creates a new file reference
507	Add a file reference to the project .
508	Remove all seeds
509	Configure the phases
510	Returns true if the source file is valid
511	Returns an Aspell instance .
512	Returns a list of files to check
513	Reads the config file .
514	Report any dictionary duplicates
515	Returns the global spell configuration .
516	Check the contents of a file
517	Check if a path is writable
518	Check if the given option is already used
519	Performs post processing on the options .
520	Returns a list of all subdirectories of the current directory
521	convert a string to bytes
522	Packs the given files .
523	Pack symbolic links
524	Postpone a list of entities
525	Sets a header .
526	Sets a list body .
527	generate td content
528	Adds a card body to the card .
529	Displays a card footer .
530	Displays a card list group .
531	Adds a card image to the card .
532	Add an item to the collection .
533	Merge options with default options .
534	Displays a Bootstrap - styled nav .
535	Displays a Bootstrap - styled alert body .
536	Check if content is a tap
537	To stimulusjs
538	Add data to html options
539	Set header
540	Adds a column to the table .
541	Displays a Bootstrap - styled link .
542	Scaffold the engine .
543	Copy Rails plugin files
544	Create a Sass map .
545	Add a list of files to the asset .
546	Find all files with the given extension .
547	Dispatch a command to all threads .
548	Starts the Spark Engine watcher .
549	Load fixture setup files
550	Avoid duplicate image names
551	Returns a hash with the scope params
552	Convert pkey string to hash
553	Update the values of the form
554	Check if update params are valid for scope
555	Acquire a lock .
556	Unlock the lock
557	Apply options
558	Show notification
559	Updates the notification .
560	Download the video from the URL
561	Provides access to the information hash .
562	Convert options to commands
563	Returns a copy of the options with the banned keys removed .
564	Returns the value stored for the given method .
565	Manipulate the keys in the store
566	Sanitizes keys
567	Returns the representer for the given format .
568	Creates a text box with a label
569	Set the home position
570	Draw a border .
571	Reset all the barcode fields to default
572	Draw a Barcode 39
573	Add a field to the label
574	Builds the slug .
575	Returns true if we need to create a new record
576	Returns true if the object is persisted with slug changes
577	Returns the distance in words between two times
578	Returns the approximate distance of time in words
579	Track an error
580	Processes the given batch .
581	Process the pre - processors
582	Runs the post - processors on the given control .
583	Execute dependencies
584	Execute screens
585	Validates redis keys
586	Initializes a Redis key normalizer .
587	Defines a redis alias
588	store redis keys
589	Returns a hash with all the configuration options
590	Returns true if the record exists
591	Check if an alias exists
592	Check if item is valid for redis key
593	Validates redis key
594	Returns a hash representation of the object .
595	Find record by alias
596	get record by id or by key
597	Returns an array of all items with the given key .
598	Returns a new model instance by key
599	Transforms a value to a redis value
600	Transforms the given value according to the given type .
601	Parses the given value according to the given type .
602	Update the attributes of the object
603	delete all aliases
604	Add a user to the keychain
605	Get a list of nsqds
606	Discover nsqlookupd topics repeatedly .
607	Retry the given block with exponential backoff .
608	Show all X12 objects
609	do repeats
610	Find a field by name .
611	Allows accessing a field in a segment .
612	Parse the given string using the regexp .
613	Renders a repeater .
614	Returns the regexp for this field .
615	Find a field by name
616	Parse a loop definition
617	Create a new loop
618	Processes a loop .
619	Process a segment
620	Returns a string representation of this node .
621	Calculates the sortable values for each response field .
622	Normalizes the responses in the form .
623	Audit the responses of the form .
624	Adds a tag to the stack .
625	Create a new builder .
626	Rewrites a CSS selector .
627	Selects elements by CSS selector .
628	Adds the given configuration to the configuration object .
629	Returns true if the given process ID exists .
630	Wait for a process to exit .
631	Upload changes to the module repository
632	get_branches_and_revision_infos
633	Get revision info
634	commit changes
635	Get the riminfo for a revision
636	Copy revision files
637	Get the status of a revision
638	Get the status of a revision
639	Get the status of a module
640	Get the status of a directory .
641	builds the status of a revision
642	Returns a status object for the given revision .
643	Synchronize the current workspace with the repository .
644	Synchronizes all modules .
645	Returns true if the given revision is an ancestor of the given revision .
646	Get the parent of a given revision .
647	Get the commit message
648	Returns a list of OpenStructs for each OpenStruct in data .
649	Returns a list of OpenStructs grouped by path
650	Calculate the checksum
651	Returns the name of the current branch
652	Check if a branch exists
653	Get SHA1 of a revision
654	Given a revision and a hash of desired information return a hash of the revision s info .
655	Returns an array of branch revs
656	Export a revision to a directory .
657	Export the contents of a revision within the export directory
658	Upload modules
659	Upload all modules
660	Get the revisions for a given revision .
661	Fetches module from remote repository
662	Assign a value to an attribute
663	Creates a new instance of Factory
664	Crank a job
665	Delegates missing methods to the view context
666	Creates a new presenter .
667	Push a gem .
668	1D interpolation
669	Returns a line selector for the given target and attributes .
670	Get request count
671	Creates a date select control .
672	Creates a label
673	Read a value from + raw + .
674	Pack a value
675	Creates a new matcher .
676	Returns an array of static files
677	Returns an array of absolute paths to stylesheets .
678	Get daily activity reports
679	Runs a report request .
680	Generates a random unique value .
681	draw a paperback QR code
682	Produce Xcov report
683	Output the coverage report
684	Processes a report .
685	Update the CRC table .
686	Perform an HTTP request
687	Returns a Proc that returns a random string .
688	Convert a tag to a Time
689	Convert to a Hash
690	Displays a notification .
691	Run a command eagerly .
692	Wrap a list of strings to a certain width .
693	Save data to JSON file
694	Delete a reference
695	Merges another hash into self .
696	Add a strong reference .
697	Returns the object associated with this ref .
698	Delete a key from the map
699	Monitor a reference
700	Returns OAuth2 client
701	Default middleware
702	Creates a new adapter .
703	Returns an error hash
704	Setup the configuration
705	Sets arguments for the command .
706	Reset all configuration options to defaults
707	Returns an array of invalid fts filters
708	Extend object with params
709	Set parameter values
710	Defines a class parameter
711	Returns true if this module has a parameter with the given name .
712	Returns the parameter with the given name .
713	Set a parameter
714	Iterates over all parameters of this module .
715	Link multiple objects together .
716	Commit the transaction .
717	Execute a block within a transaction .
718	Read the next message .
719	Renders a query report .
720	Infer the type of a field .
721	Validates the instance node
722	Returns true if this node is the root node of the tree
723	Build a link to this node
724	This method is called before destroying the node map .
725	Validates an instance node
726	Returns true if the instance has been answered
727	Returns true if the instance has text
728	clone this node s children
729	ancestors_until_node_not_ancestor_of
730	Returns all children of this node that are not an ancestor of the given class .
731	Is this node an infinite loop?
732	Validates an instance node
733	Validates an instance node
734	Validates a node
735	Get the question for this node
736	Returns the next question in the survey .
737	remove a link to this question
738	Returns the index of the sibling of this node
739	Move this node up
740	Move this node down
741	Validates an instance node
742	Returns the number of nodes above this node
743	Return the number of nodes below this node
744	Validates an instance node
745	Build the first question node map
746	Returns an array of all edges in the graph .
747	Validates parent instance node
748	Update the question type
749	Remove an answer from the question .
750	Build the answer for this question
751	Remove the link to any questions
752	This method is called before a survey is destroyed
753	Creates a table .
754	Returns the default class for a collection
755	Returns the list of events for the given targets .
756	Returns the currently configured writer .
757	Creates an animation group .
758	Defines a mouse move action .
759	Adds a notification for the given parameter .
760	Fire events for held buttons
761	Fire events for notification
762	Fire event for notification
763	Add a model
764	After initialize callback
765	Fire all events for the notification .
766	Add events for target
767	Defines a control .
768	Starts the window .
769	Show the graph .
770	Generates HTML table body .
771	Add a cell to the table .
772	Adds links to action cells
773	creates a link to a resource
774	Add a scene
775	Apply post filters to a scene
776	Returns a new HashWithIndifferentAccess with the default missing_scene
777	Returns an array of all scenes for the given scenes
778	Returns the actor with the given name .
779	Fire a notification for the given event .
780	Enqueue a block of code to execute after the given interval .
781	Add actors to scene
782	Register all animations
783	Registers an actor .
784	Update all updaters
785	Base draw method
786	Transitions to a new scene .
787	Prepares the transition from this scene to another scene .
788	Returns all the drawers that are saveable to the view
789	Create a new model
790	Load properties from the options hash
791	Get activity for a user
792	Get body measurements
793	Returns a list of weight measurements
794	Get sleep series
795	Perform the request
796	Set the content type of the file
797	Send a request to a channel
798	Fetch a response from a channel .
799	Adds an event handler .
800	Download the source to a temporary file
801	Check required files and optional files
802	Check columns
803	Fetches the HTTP fallback identifier .
804	Defines a parameter on the object .
805	Find columns
806	Maps the given models to the given options .
807	Generates a schema for the given path .
808	Recursively resolves any references in an array .
809	Runs the mapper with the given schema and options .
810	Read a JSON schema from a file
811	生成签名
812	Iterate over each resource file
813	Iterates over each resource .
814	Tries to resolve the given URL .
815	Convert a filter to a proc .
816	Add a child folder
817	Returns the current data system
818	Run the job .
819	Sets the migration error
820	Returns true if the task is runnable .
821	Returns true if the task has completed
822	Add a step to the status
823	Time the task
824	Print a list of paragraphs
825	Returns a hash of column names to columns
826	Render all pages
827	Add a page
828	Add aliases to path_hash
829	returns an array of headers
830	Returns a hash of all variable files
831	Returns the last menu at the given depth .
832	nameize a string
833	Removes HTML tags from + html + .
834	Populates the given node with the children .
835	Returns an HTML representation of the list .
836	Returns the parent for the given heading .
837	Returns the type id for the given string .
838	link_to_function
839	Link to a route
840	link_to_function text
841	Makes a request to the specified trust_url
842	Renders the page .
843	Symlinks a file or directory .
844	Render all content files
845	Create a friend
846	Get user listing
847	Create a comment
848	Submit a user to a subreddit
849	vote a user
850	returns true if answer is correct
851	Displays a Bootstrap - styled question .
852	Delete an image
853	Set a stylesheet on a subreddit
854	Subscribe to a subreddit
855	List my reddits
856	Get all reddits
857	Add a moderator to a user .
858	Add a contributor
859	Ban a user .
860	Remove a moderator .
861	Remove a contributor
862	Unbans a user .
863	Execute a get request .
864	Log in to T2
865	Authenticates the user
866	Delete a user
867	GET /message
868	Clear flair templates
869	Delete a user s flair
870	Delete a flair template
871	Configure flair for a subreddit
872	Send a CSV file to a subreddit .
873	Create a new flair template
874	Select a flair template
875	Toggle flair on or off
876	Get a list of comments
877	Get a listing
878	disinguish a user
879	Remove a user
880	Get modlog for a given subreddit .
881	Perform a POST request
882	Sets the lifespan
883	Diversified version of the code .
884	Sets instance variables .
885	Render a method on an object
886	Joins the given collection with the given glue .
887	Opens a publication session .
888	Post publication
889	Expire a publication
890	Validates presence of values
891	Validates an XML document
892	Add default options to the options hash
893	Reads the publication of a session .
894	Opens a consumer session .
895	Send a post request to the IRC server .
896	Expire request
897	Reads a response from the server .
898	Removes a response from a request message .
899	Opens a provider request session .
900	Post message response
901	Create a channel
902	Adds security tokens to a channel .
903	Removes security tokens from a channel .
904	Get a channel
905	Get all channels
906	Update the Redis backend
907	sets the phrase
908	Returns a formatted date
909	Convert to latitude and longitude
910	Get all projects
911	Retrieve a project
912	Get all experiments for a project
913	Retrieve an Experiment
914	Get stats for an experiment
915	Get all Variations for an experiment
916	Retrieve a variation
917	List audiences for a project
918	Retrieve a specific audience
919	Perform a GET request
920	Get list of keys .
921	Generate a random number
922	Returns a random number with the given bit length .
923	Add a condition to the query
924	Returns a list of all keys in the database .
925	Autocomplete to add an item
926	Fetch a record from the database .
927	Perform a search .
928	Returns a hash of frequencies for each character in the string .
929	Returns the top n scores
930	Recolor the SVG document
931	Creates a copy of the database .
932	Returns a list of keys .
933	Retrieve a value from the database .
934	Set a value in the map .
935	Delete a key
936	Returns an array of all keys in the map .
937	Add values to a list .
938	Returns a list of all keys in the table .
939	Get a list of keys .
940	Raise an error
941	Iterates over each row in the table .
942	Find an icon
943	Get all columns in a table
944	Check if column is numeric
945	Given a list of temp tables and a list of temp columns and a list of column types returns a list of converted tables .
946	Adds a context to the template .
947	The subject should raise an error
948	It should not raise an error
949	Login to Janus
950	Logout the user .
951	Sets a user in the session
952	Removes a user from the session .
953	Returns the user for the given scope .
954	The namespace for this application .
955	Extracts the version from the cache .
956	Warms up the cache .
957	Warm up from local files
958	Warm up from CDN
959	Returns the default cache path
960	Download the cache
961	Write a message to the shell
962	validate cache version
963	Fetch the version from the cache
964	Create a new database .
965	Runs all registered strategies .
966	Runs a strategy
967	Executes the given script .
968	Prints a hex string
969	Read input by 6 words
970	Create a select statement .
971	Update an index
972	Executes a query on the connection pool .
973	Dispatch to Woodhouse
974	Add a node to the layout
975	Returns the node with the given name .
976	Canonicalizes an attribute list .
977	I imagine a character .
978	Merges current with the given block .
979	Creates a new Danger instance .
980	Check the length of the audio file
981	Perform API call
982	Performs a multi search .
983	Defines a has_whereabouts relationship .
984	Sets the validators for the given class .
985	Creates a new address class
986	Start the receive loop
987	Returns the attributes values as a Hash .
988	Raise an error if the version is not supported
989	Run the command .
990	Validates options
991	Find emails in an IMAP mailbox .
992	Convert a string to a rainbow color .
993	Check if the input is a large enough prime .
994	Enhances the given value with the given separator .
995	Converts an integer to a string .
996	Convert a string to an integer .
997	Convert a character to a Unicode codepoint .
998	Returns true if the string is a subset of the character set .
999	returns an array of points
1000	Validates the metadata
1001	Notify create channel publication
1002	Notifies all publications that the record has changed .
1003	Notifies that the record has been destroyed
1004	Add a logger to the map .
1005	Fetches rates from the API .
1006	Parse the input string .
1007	Grab a portion of the source
1008	Get the comments for a list of bugs .
1009	Saves the persisted state of the workers .
1010	read all pages
1011	Reads a single response from the broker .
1012	Add a line filter
1013	Write all nodes to XML
1014	Replaces all occurrences of + template + with + value + .
1015	Rename a template
1016	Commit the given page with the given markup .
1017	commit all revisions
1018	Scan a string for a format specifier .
1019	Convert Markdown to HTML
1020	Print a debug message
1021	Execute a command on the connection .
1022	Upload a file to the SFTP server .
1023	Download a remote file to a local file .
1024	Write data to a remote file .
1025	Returns the distance between two points .
1026	Returns true if the point is within the bounds of this region
1027	Delegates to the subject
1028	Output the match result
1029	Get user info
1030	Set options
1031	Add a column
1032	Declares multiple columns .
1033	Read data from a spreadsheet
1034	Given a file path and an exception return the line number of the exception .
1035	Given a file path and an exception return a filtered backtrace .
1036	Drains a queue .
1037	Get all nodes as a hash
1038	Get a sentence from a hash
1039	Returns an array of all nodes .
1040	Build sentence from hash
1041	Read all pages
1042	Filter the query with the given params .
1043	Get all sites
1044	Perform a site query
1045	Returns the hourly rate for the given currency
1046	Set the output file
1047	Logs a message at the DEBUG level .
1048	Returns a hash of all options
1049	Returns an array of the selected options
1050	Transmit a packet .
1051	Returns true if this block is an ancestor of the given block .
1052	Returns a hash of built - in object IDs
1053	Create a new daemon process .
1054	Reopen an IO object .
1055	Returns the PID of the process at the given path .
1056	Write pid to file
1057	Sets instance variables based on the mead
1058	Load a document from a file .
1059	Save all XML documents to disk
1060	Prints all the XML documents
1061	Work on multiple files
1062	Returns a new Selection object with the selected nodes .
1063	Add a CSS selector to the document .
1064	Execute a Ruby program .
1065	Yields all nodes in the selection .
1066	tagify a string
1067	Creates an option group .
1068	Create a config file
1069	defines the workflow of a job
1070	Check if we should retry publishing exceptions
1071	Run the MixML tool
1072	List all entities
1073	Returns true if the request was successful
1074	Perform a GET request to a path
1075	Perform a PUT request
1076	Make a request to the V3 API
1077	Add a token to the marking
1078	Authorizes the request .
1079	Perform a GET request
1080	Perform a POST request
1081	Perform a POST request
1082	Perform a PUT request
1083	Perform a PUT request
1084	Authenticate with AMEE
1085	Check if the response is ok
1086	Perform the request
1087	Run the request
1088	Create or find a timed place
1089	Create a transition
1090	Runs the simulation .
1091	Defines an output arc .
1092	Fire the transition .
1093	Send the request to the server
1094	Install librarian packages
1095	Installs the specified modules in the specified directory .
1096	Get crises by identifier
1097	Get crises stat
1098	Get user statistics
1099	Sets the pose content proc .
1100	Add multiple objects to the token .
1101	Delete one or more tokens
1102	Add joins
1103	Add the where clauses to the query .
1104	Loads the classes from the database .
1105	Search for a word
1106	Search for words in the query .
1107	Returns the Authorization header for a client login request .
1108	Returns the full path to the app folder
1109	Find the version file for the app .
1110	Returns the version of the app
1111	Bumps the app version to the specified version .
1112	Loads the development project .
1113	Prints help information .
1114	Add objects to the queue
1115	Sets the clock to the given time .
1116	Send a message over the connection
1117	Perform a POST request
1118	Delete a resource
1119	Return the metadata for a given instance
1120	Returns a hash of metadata for each instance in the vagrantfile
1121	Read CSV file
1122	Writes a CSV file .
1123	Returns a CSV formatted string .
1124	Add a value
1125	Rotate all instances in the given hash .
1126	Wait for all instances to reach the given state
1127	Read data from + path +
1128	Write a value to a path
1129	Get a list of all fields in a directory .
1130	Returns a hash of query statistics for each model
1131	Returns a hash of the summed totals for each model
1132	Returns a label for this timestamp .
1133	Store an object in the cache
1134	Configures the objects in the configuration
1135	Run the httperf command
1136	Generates a URL for a request .
1137	Check if a string is a URL
1138	Asserts that two objects are equal .
1139	Asserts that the given object is of the given class .
1140	Asserts that the given argument is a non - empty string .
1141	Assit a block
1142	Polls for a response .
1143	sync main data
1144	Add trackers to a torrent .
1145	Download a command
1146	delete a torrent and its data
1147	Set the location of a torrent .
1148	Increase torrent priority
1149	Decrease priority of torrents
1150	Maximize torrent priority
1151	Minimizes the priority of a torrent .
1152	Set file priority
1153	Set download limit
1154	Set upload limit
1155	Returns the MD5 checksum of a file .
1156	Returns all keys in the bucket .
1157	Yield each key in the bucket
1158	Run a command
1159	Returns an array of click objects .
1160	Create multiple instances
1161	Given a scope name and an array of enum keys raise an ArgumentError if it s already defined .
1162	config file default options
1163	Mark new entries as seen .
1164	Set the HTTP header options for the request
1165	Store summary information in backend
1166	Raises an exception if the response is not a success .
1167	Perform an HTTP request
1168	Perform a get request
1169	Perform a DELETE request
1170	Perform a PUT request
1171	Perform a POST request
1172	Returns a single article
1173	Upload an image from a file
1174	PUT /octects
1175	Returns a path relative to the current working directory .
1176	Create a new index
1177	Sets the accessors from the headers
1178	Adds a row to the table .
1179	Build the HTML for an inline footnote
1180	Returns the HTML for a footnote .
1181	Perform an instance action
1182	Add an error
1183	Returns an array of coords of neighbors of x and y
1184	Returns a single merchant
1185	Encodes the given data using the given opcode .
1186	Defines a challah permission
1187	Perform a POST request
1188	Create a network
1189	Create a port
1190	Move a port to subnets
1191	Send JSON response
1192	Redirects to the specified URL .
1193	Get information about a server
1194	Create a server
1195	Perform a server action
1196	Delete an image
1197	Get a resource
1198	Sets the basepath for this file .
1199	Returns a list of all commissions
1200	Returns all leagues
1201	Match a method with a block .
1202	Fetch a column from the table .
1203	Returns the value at the given column .
1204	Returns an array of values at the given columns .
1205	Allows accessors to be defined
1206	Authorize the request .
1207	List routers
1208	Create a router
1209	Delete a router interface
1210	Find the first element that matches the given method .
1211	Load config files
1212	Returns a list of providers
1213	Returns a list of categories
1214	Defines a role
1215	Check if the plan id has changed
1216	Delegates missing methods to the underlying object
1217	List deals
1218	Get a deal
1219	Returns total deals for all pages
1220	Given an array of deals returns an array of deals with unique titles .
1221	Load cookies from a file
1222	Dumps cookies to + file + .
1223	Set the value of a radio button .
1224	Update the expiration time of the resource
1225	Perform a GET request
1226	List images
1227	Create an image
1228	Replace image memberships
1229	Add a member to an image
1230	Create a directory
1231	Copies a file or directory .
1232	Move a file or directory .
1233	Copies a file or directory .
1234	Change file permission
1235	Remove and create a directory
1236	Copy file metadata
1237	Atomic write to a temporary file .
1238	Handle requests
1239	Returns a hash of the config file
1240	Returns the email addresses in a string .
1241	Add a plural rule .
1242	Add a singular rule .
1243	Irregular version of pluralize
1244	Execute the command
1245	Output all results
1246	Run all jobs
1247	Authenticate a user
1248	Add a service
1249	Add an endpoint
1250	Get endpoints for a token
1251	Disable a method
1252	Returns a proc that evaluates the disabled method .
1253	Executes the method .
1254	Alias a method
1255	Converts a secret to a public key .
1256	Check if two points are equal
1257	recover x from y
1258	Decompress a compressed point .
1259	convert secret to public key
1260	Returns the part with the given name .
