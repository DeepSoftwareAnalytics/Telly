0	Convert SINA XML to a list of URLs
1	Download a dailymotion video .
2	Download sina video .
3	Colorize text .
4	Print text to stderr .
5	Print a message and exit .
6	Print a message and exit .
7	Detect OS .
8	Download vimeo videos by channel .
9	Get video info by XML
10	Get video url from video id
11	get the real M3U url
12	Legitimize text .
13	Download video from CBS
14	Download a stream .
15	Download a video by vid
16	Find all occurrences of patterns in text .
17	Parse a query parameter .
18	Get the content of a URL .
19	Send a POST request .
20	Parse a host string .
21	Get room id by room url key .
22	Get title by json topic part
23	Download Wanmen data by course .
24	Download Wanmen data by course topic part .
25	Check if a task is running or not
26	Get the event buffer .
27	Return a connection object .
28	Get AWS credentials .
29	Get the value of a field .
30	Copy an expert to a file .
31	Copy a table to a temporary file .
32	Uploads the file to Google Cloud Storage .
33	Get the maximum partition of a table .
34	Get connection information
35	Show the current state of a task .
36	Restart gunicorn workers .
37	Get the client .
38	Translate a list of values .
39	Get an instance .
40	Create a new instance .
41	Patch an instance .
42	Delete an instance .
43	Get a database .
44	Create a database .
45	Patch a database .
46	Delete a database .
47	Export an instance .
48	Start the sql proxy .
49	Stop the sql proxy process .
50	Get the version of the SQL proxy .
51	Create a connection .
52	Retrieve a connection from the database .
53	Delete a connection .
54	Returns a CloudSqlProxyRunner instance .
55	Get the database hook .
56	Clean up the database hook .
57	Reserve a free TCP port .
58	Normalize a mlengine job id .
59	Get error code .
60	Delete all DagRuns from the database .
61	Delete all DAG task instances
62	Set the state of all DAGs to be paused .
63	Print performance results
64	Check if all tasks have been processed
65	Invoke a lambda function .
66	Create evaluation ops .
67	Create a directory .
68	Convert string to float if possible .
69	Make a naive datetime .
70	Make a naive datetime .
71	Datetime constructor .
72	Get the connection to the druid broker .
73	Return a requests . Session object .
74	Run the request .
75	Raise AirflowException if response is not successful .
76	Execute a request and check the response .
77	Create a session .
78	Decorator to provide a session .
79	Drop all tables in the database .
80	Return pretty exception message .
81	Get records from database .
82	Execute a query and return a pandas DataFrame .
83	Run the SQL query .
84	Insert rows into a table .
85	Get the Cosmos DB client .
86	Checks if a collection exists .
87	Create a collection .
88	Checks if a database exists .
89	Create a database .
90	Delete a database .
91	Delete a collection .
92	Insert multiple documents into a collection .
93	Delete a document .
94	Get a single document .
95	Get a list of documents in a collection .
96	Get a function by name .
97	Create a new function .
98	Updates a function .
99	Upload a zip file .
100	Delete a function .
101	Get the status of all dependencies .
102	Return True if all dependencies are met
103	Return a generator that yields failure reasons .
104	Parse S3 configuration file .
105	Get credentials .
106	Get a connection object .
107	Flush the buffer .
108	Check if fileloc is a zip file .
109	Return a list of file paths in directory .
110	Construct a task instance .
111	Launch the process .
112	Send termination message to the manager .
113	Exit gracefully .
114	Start processing files .
115	Start parsing the DAG .
116	Start parsing in sync .
117	Refresh the DAG directory .
118	Print file processing statistics .
119	Clear non - existing import errors .
120	Log file processing statistics .
121	Set a list of file paths to process .
122	Wait until all processors have finished .
123	Collect all the DAGs that were found in the processed files
124	Terminate all child processes
125	Create an SSH connection to the remote host .
126	Create a transfer job .
127	Get a transfer job .
128	List transfer jobs .
129	Update a transfer job .
130	Delete a transfer job .
131	Cancel a transfer operation .
132	Pause a transfer operation .
133	Resume a transfer operation .
134	Wait for a transfer job to complete .
135	Find tasks for a task instance .
136	Return the number of open slots in the pool .
137	Run command and return output .
138	Remove an option from a section .
139	Get a specific section .
140	Allocate a list of keys for this project .
141	Begin a transaction .
142	Commit a project .
143	Lookup a project .
144	Rolls back a transaction .
145	Run a query .
146	Get an operation by name .
147	Delete a project operation .
148	Poll an operation until it is done .
149	Export a project to a bucket .
150	Import a project from a storage bucket .
151	Publish a message to a target .
152	Get the hostname .
153	Get the LanguageServiceClient .
154	Analyze entities .
155	Annotate a text document .
156	Classify text .
157	Get a list of template fields for a class .
158	Template field role .
159	Disposes the database connection pool .
160	Prepare classpath .
161	Check task id .
162	Return True if X - CACHECONF is set .
163	Convert an object to a dictionary .
164	Yield chunks of items .
165	Reduce an iterable in chunks .
166	Chain tasks .
167	Pretty print table .
168	Render a log filename .
169	Get a connection to the API .
170	Wait for an operation to complete .
171	Coerce content to a string .
172	Handle databricks operator execution .
173	Run the pig command .
174	Fetch celery task state .
175	Return the number of tasks per send process .
176	Return the number of tasks per fetch process .
177	Set default value of variable .
178	Get a connection to the API .
179	Create a job .
180	Get a job .
181	Wait for a job to finish .
182	Create a model version .
183	Set the default version of a model .
184	List all versions of a model .
185	Delete a model version .
186	Create a model .
187	Get a model by name .
188	Write batch data to DynamoDB .
189	Integrate plugins .
190	Get the default executor .
191	Get an executor by name .
192	Raise AirflowException on error .
193	Get a pymssql connection .
194	Trigger a dag .
195	Delete a DAG .
196	Get information about a task .
197	Get all pools
198	Create a new pool .
199	Delete a pool .
200	Create or update a container group .
201	Get the state and exit code details of the instance .
202	Returns a list of messages for the specified instance .
203	List container logs .
204	Deletes a container group .
205	Check if a container exists .
206	Decorator to apply default values to functions .
207	Construct an ingest query .
208	Process messages from channels
209	Find DagRun by ID or run ID .
210	Get a list of task instances for this DAG .
211	Get a task instance by ID .
212	Get the previous execution of this dag run .
213	Get the previous scheduled dagrun .
214	Update the state of this task .
215	Verify task integrity .
216	Send a request to the Jenkins server and return the response .
217	Convert Airflow context to Airflow variables .
218	Trigger conditionally .
219	Send a metric .
220	Query a metric .
221	Get a DAG by ID
222	Kill zombies .
223	Bag a DAG .
224	Collects all DAGs in the DAGFolder .
225	Return a report of the loaded DAGs .
226	Add a number of days to a date .
227	Format a string using input_format and output_format .
228	Pokes for this file .
229	Return True if the file is a directory .
230	Clear task instances .
231	Get the try number .
232	Generate airflow run command .
233	Get the current state of the task .
234	Mark the task as FAILED
235	Refresh this task instance from the database .
236	Clear XCom data .
237	Return the key for this task .
238	Return True if all dependencies of this task are done
239	Calculate the next retry datetime for this task .
240	True if the job is ready to be retried .
241	Check if the pool is full .
242	Get the DagRun object for this run .
243	Push a key - value pair to XCom .
244	Pull a list of tasks from XCom .
245	Initialize the run context .
246	Closes the logger .
247	Get a connection to the API .
248	Start an instance .
249	Set the type of a resource .
250	Get an instance template .
251	Insert a new instance template .
252	Get an instance group manager .
253	Patch an instance group manager .
254	Wait for an operation to complete .
255	Check if a bucket exists .
256	Create a bucket .
257	Check if a prefix exists in a bucket .
258	List prefixes in a bucket .
259	List keys in a bucket .
260	Check if a key exists .
261	Get an object from S3 .
262	Read a key .
263	Select a key .
264	Check if wildcard key exists .
265	Get a wildcard key .
266	Uploads a file to S3 .
267	Load a string .
268	Uploads a file to S3 .
269	Load a file - like object .
270	Copy an object from one bucket to another .
271	Query Cassandra .
272	Convert a user type to a dictionary .
273	Send an email .
274	Return an instance of SpeechClient .
275	Recognize speech .
276	Execute the query .
277	Load a list of entry point plugins .
278	Check if a plugin is valid .
279	Skip a set of tasks .
280	Get AzureDLFileSystem client
281	Check if a file exists .
282	Upload a file .
283	List files in a directory .
284	Execute the query .
285	Uncompress a file .
286	Execute the SQL query .
287	Decorator for cli functions .
288	Build metrics .
289	Create a cgroup from a path .
290	Delete a cgroup
291	Parse the host from a string .
292	Perform API call .
293	Get Salesforce connection
294	Make a query
295	Describe an object .
296	Get a list of available fields for an object .
297	Get an object from Salesforce .
298	Convert a column to a timestamp
299	Write an object to a file .
300	Get connection to MongoDB .
301	Get a mongo collection .
302	Replace multiple documents in a collection .
303	Check if a mail attachment exists .
304	Retrieve mail attachments by name .
305	Download mail attachments .
306	Get attachments by name .
307	Get the filename and payload from the part .
308	Put records to firehose .
309	Check if the task instance is ready for reschedule .
310	Send email .
311	Send email using SMTP .
312	Process the result value .
313	Check if a blob exists .
314	Check for a prefix in a container .
315	Load a string from S3 .
316	Read a file .
317	Delete a file .
318	Execute MLSD command .
319	Get FTP connection .
320	List the contents of a directory .
321	Retrieve a file from the FTP server .
322	Store a file .
323	Get the modification time of a file .
324	Execute the hook .
325	Returns a FileService object for this connection .
326	Check if a directory exists .
327	Check if a file exists .
328	List the contents of a directory .
329	Create a directory .
330	Load a file .
331	Create a file from a string .
332	Load a file from a stream .
333	Get the storage client .
334	Copy an object from one bucket to another .
335	Download a file .
336	Upload a file to a bucket .
337	Check if a blob exists .
338	Check if object is updated after given timestamp .
339	Delete a blob .
340	List blobs in a bucket .
341	Get the size of a file .
342	Get the CRC32C checksum of an object .
343	Get the MD5 hash of an object .
344	Create a bucket .
345	Composes multiple objects in a bucket .
346	Check if secondary training status has changed .
347	Get the secondary training status message
348	Upload a file to S3 .
349	Configure S3 resources .
350	Check if S3 URL is valid .
351	Get a botocore log client .
352	Create a training job .
353	Create a tuning job .
354	Create a transform job .
355	Create an endpoint .
356	Describe a training job .
357	Check the status of a job .
358	Check the status of a training job .
359	Execute the job .
360	Run migrations in an offline mode .
361	Run migrations in an online mode .
362	Delete an instance .
363	Creates an instance .
364	Create a table .
365	Delete a table .
366	Update a cluster .
367	Prepare Hive CLI command .
368	Prepare the hiveconf file .
369	Load data from a DataFrame .
370	Load a table from a file .
371	Get the metastore client
372	Check that the named partition exists in the table .
373	Check if a table exists .
374	Get a connection to HIVE .
375	Get results from HQL .
376	Write results to a CSV file .
377	Get records by HQL .
378	Get a pandas DataFrame from a HQL .
379	Get a connection to the API .
380	Get the API endpoint .
381	Send Dingding message .
382	Binds parameters to an operation .
383	Escape a string .
384	Convert a string field to a boolean .
385	Validate that value is of expected type .
386	Get a connection to the BigQuery service .
387	Get a BigQuery service .
388	Check if a table exists .
389	Create an empty table .
390	Patch a table .
391	Cancel the query .
392	Delete a table .
393	Upsert a table .
394	Grant view access to a dataset .
395	Get a dataset .
396	Get datasets list
397	Insert multiple rows into a table .
398	Execute a SQL operation .
399	Execute a sequence of operations .
400	Get the next page of results .
401	Query the postgres database .
402	Make intermediate directories .
403	Create a queue .
404	Send a message to a queue .
405	Run a command .
406	Remove the configuration file .
407	Main function .
408	Build the HTML header .
409	Build SVG container .
410	Build js chart
411	Create x axis
412	Create a new y axis
413	Get a sqlite3 connection .
414	Decorator for logging actions .
415	A view decorator that gzips the response .
416	Get the last DagRun for a given DAG .
417	Create a DAG run .
418	Send the message to SQS
419	Create a JSON response .
420	Open a file or file - like object .
421	Make a cache key .
422	Get VideoIntelligenceServiceClient .
423	Annotate a video .
424	Get Opsgenie API Key
425	Get a connection object .
426	Execute an alert .
427	Build the opsgenie payload
428	Execute the hook .
429	Get the connection object .
430	Runs a query .
431	Check the status of a query execution
432	Poll query status .
433	Return a pysftp . Connection object .
434	Handle rate limit exception .
435	Call a zendesk API .
436	Get partitions from a table .
437	Get a table
438	Get the location of a table .
439	Get the status of a cluster .
440	Deletes a cluster .
441	Describe cluster snapshots
442	Restores a cluster from a snapshot .
443	Create a cluster snapshot .
444	Execute the API call .
445	Create a job flow .
446	Filter for file size .
447	Filter result for ignored extensions .
448	Execute the pipeline .
449	Get a pool by name .
450	Create a pool .
451	Delete a pool .
452	Convert a Python dictionary to a Protobuf object .
453	Wait for an operation to complete .
454	Get an operation .
455	Append a label to a cluster protobuf .
456	Create a cluster .
457	Get a cluster by name .
458	Get the webhook endpoint .
459	Build discord payload .
460	Execute the webhook .
461	Encrypt plaintext .
462	Import a table .
463	Import a query into a directory .
464	Export a table .
465	Get the text to speech client .
466	Synthesize speech .
467	Close the logger .
468	Returns a list of init containers
469	Get the environment variables needed to run the worker .
470	Return a list of worker secrets .
471	Get the security context for the worker .
472	Get extra links for a given operator .
473	Heartbeat the job .
474	Launch a new process .
475	Start the process .
476	Wait for the process to finish .
477	Exit gracefully .
478	Update import errors .
479	Process task instances .
480	Change the state of a task instance without a dagrun .
481	Given a list of states and a session return a mapping between task IDs and task counts .
482	Change the state of a list of executable task instances .
483	Enqueue tasks with queued state
484	Execute task instances .
485	Change the state of tasks that failed to execute .
486	Process executor events .
487	Process a single file .
488	Update counters .
489	Manage the state of the executor .
490	Get a run for this dag .
491	Return a dictionary of task instances for a dag run .
492	Execute tasks for run dates .
493	Set all unfinished dag runs to FAILED .
494	Execute the job .
495	Called when a heartbeat is received .
496	Get a client for the given project .
497	Get an instance .
498	Apply a function to an instance .
499	Create an instance .
500	Update an instance .
501	Delete an instance .
502	Get a database .
503	Create a database .
504	Updates a database .
505	Delete a database .
506	Pokes for this attachment .
507	Prepares additional parameters to be sent to the API .
508	Get a connection to the cluster .
509	Check if a table exists .
510	Check if a record exists .
511	Build the command to track driver status .
512	Submit a Spark job .
513	Process a Spark submit log .
514	Process the driver status log .
515	Get the task runner for a local task job .
516	Wait for a task to finish .
517	Query the MySQL database .
518	Configure a CSV file .
519	Write local schema file .
520	Get a dictionary of column types from the schema .
521	Map mysql type to string .
522	Execute the command .
523	Apply lineage .
524	Return the extra data as a dictionary
525	Return a list of dates between start_date and end_date .
526	Scale time units .
527	Return the number of days ago .
528	Initialize a role .
529	Delete a role .
530	Get the user s roles .
531	Returns a set of all permissions views for this user .
532	Check if user has a role .
533	Returns True if the user has the given permission .
534	Delete faulty permissions
535	Merge permission view menu .
536	Update the permissions of the admin role .
537	Sync permissions for a DAG view .
538	Create perm for global logical dag
539	Get Fernet object .
540	Check the partition of the table .
541	Get the AWS Glue catalog hook .
542	Receive messages from SQS
543	Get connection to hdfs .
544	Get a connection to the namenode .
545	Check if a path exists .
546	Upload a file to HDFS .
547	Get the connection to the pinot broker
548	Get the URI for this connection .
549	Convert a date to a dictionary .
550	Convert a time to a dictionary .
551	Get redis connection object
552	Get a pandas DataFrame from the database .
553	Execute a SQL statement .
554	Set connection autocommit .
555	Insert rows into a table .
556	Serialize a cell .
557	Get the scheduler status
558	Get extra links
559	Get a cloudant connection .
560	Execute the hook .
561	Get credentials .
562	Create an authorized http object .
563	Decorate a function to catch HTTP exceptions .
564	Decorator to fall back to the default project_id .
565	List of unfinished tasks .
566	Prepare Spark SQL command .
567	Convert PIL Image or ndarray to torch tensor .
568	Normalize a tensor .
569	Resize an image .
570	Pad an image with padding .
571	Crop an image .
572	Return a resized version of an image .
573	Flip image horizontally .
574	Compute the perspective of an image .
575	Flip a PIL Image .
576	Crops an image to a specified size .
577	Adjust brightness of an image .
578	Adjust contrast of an image .
579	Adjust the saturation of an image .
580	Adjusts the hue of an image .
581	Apply a gamma correction to an image .
582	Rotate an image .
583	Apply affine transformation to an image .
584	Convert PIL Image to grayscale .
585	Save a tensor to a file .
586	Find all classes in dir .
587	Read an image file .
588	Read info file .
589	Read matches file .
590	Compute the accuracy of the given output .
591	Set up the print function for a distributed environment .
592	Download a file .
593	List all directories under root .
594	List files in a directory .
595	Download a file from Google Drive .
596	Generate random parameters
597	Generate random parameters
598	Get random parameters .
599	Generate random parameters .
600	Generate random parameters .
601	Download images from Flickr .
602	Download images and save as torch files
603	Download files and save as torch files
604	Get the current theme name .
605	Run searx autocomplete
606	Render preferences page
607	Return a list of available themes
608	Check if the current query is a bang query
609	Parse a response from DuckDuck .
610	Custom gradient .
611	Multivariate Normal diagnostic .
612	r Compute the Eight Schools joint log probabilities .
613	Benchmark Eight Schools HMC .
614	A decorator to expand the docstring of a function .
615	Return a simple name for a distribution .
616	Build a random variable with a custom distribution .
617	Return a random variable of the given distribution .
618	Create a random variable for distribution .
619	One step predictive model .
620	Compute the latent state posterior at each timestep .
621	Return the maximum value of x .
622	Assert that x is finite .
623	Assert that x is at most rank rank .
624	Calculate the size of an event .
625	Perform a one - hot evaluation .
626	Get the convert - to - function for a given identifier .
627	Returns the size of a mixture of components .
628	Get the next interceptor .
629	Decorate a function with an interceptor .
630	Record execution to a tape .
631	Generate random logistic data .
632	Visualize decision .
633	Builds the input pipeline .
634	Checks that map_values is strictly increasing .
635	Apply a transition operator to a state .
636	Call fn with args .
637	Call fn with args and return the result .
638	Convert from_structure to to_structure .
639	Transform a log - probability function .
640	Perform a leapfrog step .
641	Hastings step .
642	Hamiltonian Monte Carlo simulation .
643	Sign adaptation .
644	Deserialize Keras layer configuration .
645	Convert x to a tensor .
646	Create a scale operator .
647	Generate a random walk normal function .
648	Generate a random walk uniform distribution .
649	Expand x to the event rank .
650	Returns the lower bound of the distribution .
651	Compute the cat probabilities .
652	Validate inputs and outputs .
653	Ensure TensorFlow is installed .
654	Logistic regression .
655	Covert outcomes to features and labels .
656	Cholesky covariance of x .
657	Return the standard deviation of x .
658	Variance of x .
659	Make a positive axis .
660	Squeeze x along axis .
661	Standardize x .
662	Inverse of z .
663	Semi - local linear trend transition matrix .
664	Semilocal linear trend transition noise .
665	Sample a halton sequence .
666	Generate random permutations of dimensions .
667	Get indices .
668	Base expansion size .
669	List all primes below n .
670	Machine eps .
671	Hager zhang .
672	Fix step size .
673	Perform HagerZhang line search .
674	Line search after bracketing .
675	Inner bisection search .
676	Given a value_and_gradients_function and a initial_step_size and a val_initial and a val_0 and a approximate_wolfe_threshold return the values and gradients .
677	Print a list of tensors .
678	Quadrature scheme .
679	Quadrature scheme .
680	Checks that the given param is a batch of vector .
681	Determine batch event shapes .
682	r Interpolates grid points by loc .
683	Interpolate a scale to a grid .
684	Linear operator scaling .
685	Concatenate vectors .
686	Logarithmic vector matrix .
687	Compute the logarithm of a vector .
688	Compute the vector matrix .
689	Extract log probabilities from a distribution .
690	Returns the marginalized hidden probabilities .
691	Posterior marginals .
692	Posterior mode .
693	Choose random directions across each of the input components .
694	Sample next step .
695	Helper function to call a function with a list of arguments .
696	Right pads x with zeros .
697	One step .
698	Build a trainable posterior .
699	Build a variational loss for a model .
700	Helper function to minimize a graph .
701	Compute moments of masked time series .
702	Compute the initial value of a masked time series .
703	Broadcast batch shape .
704	Construct a MultivariateNormalLinearOperator from a list of distributions .
705	Sums of distributions .
706	empirical statistics .
707	Expands trailing dimension of observed time series .
708	Canonicalize observed time series with mask .
709	Mix over posterior draws .
710	Return the range of this range .
711	Make a summary statistic for the given attribute .
712	Unify the signature of a distribution maker .
713	Resolve distribution names .
714	Get the required arguments for a function .
715	Compute KL divergence between two joint distributions .
716	Build the model .
717	Resolve a distribution graph .
718	Compute the entropy of the distribution .
719	Check that x is in the support of the distribution .
720	Create an image summary .
721	Visualize reconstruction .
722	Visualize qualitative analysis .
723	Summarize distribution parameters .
724	Summarize mean in nats and bits .
725	Construct a MultivariateNormalDiag .
726	Create a zero - state tensor .
727	Call the LSTM cell .
728	Apply convolution to inputs .
729	Generate a random sequence of samples .
730	Reconstruct the model .
731	Sample samples using static prior .
732	Sample a dynamic prior .
733	Shape of the batch .
734	The batch shape tensor .
735	Make a state space model .
736	Sample samples from the state space .
737	Given a list of bijectors compute the minimum event dimension .
738	Converts a vector size to a square matrix size .
739	Sort values in ascending or descending order .
740	Sort values along axis .
741	Apply ndtr to x .
742	Compute the NDR of x .
743	Tensorflow op for ndtri .
744	Computes the log - t distribution of x .
745	Compute the log of the asymptotic series .
746	r Efinv function .
747	Log CDF laplace .
748	Computes the joint log - probability of a text message .
749	Benchmark text messages .
750	Returns True if index_points is a multivariate Gaussian .
751	Returns the marginal distribution .
752	Get the index points for this process .
753	Make an IAF stack .
754	Perform one - step operation .
755	Bootstraps the model with the given state .
756	Outer - squared difference .
757	Calculate the value and batch jacobian of a function .
758	Prevent 2nd derivative .
759	Distributional transform .
760	Split covariance into marginals .
761	Decomposes the model into components .
762	Decompose by component .
763	Decompose forecast distribution by component .
764	Convert a dense tensor to a sparse tensor .
765	Decorate a function with an operator .
766	Return a string representation of a tensor .
767	The sample shape .
768	Returns the sample shape tensor .
769	The value of the tensor .
770	Evaluate the value .
771	numpy representation of the tensor .
772	Conjugates a prior with known scale posterior .
773	Fully connected MLP parameterized via `real_nvp_template`.
774	Uniform unit norm .
775	Log unnorm probabilities .
776	Log Normalization .
777	Return the common dtype of all arguments .
778	Implements summary statistic .
779	Broadcasts tensor_to_broadcast to target_tensors .
780	PDF at peak .
781	Calculate effective sample size .
782	Calculate the effective sample size for a single state .
783	Calculate the scale reduction for a single state .
784	Return the size of an axis .
785	Broadcast a list of states to a list of states .
786	Hermite quadrature scheme .
787	Quadrature scheme lognormal quantiles .
788	Merge two mappings .
789	Remove a field from the mapping .
790	Merge two values .
791	Convert x to a tuple .
792	Left - doubling increments .
793	Find the index of the best interval .
794	Compute the bounds of the doubling procedure .
795	Sample with shrinkage .
796	Create a slice sampler for one dimension .
797	Create a setter for a random variable value .
798	Create a function that returns the log - probability of a random variable in the model .
799	Get the inputs for a function .
800	Conv layer .
801	Build the tree .
802	Decorate a function to check for None gradients .
803	Check if there is no u turn .
804	Implementation of Leapfrog .
805	Returns the log joint of current_target_log_prob and current_momentum .
806	Random bernoulli distribution .
807	Create a default location scale function .
808	Creates a default mean field normal distribution .
809	Default multivariate normal function .
810	Deserialize a function .
811	Serialize a function .
812	Broadcast a nested structure .
813	Convert a nested structure to a tensor .
814	Convert args to a tensor .
815	Call a function .
816	Return a dictionary of tensor - like attributes .
817	Make a mixture prior .
818	Pack images into a batch .
819	Download filename to directory .
820	Builds fake input functions .
821	Validate block sizes .
822	Check that flat_xs does not broadcast .
823	Multivariate Normal Trail .
824	Bernoulli layer .
825	Normal distribution .
826	Poisson distribution .
827	The Euler method .
828	Returns a list of drifts .
829	Compute log acceptance correction .
830	Call the given volatility function with the given state .
831	Broadcast volatility parts .
832	Make an AR transition matrix .
833	Sample the shape of x .
834	Call fn with x reshape and return x .
835	Call a function and reshape the output .
836	Betainc function .
837	Flat sample distributions .
838	Allocates a bag of words .
839	Create a LDA variational model .
840	Returns a list of strings representing the topics in the vocabulary .
841	Create a dataset of new groups .
842	Builds fake input functions .
843	Builds training and eval input functions .
844	Minimize a graph .
845	Add ema control dependencies .
846	save x to fname
847	Visualize training images .
848	Load Bernoulli MNIST dataset .
849	Convert dtype to numpy dtype .
850	Return the base dtype of the given dtype .
851	Return True if dtype is a boolean dtype .
852	Check if dtype is complex .
853	Return the maximum value of a dtype .
854	Return the name of a dtype .
855	Return the size of a dtype .
856	Assert that all items have the same base type .
857	Assert that tensors have the same dtype .
858	Minimize an objective function .
859	Nelder - Moving One - Step
860	Given a simplex and an objective_values and a worst_index and an objective_at_reflected value replace the simplex with the reflected value .
861	Performs the expansion step .
862	Performs a contraction .
863	Shrinks a simplex towards the best vertex .
864	Replace x with replacement .
865	Check convergence of a simplex .
866	Prepare the arguments for the objective function .
867	Prepare arguments for the objective function .
868	Prepare the arguments for the objective function .
869	Evaluate an objective function multiple times .
870	Plot weight posteriors .
871	Plots a plot of the posterior samples .
872	Build fake data for MNIST .
873	Get the config for this model .
874	Create an instance from a dict .
875	Matrix multiplication .
876	Calculate the standard deviation of a statistic .
877	Assigns log_mean_exp_var to log_value .
878	Make a columnar tensor .
879	Random rademacher .
880	Generate a random Rayleigh distribution .
881	Pick a scalar condition .
882	Finish the log probability for one fiber .
883	Finish prob for one fiber .
884	Return x rotated if necessary .
885	Undo batch normalization .
886	Validate batch normalization layer .
887	Slice a single parameter .
888	Return a dictionary mapping parameter names to Tensors .
889	Apply a single step to a distribution .
890	Apply a sequence of slices to a distribution .
891	Apply slices to the original distribution .
892	Fit a model .
893	Returns convergence criteria .
894	Prepare arguments for the graph .
895	Number of columns in x .
896	Prefer static calls to original_fn .
897	Copy docstring from original_fn to new_fn .
898	Get the value of a static predicate .
899	Return the rank of a tensor .
900	Applies a case transformation to the given predicates .
901	Create a name scope .
902	Computes the mixture standard deviation .
903	Make a scale tensor .
904	Make a diagonal scale .
905	Get shapes from loc and scale .
906	Checks if the given scale is a diagonal scale .
907	Check that a scalar distribution is reparameterized .
908	Pads x with mixture dimensions .
909	Pick a scalar condition from a tensor .
910	Move a dimension from source_idx to dest_idx .
911	Check that x is non - negative integer .
912	Returns true if a and b have the same shape .
913	If x is None return x .
914	Return True if the dtype is known to be unsigned .
915	Check if the dtype is known to be signed .
916	Return the largest integer by dtype .
917	Return the smallest integer by dtype .
918	Return True if dt is an integer dtype .
919	Check the shape of a categorical event .
920	Log - combinations .
921	Rotate x by shift .
922	Picks a vector .
923	Prefer static broadcast shape .
924	Generate a new seed .
925	r Diagonal tensor .
926	Return the size of x along axis .
927	Process quadrature grid and probs .
928	Get the parent frame arguments .
929	r Expand x to a vector .
930	Create a tensor with the given dependencies .
931	Validate the rightmost_transposed_ndims .
932	Validate a permutation .
933	Return the event shape .
934	Concatenate two tensors .
935	Returns the dimensions of x .
936	Merge two tensors .
937	Return a Tensor with the same shape as x but with the specified rank .
938	Check that static and dynamic shapes match .
939	Augments the batch shape of a batch distribution .
940	Builds a single step of backward smoothing .
941	Backward smoothing update .
942	Builds a single step of Kalman filtering .
943	Linear Gaussians update .
944	Kalman transition function .
945	Builds a single step of prior mean recursion .
946	Builds a single step of prior covariance recursion .
947	Builds a kalman sample step .
948	Propagate mean .
949	Propagate a covariance to a linop .
950	Backward smoothing pass .
951	Sample n samples from the prior .
952	Computes the posterior marginals of x .
953	Creates a joint mean step .
954	Compute the joint covariances for each timestep .
955	Convert latents to observations .
956	Log Normalization .
957	Return the mode of the model .
958	Rotate samples .
959	Sample n random samples from the distribution .
960	Create a copy of a function .
961	Remove dict keys with value .
962	Recursively replace dicts with pretty dictionaries .
963	Get samples from a distribution .
964	Return True if x is a namedtuple .
965	Choose base case .
966	Return a new namedtuple with the same fields as accepted and rejected .
967	Return the sum of x .
968	Helper for value_and_gradients .
969	Call a function with the given arguments .
970	Perform a while loop .
971	Perform a trace scan .
972	Make a new setter that wraps the innermost results of a kernel .
973	Returns a function that wraps the given getter .
974	Enable store parameters in results .
975	Replace event_shape_in with event_shape_out .
976	Replace input_tensorshape with event_shape_in .
977	Check that the shape is valid .
978	Return True if any of the input tensors converged .
979	Get initial state arguments .
980	Line search step .
981	Returns a restricted version of value_and_gradients_function .
982	Update the position .
983	Check if the gradient and objective are converged .
984	Broadcast value to target .
985	Compute the harmonic number of x .
986	Default function for `exchange_proposed_fn` of `kernel`.
987	Get a field from kernel results .
988	Get the state of each replica with a proposed exchange .
989	Return the variance scale term .
990	Calculate the forward log - determinant of a bijector .
991	Given a bijector or list of bijectors return a function that transforms each bijector into a new bijector .
992	Return the inverse transform function for a bijector .
993	Perform one - step transformation .
994	Apply a where condition to a tensor .
995	Secant2 .
996	Inner function for secant2 .
997	Inner update function .
998	Update the value_and_gradients_function .
999	Perform a bracketing search .
1000	Computes the bisect of two tensors .
1001	Bisect a linearly spaced interval .
1002	Returns True iff val_1 and val_2 are finite .
1003	Returns True if val_0 satisfies wolfe .
1004	Calculate the secant of two values .
1005	Creates a step size update policy .
1006	One step integrator .
1007	Compute the log acceptance correction .
1008	One step .
1009	Return the results of the HamiltonianMonteCarloBootstrap .
1010	Bayesian ResNet layer .
1011	Resnet block .
1012	Make an encoder for a vocabulary .
1013	Constructs a decoder .
1014	Create a tfd . Dirichlet prior .
1015	Sample chain .
1016	Deep exponential family .
1017	Create a trainable positive deterministic variable .
1018	Create a trainable gamma variable .
1019	Load NIPS 2011 papers .
1020	Initialize parameters .
1021	Return the KL function for a given type .
1022	Read an image from a file .
1023	Download all sprites .
1024	Create a character .
1025	Create a sequence from a character .
1026	Create a random sequence .
1027	Create a dataset of sprites .
1028	Validate distributions .
1029	Flatten a list of kernels .
1030	Flatten a list of kernels .
1031	Build fake data .
1032	Count the number of integers in an array .
1033	Find bin edges .
1034	Create a histogram Tensor .
1035	Quantiles .
1036	Get the static dimensionality of x .
1037	Insert back along the given axis .
1038	Make axis non - negative list .
1039	Move x along axis to the flat end .
1040	Sort a tensor .
1041	Create state space models for each component .
1042	r Compute the amari alpha .
1043	Reverse the kl distribution .
1044	Jensen Shannon .
1045	Pearson function .
1046	Squared Hellinger .
1047	Triangular pearson function .
1048	Power function .
1049	Return the absolute value of log1p .
1050	Jeffreys exponentiation .
1051	Modified GAN .
1052	Dual CISZAR function .
1053	Symmetrized CISZAR function .
1054	Monte Carlo Ciszar divergence .
1055	Helper for csiszar_vimco .
1056	Raises a ValueError if the dimensions of x do not match .
1057	Batch gather with broadcast .
1058	Broadcast cat event and params .
1059	Logarithmic expectation importance sampler .
1060	Broadcast event and samples .
1061	Minimize a value and gradients .
1062	Verify that the inverse Hessian is positive definite .
1063	Update the inverse Hessian .
1064	Computes the inverse Hessian update term .
1065	Matrix multiplication right .
1066	Return the product of two tensors .
1067	Transpose a batch .
1068	Pads x to ndims with 1s .
1069	Sum x along the rightmost dimension of ndims .
1070	Computes the sqrt of x .
1071	Returns the common dtype of arg_list .
1072	Minimize a value and gradients .
1073	Get the initial state .
1074	Returns the direction of the search .
1075	Make an empty queue .
1076	Push a new vector onto the queue .
1077	Compute the PSD of x .
1078	Return True if x is larger than det_bounds .
1079	Generate a uniform correlation matrix .
1080	Rejection samples .
1081	Compute the clopper - pearson confidence interval .
1082	Estimate the volume of true volumes for a set of samples .
1083	Compute the Von Mises cdf series .
1084	Returns a cdf function that is passed to value_and_gradient .
1085	One step objective function .
1086	Minimize an objective function .
1087	Get the initial arguments for the objective function .
1088	Find the best value in a population .
1089	Checks that the distance between each member of the population is less than the supplied tolerance .
1090	Get the starting population .
1091	Perform a binary crossover .
1092	Get the mutants of a population .
1093	Generate random mixing indices .
1094	Ensure tensor or list is a list .
1095	Returns a tensor with the given tolerance .
1096	Soft thresholding .
1097	Clip a tensor by a given value .
1098	Build an input pipeline for training .
1099	Plot generated images .
1100	Convert a list of productions into a string .
1101	Call the LSTM .
1102	Compute latent code posterior .
1103	Return the integral of x .
1104	Hat integral inverse .
1105	Computes the rank of a tensor .
1106	Pin a tensor .
1107	Solves the LU problem .
1108	LU matrix inverse .
1109	Reconstructs assertions from lower_upper and perm .
1110	Solve the LU problem .
1111	Construct a sparse block - diagonal matrix .
1112	Helper function for _maybe_validate_tensor .
1113	Gradient of the negative log likelihood .
1114	Fit a sparse model .
1115	Generate a list of slices of size num_blocks .
1116	Generate a mask .
1117	Create a layer with a mask .
1118	Create input order .
1119	Create a list of degrees .
1120	Create masks from degrees .
1121	Make a masked initializer .
1122	Build the graph .
1123	Call the layer .
1124	Draw samples from a multinomial distribution .
1125	Create a zero - dimensional Multivariate Normal Diagram .
1126	Return a function that returns a MultivariateNormalDiag
1127	Convert parameters to weights .
1128	Compute the depth of a graph .
1129	Return the best order of dependencies .
1130	Flatten a distribution chain rule .
1131	Build the chain rule .
1132	Computes the variational loss .
1133	Optimal variational posterior .
1134	Build is_last_day_of_season function .
1135	Build the effects_to_residuals tensor .
1136	Builds the seasonal transition matrix .
1137	Build a tfd . MultivariateNormalDiag for a seasonal transition noise .
1138	Builds a condensed seasonal transition noise matrix .
1139	Check if observation data is empty .
1140	Validate observation data .
1141	Add this value to the scheduler .
1142	Set a checkpoint .
1143	Set the gradient clipping constant .
1144	Optimize the value .
1145	Set training summary .
1146	Set the summary for this tensor .
1147	Vel factory function
1148	Set training data .
1149	Set summary trigger .
1150	Read training and test data sets .
1151	Download news20 files .
1152	Download glove . 6B . txt file and convert to a dictionary
1153	Compile the tensor .
1154	Fit the model .
1155	Evaluate the model .
1156	Predict the values of the given features .
1157	Get MNIST dataset .
1158	Preprocess MNIST dataset .
1159	Get the end trigger .
1160	Validate optimizer .
1161	The value of the field .
1162	Call BigDl function .
1163	Call a Java function .
1164	Convert RDD to Java object .
1165	Convert Python object to Java object .
1166	Get an activation by name .
1167	Create a new instance from a numpy array .
1168	Get the label of this feature .
1169	Read a parquet file .
1170	Write a parquet file .
1171	Get an image from the image_frame .
1172	Get the image of this frame .
1173	Get the label of this image frame .
1174	Get the prediction for this image .
1175	Predicts the value at x .
1176	Fit the model .
1177	Transform the image .
1178	Save Keras model definition to file .
1179	Build Keras model .
1180	Predict the class of the given data .
1181	Set weights .
1182	Get the weights of the layer .
1183	Save tensorflow to file .
1184	Call the training function on the value .
1185	Loads a torch layer .
1186	Load Keras model .
1187	Create a new Criterion with the given jcriterion .
1188	Load weights from json file .
1189	Load an imdb dataset .
1190	Build Keras model .
1191	Get the input shape of the tensor .
1192	Get the output shape .
1193	Read MNIST dataset .
1194	Download and extract ratings .
1195	Get the bigdl jar path .
1196	Returns True if spark is below 2 . 2
1197	Export a checkpoint to a dictionary .
1198	Save a dictionary of tensors to a file .
1199	Expand a number of time steps along an axis .
1200	Precompute future symbols .
1201	Simple attention layer .
1202	Attention layer .
1203	Computes the bleu score of a corpus .
1204	Get the log file .
1205	Log the utterance .
1206	Summary gradient updates .
1207	Dump weights to Tensorboard .
1208	Read data by config .
1209	Train evaluate model from config .
1210	Interactively interact with an agent .
1211	Convert a list of labels to onehot vectors .
1212	Convert proba to onehot
1213	Create a tf . Session .
1214	Loads the model .
1215	Returns the momentum variable of the model .
1216	Update graph variables .
1217	Calculate the F1 score of a macro prediction .
1218	Process a word .
1219	Constructs a stacked CNN layer .
1220	Creates a bi - RNN .
1221	RNN layer .
1222	Stacked CNN layer .
1223	Embedding layer .
1224	CuDNN GRU .
1225	r CuDNN compatible GRU .
1226	CuDNN LSTM layer .
1227	CuDNN compatible LSTM .
1228	r CuDNN Bi - GRU layer .
1229	CuDNN LSTM layer .
1230	Wrapper for cudnn_bi_gru .
1231	Variational dropout .
1232	Build the network .
1233	Build word cnn .
1234	Build basic network .
1235	Train on batch .
1236	Predict on batch .
1237	Make a vector from a list of words .
1238	Make a vector of tag indices .
1239	Calculate BLEU score .
1240	Verify that the given URL is a S3 compatible URL .
1241	Extract certificates from PEM text .
1242	Verify certs chain .
1243	Verify signature .
1244	Verify signature chain .
1245	Return a list of JSON controls .
1246	List of ms_bot_frameworks
1247	Returns a list of telegram controls .
1248	List of alexa controls
1249	Main function .
1250	Wrap a function with a graph .
1251	Wrap a function with a Keras session .
1252	Returns the accuracy of the predictions .
1253	Calculate the accuracy of the predictions .
1254	Initialize a pre - trained model .
1255	Read data from file .
1256	Make a hello bot agent .
1257	Convert x to a unit vector .
1258	Prettify metrics .
1259	Populate settings directory .
1260	Load the model .
1261	Save the model to disk .
1262	Get training op .
1263	Search a word in the trie .
1264	Make default operation cost dictionary .
1265	Start timer .
1266	Handle a request .
1267	Act on the agent .
1268	Generate a response from a request .
1269	Handle an intent request .
1270	Handle a launch request .
1271	Handle unsupported message .
1272	Pretty print struct .
1273	elmo loss to ppl
1274	Build a Chainer from a configuration file .
1275	Interact with the model .
1276	Predict on a stream .
1277	Read a text file .
1278	Get a function from a string .
1279	Decorator for registering a metric .
1280	Get a metric by name .
1281	Create a DecayType from a string .
1282	Get the best value for a given loss .
1283	Encode a list of tokens .
1284	Read requirements . txt
1285	Computes the log - loss of the model .
1286	Export weights to hub .
1287	Show details of an item .
1288	Create an EcommerceAgent .
1289	Main function .
1290	Download a file .
1291	Untar a file .
1292	Decompresses a URL .
1293	Recursively updates a dictionary recursively .
1294	Set the md5 hash of a path .
1295	Set a query parameter .
1296	Return the alexa response
1297	Return the JSON representation of the control .
1298	Return a dict containing the details of this card .
1299	JSON representation of the control .
1300	Create a rich card for the message .
1301	Compute the F1 score of a squad .
1302	Return recall at k examples .
1303	Check if GPU exists .
1304	Parse a config property .
1305	Parse a configuration file .
1306	Expand path to absolute path .
1307	Create a component from a dictionary .
1308	Process incoming requests .
1309	Delete a conversation .
1310	Refresh expired certificates .
1311	Verify a signed request .
1312	Handle a request .
1313	Load a class from a string .
1314	Register a model class .
1315	Get a registered model .
1316	Get GLM regularization path .
1317	Create a GLM model .
1318	Create a H2OCluster object from a list of key - value pairs .
1319	Shutdown the H2O instance .
1320	Check if H2O is running
1321	Show cluster status
1322	List jobs
1323	List timezones
1324	Fill from h2ocluster .
1325	Get the metalearner parameters
1326	Try to stabilize the object .
1327	Get the summary of a column
1328	Delete a frame .
1329	List all model builders
1330	Validate model parameters .
1331	Compute model metrics .
1332	Get model metrics
1333	Delete a model .
1334	Return a tab - formatted table .
1335	Run instances .
1336	Terminate EC2 instances .
1337	Stop instances .
1338	Start instances .
1339	Reboot instances .
1340	Wait for SSH on a list of hosts .
1341	Get the full name of a method .
1342	Find function from code .
1343	Return the signature of a function as a string .
1344	Wrap text to a given number of spaces .
1345	Join the job .
1346	Train a model .
1347	Train the model .
1348	Get parameters as a dictionary .
1349	Signal handler .
1350	Wipes the output directory .
1351	Remove a sandbox directory .
1352	Scrape port from stdout .
1353	Scrape cloud size from stdout .
1354	Stop the JVM .
1355	Stop all nodes .
1356	Get the IP address of the node .
1357	Get the port of the node .
1358	Compute the roc of the model .
1359	Determine the size of the vector .
1360	H2O mean absolute error .
1361	H2O mean squared error .
1362	Computes the h2o median absolute error .
1363	Computes the H2O explained variance score .
1364	Raise H2OTypeError if var is not of expected type .
1365	Assert that v matches regex .
1366	Raises H2OValueError if the value does not satisfy the condition .
1367	Retrieve the arguments for the assert statement .
1368	Check the type of a variable .
1369	Get the name of a type .
1370	Get the source code for a lambda function .
1371	Check that a variable is of the correct type .
1372	Check if a variable is constant .
1373	Get the H2O config .
1374	Read config file .
1375	Yield candidate log files .
1376	Execute the job .
1377	Store model progress .
1378	Recalculate model parameters .
1379	Estimate the completion time based on the progress data .
1380	Guess the next poll interval .
1381	Compute progress at time t .
1382	Calculate the time at which the progress should be computed .
1383	Write txt to stdout .
1384	Compute the sizes of the widgets .
1385	Get the terminal size
1386	Set the encoding .
1387	Fit the encoder .
1388	Get a H2OFrame from the cache .
1389	Refresh the cache .
1390	Return the type of a column .
1391	Return the columns of this H2OFrame that are of the given type .
1392	Print a summary of this H2OFrame .
1393	Describe the Frame .
1394	Return a new DataFrame with rows and cols filled in .
1395	Multiply this H2OFrame with another H2OFrame .
1396	Return a list of all levels in the table .
1397	Number of levels in the tree .
1398	Set the level of this frame .
1399	Set the domain levels .
1400	Rename columns .
1401	Set column names .
1402	Set the name of a column
1403	Return True if item is in self .
1404	Compute the modulo kfold column .
1405	stratified kfold column
1406	Print the structure of the H2OFrame
1407	Return the DataFrame as a pandas DataFrame .
1408	Pop a column off the stack .
1409	Quantile function .
1410	Concatenate frames .
1411	Bind a data frame to this dataframe .
1412	Return a new H2OFrame with rows bound to this DataFrame .
1413	Split a frame into multiple frames .
1414	Create a new group by expression .
1415	Return a new H2OFrame filled with NaNs .
1416	Impute values of a column .
1417	Merge two H2O Frames .
1418	Relevel the frame .
1419	Insert missing values
1420	Return a new H2OFrame with a single variable .
1421	Corresponds to IDD Field cor
1422	Compute the distance between this H2OFrame and another H2OFrame .
1423	Return a H2OFrame with as . factor expression .
1424	Split a string by pattern .
1425	Return the number of rows and columns matching the given pattern .
1426	Create a substring expression .
1427	Return a new H2OFrame with the left - side stripped .
1428	Return the entropy of the matrix .
1429	Return a H2OFrame containing the number of valid substrings in the given path .
1430	Create a table expression .
1431	Plot a histogram of the data .
1432	Return a new H2OFrame with an isax expression .
1433	Replace the first occurrence of pattern with replacement .
1434	Convert to upper case .
1435	Perform a grep expression .
1436	Return a new H2OFrame with NA removed .
1437	Return the difference lag of the first frame .
1438	Return a new H2OFrame with is . na .
1439	Return a new H2OFrame with a minute field .
1440	Return a new H2OFrame with a run if expression .
1441	Random stratified split .
1442	Return a new H2OFrame with this frame cut .
1443	Return the maximum value of the index .
1444	Apply a function to this H2OFrame .
1445	Parse a string into a Code object .
1446	Parse a file .
1447	Move the cursor to the specified location .
1448	Unparse the text .
1449	Get the size of the model .
1450	A list of the centers of the model .
1451	The standard deviation of the centers .
1452	Connect to H2O .
1453	Make a request to H2O API .
1454	Check H2O version .
1455	Lazy import a path .
1456	Uploads a file to a file system .
1457	Imports a CSV file .
1458	Import a Hive table .
1459	Import a SQL table .
1460	Import SQL table .
1461	Parse a H2OFrame from a dictionary .
1462	Deep copy a H2OFrame .
1463	Get a H2O model .
1464	Get a single grid .
1465	Get a H2OFrame by ID
1466	Download model to POJO .
1467	Download a H2OFrame as a CSV file .
1468	Download all logs from H2O .
1469	Export a file .
1470	Convert a H2OFrame to a list
1471	Run a demo function .
1472	Load a H2O dataset .
1473	Make metrics for predictions and actuals .
1474	Put a key to a file .
1475	Upload custom metric function .
1476	Raise H2OValueError if frame_id is invalid .
1477	Get human readable bytes .
1478	Normalize a slice .
1479	Check if a slice is normalized .
1480	Predict a Pandas DataFrame .
1481	Generate predictions from a CSV file .
1482	Decorator to mark a function as deprecated .
1483	Wait for the job to finish .
1484	Return a dictionary of deep features for each model .
1485	Print a summary of the models .
1486	Show the grid search of the model .
1487	Get the hyperparameters of a particular model .
1488	Returns a dictionary of hyperparameters .
1489	Get a H2O grid
1490	Compute the F1 model .
1491	Get the importance of each component .
1492	Projects the archetypes of the given test data .
1493	Plots the scree plot of the model .
1494	Translates a name to a human readable name .
1495	Dedents text .
1496	Extract run info from a file .
1497	main script
1498	Close the session .
1499	Get the session id .
1500	Start logging .
1501	Prepare data payload .
1502	Prepare file payload .
1503	Log the start of a transaction .
1504	Logs the end of a transaction .
1505	Log a message .
1506	Process a response .
1507	Print a message .
1508	Get the H2O leaderboard for a project .
1509	Download a POJO
1510	Download the model from the leader .
1511	Fit the transformer .
1512	Apply scaling to X
1513	Inverse transform
1514	Extract true string from string content .
1515	Find node name in each line
1516	Find git hash branch .
1517	Find build timeout .
1518	Find build failure .
1519	Find build_id in each line
1520	Extracts the job build URL from a string .
1521	Grab all java messages associated with running a unit test .
1522	Save a dictionary of failed tests .
1523	Update summary file .
1524	Write summary of failed tests logs
1525	Write a Java message .
1526	Load java messages to ignore
1527	Normalizes an enum constant .
1528	Find synonyms for a word
1529	Poll the status of the job .
1530	Write the assembly to a POJO file .
1531	Fit the H2O frame .
1532	Percentile on sorted list
1533	Returns a dictionary of default parameters
1534	Returns a dictionary of actual parameter values
1535	Get the deep features of a frame
1536	Get the score history for this model .
1537	Show model details .
1538	Get variable importances
1539	Computes the residual degrees of freedom of the model .
1540	The coefficients of the model .
1541	Download a POJO .
1542	Download a model from H2O .
1543	Save model details to a JSON file .
1544	Check that y_actual and y_predicted have the same length .
1545	List of cross validation models
1546	Hybrid Gradient Boosting estimator .
1547	Demo of H2O's Deep Learning model .
1548	Displays a demonstration of H2O .
1549	Wait for a keystroke .
1550	Return the cell as a pandas DataFrame .
1551	Show the table .
1552	Start a JVM .
1553	Find h2o . jar .
1554	Yield h2o . jar paths
1555	Return the hit ratio table for this model .
1556	Create a writer for a CSV file .
1557	Convert a URI to a path .
1558	Convert path to URI .
1559	Parse a list of lines .
1560	Generate the documentation for a module .
1561	Return a list of all modules in this package .
1562	Write API documentation to directory .
1563	Write the RST file to outdir .
1564	Convert the cell values to a list .
1565	Load dictionary from file .
1566	Add a new java message .
1567	Update a message dictionary .
1568	Extract a message from a file
1569	Save dictionary to file .
1570	Print a dictionary of messages to stdout .
1571	Parse command line arguments .
1572	Print the help menu and exit .
1573	Locate all Python files in the given directory .
1574	Find magic in file .
1575	Main function .
1576	Transform a H2OFrame .
1577	Summarize failed runs
1578	Extract intermittens from collected failed tests
1579	Plot ROC curve .
1580	Return confusion matrix of the model .
1581	Check if Deep Water is available .
1582	Trims data back to a given month .
1583	Return a dictionary of endpoint groups .
1584	Update site forward .
1585	Return the data as a JSON string .
1586	Comment a user .
1587	Get credentials .
1588	Like a user .
1589	Like a hashtag .
1590	Check if user is not bot
1591	Read a list from a file .
1592	Schedule a message .
1593	Mark the message as deferred .
1594	Downloads a virtual wan s vpn gateway .
1595	Guess the service info from a path .
1596	Updates a PowerShell command .
1597	Deletes an application definition .
1598	Creates or updates an application definition .
1599	Returns the URI for the given request .
1600	Returns a connection object for the given request .
1601	Perform a request .
1602	Executes script actions on the specified HDInsight cluster .
1603	CheckFrontDoorNameAvailability .
1604	Purge deleted vaults .
1605	Get authorization server .
1606	Validate request URI .
1607	Load Azure CLI credentials .
1608	Get Azure CLI credentials .
1609	Resolve .
1610	CheckNameAvailabilityLocal .
1611	Opens the request .
1612	Sets the request timeout .
1613	Sets a request header .
1614	Get all response headers .
1615	Send the request .
1616	The status of the request .
1617	Returns the status text of the request .
1618	The response body .
1619	Sets the client certificate .
1620	Make an HTTP PUT request .
1621	Set a request header .
1622	Send a request .
1623	Return a response object .
1624	Get a readable ID from an ID name .
1625	Get the serialization name for an element .
1626	Verify face to person .
1627	Add a job .
1628	Extract properties from a minidom node .
1629	Get a list of children from a path .
1630	Find namespaces from a child node .
1631	Convert a minidom XML string to a Service Bus namespace .
1632	Convert a Service Bus XML string to a Service Bus Region object .
1633	Convert an XML string to a namespace availability response .
1634	Convert a minidom XML string to metrics .
1635	Replaces the runbook draft content .
1636	ListRecommendations .
1637	UpdateKb .
1638	GetMemberGroups .
1639	Build package from PR number .
1640	Imports data into a LRO .
1641	Publish a runbook .
1642	Renew the session lock .
1643	Replace .
1644	AddValue .
1645	Retrieves the properties of the specified storage account .
1646	Gets the storage account keys for the specified service .
1647	Regenerates storage account keys .
1648	Creates a storage account .
1649	Updates a storage account .
1650	Deletes the specified storage account .
1651	Checks availability of a storage account .
1652	Retrieves the properties of a hosted service .
1653	Creates a hosted service .
1654	Deletes a hosted service .
1655	Creates a deployment .
1656	Deletes a deployment .
1657	Swap deployment between production and development .
1658	Changes the configuration of a deployment .
1659	Updates the status of a deployment .
1660	Upgrades a deployment .
1661	Walk an upgrade domain .
1662	Reboot a role instance .
1663	Deletes the specified role instances .
1664	Checks availability of a hosted service .
1665	List certificates associated with a hosted service .
1666	Gets the certificate associated with a hosted service .
1667	Adds a certificate to a hosted service .
1668	Deletes a service certificate .
1669	Gets a management certificate .
1670	Adds a management certificate .
1671	Deletes a management certificate .
1672	Gets the properties of the specified affinity group .
1673	Creates a new affinity group .
1674	Deletes an affinity group .
1675	List subscription operations .
1676	Creates a reserved IP address .
1677	Deletes a reserved IP address .
1678	Associates a reserved IP address with a service .
1679	Disassociate a reserved IP address from a service .
1680	Gets the specified reserved IP address .
1681	Gets the specified persistent VM role .
1682	Creates a virtual machine deployment .
1683	Adds a role to a deployment .
1684	Updates a role .
1685	Deletes a role .
1686	Captures a role .
1687	Starts a role .
1688	Starts a list of roles .
1689	Restarts a role .
1690	Shut down a role .
1691	Shut down a list of roles .
1692	Adds a DNS server to a deployment .
1693	Updates a DNS server .
1694	Deletes a DNS server .
1695	List the versions of a resource extension .
1696	Replicates a VM image .
1697	Unreplicates a VM image .
1698	Shares a VM image .
1699	Creates a VM image .
1700	Deletes a VM image .
1701	List VM images .
1702	Updates a VM image .
1703	Adds an OS image .
1704	Updates an OS image .
1705	Updates an OS image .
1706	Deletes an OS image .
1707	Gets the specified data disk .
1708	Adds a data disk to a deployment .
1709	Updates a data disk .
1710	Deletes a data disk .
1711	Adds a disk .
1712	Updates a disk .
1713	Deletes a disk .
1714	Summarize for management group .
1715	Build the receiver .
1716	Fetches the next batch of messages .
1717	Renews the session lock .
1718	Creates or updates a virtual machine scale set .
1719	Convert to a single placement group .
1720	ScreenText .
1721	Create a new key .
1722	Import a key .
1723	UpdateKey .
1724	SetSecret .
1725	SetCertificateIssuer .
1726	Create an instance from a connection string .
1727	Get a subscription .
1728	List all subscriptions for a topic .
1729	Send a batch of messages .
1730	Return a sender for this handler .
1731	Return a Receiver for this entity .
1732	Get a deadletter receiver .
1733	Parse an async operation response .
1734	Perform a GET request .
1735	Perform a PUT request .
1736	Wait for an asynchronous operation to complete .
1737	Gets the status of the specified operation .
1738	Update the x - ms - version header .
1739	Build a package from Travis .
1740	GetCertificates .
1741	Returns a list of regions .
1742	List service bus namespaces .
1743	Get a service bus namespace by name .
1744	Creates a new namespace .
1745	Deletes a namespace .
1746	Checks the availability of a service bus namespace .
1747	List topics .
1748	List notification hubs .
1749	List relays .
1750	Get metrics from a queue .
1751	Get metrics rollups for a topic .
1752	Get metrics rollups notification hub .
1753	Get metrics rollups for a relay .
1754	Create a new environment .
1755	Create a virtualenv with pip installed .
1756	Creates a new server .
1757	Sets the server administrator password .
1758	Lists the servers quotas .
1759	Gets a list of events from a server .
1760	Creates a firewall rule .
1761	Updates a firewall rule .
1762	Deletes a firewall rule .
1763	List all firewall rules for a server .
1764	List service level objectives .
1765	Creates a new database .
1766	Updates a database .
1767	Delete a database .
1768	List databases .
1769	ListAgreements .
1770	Close this message handler .
1771	Close the receiver .
1772	Get session state .
1773	Set the session state .
1774	Receive a sequence of deferred messages .
1775	Merge a reservation order .
1776	Validate the challenge .
1777	Purge a table .
1778	Default error handler .
1779	Creates a queue .
1780	Deletes a queue .
1781	Retrieves a queue .
1782	Creates a topic .
1783	Gets a topic .
1784	Creates a rule .
1785	Gets a rule .
1786	List all rules in a topic .
1787	Creates a subscription .
1788	Gets a subscription .
1789	Lists all subscriptions for a topic .
1790	Sends a message to a topic .
1791	Unlocks a subscription message .
1792	Sends a batch of messages to a queue .
1793	Unlocks a message in a queue .
1794	Receive a message from a queue .
1795	Receive a subscription message .
1796	Creates an event hub .
1797	Updates an event hub .
1798	Gets an event hub .
1799	Sends a message to a hub .
1800	Adds the Content - Type header to the request .
1801	Get the authorization string for a request .
1802	Check if the token is expired .
1803	Get token from accessconstrol server .
1804	Update request URI query .
1805	Resets a service principal profile .
1806	Delete the message .
1807	Unlocks the lock .
1808	Renew the lock .
1809	Adds custom properties to the request .
1810	Return the batch body as a dictionary .
1811	GetClusterHealth .
1812	GetClusterHealthUsingPolicy .
1813	Unprovisions an application type .
1814	GetRepairTaskList .
1815	SubmitPropertyBatch .
1816	General error handler .
1817	Starts a web site network trace operation .
1818	ListSlotDifferencesSlot .
1819	Creates a new virtual machine in a VM scale set .
1820	GetByType .
1821	AddFaceFromStream .
1822	Handle redirect .
1823	Creates a new migration .
1824	PublishEvents .
1825	Moves resources from one resource group to another .
1826	Set the profile to use .
1827	ListQueryResultsForManagementGroup .
1828	Create a queue .
1829	Deletes a queue .
1830	Create a topic .
1831	Delete a topic .
1832	Creates a subscription .
1833	Create a new instance from a connection string .
1834	Get the properties of the queue .
1835	Check if the lock has expired
1836	Create a session .
1837	Create a subscription .
1838	Exports request rate by interval .
1839	Return a list of results from the queue .
1840	Bulk add tasks .
1841	Task collection thread handler .
1842	Build a configuration dictionary from the given config .
1843	Resets a user s password .
1844	Starts an environment .
1845	Create a message .
1846	Convert an XML Element to a Rule object .
1847	Convert an XML Element to a Queue object .
1848	Convert an XML Element to a Topic object .
1849	Convert an XML Element to a Subscription object .
1850	Creates a certificate .
1851	Deletes a certificate .
1852	Get client from CLI profile .
1853	Get a client from a json dictionary .
1854	Get a client from an auth file .
1855	Parse an enumeration results list .
1856	Extract properties from an XML element .
1857	Delete .
1858	Get a queue .
1859	Returns a list of QueueClient objects .
1860	Get a topic .
1861	Returns a list of all registered topics .
1862	Receive a sequence of deferred messages .
1863	Settle a list of deferred messages .
1864	Get a single site .
1865	Create a new site .
1866	Delete a site .
1867	Updates a website .
1868	Restart a site .
1869	Retrieve historical usage metrics .
1870	Get metric definitions for a website .
1871	Get the publish profile xml for a website .
1872	Get the publish profile for a website .
1873	Updates policies on the specified container registry .
1874	Creates a Cloud Service .
1875	Checks availability of a job collection .
1876	Gets a job collection .
1877	Completes a restore operation .
1878	Cancel scheduled messages .
1879	Send pending messages .
1880	Reconnect the sender .
1881	Get a certificate from a publish settings file .
1882	Load cookies from cache .
1883	Get terminal width .
1884	Get cut prefix .
1885	Print a message inplace .
1886	Format a file size .
1887	Format elapsed time .
1888	Create a progress line .
1889	Print a progress bar .
1890	Generate segment numbers for this playlist .
1891	Return a list of segments for this presentation .
1892	Wait for a task to complete .
1893	Put a segment into the queue .
1894	Add a value to a queue .
1895	Get parameters from a video stream .
1896	Extract the nonce from the redirect URL .
1897	Find vpid on a given url .
1898	Parse JSON data .
1899	Parse XML data .
1900	Parse query string .
1901	Search a dictionary for a key .
1902	Spawn a process .
1903	Yield Tag objects from html .
1904	Parse manifest .
1905	Determine the JSON encoding of a sample .
1906	Parse a JSON response .
1907	Parse XML response .
1908	Parse cookies .
1909	Parse headers .
1910	Parse query parameters .
1911	Get the message .
1912	Make a LogRecord .
1913	Login to LiveEdu account .
1914	Load a support plugin .
1915	Update the query string of a URL .
1916	Iterate over chunks of audio .
1917	Yields all arguments that require the given name .
1918	Check file output .
1919	Create a file output .
1920	Create an HTTP server .
1921	Iterate over HTTP requests .
1922	Start an HTTP server .
1923	Passthrough a stream to a player .
1924	Open a stream .
1925	Write stream to output .
1926	Read data from a stream .
1927	Handle a stream .
1928	Fetch the streams for a given plugin .
1929	Fetches the streams for a given plugin .
1930	Resolve stream name .
1931	Format a list of valid stream names .
1932	Handle a URL .
1933	Print list of installed plugins
1934	Authenticate with Twitch .
1935	Load plugins .
1936	Parse command line arguments .
1937	Setup the console .
1938	Setup HTTP session options .
1939	Load plugins .
1940	Setup HLS options .
1941	Log current OS versions .
1942	Extracts the stream ID from text .
1943	Get an iframe .
1944	Set an option .
1945	Get a specific option .
1946	Set a plugin option .
1947	Get a plugin option .
1948	Resolve a URL .
1949	Load plugins from path .
1950	Parse hours minutes seconds .
1951	Raises ValueError if string starts with string .
1952	Raises ValueError if string does not end with string .
1953	Checks if a string contains a string .
1954	Get an attribute of a value .
1955	Filter values by a function .
1956	Convert a function to a map .
1957	Validate a URL .
1958	Find an element by xpath .
1959	Return a list of elements matching xpath .
1960	Find the URL for a player .
1961	Load M3U8 data .
1962	Return the name of a supported player .
1963	Perform a login .
1964	Extract stream_id from HTML .
1965	Extract stream_info from html .
1966	Login the user .
1967	Map a function to a key .
1968	Make an API call .
1969	Start a new session .
1970	Get information about a media .
1971	Create a Crunchyroll API .
1972	Compress a string .
1973	Format a character for output .
1974	Format a string for output .
1975	Read n bytes from the stream .
1976	Return the value of this code .
1977	Return the explanation of the code .
1978	Set decode table
1979	Set the length table .
1980	Show the code in Lisp
1981	Read a tuple .
1982	Return an explanation of the bit at index .
1983	Return the value at the given index .
1984	Return the span of the given index .
1985	Return the value at the given index .
1986	Return the mnemonic for the given index .
1987	Returns the mnemonic for the given index .
1988	Compile the actions table
1989	Execute an action .
1990	Make a hex string from the stream .
1991	Process the stream .
1992	Read metablock length .
1993	Read uncompressed data .
1994	Read a block type .
1995	IMTF transform a list of values
1996	Read a prefix array .
1997	Return a monochrome color .
1998	Polychromatic colorization .
1999	Create an arrow table from a Vaex DataFrame .
2000	Mark a function as hidden .
2001	Add virtual columns for cartesian velocities .
2002	Add virtual columns proper motion2vperpendicular .
2003	Return a graphviz DOT object .
2004	Count the number of values in a column .
2005	Apply a mapping function to each row in the DataFrame .
2006	Return a VaexApp instance .
2007	Open multiple files .
2008	Create a Sample from a SAMP message .
2009	Create a DatasetAstropyTable from a Astropy table .
2010	Create a DataFrameArray from a list of arrays .
2011	Create an array from scalar values .
2012	Create a DataFrame from a pandas DataFrame .
2013	Create a DataFrame from a CSV file .
2014	Return a vaex . remote . ServerRest object .
2015	Zeldovich dataset .
2016	Concatenate a list of DataFrames .
2017	Create a virtual range .
2018	Open a dataset .
2019	Evaluate an expression .
2020	Decorate a function with a delay .
2021	Return the columns that depend on the current selection .
2022	Run a task .
2023	Sort the list .
2024	Detects Gadget file type .
2025	Clear the plot .
2026	wait for last plot to finish
2027	Open a document .
2028	Write to a file .
2029	Split and combine masks .
2030	Perform a nop operation .
2031	Compute the first value of an expression .
2032	Compute the mean of an expression .
2033	Calculate the sum of a list of expressions .
2034	Return the standard deviation of the given expression .
2035	Calculate the covariance of x and y .
2036	Calculate the minimum and maximum values of an expression .
2037	Compute the minimum value of an expression .
2038	Compute the median of a sequence of values .
2039	Create a plot widget .
2040	Count the number of HEALPix pixels in the image .
2041	Plots a healpix plot .
2042	Plot a 3D volume .
2043	Return the data type of an expression .
2044	Get the private directory for this node .
2045	Get the state of a virtual column .
2046	Set the state of this expression .
2047	Remove the virtual_meta . yaml file
2048	Write virtual_meta . yaml file
2049	Write the meta . yaml file .
2050	Returns True if any of the expressions in expressions_list are subspaces of any of the columns in dimensions .
2051	Set a variable .
2052	Evaluate a variable .
2053	Evaluate a selection mask .
2054	Convert to a dictionary .
2055	Create a copy of the DataFrame .
2056	Convert to pandas DataFrame .
2057	Convert the DataFrame to an arrow table .
2058	Convert to astropy table
2059	Add a column to the DataFrame .
2060	Rename a column .
2061	Add virtual columns to polar coordinates .
2062	Add virtual columns for cartesian velocities .
2063	Add virtual columns cartesian velocities to polar vectors .
2064	Add virtual columns polar velocities to cartesian coordinates .
2065	Add virtual columns rotation .
2066	Convert spherical coordinates to cartesian coordinates .
2067	Add virtual columns to spherical coordinates .
2068	Add a virtual column .
2069	Delete a virtual column .
2070	Add a variable .
2071	Delete a variable .
2072	Return the tail of the sequence .
2073	Print the head and tail of the table .
2074	Describes each column in the table .
2075	Print the contents of two tables .
2076	Set the current row .
2077	Returns a list of column names that should be returned .
2078	Trim the DataFrame .
2079	Take a subset of the DataFrame .
2080	Extracts a subset of the sequence .
2081	Return a random sample of self .
2082	Split this array by a fraction of elements .
2083	Split the sequence by frac
2084	Sort the Series according to a function .
2085	Materialize a DataFrame .
2086	Undo selection .
2087	Redo selection .
2088	Returns True if selection can be undone .
2089	Select the given boolean expression .
2090	Select non - missing columns .
2091	Return a copy of this Series with non - missing values removed .
2092	Select a rectangle .
2093	Select a box .
2094	Select a circle .
2095	Selects an ellipse .
2096	Select a lasso .
2097	Make a selection inverse .
2098	Set the current selection .
2099	Create a new selection .
2100	Find valid column name
2101	Return the root nodes of the expression graph .
2102	Return a graphviz dot object .
2103	Categorize a column .
2104	Encodes the values of a column in a DataFrame .
2105	Returns a Datas object with the data of the table .
2106	Return the length of the array .
2107	Stack two DataFrames together .
2108	Concatenate this DataFrame with another DataFrame .
2109	Export to HDF5 .
2110	Add a column to the DataFrame .
2111	Monkey patch a DataFrame .
2112	Register a function as a scope .
2113	Fill NaN values with value .
2114	Return the day of week of x .
2115	Day of year .
2116	Return True if x is a leap year .
2117	Return the year of x .
2118	Return the month of x .
2119	Return the month name of x .
2120	Return the day of the year .
2121	Return the day name of x .
2122	Return the week of year of x .
2123	Return the hour value of x .
2124	Return the minute of a time series .
2125	Return the second value of x .
2126	Capitalize x .
2127	Concatenate x and other into a string column .
2128	Return True if x contains pattern .
2129	Count the number of occurrences of pat in x .
2130	Find the first occurrence of sub in x .
2131	Get the string at index i .
2132	Find the index of a substring in a string .
2133	Convert a string sequence to a ColumnStringArrow .
2134	Strips leading whitespace from x .
2135	Pads x with fillchar .
2136	Return a ColumnStringArrow that repeats x times .
2137	Find the first occurrence of sub in x .
2138	Find the index of a substring within a string .
2139	Pads a string to a given width with a fillchar .
2140	Strips whitespace from x .
2141	Slice x from start to stop .
2142	Strips whitespace from x .
2143	Create a column with a string title .
2144	Return a ColumnStringArrow representing the upper bound of x .
2145	Return the autotype of arr .
2146	Return a numpy recarray representation of the object .
2147	Write properties to file .
2148	Write a comment to a file .
2149	Write a property .
2150	Iterate over properties in a file .
2151	Yield lines from a file with universal newlines .
2152	Show installed versions .
2153	Rename keyword argument .
2154	Set the FFT library .
2155	Track beats .
2156	Adjusts the harmonic component of a wavefile .
2157	Convert frames to samples .
2158	Convert samples to frames
2159	Convert time series to frames .
2160	Convert midi to note .
2161	Convert frequencies to mel
2162	Convert mels to Hz
2163	Frequencies of fft bins
2164	Calculate CQT frequencies
2165	Calculate the frequencies of mel bands
2166	Compute the A - weighting for the given frequencies .
2167	Samples a time - like array X .
2168	Samples X along a given axis .
2169	Hybrid CQT .
2170	Compute a pseudo - cqt filter .
2171	CQT filter .
2172	CQT filter using FFT
2173	Trim a stack of frequencies to a given number of bins .
2174	Compute the CQT response
2175	Calculate the early downsample count .
2176	Perform early downsampling .
2177	Calculate the cost of each step in a time series .
2178	Return a list of warping paths .
2179	Viterbi algorithm .
2180	Viterbi discriminative model .
2181	Return a transition matrix of n_states .
2182	r Transition loop .
2183	Generate a transition matrix from a probability distribution .
2184	Calculate the transition matrix for a local model .
2185	Detect onset strength profiles .
2186	r Calculate the onset strength of a spectrum .
2187	Given a list of events and a list of energy find the closest onset to the event
2188	r Calculate the onset strength of a multi - detector .
2189	Write times to a CSV file .
2190	Write a WAV file .
2191	Return a colormap based on data .
2192	Create a waveplot from a numpy array .
2193	Set the current image .
2194	Return mesh coordinates
2195	Check that axes is an instance of matplotlib . axes . Axes .
2196	Scale axes according to ax_type
2197	Compute the FFT bins for a given number of samples .
2198	Calculate the mel frequency basis
2199	Get CQT frequencies for a given number of samples .
2200	Compute the chroma of n bins .
2201	Convert a frame number to a time .
2202	Estimate the tune of a Pipette .
2203	r Piptrack function .
2204	Compute the harmonic and percussives of y .
2205	Harmonic function .
2206	Compute the percussive phase of a time series .
2207	Stretch a time series .
2208	Apply a pitch shift to a time series .
2209	Remix an audio buffer .
2210	Compute the MSE for a signal .
2211	Trim a signal .
2212	Split a signal into samples .
2213	Phase vocoder .
2214	Convert amplitude to db
2215	Compute the spectrogram of y .
2216	Harmonic - percussive separation
2217	Decomposes S into components and activations .
2218	Compute self - similarity matrix .
2219	Apply a recurrence filter to a list of recurrences .
2220	Compute the mel bands of a signal .
2221	Compute the chroma of a signal .
2222	Returns a function that returns a float window .
2223	Return a list of frequencies for a given sampling rate .
2224	r Calculate the constant frequencies of a signal .
2225	Convert an input waveform to a chroma waveform .
2226	Calculate the bandwidth of a window .
2227	Return a numpy array of window size Nx
2228	Multirate filterbank .
2229	Calculate the frequency and sample rates for a given tuning .
2230	Fills x with win_sq
2231	Compute the square sum of a window .
2232	Diagonal filter .
2233	Calculate the spectral centroid .
2234	r Spectral Rolloff function .
2235	r Spectral flatness .
2236	Compute the features of a time series .
2237	Compute zero crossing rate .
2238	Compute the chroma of a signal .
2239	Create a chroma CQT .
2240	Compute the Mel filter .
2241	Jaccard distance between two integers .
2242	Find the index of the first occurrence of a candidate in intervals_to .
2243	Match intervals between two intervals .
2244	Match two intervals .
2245	Match events between two lists of events .
2246	Compute the salience of a signal .
2247	r Harmonics interpolation .
2248	Compute the harmonic energy at a given frequency range .
2249	Compute the harmonics of a 2D array .
2250	Load a soundfile .
2251	Load audio file .
2252	Convert audio to mono .
2253	Resample audio .
2254	Compute the autocorrelated power spectrum .
2255	LPC function .
2256	Computes the sample positions of clicks .
2257	r Calculate the tone of a signal
2258	Calculate the chirp mass of a signal .
2259	Return a set of files matching the given extensions
2260	Perform a time - stretching demo .
2261	Parse command line arguments .
2262	Extracts harmonic and percussive samples from a wav file .
2263	r Calculate the beat rate for a track .
2264	Return a list of beats in ascending order
2265	Calculate beat local score
2266	Calculate the distance between each beat and the previous beat .
2267	Find the last beat in the cumscore
2268	Convert recurrence matrix to lag matrix .
2269	Convert lag matrix to recurrence matrix .
2270	Decorator to wrap the filter
2271	Subsegment data .
2272	Perform an agglomerative clustering .
2273	Enhances the image R with the given window .
2274	Detect onsets .
2275	Return the number of frames in the input data .
2276	Check that audio is valid .
2277	Validate that x is an integer .
2278	Fix length of data .
2279	Sort a 2D array along an axis .
2280	Normalize a complex number .
2281	Return True if x is greater than or equal to x .
2282	Peak pick function .
2283	Sparsifies rows of a sparse matrix .
2284	Roll a sparse matrix .
2285	Convert a numpy buffer to a float .
2286	Convert an index to a slice .
2287	Synchronize data with an index .
2288	Softmask a 2D array .
2289	Return a tiny version of x .
2290	Convert frames to video .
2291	Read the next image .
2292	Get a frame .
2293	Convert image to frames .
2294	Track progress of tasks .
2295	Run func in parallel .
2296	Flip image .
2297	Rotate an image .
2298	Clip a list of bounding boxes .
2299	Scale a bounding box by a given scale .
2300	Crops an image to the specified bounding boxes .
2301	Impad an image .
2302	Impad image to multiple of divisor .
2303	Scale a size by a given scale .
2304	Resize an image .
2305	Resize an image .
2306	Rescale an image .
2307	Register a file handler .
2308	Get the priority of a task .
2309	Dequantize an array .
2310	Show an image .
2311	Show a list of bounding boxes .
2312	Read a flow file .
2313	Write a flow to a file .
2314	Dequantize a flow .
2315	Load a state dictionary from a module .
2316	Load checkpoint from filename .
2317	Convert a dictionary of weights to CPU
2318	Save checkpoint to file .
2319	Initialize an optimizer .
2320	Initialize the logger .
2321	The current learning rate .
2322	Register a hook .
2323	Run workflow .
2324	Register training hooks .
2325	Convert a video file .
2326	Resize a video file .
2327	Cut video .
2328	Concat video files .
2329	List items from a file .
2330	Read a dictionary from a file .
2331	Create a 3x3 convolution layer .
2332	Create an object from a dictionary .
2333	Read an image .
2334	Read image from bytes .
2335	Write image to file .
2336	Convert BGR to grayscale .
2337	Convert gray to BGR .
2338	Cast an iterable of objects to a given type .
2339	Return True if seq is an instance of expected_type .
2340	Slice a list of integers
2341	Decorator to check prerequisites .
2342	Average the values in the history .
2343	Scatter input with devices .
2344	Return the value of a color .
2345	Returns the number of seconds since the last check
2346	Start the timer .
2347	The number of seconds since the timer was started .
2348	Elapsed time since last check
2349	Show a flow
2350	Convert flow to RGB .
2351	Make a color wheel
2352	Compute the accuracy of the given output .
2353	r Scatter function .
2354	Scatter inputs and kwargs .
2355	Execute the request and return the response .
2356	Return a JSON response .
2357	Return a string representation of this resource .
2358	Handle a callback .
2359	Perform multiple requests .
2360	Make a request .
2361	Start workers .
2362	Normalize an Ansible task to v2 format .
2363	Parse a YAML file into a mapping .
2364	The wheel distribution name .
2365	Return the basename of the archive .
2366	Add requirements to metadata file .
2367	Given an egginfo_path and distinfo_path return a distribution name .
2368	Create a message activity .
2369	Create a message with suggested actions .
2370	Create an attachment activity .
2371	Create a list activity .
2372	Create a new attachment .
2373	Create a trace activity .
2374	Setter for **self . _telemetry_client** attribute .
2375	Read a list of keys .
2376	Write changes to the database .
2377	Delete a list of keys .
2378	Create a StoreItem from the result
2379	Create a dict from a store item
2380	Sanitize a key .
2381	Create database and container .
2382	Get or create a database .
2383	Get or create a container .
2384	Fill in Qna event data .
2385	Get a conversation reference .
2386	Get step name .
2387	Check if a channel supports suggested actions .
2388	Check if a channel supports card actions .
2389	Get the channel id of the activity .
2390	Check if a token is an emulator token .
2391	Create a hero card attachment .
2392	Returns a list of parameters for this instruction .
2393	Return a copy of this instance mirroring its definition .
2394	Inverse the gate .
2395	Set the control value of a classical register .
2396	Return a copy of this Cpy .
2397	Return a qasmif instruction .
2398	Return a QASM instruction .
2399	Run a circuit .
2400	Execute a pass .
2401	Dump all the passes in the working list
2402	Dump the flow control passes .
2403	Factory method for creating a flow controller .
2404	Create a UBase instance .
2405	Get parameters for a single gate .
2406	Return a single - gate matrix .
2407	einsum_matmul_index is the inverse of einsum_mul_index .
2408	einsum_vecmul_index takes a list of gate indices and a number of qubits
2409	Helper function for einsum_matmul .
2410	Convert a Circuit to a DAGCircuit .
2411	Compute the exponential fit of a function .
2412	Compute oscillator fitting function .
2413	Plot a coherence measurement .
2414	Calculate the mean and standard deviation of raw_rb .
2415	Plot the results of a regression regression .
2416	Split runs on parameters .
2417	Compose a 3x3 U3 matrix .
2418	Convert YZY angles to ZYZ angles .
2419	Validate input state .
2420	Trim a PIL image .
2421	Given a list of qregs return a list of qregs .
2422	Convert a circuit to an instruction .
2423	Run the transpiler .
2424	Find the best subset of the coupling map .
2425	Create a barrier instruction .
2426	Calculate the average of counts and observables .
2427	Process a bit ID node .
2428	Process a custom unitary node .
2429	Process a gate node .
2430	Process a CNOT node .
2431	Process a measure node .
2432	Process if node .
2433	Create a dag operation .
2434	Get the duration of a channel .
2435	Get the start time of a channel .
2436	Get the stop time of a channel .
2437	Iterate over instructions in this schedule .
2438	Check that value is of expected type .
2439	Dumps additional data to a dictionary .
2440	Load additional data .
2441	Create a validation schema .
2442	Validate an instance .
2443	Decorate a method to validate the shallow schema .
2444	Serialize the model to a dictionary .
2445	Load a model from a dictionary .
2446	Fourier Transform
2447	Compute partial trace vector .
2448	Vectorize a density matrix .
2449	Devectorize a square matrix .
2450	Convert choi to rauli
2451	Chops an array so that it is less than epsilon .
2452	Return the outer product of two vectors .
2453	Compute the concurrence of a state .
2454	Calculate the Shannon entropy of a vector of points .
2455	Calculate the entropy of a state .
2456	Compute mutual information .
2457	Entanglement of formation .
2458	Compute the EOS of a qubit .
2459	Flatten a schedule .
2460	Shift a schedule .
2461	Create a new schedule component .
2462	Append a child component to a parent component .
2463	Add a U3 gate .
2464	Get the status of the backend .
2465	Start timer .
2466	Returns the estimated time remaining in seconds .
2467	Disassemble a Quil program .
2468	Computes the hamming distance between two strings .
2469	Create a quaternion from an axis rotation .
2470	Create a quaternion from Euler angles .
2471	Normalize this quaternion .
2472	Convert to a 3x3 matrix .
2473	Convert to zyz
2474	Takes a dictionary of labels and a number of labels to keep
2475	Plot histogram .
2476	Check the type of the value .
2477	Raise QiskitIndexError if index is out of range
2478	Check if a matrix is square .
2479	Check if a matrix is diagonal .
2480	Return True if op is a symmetric matrix .
2481	Check if a matrix is a hermitian matrix .
2482	Check if a matrix is positive semidefinite .
2483	Check if a matrix is an identity matrix .
2484	Check if a matrix is unitary .
2485	Convert a QuantumChannel to a QuantumChi
2486	Convert a QuantumChannel to a superop .
2487	Convert to Kraus .
2488	Convert to Chi representation .
2489	Convert to PTM .
2490	Convert to stinespring or Operator representation .
2491	Convert data to an operator .
2492	Convert an operator to a numpy array .
2493	Convert stinespring to Operator representation .
2494	Convert superop data to choi .
2495	Convert a choosed input to superop .
2496	Convert kraus data to choi .
2497	Convert Choi matrix to Kraus matrix .
2498	Convert stinespring to kraus .
2499	Convert stinespring to choi .
2500	Convert kraus to stinespring .
2501	Convert kraus tensor to superop tensor
2502	Transform from Pauli to Chi .
2503	Chi - Pauli conversion .
2504	Reravels two matrices .
2505	Transform from Pauli to PCA .
2506	Raise an error if input_dim != output_dim .
2507	Hide ticklines and labels on axis .
2508	Set the label convention
2509	Clear all data .
2510	Add a list of vectors .
2511	Add an annotation .
2512	Render the plot .
2513	Plot the front of the sphere .
2514	Show the figure .
2515	Two - qubit kak
2516	Return the top part of the layer .
2517	Return the mid string
2518	Format the bot .
2519	Return the length of the rectangle .
2520	Return a list of parameters for a label .
2521	Return a label for a box instruction .
2522	Return a latex representation of this parameter .
2523	Compile a list of circuits into a runnable qobj .
2524	Filter out deprecated warnings .
2525	Return local hardware information .
2526	Check if we have a connection .
2527	Check the status of a job .
2528	Return the constant amplitude of times .
2529	Square of a time series .
2530	Calculate the triangle of a time series .
2531	Cosine function .
2532	Fix gaussian width .
2533	Gauss - gaussian function .
2534	Compute the derivative of a Gaussian .
2535	Gaussian square function .
2536	Create a default pass manager .
2537	Default pass manager simulator .
2538	Check if a register exists .
2539	Return a copy of this Circ with the mirroring applied .
2540	Return an inverse Circuit .
2541	Append an instruction to the data .
2542	Add an instruction to the stack .
2543	Add a quantum circuit register .
2544	Check for duplicate qubits .
2545	Raises QiskitError if qargs are not valid
2546	Check that cargs are valid .
2547	Check that circuits are compatible .
2548	Return a string representation of the QASM instructions .
2549	Draw a circuit .
2550	Return the number of gate operations .
2551	The width of the image .
2552	Counts the number of operations in the instruments .
2553	Return the number of connected components .
2554	Bind parameters to the circuit .
2555	Binds the given parameter to the given value .
2556	Draw a pulse drawer .
2557	Search forward n gates .
2558	Given a list of gates and a coupling map return a list of mapped gates .
2559	Calculate the distance between gates and couplings .
2560	Calculate the score of a step .
2561	Create a DAGCircuit from a DAGCircuit .
2562	Transform a gate to a DAGNode for layout .
2563	Return a list of DAGNodes for a given edge .
2564	Run the transformer .
2565	Add a physical qubit to the coupling graph .
2566	Add an edge between two qubits .
2567	Return a subgraph of the graph .
2568	List of physical qubits .
2569	Check if the graph is connected .
2570	Compute the distance matrix
2571	Return the distance between two qubits .
2572	Transpile a list of circuits .
2573	Add a Cu1 gate .
2574	Inverse the instructions .
2575	Execute q_if instructions .
2576	Add a C if instruction .
2577	Subscribe to an event .
2578	Dispatch an event .
2579	Unsubscribe from an event .
2580	Publish an event .
2581	Initialize a quantum register .
2582	Initialize the circuit .
2583	Return the gates to uncompute .
2584	Calculate the bloch angles between two complex numbers .
2585	Perform multiplexing .
2586	Return True if value is a virtual register .
2587	Return a copy of this layout .
2588	Combine this layout into another layout .
2589	Add a Coffoli gate .
2590	Insert a new schedule component .
2591	Check if the attribute is protected .
2592	Convert a list of gates to a list of indices .
2593	Run the stochastic swap .
2594	Update a layer .
2595	Group a set of qubits into a Pauli set .
2596	Create a Pauli from a Pauli string .
2597	Initialize from boolean vectors .
2598	Return the product of p1 and p2 .
2599	Convert to operator .
2600	Convert this gate to an instruction .
2601	Update qubits z with new values .
2602	Update self . _x with x .
2603	Insert paulis into the tensor .
2604	Append paulis to the end of the list .
2605	Delete a set of qubits .
2606	Create a random number generator .
2607	Create a PauliSingle instance .
2608	Compute the outcome of a measure .
2609	Add samples to the memory .
2610	Add qasm measure .
2611	Reset the state of a qubit .
2612	Validate the initial statevector .
2613	Initialize statevector .
2614	Get the state vector .
2615	Validate that measure sampling is enabled .
2616	Run a job .
2617	Run a job .
2618	Validate the circuit .
2619	Validate the initial unitary .
2620	Initialize the unitary .
2621	Get the unitary of the operator .
2622	Run a job .
2623	Validate the configuration .
2624	Check if obj is a bit .
2625	Run the transpiler .
2626	Check if this interval overlaps with another .
2627	Shift the interval by time .
2628	Shift the timeslot by time .
2629	Get the start time of a channel .
2630	Get the stop time of a channel .
2631	Check if the timeslots are mergeable .
2632	Merge this collection with another collection .
2633	Shift the timeslots by the given time .
2634	Report an issue or comment .
2635	Process the data in rho .
2636	Plot the state of paulivec .
2637	Add a RZ - gate to the circuit .
2638	Add a CSWAP gate .
2639	Initialize the backend prop .
2640	Create the program graph .
2641	Select the next edge in the program .
2642	Select the best remaining circuit .
2643	Select the best remaining qubit for a given program .
2644	Run the transpiler .
2645	Return a list of instructions in this gate .
2646	Inverse the gate .
2647	Apply q_if to each gate .
2648	Set the value of a classical gate .
2649	Check if the matrix is unitary .
2650	Return the conjugate of the tensor .
2651	Transpose the operator .
2652	Power operator .
2653	Return the shape of this tensor .
2654	Convert an instruction to an operator .
2655	Update the output of a layer .
2656	Separate a bitstring into pieces .
2657	Format level 0 memory .
2658	Format level 1 memory .
2659	Format level 2 memory .
2660	Format counts in memory .
2661	Format a statevector .
2662	Format a unitary matrix .
2663	Decorator that ensures that the job is submitted .
2664	Submit the job .
2665	The status of the job .
2666	Return True if this interval includes lo_freq .
2667	Plot a bloch multivector
2668	Get qubit default frequencies .
2669	Get measurement lo frequencies .
2670	Run the decomposition .
2671	Plot the state of the qsphere
2672	Choose k nearest neighbors .
2673	Return the index of the kth item in lst .
2674	Plot the state of PauliVectors rho .
2675	Return a list of unique hardware backends .
2676	The operator of the node .
2677	Create a constant pulse .
2678	Create a zero pulse .
2679	Create a square pulse .
2680	Sample a sawtooth pulse .
2681	Sample a triangle pulse .
2682	Create a sinusoidal cosine pulse .
2683	Sample a sin wave .
2684	Sample a gaussian signal .
2685	Derivative of a Gaussian .
2686	Generate a gaussian square pulse .
2687	Return the distance between the x and y axes .
2688	Write the QReg node to a string .
2689	Return a backend instance .
2690	Rename a register .
2691	Remove all operations named opname .
2692	Add a QuantumRegister to the circuit .
2693	Add a classical register .
2694	Add a wire to the graph .
2695	Check that the condition is valid .
2696	Get the bits in a condition .
2697	Add a new operation node .
2698	Apply an operation back to the graph .
2699	Check that all edges map to the same register .
2700	Check that the wire map is valid .
2701	Map a condition to a new condition .
2702	Given a DAG extend it back .
2703	Composes the input circuit back into the output circuit .
2704	Check that the list of wires is correct .
2705	Given a node return the pred and succ maps .
2706	Compute the full pred and succ maps .
2707	The topological nodes in the graph .
2708	Iterate over all edges in the graph .
2709	Return a list of all the nodes in the multi - graph .
2710	Return a list of gate nodes .
2711	Return a list of named nodes .
2712	Returns a list of two - q gate nodes .
2713	Get the predecessors of a node .
2714	Returns a list of predecessors of node .
2715	Get the ancestors of a node .
2716	Return all successors of a node .
2717	Remove a node from the DAG .
2718	Remove all ancestors of node .
2719	Remove all descendants of node .
2720	Remove all non - ancestors of node .
2721	Remove all nondescendants of node .
2722	Return a list of DAGNodes representing the layers of this circuit .
2723	Create a new DAGCircuit from the current DAGCircuit .
2724	Return a list of layers in the multigraph .
2725	Return a set of gates on the same qubit .
2726	Yield nodes connected to the given wire .
2727	Count the number of operations in topological order .
2728	Return a summary of the tensor .
2729	Create a tomography basis .
2730	Pauli measurement gates .
2731	Set the tomography basis for a measurement .
2732	Process a tomography set .
2733	Create a list of tomography circuits .
2734	Return a list of tomography data .
2735	Given a dict of counts and a list of meas_qubits return a counts dict on measured qubits .
2736	Fit a tomography data to the state space
2737	Fit the least square fit to the data .
2738	Project a list of qubits onto a basis .
2739	Computes the inverse of the TOMO basis .
2740	r Calculate the wizard for a given rho
2741	Calculate wigner data .
2742	Apply meas gate to circuit .
2743	Check the status of a job .
2744	Monitor a job .
2745	Calculate the Euler angles of a unitary matrix .
2746	Simplifies the rotation of the U gate .
2747	Run enlarge with ancilla .
2748	Create a tab of qubits .
2749	Create a job history tab .
2750	Plot job history .
2751	Draw the waveform .
2752	Add a Cu3 gate .
2753	Build a bell circuit .
2754	Transpile a list of circuits .
2755	Transpile a circuit .
2756	Execute a simulation .
2757	Drive channel .
2758	Return the first control channel in the queue .
2759	Return the first measurement channel in the queue .
2760	Return the first acquire channel in the queue .
2761	Compute the input state of a state machine .
2762	Assemble a run .
2763	Unsets the QISKIT logger
2764	Plot the state of the q visualization .
2765	Process fidelity operator inputs .
2766	Input data .
2767	Pop a lexer from the stack .
2768	Push the lexer onto the stack .
2769	Run the circuit .
2770	Returns the bound method for the given instruction .
2771	Convert a acquire instruction to a QobjMeasurementOption .
2772	Convert a frame change .
2773	Convert a persistent value to a qobj model .
2774	Convert a drive instruction to a qobj model .
2775	Convert a snapshot instruction .
2776	Update pulse annotations .
2777	Return a decorator that applies a sampling function to a continuous pulse function .
2778	Return a list of backends that match the given filters .
2779	Resolve a backend name .
2780	Convert a DAG to a QuantumCircuit .
2781	Make a dictionary of observables .
2782	Update the current symtab .
2783	Verify that a bit is declared .
2784	Verify a list of expressions .
2785	Verify that obj is a gate or opaque call .
2786	Verify that a register is valid .
2787	Verify that the object is a bitlist .
2788	Find the column in the input string .
2789	Parse debug flag .
2790	Parse QASM data .
2791	Parse a string and return the AST .
2792	Parse QASM file .
2793	Add a Crz gate .
2794	Return the basis state of a bitstring .
2795	Project a state onto a state matrix .
2796	Return the purity of a state
2797	Run the program .
2798	Create a backend widget .
2799	Update backend information .
2800	Generate the jobs pending widget .
2801	Run the algorithm on a DAG .
2802	Get a backend by name .
2803	Return the shape of the bipartite graph .
2804	Given a list of bit labels return a generator yielding the name of the register and the index of the register .
2805	Truncates a float .
2806	Generate a LaTeX document .
2807	Get the maximum width of the image .
2808	Get the beamer page size
2809	Load schema from file .
2810	Get a JSON schema validator .
2811	Load schemas and validators .
2812	Validate a JSON dictionary against a schema .
2813	Format the causes of an error .
2814	The majority operator .
2815	Unmajority operator .
2816	Generate a LaTeX source for a circuit .
2817	Draw a circuit in a Matplotlib figure .
2818	Generate a random unitary operator .
2819	Generate a random density matrix .
2820	Generate a random GRU matrix .
2821	Random density function
2822	Random density of buses
2823	Returns a list of all custom unitary calls
2824	Power operator .
2825	Compute tensor contraction indices from qargs .
2826	Convert an instruction to a superoperator .
2827	Run the barrier .
2828	Convert a list of circuits into a qobj .
2829	Unroll all 3q or more gates .
2830	Run the decomposition .
2831	Define the gate .
2832	Check that value is of expected type .
2833	Check that value is of correct type .
2834	Set the absolute tolerance .
2835	Set the relative tolerance .
2836	Reshape input and output dimensions .
2837	Return a tuple of input dimensions .
2838	Return a tuple of output dimensions .
2839	Return a copy of the dataset .
2840	Power by n .
2841	Given a set of dimensions and a size check if they match .
2842	Implementation of einsum .
2843	De - deserialize the value
2844	Raise ValidationError if data is invalid .
2845	Check that value is of the correct type .
2846	Calculate the fidelity of two states .
2847	r Singular Value Decomposition
2848	Return the inverse of this snapshot .
2849	Set the label .
2850	Return True if the vector is unitary .
2851	Convert to operator .
2852	Convert the QuantumChannel to an instruction .
2853	Initialize the transformer .
2854	Sort enum for model .
2855	Patch strftime_patched .
2856	Returns a dictionary of locale data .
2857	Return a generator that yields a list of locales .
2858	Return True if all tokens are valid .
2859	Split a string into tokens .
2860	Parse a date string .
2861	Parse a time string .
2862	Return True if date_string is valid .
2863	Translates a date string .
2864	Parse a date string with a list of date formats .
2865	Get the ammo generator for this stepper .
2866	Convert a java exception to a net exception .
2867	Convert JMeter exception to HTTP status code .
2868	Read the configuration file .
2869	Compose phantom config .
2870	Get information about the pipeline .
2871	Compose STPD configuration .
2872	Log stdout stderr .
2873	Expand a time string into an integer .
2874	Read configuration options .
2875	Publish stepper info
2876	Get the stpd filename .
2877	Read cached stepper info .
2878	Write cached options to file .
2879	Make the stpd file .
2880	Create a new pipeline .
2881	Calculate the RPS at a given time .
2882	Execute a command .
2883	Decodes the monitoring data .
2884	Make points for a label .
2885	Publish a key - value pair .
2886	Count the number of codes that match a regex .
2887	Stop the pool .
2888	Feed data from StpdReader
2889	Initialize logging .
2890	Add user options .
2891	Configure the core .
2892	Graceful shutdown .
2893	Collect data from the queue .
2894	Notify listeners about aggregated data .
2895	Get a marker by type .
2896	Parse a duration string .
2897	Start the agent .
2898	Start the agent .
2899	Discover JMeter UDP port .
2900	Add JMeter components
2901	Terminate the process .
2902	Read data from tank
2903	Create a criterion from a string .
2904	Returns a list of HostConfig objects
2905	Create agent startup config file .
2906	Check disk usage .
2907	Check if memory is free .
2908	Get terminal size
2909	Get the right line .
2910	Truncates a line of text .
2911	Render the left panel .
2912	Render the screen .
2913	Add info widget .
2914	Fill a rectangle .
2915	Return the length of the given line .
2916	Create a load plan .
2917	Get the level string .
2918	Add a widget to the screen .
2919	Make a writer request .
2920	Load plugins .
2921	Get a plugin of the given type .
2922	Returns a list of plugins of the given type .
2923	Collects a file .
2924	Add an artifact file to collect .
2925	Create a temporary file .
2926	Load config files .
2927	Flush the configuration file .
2928	Get a list of options for a section .
2929	Find all sections starting with prefix .
2930	Decode stat data from a chunk of data .
2931	Get info from phantom .
2932	Installs the agent
2933	Poll for agent data .
2934	Send collected data to all listeners
2935	Detect the configuration of telegraf and monitoring .
2936	Handle data items .
2937	Decode agent data .
2938	Subscribe to channels .
2939	Run the event loop .
2940	Close the websocket connection .
2941	Make a single request .
2942	Submit an order .
2943	Get a specific order
2944	Get the position of a symbol
2945	List assets .
2946	Get an asset by symbol
2947	Create a joining subplan .
2948	Validate a dict parameter .
2949	Check that obj is a dict .
2950	Construct an event logger .
2951	Construct a JSON event logger .
2952	Load configuration from a file .
2953	Get the configuration for a repository .
2954	Format a config dictionary for GraphQL .
2955	Get a pipeline by name .
2956	Get all pipelines
2957	Get the next event from the queue .
2958	Execute a pipeline through a queue .
2959	Wait for processes to finish .
2960	Create a new Field instance .
2961	Build the execution plan .
2962	Build a pipeline .
2963	Build a sub pipeline .
2964	Return the solid named name .
2965	Construct a list of commands for publishing distributions .
2966	Release a new version .
2967	Create a PipelineContextDefinition with a default context .
2968	Create an input schema for a selector .
2969	Decorate a function as a selector .
2970	Block text .
2971	Download a file from S3 .
2972	Upload a file to S3 .
2973	Context manager for a user - code execution boundary .
2974	Create a directory .
2975	Context manager for user code execution .
2976	Create a context free log .
2977	Returns True if any of the steps succeeded .
2978	True if all steps have been skipped .
2979	Returns a dictionary of transformed values .
2980	Returns the transformed value of this execution result .
2981	The failure data for this step .
2982	A configuration dictionary with typed fields .
2983	Check if config value is a valid dataset .
2984	Check if config value is a valid table .
2985	Execute the core transform .
2986	Decorate an existing type as a DAGster type .
2987	Decorator for resource functions .
2988	Create a new event .
2989	Coalesce execution plan topological steps .
2990	Get connection parameters .
2991	Create a new connection .
2992	Create a new cursor .
2993	Close the connection .
2994	Make a model from a dict .
2995	Convert a list of dictionaries into a list of models .
2996	Create a form field .
2997	Convert value to a model instance .
2998	Apply filters to queryset .
2999	Compute NFPs uniformly .
3000	Compute the real NFPs .
3001	Compute the best set of partitions .
3002	Compute optimal number of partitions .
3003	Calculate C1 and C2 .
3004	Initialize slots .
3005	Return the number of bytes required to store this hash .
3006	Serialize this MinHash .
3007	Deserialize a LeanMinHash object .
3008	Update the hash values .
3009	Merge this MinHash with another MinHash .
3010	Union two MinHashes .
3011	Index entries .
3012	Return a list of keys matching the query .
3013	Compute the minimum hash value of a vector .
3014	Remove a key from the dictionary .
3015	Update the register with the given binary data .
3016	Count the number of non - zero values
3017	Merge this HyperLogLog with another HyperLogLog .
3018	Clear the internal state .
3019	calculate apk score
3020	Compute the mean of the k nearest neighbors .
3021	Sorts the hashtables .
3022	Return a list of keys for a given minhash .
3023	Close all open hashtables .
3024	Create a storage for ordered lists .
3025	Create a storage for unordered sets .
3026	Returns the user data for the given object
3027	Set process to CONNECT .
3028	Select a text from a list .
3029	Parse a scoped selector .
3030	Parse a statement .
3031	Parse the value .
3032	Advance one line .
3033	Parse a configurable reference .
3034	Creates a proxy for an exception with an augmented message .
3035	Convert operative config string to markdown format .
3036	Write the operative config file .
3037	Ensure that a function is wrappable .
3038	Decorate a function or class .
3039	Format a value .
3040	Clear the configuration .
3041	Binds a value to a binding key .
3042	Return the value of a bound parameter .
3043	Return True if fn_or_cls might have arg_name .
3044	Get a cached argument spec for a function .
3045	Get the names of the positional parameters of a function .
3046	Get all positional parameter names for a function .
3047	Get the default values for a function parameter .
3048	Create a new config scope .
3049	Decorator to make a function configurable .
3050	Return the operative configuration string .
3051	Parse a config file .
3052	Register a file reader .
3053	Parse config file .
3054	Parse config files and bindings .
3055	Parse a string value .
3056	Finalize the configuration .
3057	Iterate over flattened values .
3058	Iterate over ConfigurableReference objects in config .
3059	Set a constant .
3060	Create constants from enum .
3061	Return a list of selectors that match the partial selector .
3062	Get all selectors that match a partial selector .
3063	Return the minimal selector for the given selector .
3064	Build a sp search query string .
3065	Parse the Retry - After header .
3066	Validate property value .
3067	Return a property description as a dictionary .
3068	Set the value .
3069	Get thing by index .
3070	Initialize the object .
3071	Set default headers
3072	Check if host is in the list of hosts .
3073	Get a thing .
3074	Process a websocket message .
3075	Handle a POST request .
3076	Delete a thing .
3077	Start the server .
3078	Return the action description as a dictionary .
3079	Start the action .
3080	Finish the task .
3081	Return the event description as a dictionary .
3082	Get IP address .
3083	Return a sorted list of IP addresses .
3084	Set the value .
3085	Notify of an external update .
3086	Return the thing s description .
3087	Set the href prefix .
3088	Return a dictionary of property descriptions .
3089	Returns a list of action descriptions .
3090	Returns a list of event descriptions for the given event name .
3091	Add a property .
3092	Remove a property .
3093	Get the value of a property .
3094	Returns a dictionary of properties
3095	Set a property value .
3096	Get action by name and id .
3097	Add an event .
3098	Add an available event .
3099	Perform an action .
3100	Remove an action .
3101	Add an available action .
3102	Remove a subscriber .
3103	Add a subscriber to an event .
3104	Remove an event subscriber .
3105	Notify all subscribers of a property change .
3106	Notify all subscribers of an action .
3107	Notify all subscribers of an event .
3108	Annotate the model with the given annotations .
3109	Update the model .
3110	Insert rows into the database .
3111	Insert a new record .
3112	Insert a new record into the database .
3113	Build a postgres insert query .
3114	Check if a field is magical .
3115	Get the fields to insert and update .
3116	Called when a model is saved
3117	Called when a model is deleted .
3118	Returns a Case expression that evaluates to True if at least one of the given fields is None .
3119	Resolve expression in HStoreValue .
3120	Return a SQL representation of this HStore .
3121	Return a copy of this instance with the labels relabeled .
3122	Add join conditions to the query .
3123	Determine if a field is a HStoreField .
3124	Insert multiple objects into the database .
3125	Create a required HSTORE .
3126	Renames a hstore required constraint .
3127	Drop a hstore required constraint .
3128	Generate a name for a required constraint .
3129	Create the SQL statement for this index .
3130	Create a custom command .
3131	Get the database backend class .
3132	Prepare database .
3133	Prepares a value to be used in a query .
3134	Format the RETURNING clause .
3135	Return a list of SQL queries to insert into the database .
3136	Rewrite an INSERT or UPDATE query .
3137	Rewrites an INSERT or UPDATE statement .
3138	Rewrite an INSERT query that doesn t return anything .
3139	Build a list of column names for conflicts .
3140	Get a model field by name .
3141	Format field name .
3142	Format a field value .
3143	Create a hstore unique constraint .
3144	Renames a unique constraint .
3145	Drop a unique constraint .
3146	Generate a unique constraint name .
3147	Iterate over the uniqueness keys of a field .
3148	Add a condition to the query .
3149	Returns a rewritten SQL statement and a list of parameters .
3150	T distribution 95 conf level .
3151	Compute the variance between two samples .
3152	Calculate the tscore between two samples .
3153	Determine if two samples are significant .
3154	Sorts a list of roots into topological order .
3155	Generate a list of n - quarters .
3156	Play a board .
3157	Select the best child .
3158	Draw a random playout .
3159	Remove benchmarks that are not compatible with Python 2 .
3160	Expand a benchmark name .
3161	Generate a string table .
3162	Initialize benchmarks .
3163	Returns the domain of the knots .
3164	Fetch posts from channel .
3165	Parse posts .
3166	Get information about a user .
3167	Fetch all items of a given category .
3168	Fetch items from the RSS feed .
3169	Setup command parser .
3170	Fetch items from the database .
3171	Get a list of bugs .
3172	Get comments on bugs .
3173	Retrieve history of bugs .
3174	Get a list of attachments for a bug .
3175	Get a list of notes for an issue .
3176	Fetch merge requests from GitLab API .
3177	Get the notes for a merge .
3178	Get merge versions
3179	Get a list of merge requests .
3180	Merge a merge .
3181	List all versions of a merge .
3182	Merge a version .
3183	Get a list of notes for an item .
3184	List emojis for an item .
3185	List the emojis for a note .
3186	Calculate time to reset .
3187	Fetch items from GitLab
3188	Initialize the rate limit .
3189	Setup command parser .
3190	Fetch a list of messages .
3191	Return a unique identifier for a metadata .
3192	Returns the number of members in a conversation .
3193	Get information about a channel .
3194	Get information about a user .
3195	Setup command parser .
3196	Return the timestamp of the last time the item was updated .
3197	Parse a buglist from a CSV file .
3198	Parse bugs details .
3199	Parse bug activity .
3200	Logout the user .
3201	Get the XML metadata for this bug .
3202	Get bug list
3203	Get a list of bugs .
3204	Get the activity of a bug .
3205	Fetch a list of events .
3206	Fetch events for a group .
3207	Get events from a group .
3208	Get comments for an event .
3209	Get a list of RSVP events .
3210	Fetch data for a question .
3211	Fetch comments for a question .
3212	Build a question object
3213	Fetch API questions for a given path .
3214	Get HTML question .
3215	Get comments for a post .
3216	Parse a question container .
3217	Parse the answer info container of a given HTML question .
3218	Returns the number of pages in the given HTML question .
3219	Parse user info .
3220	Fetch items from Gerrit .
3221	Parse raw reviews
3222	Fetch Gerrit 28 reviews .
3223	Get the server version .
3224	Get a list of reviews from Gerrit .
3225	Retrieve the next group item .
3226	Execute a command .
3227	Execute a command from the archive .
3228	Execute a command from the remote server .
3229	Setup command parser .
3230	Fetch issue data
3231	Fetch attachments for an issue .
3232	Fetch issue messages .
3233	Fetch activities for an issue .
3234	Fetch user data
3235	Get information about a user .
3236	Issues an issue .
3237	Fetch a collection of items from an issue .
3238	Get the project url .
3239	Fetch a page of items
3240	Get groupsio subscriptions
3241	Find group id by name
3242	Perform a GET request .
3243	Setup command parser .
3244	Generate a unique UUID .
3245	Fetch items from a backend .
3246	Fetch items from archive .
3247	Find all backends in the given package .
3248	Fetch data for a given category .
3249	Fetch items from archive .
3250	Filter classified data .
3251	Parse command line arguments .
3252	Set authentication arguments
3253	Sets the arguments for the archive command .
3254	Add output arguments to the parser .
3255	Run the backend .
3256	Initialize the archive manager .
3257	Return the timestamp of the last time the item was updated .
3258	Parse a mbox file .
3259	Fetch and parse messages from a MailingList .
3260	Copy a mbox to a temporary path .
3261	Validate a message .
3262	Convert a casedict to a dict
3263	Get a message by key .
3264	Fetch a list of commits .
3265	Fetch items from the repository .
3266	Parse a git log file .
3267	Set the git path from the command line .
3268	Setup command parser .
3269	Parse the stream .
3270	Clone a repository .
3271	Count the number of objects in the repository .
3272	Determine if this repository is detached .
3273	Update the repository .
3274	Get the list of commits from the repository .
3275	Get a list of git rev - list
3276	Get the log for this repository .
3277	Show the contents of a git repository .
3278	Fetch a pack from the server .
3279	Read commits from pack file .
3280	Update references in the repository .
3281	Discover refs in the local repo .
3282	Update a git ref
3283	Execute a git command .
3284	Read the stderr of the subprocess .
3285	Execute git command .
3286	Fetch tweets for a given category .
3287	Fetch tweets for a given category
3288	Get a list of tweets .
3289	Setup command parser
3290	Fetch all items of a given category .
3291	Fetch data for a given category .
3292	Parse a hit string and return it as a dict
3293	Fetches the hits for a list of keywords .
3294	Return the updated_on timestamp of the item .
3295	Return the category of the metadata item .
3296	Fetch pull requests .
3297	Fetch repo info .
3298	Get the reactions for an issue .
3299	Get issue comment reactions
3300	Get list of issue assignees
3301	Returns a list of user data for a pull request .
3302	Get a list of commit hashes for a pull request .
3303	Get pull review comment reactions
3304	Get user by login
3305	List reactions for an issue .
3306	Fetches all issues .
3307	List pull requests for this repository .
3308	Get the repo name .
3309	Pull requested reviewers for a pull request .
3310	Get a list of commits for a pull request .
3311	Pull review comments reactions .
3312	Get information about a user .
3313	Get orgs for a user .
3314	Get the current rate limit .
3315	Return a list of rate limits for all tokens .
3316	Choose the best API token .
3317	Check if tokens need to be checked .
3318	Update the rate limit .
3319	Initialize metadata .
3320	Store data in the archive .
3321	Retrieve an entry from the archive .
3322	Create an archive .
3323	Create a hashcode for a given uri and payload .
3324	Verify archive integrity .
3325	Load metadata from database .
3326	Count the number of rows in a table .
3327	Create an archive .
3328	Remove an archive .
3329	Search for archived files .
3330	Search for archived files .
3331	Search the directory for files .
3332	Check if a file is compressed .
3333	Generate a range of months between two dates .
3334	Convert a message to a dictionary .
3335	Remove invalid XML characters .
3336	Convert an XML string to a dictionary .
3337	Parse issues from raw_json .
3338	Get issues from Redmine .
3339	Get information about an issue .
3340	Get information about a user .
3341	Make a request to Redmine .
3342	Fetch data for a given category .
3343	Fetch data from the repository .
3344	Get the contents of a repository .
3345	Map custom fields to a dictionary .
3346	Filter custom fields .
3347	Parse issues from raw page .
3348	Get a list of issues .
3349	Get issues for a given date .
3350	Get comments for an issue .
3351	Get a list of all fields .
3352	Fetch all items for a given category .
3353	Get a list of jobs
3354	Get builds for a job
3355	Parse a raw page of questions .
3356	Get a list of questions .
3357	Setup command parser .
3358	Fetches items from MediaWiki .
3359	Get the maximum date for a list of reviews .
3360	Fetch pages from reviews API
3361	Get all pages
3362	Get a list of recent changes
3363	Fetch a list of messages .
3364	Parse messages from raw JSON .
3365	Filter a message by chats .
3366	Fetches a list of updates .
3367	Fetches articles of a given category .
3368	Add offset to metadata
3369	Parse an email article .
3370	Fetch data from the remote server .
3371	Fetch article data
3372	Fetch data from remote
3373	Fetch data from the archive .
3374	Create an HTTP session .
3375	Setup rate limit handler .
3376	Sleep for rate limit .
3377	Update the rate limit .
3378	Parse a Supybot log file .
3379	Retrieve archives before a given date .
3380	List all supybot archives
3381	Parse a Supybot message .
3382	Parse a supybot timestamp .
3383	Parse a supybot message .
3384	Fetch a list of topics
3385	Parse topics page .
3386	Get a topic
3387	Post a post .
3388	Fetch all items of a given category
3389	Parse a list of tasks
3390	Parse a list of users .
3391	Get a list of all tasks on the server .
3392	Get the most recent transactions .
3393	Get a list of users with the given phids
3394	Retrieve a list of phids
3395	Call Conduit API .
3396	Generate a unique identifier for a metadata item .
3397	Parse contents summary .
3398	Returns a generator that yields the contents of the media .
3399	Retrieve historical content .
3400	Parse measurement result .
3401	Return the WFS capabilities URL .
3402	Read capabilities from a URL .
3403	Read a string .
3404	Parse the wml2 result .
3405	Build the URL .
3406	Find all elements of a complex type .
3407	Construct a schema from a list of elements .
3408	Get a URL to describe a feature type .
3409	Execute a complex input with reference
3410	List movie lists .
3411	List TV Lists .
3412	List movies .
3413	Retrieve information about a resource .
3414	List alternative titles .
3415	List credits .
3416	Retrieve a list of external IDs .
3417	List keywords .
3418	List recommendations .
3419	List release dates .
3420	List releases .
3421	Retrieve a list of translations .
3422	List similar movies .
3423	List reviews .
3424	Retrieve a list of changes .
3425	List upcoming jobs .
3426	Get the current playback status .
3427	Retrieve popular posts .
3428	Retrieve the top rated items .
3429	List account states .
3430	Create a rating .
3431	List movie credits .
3432	Retrieve a list of TV credits .
3433	Retrieve information about a credit .
3434	Get information about a TV series .
3435	Retrieve information about this account .
3436	List movies .
3437	Retrieve information about this session .
3438	Retrieve a list of movie s watchlists .
3439	Create a new token .
3440	Token validation with login .
3441	Create a new session .
3442	Create a new guest session .
3443	List rated movies .
3444	Retrieve the status of an item .
3445	Create a list .
3446	Remove an item .
3447	Clear a list .
3448	List content ratings .
3449	Retrieve a list of similar images .
3450	Get the status of the on_the_air task .
3451	Retrieve information about a series .
3452	List credits for a series .
3453	Retrieve a list of external IDs for a series .
3454	Retrieve information about a series .
3455	List credits for a series .
3456	Retrieve a list of external IDs for a series .
3457	Set attributes from a response dictionary .
3458	Retrieve a movie .
3459	Retrieve a collection of documents .
3460	Get a single tv .
3461	Retrieve information about a person .
3462	Retrieve company information .
3463	Retrieve keyword information .
3464	Retrieve a list of objects from the API .
3465	Normalize a string .
3466	Take a list of n - grams and return a list of n - grams .
3467	Return a tuple of the number of n - grams in a reference string .
3468	Compute the erfcc of x .
3469	Aligns two texts .
3470	Get all descriptors in a module .
3471	Register a JSON object .
3472	Register a device .
3473	Echo a string to a file .
3474	Return True if desc is a descriptor class .
3475	Return a JSON - serializable dict .
3476	Get the coordinate of this descriptor .
3477	Calculate the surface area of a given atom .
3478	Surface area
3479	Create a Structure from a molecule .
3480	Create a Descriptor from a JSON object .
3481	Fill missing values .
3482	Return a copy of self with missing values removed .
3483	Return a tuple of keys and values .
3484	Return a dictionary representation of the object .
3485	The name of the value .
3486	Decorator to log calls to a function .
3487	Synchronizes a function .
3488	Display a progress message .
3489	Print a message to stdout .
3490	Fail with a message .
3491	Get a temporary file name .
3492	Set a temporary file .
3493	Remove temporary files .
3494	Return the fixed path .
3495	Returns a list of parameters that can be used for the given method .
3496	Merge opt parameters .
3497	Add options to the parser .
3498	Terminate the queue .
3499	Add a task .
3500	Join all workers .
3501	Update progress bar .
3502	read S3 keys from environment
3503	read S3 keys from commandline
3504	Read S3 keys from config file .
3505	Initialize S3 keys .
3506	Connect to S3 .
3507	List buckets .
3508	Walk a directory recursively .
3509	Return a list of all files in basedir
3510	Expand a list of source files .
3511	Upload a single file .
3512	Put multiple files into a directory .
3513	Create a bucket .
3514	Update the privilege of an object
3515	Print a list of files
3516	Download a single file .
3517	Get files from a directory .
3518	Copy a single file .
3519	Copy files from source to target .
3520	Delete files from S3
3521	Return a list of relative paths in dir .
3522	Dsync files .
3523	Calculate the hash of a file .
3524	Get the MD5 hash of the file .
3525	Create a directory .
3526	Check if the remote key matches the local key
3527	Return True if path matches filter_path .
3528	Walk a directory recursively .
3529	Check if the given object is conditional .
3530	Get the privilege for a file .
3531	Lookup an object in S3 .
3532	Read a chunk of data from a file .
3533	Upload a file to S3 .
3534	Verify that the downloaded file size matches the size of the object .
3535	Write a chunk of data to a file .
3536	Copy source to target .
3537	Execute a command .
3538	Validate format .
3539	Pretty print a list of objects .
3540	List buckets .
3541	Create a bucket .
3542	Put files to S3 .
3543	Get files .
3544	s3 cat
3545	Dsync files .
3546	Copy files from source to target .
3547	Copy files from source to target .
3548	Delete files from S3 .
3549	du handler
3550	Total size handler .
3551	Match a string to a date .
3552	Return a tuple of time and value .
3553	Match a string to a delta value .
3554	Check that value is a dict .
3555	Discover gateways .
3556	Listen for incoming messages .
3557	Read a message from the hub .
3558	Push data to callbacks
3559	Get the key .
3560	Report an exception to Rollbar .
3561	Register the pyramid includeme hook .
3562	Ensure log handler exists .
3563	Get the current request object .
3564	Initialize a Rollbar instance .
3565	Decorator for a lambda function .
3566	Report a message to Rollbar .
3567	Search items by title
3568	Create the agent log .
3569	Build person data from the request .
3570	Add Lambda context data to data dict .
3571	Add request data to the payload .
3572	Check if we should include any frame locals
3573	Build request data .
3574	Build server environment data .
3575	Build payload .
3576	Main entry point .
3577	Composes chosung and jongsung .
3578	Decompose a hangul letter .
3579	Checks if a string is a hangul letter .
3580	Attaches a word to a josa .
3581	Return True if node is inside except .
3582	Return True if node is inside a lambda .
3583	Get all elements of a node .
3584	Check if a node is clobbering in except .
3585	True if node is a super node .
3586	Check if node is an error .
3587	Check if node is a default argument .
3588	Check if node is a function decorator .
3589	Return True if node is an ancestor of frame .
3590	Return the parent node of node .
3591	Decorator to store check messages .
3592	Collects the fields in a format string .
3593	Get argument from call .
3594	Return True if the node is inheriting from standard exception .
3595	Check if an exception is of the given type .
3596	Return True if node is decorated with a property decorator .
3597	Return True if func is decorated with qnames .
3598	Find a try except wrapper node .
3599	Check if node is from fallback block .
3600	Get the exception handlers for a node .
3601	Checks if a node ignores an exception .
3602	Check if a class is abstract .
3603	Safely infer a node .
3604	Infer the type of a node .
3605	Check if a function is registered in Singledispatch .
3606	Return True if the node is a postponed evaluation .
3607	Return a list of fully qualified module names .
3608	Get the absolute name of an import node .
3609	Pretty - print tree definitions .
3610	Write a graph to a file .
3611	Visit an import node .
3612	Visit an import from node .
3613	Check the position of the import .
3614	Record an import .
3615	Check imports order .
3616	Check a relative import .
3617	Add imported module to the stats
3618	Check for deprecated modules .
3619	Check that a module is preferred .
3620	Report the external dependencies .
3621	Filter the dependencies graph based on internal or not .
3622	Return a list of default options
3623	Insert default options into sys . argv .
3624	Return True if node is visible .
3625	Get the callbacks for a node .
3626	Visit a node .
3627	Check that all messages have the same checker_id .
3628	Check that the call is valid .
3629	Check that node is datetime . time .
3630	Check that open mode is valid .
3631	Handle a message .
3632	Display the messages .
3633	Get the title for a node .
3634	Set default options .
3635	Return True if node is a builtin node .
3636	Add a class node .
3637	Get the ancestors of a node .
3638	Given a class node yield all instances of that class .
3639	Extract classes from a class node .
3640	Leave a project .
3641	Add imports to the package diagram
3642	Create a class diagram for the given class .
3643	Return a list of DIA definitions
3644	Check if an owner is ignored .
3645	Return a list of nodes with similar names .
3646	Return True if the given node has no member .
3647	Return True if node has a parent of node_type .
3648	Check if name is used as a variadic variable .
3649	Return True if node has no context variable .
3650	Visit an attribute node .
3651	visit a Assign node by returning a fresh instance of it
3652	Check for uninferable calls .
3653	Handle unary operators .
3654	Return all interfaces implemented by the given node .
3655	Build a project from a list of files .
3656	Visit a package node .
3657	If node has locals_type set it will be used .
3658	Visit an assignname node .
3659	Handle assignment attribute types .
3660	Visit an import node .
3661	Visit an import from node .
3662	Determine if the given module is a standard module .
3663	Handle imported modules .
3664	Get ANSI code .
3665	Colorize a message .
3666	Register linters .
3667	Handle a message .
3668	Display a layout .
3669	Handle a message .
3670	Open a graph .
3671	Write a node .
3672	Write an edge .
3673	Check that the new format is valid .
3674	Process a non - raw string token .
3675	Visit a section .
3676	Format the evaluation section .
3677	visit a table
3678	Write a default table .
3679	Add a renamed message .
3680	Register messages from a checker .
3681	Register a message .
3682	Check that the symbol is valid .
3683	Raises InvalidMessageError if a symbol is duplicated .
3684	Raises InvalidMessageError if msgid is duplicated .
3685	Returns a list of message definitions for the given message id or symbol .
3686	Get a string representation of a message .
3687	Print the help message for a list of messages .
3688	List all messages .
3689	Load pylint extensions
3690	Return the number of CPUs on the system .
3691	Report messages stats .
3692	Fix import path .
3693	Load plugin modules .
3694	Load plugin configuration .
3695	Set an option .
3696	Register a checker .
3697	Disable all reporters .
3698	Enable Python 3 porting mode .
3699	Return a list of all registered checkers .
3700	Return a sorted list of checker names .
3701	Prepare list of needed checkers
3702	Expand a list of modules .
3703	Set the current module .
3704	Check an astroid module .
3705	Report the evaluation of the code .
3706	Show help message .
3707	Print full documentation .
3708	List messages .
3709	List checker groups .
3710	Normalize text .
3711	Get module name and frame id from node .
3712	Safely decode a line .
3713	Return True if base_name is in blacklist .
3714	Register linter plugins .
3715	Remove comments from a string .
3716	Format option value .
3717	Format a section .
3718	Format an INI file .
3719	Insert a child node at the given index .
3720	Append a child node to this node .
3721	Return the parents of this node .
3722	Format the stream .
3723	Get the content of a table .
3724	Compute the content of this node .
3725	Collect all block lines from a module node .
3726	Handle an ignored message .
3727	Register a report .
3728	Make report sections .
3729	Add stats to the stats dictionary .
3730	Get the name of the setter property .
3731	Get the name of the property of the given node .
3732	Returns True if the return value is None .
3733	Return a list of possible exc types for a node .
3734	Process a module .
3735	Process a module .
3736	Process comment tokens .
3737	Return True if stmt is from a future import .
3738	Return True if the given statement is in a for loop .
3739	Return the overridden method of a class .
3740	Get the extra info for a node .
3741	Detect global scope .
3742	Check if a variable is assigned locally .
3743	Mark a node as consumed .
3744	Visit global nodes .
3745	Detect if we are in a class scope .
3746	Check if there is a homonym in upper function scope .
3747	Check unpacking .
3748	Check class definitions .
3749	Get all packages in a directory .
3750	Install PyLint .
3751	Run install .
3752	Report similarities .
3753	Main program .
3754	Append a stream to the file .
3755	Returns a list of tuples of the form (num1 lineset1 lineset2 lineset2 .
3756	Display a list of Sims .
3757	Find common lines .
3758	Iterate over all simulated linesets .
3759	Yields tuples of the index and the stripped line .
3760	Return a dictionary mapping line numbers to lists of line numbers .
3761	Determine whether the given definition is equivalent to the given call .
3762	Check if two nodes have the same attribute .
3763	Return True if original and overridden have different default values .
3764	Return True if original and overridden have different parameters .
3765	Try to infer a call result from a node .
3766	Mark a node as accessed .
3767	Check that the class definition is valid .
3768	Check that node has consistent mro .
3769	Check that all bases inherit from the same type .
3770	Visit a FunctionDef node .
3771	Check for useless super calls .
3772	Leave a function definition .
3773	Check if the given node has slots defined .
3774	Visit a name node .
3775	Check access to members of a node .
3776	Check if this class is abstract .
3777	Check method signature .
3778	Return True if node is a mandatory method parameter .
3779	Return True if body is a raise statement .
3780	Check bad exception context .
3781	Visit a FunctionDef node .
3782	Display a report .
3783	Return True if node is a typing namedtuple .
3784	Return True if node is an enum class .
3785	Return True if node is a dataclass node .
3786	Open the linter .
3787	Visits a class definition node .
3788	Leave a class definition .
3789	Visit If node .
3790	Checks whether the given node is a boolean expression .
3791	Check docstring .
3792	Format the object .
3793	Check if a token is a trailing comma .
3794	Return True if node is an actual else block .
3795	Check if a node can be simplified .
3796	Check stop iteration inside generator .
3797	Check if an exception inherits from StopIteration .
3798	Check that the next keyword argument is an infinite iterator .
3799	Check for nested blocks .
3800	Given an astroid . Call node return a list of all types which are duplicated .
3801	Check if the given node is a mergeable type .
3802	Check if a node is a chained comparison .
3803	Return True if node is an and or ternary .
3804	Check that the given node has consistent return statements .
3805	Return True if the node is a return statement .
3806	visit a For node by returning a fresh instance of it
3807	Check if Graphviz is available .
3808	Run diadefs .
3809	Write packages in diagram .
3810	Write the classes in a diagram .
3811	Set the printer .
3812	Create a VCGPrinter and open it .
3813	Return True if this event should be emitted .
3814	Format the help message .
3815	Get environment variables .
3816	Lint a file .
3817	Run pylint in a subprocess .
3818	Return a list of all cycles in the graph .
3819	Get the source code .
3820	Generate a dot file .
3821	Format a section .
3822	Register a managed message .
3823	Disable a message .
3824	Enable a message .
3825	Get the symbol of a message .
3826	Check if a message is enabled .
3827	Add a message .
3828	Print full documentation .
3829	Print checker documentation .
3830	Return the indent length of a line .
3831	Given a list of bar positions and a bad position determine how to fix the indentation .
3832	Return the indent string for a token .
3833	Handle line start .
3834	Get the valid indentations for the given index .
3835	Return a _ContinuedIndent for a hanging bracket .
3836	Return a _ContinuedIndent for a continuation inside a bracket .
3837	Pushes a token onto the stack .
3838	Add a new line .
3839	Check for keyword parentheses .
3840	Check if there is a valid type annotation .
3841	Check for equals spacing .
3842	Check that the next token is surrounded by a space .
3843	Visit a default node .
3844	Check a single statement line .
3845	Check the lines .
3846	Check indentation level .
3847	Return True if the node is in the iterator part of the comprehension .
3848	Return True if node is a conditional import .
3849	Visit a name node .
3850	visit a Subscript node by returning a fresh instance of it
3851	Visit an attribute .
3852	Visitor for ExceptHandler AST node .
3853	Visit a Raise node by returning a fresh instance of it .
3854	Find a pylintrc file in the current directory .
3855	Validate a value .
3856	Expand the default value of an option .
3857	Match a long option .
3858	Register options provider .
3859	Set provider option .
3860	Set a global option .
3861	Generate configuration file .
3862	Load config file
3863	Load configuration from command line options .
3864	Add a help section .
3865	Print the help message .
3866	Load default options
3867	Return the attribute name for an option .
3868	Get the definition of an option .
3869	Yields a list of options grouped by section .
3870	Return True if func is a method call .
3871	Check if a node is a complex format string .
3872	Visit a module .
3873	Visit an import from node .
3874	Visit an import node .
3875	Visit a Call node .
3876	Check that the format string is valid .
3877	Return True if node is in a loop .
3878	Get the parent of a break loop node .
3879	Check if loop exits early .
3880	Return a tuple of property classes and property names .
3881	Determine the name type of a function .
3882	Report by type stats .
3883	Return True if the node is redefined by a decorator .
3884	Return True if call is a one - arg call .
3885	Check if node is a starred assignment .
3886	Check for nonlocal and global variables .
3887	visit a Call node by returning a fresh instance of it
3888	Check for useless else on loop .
3889	Check if node is in loop .
3890	Open the linter .
3891	Handle pointless string expressions .
3892	Visit a lambda node .
3893	Fail if the test is a tuple .
3894	Check for duplicate keys in a dict .
3895	Check for unreachable statements .
3896	Check that node is not in try ... finally block .
3897	Check that the sequence is reversed .
3898	Check the name of an assignment .
3899	Check the name of a node .
3900	Check the docstring of a node .
3901	Check that the literal is a constant .
3902	Create a subgraph .
3903	Parse a subgraph .
3904	Visit a module .
3905	Add a checker .
3906	Visit an AST node .
3907	Add a relationship between two objects .
3908	Get a relationship by type .
3909	Return a sorted list of attribute names .
3910	Return a sorted list of all methods in the given node .
3911	Add an object to the diagram .
3912	Return a list of all class names in nodes .
3913	Return a list of all classes in this object .
3914	Return the class with the given name .
3915	Return a list of all modules in this node .
3916	Return the module with the given name .
3917	Get a module by name .
3918	Add from_module to node .
3919	Delete the grant .
3920	Return a query for this model .
3921	Get a user by username and password .
3922	Get a user by access token or refresh token .
3923	Set a token .
3924	Set a grant .
3925	Get a client by code .
3926	Prepare a request .
3927	Initialize the application .
3928	Register a remote application .
3929	Make a request .
3930	Authorize the user .
3931	Handle OAuth1 response .
3932	Handle OAuth2 response .
3933	Handle an authorized response .
3934	Decorate a function to return an authorized response .
3935	Hash a token .
3936	Make a client with a given token .
3937	Create an OAuth client .
3938	Set OAUTHLIB_INSECURE_TRANSPORT environment variable .
3939	Confirm authorization request .
3940	Decorator to create a request token response .
3941	Get client secret .
3942	Get request token secret .
3943	Get access token secret .
3944	Get the default realms for a given client .
3945	Get realms of a token .
3946	Get redirect uri from request token .
3947	Get the RSA key .
3948	Validate client key .
3949	Validate request token .
3950	Validate access token .
3951	Validate timestamp and nonce .
3952	Validate redirect_uri .
3953	Validate realms .
3954	Validate verifier .
3955	Verify request token .
3956	Verify realms .
3957	Save access token .
3958	Save a request token .
3959	Save a verifier .
3960	Get the error URI for this provider .
3961	Confirm an authorization request .
3962	Verify a request .
3963	Extract client credentials from request .
3964	Check if client authentication is required .
3965	Authenticate client .
3966	Authenticate client id .
3967	Get the original scopes of the token .
3968	Confirm scopes .
3969	Get the default redirect URI .
3970	Get the default scopes for a client .
3971	Invalidate an authorization code .
3972	Save authorization code .
3973	Save bearer token .
3974	Validate a bearer token .
3975	Validate client ID .
3976	Validate code .
3977	Validate grant type .
3978	Validate a refresh token .
3979	Validate response type .
3980	Validate scopes .
3981	Validate a user .
3982	Revoke a token .
3983	Update QQ API request data .
3984	Convert dictionary keys to string
3985	Change the authorization header .
3986	Register a remote app .
3987	Create a remote app .
3988	Extract parameters from the request .
3989	Convert text to bytes .
3990	Base64 decode text .
3991	Create a response object .
3992	Return a list of cached OAuth clients .
3993	Add a remote application .
3994	Add a remote application .
3995	Check if certificate raises an exception .
3996	Verify that the certificate is valid .
3997	Check the load_privatekey callback .
3998	Check the load_privatekey callback .
3999	Check that the private key is valid .
4000	Get revoked certificates .
4001	Check that the X509 certificate has been revoked .
4002	Create a certificate request .
4003	Create a new certificate .
4004	Decorator to make a function requires a flag .
4005	Load certificates from a CA file .
4006	Set the password callback .
4007	Use a certificate chain file .
4008	Use a certificate file .
4009	Use a certificate .
4010	Add an extra chain certificate .
4011	Use a private key file .
4012	Use a private key .
4013	Load client CA file .
4014	Set the depth of SSL verification .
4015	Load a temporary DH file .
4016	Set the cipher list .
4017	Set the client CA list .
4018	Add a certificate authority to the SSL context .
4019	Set the server name callback .
4020	Set the use of SRTP profiles .
4021	Set the NPN Select callback .
4022	Set the list of alpn protocols .
4023	Set the ALPN select callback .
4024	Set the OCSP callback .
4025	Set the OCSP server callback .
4026	Set the OCSP client callback .
4027	Set the SSL context .
4028	Get the server name .
4029	Set the name of the TXT record .
4030	Receive data from the socket .
4031	Read data from the socket .
4032	Read data from the SSL BIO .
4033	Renegotiates the SSL handshake .
4034	Shutdown the SSL connection .
4035	Return a list of cipher names .
4036	Return a list of client CA names .
4037	Set the shutdown state .
4038	Get random bytes from the SSL session .
4039	Return a random client random string .
4040	Get the master key .
4041	Export a keying material .
4042	Get the SSL session .
4043	Get the current cipher name .
4044	Get the current cipher bits .
4045	Get the current cipher version .
4046	Get the protocol version name .
4047	Get the next protocol negotiation message .
4048	Set the list of alpn protocols .
4049	Get the alpn protocol negotiated message .
4050	Create a new memory buffer .
4051	Convert a BIO to a string .
4052	Set an ASN . 1 time boundary .
4053	Get an ASN1_TIME from a string .
4054	Get an elliptic curve by name .
4055	Dump a public key .
4056	Load a public key .
4057	Sign data with a private key .
4058	Verify a signature .
4059	Dump an X509 CRL .
4060	Return a cryptography key .
4061	Generate a RSA key .
4062	Check the key .
4063	Load all elliptic curves .
4064	Load elliptic curves from lib .
4065	Convert this curve to an EC key .
4066	DER encoded X509 name .
4067	Get the components of this name .
4068	Get the short name of the object .
4069	Get the data of the extension .
4070	Return a cryptography CSR object .
4071	Set the public key .
4072	Get public key .
4073	Return the X509Name object for this request .
4074	Add a list of extensions to this X509Request .
4075	Return a list of X509Extensions .
4076	Verify the signature of a private key .
4077	Convert this certificate to a cryptography object .
4078	Set the certificate version .
4079	Get public key .
4080	Set the public key .
4081	Sign a key with a digest .
4082	Get signature algorithm .
4083	Return the digest of the given name .
4084	Set the serial number .
4085	Get the serial number of the certificate .
4086	Adjust the notAfter time of the certificate .
4087	Adjust the notBefore date of the certificate .
4088	Check if the session has expired .
4089	Get the issuer name .
4090	Set the issuer name .
4091	Get the subject name .
4092	Set the subject name .
4093	Add multiple extensions to the certificate .
4094	Return the extension at the given index .
4095	Add a certificate to the store .
4096	Add a CRL to the store .
4097	Set the time the certificate was issued .
4098	Initialize the store context .
4099	Return the X509StoreContextError object associated with this store context .
4100	Verify certificate .
4101	Set the serial number .
4102	Get the serial number .
4103	Set the CRL reason .
4104	Get CRL reason .
4105	Set the revocation date .
4106	Return a cryptography . cryptography . x509 . CertificateRevocationList
4107	Return a list of revoked certificates .
4108	Get the issuer of the CRL .
4109	Sign the CRL .
4110	Export a certificate to the CRL .
4111	Return the type name of the object .
4112	Set the CA certificates .
4113	Export certificate to PKCS12 .
4114	Sign a key with a digest .
4115	Verify a private key .
4116	Base64 encode the SPKI .
4117	Get the public key .
4118	Set the public key .
4119	Raise exception from error queue .
4120	Convert an object to bytes .
4121	Factory for printing tokens .
4122	Get service metadata .
4123	Get all issues for this board .
4124	Get annotations for a card
4125	Get a list of boards
4126	Get a list of lists for a board .
4127	List cards .
4128	Get comments for a card .
4129	Build the API url .
4130	Return a list of results from github .
4131	Convert a field to a dictionary .
4132	Get issues by query .
4133	Get pull requests for a tag .
4134	Aggregate remote issues .
4135	Get config value or default .
4136	Returns a dictionary of templates for this task .
4137	Validate the service configuration .
4138	Determine if an issue should be included .
4139	Make a table .
4140	Evaluate an oracle command
4141	Get a configuration option as an integer .
4142	Pull issues from taskwarrior .
4143	Get data from a URL .
4144	Get a collection of values
4145	Find the local uuid for the given issue .
4146	Merge two fields into one .
4147	Given a list of targets return a dictionary of UDAS config overrides .
4148	Parse sprint string .
4149	Get credentials .
4150	Multi - rouge n
4151	Calculate pValues for a set of genes
4152	r FDR correction .
4153	Compute the z - score of a 2D array .
4154	Heatmap a DataFrame .
4155	Adjust spine positions
4156	Prepare an argparse ArgumentParser object .
4157	Add prerank command line parser .
4158	Add command line options to a subparser .
4159	Add command line parser for Enrichr .
4160	Compute the enrichment score of a gene list .
4161	Compute the ranking metric tensor .
4162	Compute ranking metric .
4163	Compute the GSEA p - value
4164	Compute the significance of the enrichment scores .
4165	Returns a pandas DataFrame with the names and descriptions of the marts .
4166	Returns a pandas DataFrame of all datasets .
4167	Get the attributes of a dataset .
4168	Get the filters for a dataset .
4169	Query BioMart .
4170	Run GSEA .
4171	Single Sample GSEA
4172	Run Prerank .
4173	Run a GSEA replot .
4174	Set CPU cores
4175	Load gene sets from a GTF file .
4176	Get library names
4177	Download and generate Enrichr library gene sets .
4178	Calculate heatmat
4179	Save results to file .
4180	Load data from file .
4181	Run the analysis .
4182	Run GSEA .
4183	Run a sample permuation .
4184	Run ssgsea for gct expression matrix
4185	Save the results on samples .
4186	Main entry point .
4187	Run Enrichr .
4188	Parse gene sets .
4189	Parse gene list .
4190	Send a list of genes
4191	Check that the gene list is valid .
4192	Get background genes
4193	Run Enrichr
4194	Create a cube filter script .
4195	Write an Iosphere filter script .
4196	Create a torus filter
4197	Computes the edges of a plane .
4198	Make a cube of hires
4199	Get the color values for a given color .
4200	Check if a variable is a list .
4201	Make a list of variables .
4202	Write a filter script .
4203	Generate LS3 Loop Filter XML
4204	Merge Close Vertices
4205	Create a filter to close holes .
4206	Split vertexes incident on non manifold face
4207	Write the Snap Mismatched Borders filter .
4208	Translates vertically and horizontally .
4209	Rotate a script .
4210	Scale x y z by value
4211	Function for cylindrical coordinates .
4212	vert_function(s = s - y - taper)*sin(x/(%s+y))
4213	Bends a polygon .
4214	Deform a curve .
4215	Create a texture filter
4216	Write a mesh to a file .
4217	Create a uniform mesh resampling filter
4218	Return the Poisson Surface Reconstruction XML filter .
4219	Perform voronoi analysis .
4220	Select all faces
4221	Write a video filter to a file .
4222	Write a conditional face selection filter .
4223	Write a vertex selection filter .
4224	Compute cylindrical coordinates of a cylinder .
4225	Return the spherical version of a script .
4226	Join a script with a filter .
4227	Rename a filter script .
4228	Change the current layer .
4229	Duplicate a filter script .
4230	Delete lower layer .
4231	Handle an error .
4232	Begin a filter script .
4233	Add a layer .
4234	Delete a layer .
4235	Save filters to file .
4236	Run a meshlab script .
4237	Main function .
4238	Generate Hausdorff distance filter
4239	Create a poisson disk filter
4240	Write a mesh element .
4241	Create a clustered Vertex Subsampling filter
4242	Write a flat plane filter
4243	Create a parametrization filter
4244	Voronoi Atlas filter
4245	Measure Topology
4246	Parse a topology file .
4247	Parse Hausdorff log file .
4248	Generate a per - vertex color filter
4249	Generate Voronoi filter
4250	Generate a RAINbow script .
4251	Return a string representation of an angle between two points .
4252	Computes the cross product of two vectors .
4253	Multiply a vector by a scalar .
4254	Define new per - vertex attribute
4255	Flip faces .
4256	Generate a list of point sets
4257	Generate a Taubin Smooth filter
4258	Depth Smooth filter
4259	Sort polylines of a file
4260	Measure the topology .
4261	Measure all geometries .
4262	Measure dimension .
4263	Return filename without extension .
4264	Patch request class .
4265	Return the configuration for a given upload set .
4266	Configure uploads .
4267	The configuration of this upload set .
4268	Returns the URL for the uploaded file .
4269	Get the path to a file .
4270	Check if an extension is allowed .
4271	Resolve a conflict in a folder .
4272	Get the version of vprof .
4273	Remove duplicate objects .
4274	Get the difference between two lists of objects .
4275	Format the number of objects in a dictionary .
4276	Trace memory usage .
4277	Return a list of code events .
4278	Return the total object overhead .
4279	Compute memory overhead .
4280	Profile package .
4281	Profile module .
4282	Profile function .
4283	Run the profiler .
4284	Return a set of module names from a package path .
4285	Run a function in a separate process .
4286	Get the type of a run object .
4287	Initialize module .
4288	Initialize package .
4289	Initialize the function .
4290	Replace sys . argv with self . _run_args .
4291	Sample a frame .
4292	Insert a stack into the call tree .
4293	Calculate the sample count for a node .
4294	Format a tree .
4295	Format the call tree .
4296	Return a dictionary containing information about this object .
4297	Generate a profiling module .
4298	Profile function .
4299	Transform profiling statistics into a list of tuples .
4300	Return a profile package for this object .
4301	Return the profiling module .
4302	Profile function .
4303	Initialize the database .
4304	Show a guestbook .
4305	Add a new entry .
4306	Run the profiler .
4307	Start HTTP server .
4308	Handle the root directory .
4309	Handle other files .
4310	Handle GET requests .
4311	Handle a POST request .
4312	Send a response .
4313	Check if module_path is a standard directory .
4314	Record a line event .
4315	Yields all lines without standard library .
4316	Fill the heatmap .
4317	Skip lines in source code .
4318	Return a profile package for this run .
4319	Format a heatmap file .
4320	Generate a profile module for profiling .
4321	Profile function .
4322	Run profiler configuration .
4323	Run a function .
4324	Predict probabilities of X .
4325	Predict log probabilities for X .
4326	Fit the model to Z .
4327	Count the number of documents in the vocabulary .
4328	Sort the features in a vocabulary .
4329	Limit features based on document frequencies .
4330	Fit the transformer to Z
4331	Transform the Z matrix .
4332	Convert to a scikit - scikit - model .
4333	Fit the model to a Spark DataFrame .
4334	Wrapper for spark . predict .
4335	Fit the model to Z .
4336	Fit the model to Z
4337	Fit the model to Z
4338	Returns the score of the given Z
4339	Fit the estimator .
4340	Compute the score of an estimator .
4341	Fit the KMeans model .
4342	Predict on X .
4343	Predict on X .
4344	Check if rdd is of expected dtype .
4345	Create vocabulary
4346	Fit the model .
4347	Fit the SVD to Z .
4348	Transform a RDD of SVMs .
4349	Block - collection generator .
4350	Block an iterator yielding tuples of dtypes .
4351	Block RDD .
4352	Apply a function to each RDD .
4353	Shape of this RDD .
4354	Convert this RDD to a numpy array .
4355	Apply a function to each element of the matrix .
4356	Return True if the given bit perm is set .
4357	Return True if path is only root write .
4358	Check the configuration file .
4359	Read configuration from file .
4360	Run a command as a shell .
4361	Execute a command .
4362	Execute a command over SSH .
4363	Validate the configuration .
4364	Return a copy of the default headers .
4365	Get the request body .
4366	Get the URL for the HomeAssistant .
4367	Get IFTTT URL .
4368	Return the text of a packet .
4369	Print discovery packets .
4370	Discover devices .
4371	Execute the device .
4372	Send a confirmation message .
4373	Execute a push .
4374	Execute a device .
4375	Run the scan .
4376	Convert a Transaction to a Transaction object .
4377	Find the ledger file .
4378	Install compatibility tests .
4379	Get long description from README .
4380	Create a PrecalculatedTextMeasurer from a JSON file .
4381	Return the default precalculated text measurer .
4382	Create a badge .
4383	Generate a list of supported Unicode characters .
4384	Given a list of characters and a list of encodings generate a list of encoded characters .
4385	Calculate character to length mapping .
4386	Write JSON to file .
4387	Convolve a 2D Gaussian kernel .
4388	Returns a 1D Gaussian kernel
4389	Convert image to grayscale .
4390	Main entry point for pyssim .
4391	Compute the value of the SSIM .
4392	Compute the SSIM of two images .
4393	Destroy the timer .
4394	Set the code version .
4395	Get the status of this node .
4396	Print the status of the job .
4397	Return the node associated with a connection .
4398	Try to bind to the server .
4399	Called when a new incoming connection is received .
4400	Handle incoming messages
4401	utility callback
4402	Return True if we should connect to this node .
4403	Try to connect to a node only once .
4404	Called when a connection is established .
4405	Called when an outgoing message is received .
4406	Called when a connection is disconnected .
4407	Add a node .
4408	Drop a node .
4409	Send a message to a node .
4410	Destroy this node .
4411	Add an item to the queue .
4412	Add an item to the heap .
4413	Get an item from the heap .
4414	Acquire a lock .
4415	Checks if a lock is acquired .
4416	Release a lock .
4417	Decorator for checking a function .
4418	Decorator for views that require a token
4419	Set the hosts to connect to .
4420	Create Elasticsearch indexes .
4421	Migrate indexes .
4422	Strip metadata from report
4423	Save aggregate reports to Kafka .
4424	Extract an XML report from a file .
4425	Parse an aggregate report file .
4426	Convert a list of ForensicReports into a CSV file .
4427	Parse a report file .
4428	Return a list of supported IMAP capabilities .
4429	Save results to output directory .
4430	Create a zip file from results .
4431	Send a report to a list of results .
4432	Save aggregate reports to Splunk
4433	Save Forensic reports to Splunk .
4434	Decode base64 data .
4435	Download public suffix list .
4436	Query the reverse DNS for an IP address .
4437	Convert a human - readable timestamp to a datetime object .
4438	Downloads the MaxMind Geolite2 Country database
4439	Get information about an IP address .
4440	Convert an Outlook MSG file .
4441	Convert a string to a list .
4442	Parse a report file .
4443	Drain all subscriptions .
4444	Publish a message .
4445	Publish a message .
4446	Publish a message .
4447	Subscribe to a subject asynchronously .
4448	Unsubscribe from a subscriber .
4449	Send a ping to the server .
4450	Select the next available server .
4451	Process an error message .
4452	Process an error .
4453	Connect to the server .
4454	Process a pong .
4455	Process a message .
4456	Process connection info .
4457	Process connection init .
4458	Coroutine to flush pending data .
4459	Main read loop .
4460	Coactivates a dataset .
4461	Decode a list of images .
4462	Load features from a numpy array .
4463	Load features from images .
4464	Calculate Pearson correlation
4465	Return the dot product of the feature images .
4466	Select features based on feature_select .
4467	Get a list of studies by regions .
4468	Get the order of features
4469	Classify a set of regions .
4470	Classify the data .
4471	Fit the classifier .
4472	Set the class weight of the classifier .
4473	Fit cross validation .
4474	Fit the sk_classifier .
4475	Calculate the average value of a set of regions within a dataset .
4476	Get random voxels
4477	Returns a list of top words in the model .
4478	Pearson correlation coefficient .
4479	FDR function .
4480	Load activations from file .
4481	Create image table .
4482	Get a list of studies .
4483	Add features to the feature table .
4484	Returns a list of feature names
4485	Returns a dictionary of feature names and counts
4486	Load a dataset from a pickle file .
4487	Save feature table to file .
4488	Get the image data .
4489	Get feature data .
4490	Returns a list of ordered names of features
4491	Given a feature or list of features return a list of ids to keep .
4492	Return a list of features matching the search string .
4493	Get ids by expression .
4494	Convert SDF to CSR format .
4495	Decorator to mark functions as deprecated .
4496	Transform a 3x3 matrix .
4497	Convert a 3x3 numpy array to a 3x3 numpy array
4498	Apply a transformation .
4499	Mask an image .
4500	Get the mask of the image .
4501	Load images from filenames .
4502	Save image to filename .
4503	Set logging level .
4504	Expand an address .
4505	Return a list of normalized tokens .
4506	Parse an address .
4507	Given a list of labels and a list of values return a list of hashes corresponding to those hashes .
4508	Convert a dictionary to a namedtuple .
4509	Get ticker price .
4510	Get a dataframe of prices for a given ticker .
4511	Get a bulk of news .
4512	Make a request .
4513	Get bearer token .
4514	Make a request .
4515	Get album tracks .
4516	Get a single artist .
4517	Get Spotify albums .
4518	Get the top tracks for an artist .
4519	Retrieve artist related artists .
4520	Get a list of artists .
4521	Browse a category .
4522	List playlists for a category .
4523	Browse categories .
4524	List featured playlists .
4525	Browse new releases .
4526	Get recommendations .
4527	Follows artists or users .
4528	Get albums from artist .
4529	Get all albums from the artist .
4530	Get the total number of albums in the artist .
4531	List artist related artists .
4532	Get the current playing state .
4533	Get the current player .
4534	Get available devices .
4535	List recent played tracks .
4536	Replace multiple tracks in a playlist .
4537	Reorder tracks in a playlist .
4538	Create a new playlist .
4539	Get a list of playlists for this playlist .
4540	Get a list of album tracks .
4541	Get all album tracks .
4542	Return the OAuth 2 . 0 url .
4543	Get a Spotify album .
4544	Get an artist .
4545	Get a track .
4546	Get a user .
4547	Get albums .
4548	Get a list of artists .
4549	Perform a search .
4550	Convert string to ID .
4551	Decorator to assert that an object has a given attribute .
4552	Create a new instance from a client .
4553	Generate a URL for OAuth2 .
4554	Return a dict representation of this object .
4555	Returns a query string for the request .
4556	Build a list of playlists .
4557	Get all tracks in the playlist .
4558	Resume playback .
4559	Transfer a player to another device .
4560	Retrieve a Spotify object from its href .
4561	Get the status of the test .
4562	Convert or shorten month .
4563	Update code urls .
4564	Check if the current version is greater than the older one .
4565	Returns True if the current branch is dev .
4566	Return True if the current version requires a deprecation .
4567	Backup the data to the backup directory .
4568	Restores the backup content .
4569	Check if the line is to be ignored .
4570	Handle the options .
4571	Extract the base of the given element .
4572	Format the given string .
4573	Get the HTTP status code .
4574	Get the HTTP status code .
4575	Check that the given domain is valid .
4576	Check if the given domain is a subdomain .
4577	Check that the given IP is a valid IPv4 address .
4578	Check if the given IP is an IPv4 range .
4579	Check if the given URL is valid .
4580	Load the configuration file .
4581	Try to stay safe .
4582	Checks that the passed string is a valid URL .
4583	Check if the current url_file is a URL .
4584	Print the header .
4585	Process a file decision .
4586	Set the domain to test .
4587	Run the file decision logic .
4588	Colorize the logo .
4589	Format the domain .
4590	Extract domain from file .
4591	Get the list of files to test .
4592	Get the URL of the file .
4593	Switch the state of a variable .
4594	Get the expiration date .
4595	Handle the command .
4596	Get the structure file .
4597	Create a directory .
4598	Delete uneeded directories .
4599	Sets the path to the config file .
4600	Load the configuration file .
4601	Installs the production configuration .
4602	Installs the iana configuration .
4603	Installs the psl configuration .
4604	Installs the directory structure file .
4605	Merge values from upstream_config into self . new_config .
4606	Load the configuration file .
4607	Split a version string into parts .
4608	Check the versions of local and upstream .
4609	Return True if the current version is the cloned version .
4610	Handle non - existant index .
4611	Returns the path to the analytic host file directory .
4612	Generate the unified file .
4613	Generate the status file .
4614	Do not produce file .
4615	Update the public suffix database .
4616	Load the public database .
4617	Format an element as a standard string .
4618	Hierarchical search .
4619	Load the database .
4620	Return the referer for the given extension .
4621	Yields the extension and the referer .
4622	Update the database .
4623	Tries to mine the link .
4624	Retrieve the mining information .
4625	Backup the file .
4626	Add elements to the file path database .
4627	Remove the file from the database .
4628	Return a list of mined files .
4629	Process the job .
4630	Get the content of a file .
4631	Write content to file .
4632	Write a Whois record .
4633	Set the expiration date .
4634	Called when a referer is not found .
4635	Initialize the before header informations .
4636	Construct the header .
4637	Print the header .
4638	Constructs the data to print .
4639	Return the size of the given header .
4640	Colorize the data .
4641	Print the data to the file .
4642	The data to print .
4643	Save the file .
4644	Calculate the data .
4645	Format the execution time .
4646	Return a list of files to delete .
4647	Return a list of databases to delete .
4648	Delete all files in the database .
4649	Hash a file .
4650	Return the hash of the data .
4651	Get the hash of the file .
4652	Execute the command .
4653	Remove a key from the main dictionnary .
4654	Rename a key .
4655	Merges the given dict into the main dict .
4656	Write the current dictionnary to a JSON file .
4657	Write the configuration to a yaml file .
4658	Fix the path .
4659	Write data to the file .
4660	Read the contents of the file .
4661	Format the main list .
4662	Merge a list of dicts into a list of lists .
4663	Return a list of items not matching the regex .
4664	Match the regex against the data
4665	Replace all occurrences of self . regex with self . replace_with .
4666	Count the number of tests .
4667	Calculate the percentages of the status .
4668	Log the progress .
4669	Checks if the given URL is valid .
4670	Determine if a domain is valid .
4671	Return True if the domain is valid .
4672	Get the status .
4673	Reformats the historical formating error .
4674	Retrieve the database .
4675	Backup the inactive database .
4676	Get the current time .
4677	Return the content of the database .
4678	Check if the database subsystem is present .
4679	Retrieve whois database .
4680	Backup the database .
4681	Check if the element we are testing is in the database .
4682	Check if the current time is older than the expiration date .
4683	Get the expiration date from the database .
4684	Add the element to the database .
4685	Set permissions for travis .
4686	Run travis .
4687	Get the NS informations .
4688	Connect to a whois server .
4689	Get the HTTP status code .
4690	Get the referer .
4691	Get the current object .
4692	Yield standard library paths .
4693	Yield all standard package names .
4694	Yield unused import line numbers .
4695	Yield the line number and module name of the unused import .
4696	Yield line numbers of imported star imports .
4697	Yields the line number and module name of the star import usage message .
4698	Yield line numbers of unused variables .
4699	Yield duplicate key line numbers .
4700	Create a dictionary from a list of messages .
4701	Check source code .
4702	Extract package name from line .
4703	Return True if line is a multiline import statement .
4704	Return True if line is a multiline statement .
4705	Filter from import statements .
4706	Break up import statements .
4707	Filter source code .
4708	Return a dictionary mapping line numbers to messages .
4709	Filter a star import .
4710	Filter a duplicate key .
4711	Check if a dictionary entry has a key .
4712	Check if value is a literal or name .
4713	Return a generator that yields line numbers that do not have a pass .
4714	Filter lines that are not used in the source .
4715	Get the indentation of a line .
4716	Get line ending .
4717	Given a source code string return a filtered source string .
4718	Split a comma separated string .
4719	Check if filename is a Python file .
4720	Return True if filename should be excluded .
4721	Find all files in a directory .
4722	Main function .
4723	Read a lease response payload .
4724	Write the payload to output_stream .
4725	Write the payload to the output stream .
4726	Read a CancelResponsePayload .
4727	Create a new name .
4728	Read a KMIP Digest .
4729	Write the digest to a stream .
4730	Create a new Digest object .
4731	Read KMIP Application Specific Information .
4732	Write the application specific information .
4733	Create an application specific information .
4734	Read a DerivationParameters object from a stream .
4735	Write this DerivationParameters to an output stream .
4736	Read a GetRequestPayload .
4737	Write this GetRequestPayload to a stream .
4738	Read a response payload .
4739	Write the payload to the output stream .
4740	Read a SignatureVerifyRequestPayload .
4741	Write the KMIP message .
4742	Read a signature verify response payload .
4743	Process a request .
4744	Build an error response .
4745	Process a template attribute .
4746	Retrieves attributes from a managed object .
4747	Get an attribute from a managed object .
4748	Set attributes on a managed object .
4749	Set an attribute on a managed object .
4750	Checks if the given operation is allowed for the given policy .
4751	Write this DecryptRequestPayload to a stream .
4752	Create a secret .
4753	Set a configuration setting .
4754	Load settings from a file .
4755	Process a bind parameter .
4756	Process result value .
4757	Read a long integer from the stream .
4758	Write this LongInteger to a stream .
4759	Validate the value .
4760	Read a BigInteger from the stream .
4761	Write this value to ostream .
4762	Validate the value .
4763	Validate the enumeration .
4764	Read a boolean value from the stream .
4765	Write the boolean value to a stream .
4766	Write this object to a stream .
4767	Validate the value .
4768	Read an Interval from a stream .
4769	Validate the interval .
4770	Key wrapping data .
4771	Sets the key wrapping data .
4772	Validate the key .
4773	Validate the secret data .
4774	Validate the opaque data .
4775	Convert an attribute name to a tag .
4776	Convert an attribute tag to its name .
4777	Get a bit mask from a list of enumerations .
4778	Get a list of enumerations from a bit mask .
4779	Returns True if the potential_mask is a valid bit mask .
4780	Read a CreateKeyPairRequestPayload .
4781	Write the KMIP template attribute .
4782	Read CreateKeyPairResponsePayload .
4783	Write the CreateKeyPair response payload .
4784	Read the attribute list request payload .
4785	Write the GetAttributeListRequestPayload to a buffer .
4786	Read a GetAttributeList payload .
4787	Write the GetAttributeList response payload .
4788	Get a list of all JSON files in a directory .
4789	Scan policy files .
4790	Run the operation policy file monitor .
4791	Get certificate from connection .
4792	Get the extended key usage from a certificate .
4793	Get the common names from a certificate .
4794	Get the client identity from a certificate .
4795	Read CreateRequestPayload .
4796	Write the Create request payload .
4797	Read CreateResponsePayload .
4798	Write this CreateResponsePayload to an output buffer .
4799	Convert an object to a key .
4800	Read the payload .
4801	Read a DeriveKeyRequestPayload .
4802	Write this DeriveKeyRequest to an output buffer .
4803	Check if an attribute is supported .
4804	Check if an attribute is deprecated .
4805	Returns True if the given attribute applies to the given object type .
4806	Check if an attribute is multivalued .
4807	Get a valid value from the configuration file .
4808	Read a CheckResponsePayload .
4809	Write this CheckResponsePayload to a stream .
4810	Read an AttributeReference object .
4811	Write this attribute reference .
4812	Read attributes from an input stream .
4813	Write the attributes to an output stream .
4814	Read a KMIP Nonce .
4815	Write the Nonce struct .
4816	Reads a username password credential .
4817	Write this credential to an output stream .
4818	Read a device credential .
4819	Write this KMIPDevice to an output stream .
4820	Read a Credential from an input stream .
4821	Write this credential to an output stream .
4822	Read a MACSignatureKeyInformation struct .
4823	Write this MACSignatureKeyInformation to an output stream .
4824	Read the key wrapping data .
4825	Write the KMIP message .
4826	Read the key wrapping specification .
4827	Write this KeyWrappingSpecification to an output stream .
4828	Read the extension information .
4829	Write the extension information .
4830	Create a new ExtensionInformation object .
4831	Read a revocation reason .
4832	Write this RevocationReason to a stream .
4833	Validate the revocation reason code .
4834	Read the object defaults .
4835	Write this object to an output buffer .
4836	Read the object defaults .
4837	Write this object to an output buffer .
4838	Read a KMIP RNGParameters object .
4839	Write the KMIP parameters to an output buffer .
4840	Read a KMIP ProfileInformation object .
4841	Write this ProfileInformation object to an output buffer .
4842	Write this ValidationInformation object to an output buffer .
4843	Read a CapabilityInformation object .
4844	Write the capability information to output_buffer .
4845	Stop the server .
4846	Serve connections .
4847	Read a LocateRequestPayload .
4848	Write this object to output_buffer .
4849	Read a LocateResponsePayload .
4850	Write the payload to the output buffer .
4851	Create a symmetric key .
4852	Create a symmetric key pair .
4853	Generate a message authentication code .
4854	Encrypts plaintext using the specified encryption algorithm .
4855	Encrypt a plain text using a symmetric key .
4856	Encrypt a plain text using an asymmetric encryption key .
4857	Decrypts a symmetrically encrypted message .
4858	Create an RSA key pair .
4859	Derive a key .
4860	Create a RSA private key .
4861	Verify signature .
4862	Read a signed response payload .
4863	Write the payload to output_stream .
4864	Read a GetUsageAllocationRequestPayload .
4865	Converts a ProtocolVersion enum value to a KMIP Version enum value .
4866	Read a protocol version .
4867	Write this protocol version to an output stream .
4868	Read authentication credentials from an input stream .
4869	Write the authentication struct .
4870	Read a KMIP PollRequestPayload .
4871	Read a certificate .
4872	Write this Certificate to a stream .
4873	Authenticate a user .
4874	Read a response payload .
4875	Write the payload to an output stream .
4876	Run the session .
4877	Read a rekey response payload .
4878	Check if a profile is supported .
4879	Derive a key .
4880	Get a list of attributes .
4881	Get a list of attributes for a user .
4882	Perform a query .
4883	Signs data .
4884	Open the client connection .
4885	Close the connection .
4886	Create a new key .
4887	Create a key pair .
4888	Registers a managed object .
4889	Rekey a user .
4890	Derive a key .
4891	Locate managed objects .
4892	Checks the validity of a user .
4893	Get a managed object .
4894	Get the list of attributes for a managed object .
4895	Activates a managed object .
4896	Revokes a managed object .
4897	Perform a KMIP message authentication .
4898	Build a CryptographicParameters object from a dictionary .
4899	Builds an EncryptionKeyInformation object from a dictionary .
4900	Build a MAC signature key information .
4901	Builds a KeyWrappingSpecification from a dictionary .
4902	Build common attributes .
4903	Build a name attribute .
4904	Read a query request payload .
4905	Write the QueryRequestPayload to a buffer .
4906	Write this object to an output buffer .
4907	Read a GetAttributesResponsePayload .
4908	Write the GetAttributesResponse payload .
4909	Get a single entry point .
4910	Get a group by name .
4911	Get all entries in a group .
4912	Load the object .
4913	Create an EntryPoint object from a string .
4914	Serve live server
4915	Generate project files .
4916	Generate controller file .
4917	Generate action .
4918	Generate form .
4919	Generate model .
4920	Generate a macro .
4921	Create a directory .
4922	Rewrite src_file and copy to dst_file .
4923	Return the time since the given date .
4924	Make sure the URL is valid .
4925	Encode something using the secret key .
4926	Decode a JSON string .
4927	Convert a function to a JSON response .
4928	Return an absolute URL for a given endpoint .
4929	Load configuration from environment variables .
4930	Sign in a user .
4931	Get the current user .
4932	Create Flask application .
4933	Register jinja loader .
4934	Register blueprint routes .
4935	Register error handler .
4936	Register hooks .
4937	Write a dataframe to a CSV file .
4938	Create a pandas DataFrame from a CSV file .
4939	Serializes the given data frame to the given writer .
4940	Deserialize a data frame from a reader .
4941	Update this object from a pandas DataFrame .
4942	Update from raw data .
4943	Returns the URL for the contents of the file .
4944	Adds a new file from a DataFrame .
4945	Adds a new file from raw data .
4946	Open an intermediate dataset .
4947	Read the contents of this node as binary .
4948	Read the contents of this node as text .
4949	Return a dataframe from the stream .
4950	Get an intermediate dataset .
4951	Get all experiments in a workspace .
4952	Get datasets for a workspace .
4953	Get a dataset .
4954	Publish a function or workspace .
4955	Publish a service .
4956	Decorate a function with annotations .
4957	Decorator to mark a function as a return type .
4958	Decorator to attach an attachment to a function .
4959	Find all globals in code .
4960	Return a copy of this Pen .
4961	Lookup a color .
4962	Draws the image .
4963	Compute the bernstein extrema .
4964	Linear Bernstein s cubic function .
4965	Build the choices .
4966	Returns a function that takes a list of command options and returns a list of options .
4967	Registers a function to be called when items are processed .
4968	Composes a list of Sitetree objects for a given application .
4969	Initialize cache .
4970	Clear the cache .
4971	Get an entry from the cache .
4972	Update an entry s value
4973	Set an entry in the cache .
4974	Initialize the cache .
4975	Resolve a tree alias .
4976	Determine if the current app is an admin .
4977	Calculate the depth of an item .
4978	Get the current item for the given tree alias .
4979	Returns the URL for the given sitetree item .
4980	Initialize the tree .
4981	Get the current page s attribute .
4982	Get the parent of the current item .
4983	Create a menu .
4984	Check if the user has access to the item .
4985	Build breadcrumbs .
4986	Return a list of sitetree items
4987	Render the children of the given item .
4988	Returns the children of the given item .
4989	Updates the has_children property of a tree item .
4990	Filter items based on navigation type .
4991	Get the parent of the given item .
4992	Add a climber to the tree .
4993	Resolve a variable .
4994	Parse a sitetree tree .
4995	Sitetree children tag .
4996	Sitetree Breadcrumbs tag .
4997	Parse a sitetree menu tag .
4998	Render a template .
4999	Parse a tag .
5000	Get the URL name for a model .
5001	Register the tree admin .
5002	Redirect to tree layout page .
5003	Redirect to another item .
5004	Add a new item to the tree .
5005	Redirect to the change view .
5006	Create a tree item form .
5007	Get the model tree .
5008	Move an item .
5009	Save a model .
5010	Returns a list of URLs for the tree view .
5011	Dump a tree view .
5012	Create a tree object .
5013	Create a tree item .
5014	Import app ssitetree module .
5015	Get the model class for a settings entry .
5016	Create a Config object from a mapping .
5017	Load configuration from a Python file .
5018	Load configuration from a TOML file .
5019	Create a Config instance from an object .
5020	Create a ZipkinAttrs object for a span .
5021	Create HTTP headers for a new span .
5022	Get the current trace context .
5023	Start logging .
5024	Stops the span .
5025	Update the binary annotations for this span .
5026	Add a binary annotation to the span .
5027	Override the span name .
5028	Create an endpoint .
5029	Copy an endpoint with a new service name .
5030	Build a V1 span .
5031	Encode a list of spans into a string .
5032	Create a protobuf Span .
5033	Convert hex id to bytes .
5034	Get the protobuf kind of a Span .
5035	Convert an endpoint to a Zipkin Endpoint .
5036	Convert a dictionary of annotations to Zipkin annotations .
5037	Create an annotation .
5038	Create a binary annotation .
5039	Create an endpoint .
5040	Copy an endpoint with a new service name .
5041	Create a list of annotations .
5042	Build a list of binary annotations .
5043	Create a span .
5044	Convert a thrift span to bytes .
5045	Encodes a list of binary thrift objects .
5046	Detect span version and encoding .
5047	Convert a list of spans into a list of spans .
5048	Push a zipkin attribute to the stack .
5049	Encode a span into a thrift span .
5050	Create a JSON endpoint .
5051	Encode a Span .
5052	Decodes a list of spans .
5053	Convert thrift endpoint to Endpoint .
5054	Decode thrift annotations .
5055	Convert thrift binary annotations to tags .
5056	Decode a thrift span .
5057	Convert a trace ID to a string .
5058	Convert an unsigned long to lower hex .
5059	Write a 16 - bit hex value to data .
5060	If the month is 02 and the day is > max_month_day the day will be set to max_month_day .
5061	Set transaction code
5062	Set the Iphone ID for a tag .
5063	Set the tnr of a tag .
5064	Parse the given data .
5065	Parse a text file .
5066	Join a string of lines .
5067	Return a JSON or text response .
5068	Check if we have exceeded a ratelimit .
5069	Perform an HTTP request .
5070	Get information about a bot .
5071	Get a list of bots .
5072	Read a term from the stream .
5073	Write a message to the socket .
5074	Close the file .
5075	Decodes a string .
5076	Encodes a term into a binary string .
5077	Add a multicast source address .
5078	Send pending messages .
5079	Sets the remote service hello callback .
5080	Stop the server .
5081	Clear all local services .
5082	Search for services .
5083	Create a SOAP message .
5084	Set up logging for the given scope .
5085	Return a tagged item manager .
5086	Get all child relations of a model .
5087	Get all child m2m relations of a model .
5088	Save the model to the database .
5089	Create a model from serialized data .
5090	Validate that all the unique fields are unique .
5091	Check if this form has changed
5092	Return a new address with a valid checksum .
5093	Generate a checksum for this address .
5094	Parse command line arguments .
5095	Create an argument parser .
5096	Prompt the user for a seed .
5097	Validate signature fragments .
5098	Get a private key .
5099	Get the key for the given address .
5100	Create a key iterator .
5101	Create a Kerl sponge .
5102	Absorb a sequence of trits into this state .
5103	Squeeze a sequence of trits .
5104	Transform the state .
5105	Get a list of digests .
5106	Get private keys .
5107	Prepare a multisig transfer .
5108	Add two trits together .
5109	Convert an integer to a list of trits .
5110	Add two trits .
5111	Full add trits .
5112	Output seed .
5113	Find transactions .
5114	Get a list of inputs .
5115	Get new addresses .
5116	Get a list of transfers .
5117	Promotes a transaction .
5118	Replay a bundle .
5119	Send a transfer .
5120	Send a list of trytes to the device .
5121	Resolve an adapter specification .
5122	Send a request .
5123	Log a message .
5124	Send an HTTP request .
5125	Interpret the response .
5126	Add a response to the response queue .
5127	Add a digest to this address .
5128	Get the multisig address .
5129	Create an iterator over the keys .
5130	Create an Address object from a digest .
5131	Generate an address from a key iterator .
5132	Return a list of Transaction objects for the given adapter .
5133	Iterate over the addresses used by the given adapter .
5134	Get bundles from a list of transaction hashes .
5135	Check if the given encoding is supported .
5136	Get codec info .
5137	Encodes a byte string .
5138	Decodes a byte string .
5139	Find addresses .
5140	Add a route .
5141	Create a Transaction object from a tryte string .
5142	Return a JSON - compatible representation of this object .
5143	Get signature validation trytes .
5144	Set whether this transaction is confirmed .
5145	Return a list of message fragments .
5146	Return a list of trytes representing this transaction .
5147	Return a list of transactions grouped by address .
5148	Discover commands in a package .
5149	Execute the command .
5150	Apply a filter .
5151	Get the URL for a job .
5152	List of validation errors .
5153	Check if the bundle is valid .
5154	Create validator .
5155	Get the signature errors for a bundle .
5156	Get the error message for a group transaction .
5157	Traverse a bundle .
5158	Start IPython REPL .
5159	Generate a random seed .
5160	Get the digest of the key .
5161	Sign all input transactions in a bundle .
5162	Pretty print the object .
5163	Absorb a sequence of trits into this sequence .
5164	Squeeze a sequence of trits .
5165	Add context to the exception .
5166	Security level .
5167	Increment the legacy tag .
5168	Return the transaction s tag .
5169	Add a transaction to the bundle .
5170	Finalize the bundle .
5171	Sign all inputs in the bundle .
5172	Sign the input at the given index .
5173	Create input transactions .
5174	Convert value to standard unit .
5175	Decompress a G1 compressed point .
5176	Return the prime field inverse of a .
5177	Create an instance from a JSON file .
5178	Find word groups in text .
5179	Find a synonym for a word .
5180	Expand abbreviations .
5181	Split a text description .
5182	Return a list of all categories
5183	Generate a random colour .
5184	Plot the component .
5185	Create a LEGEND object from a string .
5186	Create a new TimeScale .
5187	Create a random component .
5188	Create a Decor object from an image file .
5189	Load a legend from a CSV file .
5190	Return a CSV representation of this legend .
5191	Return the maximum width of the list .
5192	Return a decor object for the given component .
5193	Get the value of an attribute of a class .
5194	Get the component of a given colour .
5195	Plot the data .
5196	Create a component from text .
5197	Return a summary of the component .
5198	Deprecated .
5199	Process a single row .
5200	Parse a canstrat file .
5201	Return True if all of the intervals are within the boundaries
5202	Return a sorted list of all unique vertices in the mesh .
5203	Create intervals from tops .
5204	Clean longitudinal data .
5205	Read a PETREL file .
5206	Build a list of intervals
5207	Load a CSV file .
5208	Create a ColorMap from an image file .
5209	Extract components from a log .
5210	Parse a LaS3 string .
5211	Create an Interval object from a Canstrat file .
5212	Return a copy of this striplog .
5213	Write a list of components to a CSV file .
5214	Convert to Lithology .
5215	Plot the legend .
5216	Get the data for a given field .
5217	Extracts data from a log file .
5218	Return the index of the first occurrence of search_term .
5219	Return a list of all overlaps with the given index .
5220	Find all gaps in a sequence .
5221	Prune a strip .
5222	Anneal the strip .
5223	Fill the intervals with the given component .
5224	Union two striplogs .
5225	Intersect two striplogs .
5226	Merge overlapping pieces .
5227	Plot the histogram .
5228	Invert the striplog .
5229	Crop the list .
5230	Determine the quality of a curve .
5231	Convert hex color to name
5232	Create a loglike from an image .
5233	Override get_field to handle missing keys .
5234	Get a list of jobs .
5235	Parse JobHCL .
5236	Update a token
5237	Get allocation information .
5238	Fails a deployment .
5239	Pauses a deployment .
5240	Get the health of a deployment .
5241	Drain a node .
5242	Drains a node .
5243	Check if a node is eligible .
5244	List files
5245	Get a stream .
5246	Stat a file .
5247	Join an agent .
5248	Update servers .
5249	Force leave a node .
5250	Get all nodes
5251	Get a list of evaluations .
5252	Get all namespaces
5253	Register a job .
5254	plan a job
5255	Dispatch a job .
5256	Revert a job .
5257	Revert a job to a stable state .
5258	Deregister a job .
5259	Get configuration information .
5260	Delete a peer .
5261	Get deployments
5262	Get a random value from the mutator .
5263	Get a random mutation .
5264	Generate a string for a polyglot attack .
5265	Perform fuzzing .
5266	Return a safe unicode string .
5267	Run the server .
5268	Stop the server .
5269	Generate a custom HTML file .
5270	Generate a fuzzed response .
5271	Perform fuzzing on an object .
5272	Spawn a process .
5273	Get the output from the process .
5274	Finish reading from stdin .
5275	Closes the process .
5276	Start the PJF worker .
5277	Execute fuzzing .
5278	A decorator to encode a JSON string .
5279	Build a random string .
5280	Build a string from a list of values .
5281	Build the query string .
5282	Build a random value .
5283	Build an Opt instance .
5284	Build a reference definition
5285	Build a random STAR .
5286	Shutdown the process .
5287	Run and monitor process .
5288	Start the process monitor .
5289	Return a random float between a and b .
5290	Add a definition to a category .
5291	Add a definition to a category group .
5292	Generate a subset of the rules .
5293	Perform fuzzing of elements
5294	Return the fuzzed version of the configuration .
5295	Return the fuzzed version of the object
5296	Decorate a function to mutate an object .
5297	Handle SIGTERM .
5298	Quit the running process .
5299	Pause the process .
5300	Resume a paused command .
5301	Stop the running process .
5302	Restart process .
5303	Returns a list of Skype Events .
5304	Set the mood of the user .
5305	Set user s avatar .
5306	Get the metadata for a URL .
5307	Retrieve a contact .
5308	Get a user by ID .
5309	Get a list of bots .
5310	Get a bot by id .
5311	Search for users .
5312	Return a list of invite requests .
5313	Create a new instance from raw data .
5314	Merge other with self .
5315	Merge an object into the cache .
5316	Make a synchronous call to the API .
5317	Read token file
5318	Write token file .
5319	Verify a token .
5320	Refresh Skype token .
5321	Get the user s id .
5322	Get Skype registration token .
5323	Syncs all endpoints with Skype .
5324	Check if a user exists .
5325	Authenticates a user .
5326	Authenticate with Skype .
5327	Configures a messaging service .
5328	Ping the user .
5329	Get the most recent conversation .
5330	Get a chat .
5331	Create a thread .
5332	Convert a user url to a user id
5333	Get chat id from url .
5334	Exhaust the results of a function .
5335	Convert text to unicode .
5336	Detect format of text .
5337	Parse text into metadata and content .
5338	Return a dictionary representation of this object .
5339	Load a YAML file .
5340	Export metadata to YAML .
5341	Export metadata to JSON .
5342	Match string against pattern .
5343	Return a list of items in the string .
5344	Return a list of sublists of this wiki .
5345	Convert the pattern to newstart .
5346	Return a list of arguments in the string .
5347	Returns a list of lists matching the given pattern .
5348	Plant the trie .
5349	Generate a pattern from a trie .
5350	Check the index .
5351	Insert string at index .
5352	Return the atomic partition of a character .
5353	Return a list of subspans of the given type .
5354	Shrinks the list of spans to the given range .
5355	Insert a new span at the given index .
5356	Return the nesting level of this node .
5357	Return a bytearray containing the shadow string .
5358	Return a byte array containing the shadow of the external link .
5359	Return a mapping from type to spans .
5360	Pretty print the object .
5361	A list of Parameter instances representing the parameters of the sentence .
5362	List of parser functions .
5363	List of all templates in the document .
5364	List of Wikilinks .
5365	List of comments in the document .
5366	List of all external links .
5367	Return a list of sections .
5368	Return a list of tables .
5369	Return a list of wiki lists matching pattern .
5370	Return a list of all tags in this span .
5371	Yield subspans of _type .
5372	Return the ancestors of this WikiText .
5373	Return the parent of this object .
5374	Return the mode of a list .
5375	Get an argument by name .
5376	Normalizes the name .
5377	Remove the first occurrence of duplicated arguments .
5378	Remove duplicate arguments .
5379	Set an argument .
5380	Get an argument by name .
5381	Check if an argument exists .
5382	Delete an argument by name .
5383	Convert a CRS code to a string .
5384	Find an Ellipsoid by name .
5385	Load a CRS from a URL .
5386	Create a GeoJSON object from a file .
5387	Create a CRS object from an EPSG code .
5388	Create a CRS object from an ESRI code .
5389	Create a CRS object from a SR code .
5390	Create a CRS object from text .
5391	Write the record to out .
5392	Read a VLR record from a stream .
5393	Parse geo tiff keys from vlr list .
5394	Parse a GeoTIFF key .
5395	Get the signedness of an extra dimension .
5396	Get the id for an extra dimension type .
5397	Create a new point record from another point record .
5398	Copy fields from another record .
5399	Append zeros if too small .
5400	The names of all dimensions in the array .
5401	Create a new array of zeros .
5402	Create a point from a stream .
5403	Decompress a compressed buffer .
5404	The x - dimension of the image .
5405	The y - axis coordinate .
5406	Return the z - axis value
5407	Add an extra dimension .
5408	Write the point record to out_stream .
5409	Write data to a file .
5410	Write to a file .
5411	Build a dictionary of point formats and their dtypes .
5412	Build a dictionary of unpacked point formats dtypes .
5413	Convert numpy dtype to point format .
5414	Get the minimum file version for a point format .
5415	Checks if a point format is compatible with a file version .
5416	Get vlrs of type vlr_type
5417	Extract the vlrs of a given type .
5418	Read a list of VLRs from a data stream .
5419	Check if all files have the same point format id
5420	Check if all files have the same dtype
5421	Raise error if file signature is not correct .
5422	Read a header from the stream .
5423	Read VLRList from stream .
5424	Read a list of points .
5425	Read compressed points data .
5426	Read an internal waveform packet .
5427	Read evlrs from stream .
5428	Log a warning if the stream is not at the expected position .
5429	Open a LAS file or file - like object .
5430	Read a LAS file .
5431	Create a LasData object from a header .
5432	Create a LAS data object .
5433	Convert a LAS record to a PackedPointRecord .
5434	Merge las files .
5435	Write las to file and read again .
5436	Returns a datetime . date object .
5437	Set the creation date .
5438	The minimum x y z coordinates .
5439	Set x y z min values .
5440	Returns the maximum values in the tensor .
5441	Set the maximum values .
5442	Return the x y z scales
5443	The x y and z offsets of the mesh .
5444	Get the version of a file .
5445	Convert old header to new header .
5446	Unpack a source array into a numpy array .
5447	Pack a sub - field array .
5448	Returns a list of lost dimension names .
5449	Returns a dictionary of sub - dimension fields .
5450	The number of bytes required to store extra data .
5451	Return True if there is a waveform packet .
5452	Main program .
5453	Calculate the checksum of a command .
5454	Print a hex string .
5455	Verify response and strip checksum .
5456	Return a list of set bit indices .
5457	Generate a query .
5458	Run the demo .
5459	Connect to the server .
5460	Start monitoring .
5461	Disarm a partition .
5462	Clear the alarm .
5463	0x88 outputs on + 8 bytes - user code + 16/32 bytes - output list If function is accepted, function result can be checked by observe the system state
5464	Keep alive the alarm .
5465	Monitor the status of the device .
5466	Close the connection .
5467	Purge the database .
5468	Guess the type of a file .
5469	Get the ID of a file .
5470	Get a notebook .
5471	Create a notebook model from a database record .
5472	Get a directory .
5473	Convert a list of file records into a list of model instances .
5474	Create a directory model from a DB record .
5475	Create a file model from a database record .
5476	Save a notebook .
5477	Save a file .
5478	Rename a file or directory .
5479	Delete a file or directory .
5480	Ensure database user exists .
5481	Purge a user .
5482	Create a directory .
5483	Check if a user is in a directory .
5484	Delete a directory .
5485	Check if directory exists .
5486	List files in a directory .
5487	List directories in a directory .
5488	Check if a file exists in a directory .
5489	Select a single file .
5490	Return a list of default file fields .
5491	Get a file .
5492	Get a file .
5493	Get file id .
5494	Check if a file exists .
5495	Renames a directory .
5496	Save a file .
5497	Generate notebooks .
5498	Purge all remote checkpoints for a user .
5499	Generate checkpoints .
5500	Generate notebooks .
5501	Reencrypt a row .
5502	Re - encrypt files for a user .
5503	Derive a single Fernet key .
5504	Derive fallback encryption keys for passwords .
5505	Create a CryptoFactory for a single password .
5506	A decorator that memoizes a single argument .
5507	Get the name of a column .
5508	Convert a row to a dict without content .
5509	Convert a row to a dictionary with content .
5510	Create a checkpoint for a notebook .
5511	Create a file checkpoint .
5512	Delete a checkpoint .
5513	Get the content of a checkpoint .
5514	List all checkpoints for a path .
5515	Move all checkpoints from old_path to new_path .
5516	Delete all checkpoints at path .
5517	Purge all checkpoints from the database .
5518	Resolve a path to a manager .
5519	Apply prefix to model .
5520	Decorator for dispatching a path to a manager .
5521	A decorator that dispatches a path to a manager .
5522	A decorator that dispatches an old path to a new path .
5523	Called when a manager has changed .
5524	Get a directory .
5525	Normalize API path .
5526	Split a file path into a directory and a file name .
5527	Return a base64 encoded representation of nb .
5528	Reads a base64 encoded file .
5529	Decode unknown bytes from base64 .
5530	Decode a base64 - encoded file .
5531	Return a list of directories in a path .
5532	Convert PathOutsideRoot to 404 .
5533	Create a new user .
5534	Separate directories and files .
5535	Walk a directory tree .
5536	Yields all files in a directory .
5537	Yield files with content
5538	Re - encrypt all users .
5539	Re - encrypt a single user .
5540	Unencrypt all users .
5541	Unencrypt a single user .
5542	Create a temporary alembic ini file .
5543	Upgrade alembic database .
5544	Sanitize a block .
5545	Queue an instance .
5546	Load instances from a list of ids .
5547	Insert an instance into the database .
5548	Load data for all embeds
5549	Validate data .
5550	Admin view .
5551	Convert the object to a dictionary .
5552	Hide fields that are not authenticated
5553	Remove fields from the request .
5554	If the url requested includes the querystring parameters 'version' and 'preview_id', get the article with the specified version and preview_id . Otherwise get the published version of the article .
5555	Get the queryset for this view .
5556	Get the publishable queryset .
5557	Returns True if this field is a null boolean field .
5558	Validate a widget .
5559	Validate a zone .
5560	Return True if id is a valid UUID .
5561	Get the permissions for this user .
5562	Modify group permissions
5563	Validate an author .
5564	Save a zone .
5565	Returns a dictionary of field names to values
5566	Prepare the data for saving .
5567	Render the template .
5568	Get settings for this integration .
5569	Get a list of pages belonging to the authenticated user .
5570	Get integration settings .
5571	Update the integration settings .
5572	Sign up a user .
5573	Create a maptag from a list of items .
5574	Render a zone .
5575	Save a featured image .
5576	Save a subsection .
5577	Get file extension .
5578	Returns the URL of the medium .
5579	Save the image .
5580	Save a thumbnail of an image .
5581	Get a connection to the database .
5582	Get a BandwidthLimitedStream from a file object .
5583	Read amount of bytes from the file .
5584	Consumes amt from the queue .
5585	Schedules consumption for a token .
5586	Process a scheduled consumption .
5587	Calculate the exponential moving average rate .
5588	Record the current consumption rate .
5589	Download a file .
5590	Wait for a transfer to complete .
5591	Get callbacks for a given callback type .
5592	Return a filtered version of the original dictionary .
5593	Decrement the counter .
5594	Finalize callback .
5595	Determine if a file is a special file .
5596	Acquire a tag .
5597	Release a lock .
5598	Adjusts the current chunksize based on the file size .
5599	Queue a file IO task .
5600	Create an IOWriteTask .
5601	Get the download output manager class .
5602	Main function .
5603	Write data to fileobj .
5604	Request a write to be sent .
5605	Return True if the fileobj is seekable .
5606	Upload a file to a bucket .
5607	Download a file .
5608	Copy a file from one bucket to another .
5609	Delete a key from a bucket .
5610	Shutdown the server .
5611	Cancel a transfer .
5612	Wait until all transfer coordinators have completed .
5613	Read amount bytes from fileobj .
5614	Wrap data in chunks .
5615	Get upload input manager class .
5616	Set the exception .
5617	Set the result .
5618	Set the exception .
5619	Get the result of the task .
5620	Cancel the task .
5621	Submit a task to an executor .
5622	Add a callback to be called when the function is done .
5623	Add a failure cleanup function .
5624	Announce that the job is done .
5625	Submit a task to the executor .
5626	Add a callback to the future .
5627	Upload a file to S3 .
5628	Download a file from S3 .
5629	Iterate over step decorators .
5630	Get the step from the decorator .
5631	Refactor a step .
5632	Iterate over step decorators .
5633	Get the step from the decorator call .
5634	Refactor a step .
5635	Select Python parser to use .
5636	List teams .
5637	Create a new team membership .
5638	Updates a team membership .
5639	Delete a membership .
5640	Get catfact
5641	Send a message to the bot .
5642	List members of a room .
5643	Delete a membership .
5644	Validate a base url .
5645	Check if string is a web url .
5646	Open a local file .
5647	Check that the given object is of the given acceptable types .
5648	Create a dictionary from a list of dictionaries .
5649	Check response code .
5650	Convert a JSON string into a Python dictionary .
5651	Convert a string to a datetime object .
5652	List rooms .
5653	Create a room .
5654	Updates a room .
5655	Delete a room .
5656	List license objects .
5657	The created date of the team .
5658	Get the access token .
5659	Create a webhook .
5660	Updates a webhook .
5661	Delete a webhook .
5662	Make sure the next URL is valid .
5663	Setter for wait_on_rate_limit .
5664	Update request headers .
5665	Given a URL return its absolute URL .
5666	Make an HTTP request .
5667	Make a GET request .
5668	Get a list of pages .
5669	Get a generator for pages of JSON data .
5670	Make a PUT request .
5671	Perform a DELETE request .
5672	Create a new user .
5673	List messages in a room .
5674	Create a message .
5675	Delete a message .
5676	Create a new person .
5677	Get a person by ID .
5678	Updates a person .
5679	Delete a person .
5680	Get the current user s information .
5681	List roles .
5682	List teams .
5683	Create a team .
5684	Updates a team .
5685	Delete a team .
5686	List events .
5687	Serialize data .
5688	Get an access token .
5689	Get the last activity date .
5690	Post events from Webex Teams .
5691	Get the ngrok public URL .
5692	Delete a webhook by name
5693	Create a webhook .
5694	Main function .
5695	Command line interface to DSMR .
5696	Read telegram from serial port .
5697	Read telegrams from serial port .
5698	Create a DSMR protocol .
5699	Create a DSMR reader .
5700	Create a TCP DSMR reader .
5701	Handle incoming data .
5702	Called when a connection is lost .
5703	Parse telegram .
5704	Parse telegram data .
5705	Get the version of a file
5706	Ensure python version is supported .
5707	Find packages in top directory .
5708	Create command class .
5709	Create a command for a function .
5710	Run a command .
5711	Ensure that all targets are present .
5712	Wraps a list of commands in a command class .
5713	Create a file handler .
5714	Extracts data files from a list of data specs .
5715	Get package data .
5716	Compile a glob pattern .
5717	Split a path into parts .
5718	Translate a glob pattern .
5719	Join translated parts .
5720	Translate a glob pattern into a regular expression .
5721	Truncate a table .
5722	Write a table to the database .
5723	Write indexes to database .
5724	Write triggers to database .
5725	Write the constraints to the database .
5726	Write contents of a table to a file .
5727	Process a single row .
5728	Write indexes to file .
5729	Write the constraints to the file .
5730	Write triggers to file .
5731	Return the number of items in the queue .
5732	Enqueue data .
5733	Start a task .
5734	Build the extra predicate .
5735	SimpleJSON datetime serializer .
5736	Reconnect to MySQL .
5737	Execute a SELECT query and return the first row .
5738	Get a database connection .
5739	Run benchmark .
5740	Connect to the aggregator .
5741	Lookup an error code by number .
5742	The number of connections in the pool .
5743	Handle connection failure .
5744	Create a simple query expression .
5745	Update a table .
5746	Connect to the database .
5747	Setup the database .
5748	Destroy the database .
5749	Start a step .
5750	Stop a step .
5751	Load steps from raw_steps .
5752	Disconnect from the API .
5753	Reconnect to the server .
5754	Connect to the server .
5755	Handle incoming messages
5756	Stop timers .
5757	Send ping to API .
5758	Check if pong received .
5759	Send payload to API .
5760	Unpause subscription .
5761	Handle a system message .
5762	Handle info messages .
5763	Error handler
5764	The data handler .
5765	Resubscribe for soft start .
5766	Handle authentication .
5767	Handle configuration .
5768	Update the timestamps of a channel .
5769	Reset the connection .
5770	Get the candles for a given pair .
5771	Config the bitfinex config
5772	Subscribe to a ticker .
5773	Unsubscribe from a ticker .
5774	Subscribe to order book .
5775	Unsubscribe from an order book .
5776	Subscribe to raw order book .
5777	Unsubscribe from raw order book .
5778	Subscribe to trades
5779	Unsubscribe from trades
5780	Subscribe to candles
5781	Unsubscribe from candles
5782	Authenticate the channel .
5783	Cancel an order .
5784	Called when a command is received .
5785	Called when a device command is received .
5786	Called when a message is received .
5787	Create a device type .
5788	Publish an event .
5789	Update a device .
5790	Returns a list of ClientStatus objects for the given status .
5791	List custom bundles .
5792	Create a custom bundle .
5793	Update a schema
5794	Disconnects from the IBM Watson IoT Platform .
5795	Called when a client connects .
5796	Subscribe to device events .
5797	Subscribe to device status .
5798	Subscribe to device commands .
5799	Publish a command to a device .
5800	Handle unsupported messages .
5801	Handle a device event .
5802	Callback for device status events .
5803	Called when app status is received .
5804	Get the last event for a device .
5805	Get all events for a device .
5806	Make an API call .
5807	Initiate a request .
5808	Get the status of a request .
5809	Close the index .
5810	Count the number of intersections between two coordinates .
5811	Find the nearest neighbors to the given coordinates .
5812	Get the bounds of the index .
5813	Delete an index .
5814	Create an index from a stream of data .
5815	Load a byte string .
5816	Delete an object .
5817	Check the return value of a function .
5818	Load the application .
5819	Initialize Flask - Common extension .
5820	Start the web server .
5821	Convert value to native format .
5822	Crops an image on a centerpoint .
5823	Process an image .
5824	Process an image .
5825	Process an image .
5826	If data is None open it .
5827	Process placeholder image .
5828	Update VersatileImageField .
5829	Update the ppoi field .
5830	Override save_form_data
5831	Return the formfield for this field .
5832	Convert object to string .
5833	Automatically import the versatileimagefield registry .
5834	Unregister a registered SizedImage subclass .
5835	Unregister a filter .
5836	Return the URL for this image .
5837	Build filters and sizers .
5838	Get the root folder for this image .
5839	Get the root folder for this image .
5840	Returns the path to the folder containing the filtered sized root folder .
5841	Delete matching files from storage .
5842	Preprocess an image .
5843	Preprocess GIF .
5844	Preprocess JPEG image .
5845	Retrieve an image from storage .
5846	Save an image file .
5847	Return the ppoi as a string .
5848	Create resized image .
5849	Render the file input .
5850	Build the context for the widget .
5851	Return a copy of base_attrs with extra attributes added .
5852	Get the path to a resized image .
5853	Get the path to a filtered file .
5854	Validate a list of sizes .
5855	Get url from image key .
5856	Get the Rendition Key Set for a key .
5857	Format an instruction .
5858	Format a function .
5859	Decodes the given bytecode .
5860	Decode a module .
5861	Decorator to mark functions as deprecated .
5862	Connect to the server .
5863	Close the connection .
5864	Read the result from the server .
5865	Handle a request .
5866	Parse an AGI result line
5867	Check status code .
5868	Reset the generator .
5869	Return a list of instances .
5870	Get the metadata for a given path .
5871	Get the primary keys of a model .
5872	Deserializes the given value .
5873	Get an existing instance from the database .
5874	Get declared fields .
5875	Load data into this instance .
5876	Split kwargs and association attributes .
5877	Delete orphaned tables .
5878	Create a new database snapshot .
5879	List snapshots .
5880	Restore a snapshot .
5881	Remove a snapshot .
5882	Rename a snapshot .
5883	Replace a snapshot .
5884	Shuffle the indexes .
5885	Textacy cleaner .
5886	Apply func to data in parallel .
5887	Process text constructor .
5888	Process text .
5889	Parallel process text .
5890	Generate histogram of document length .
5891	Returns a Pandas DataFrame with counts of words in the corpus .
5892	Map a parameter type to a list of supported types .
5893	Parse a dictionary of interfaces into a dictionary of parameters .
5894	Return the inverse bidict .
5895	Update with rollback .
5896	Return a copy of this bidict .
5897	Return a copy of this Bidict .
5898	Return True if this Bidict is equal to another .
5899	Return the inverted version of arg .
5900	Clear the queue .
5901	Move a node to the end of the tree .
5902	Write text to a temporary file .
5903	Get a list of contacts .
5904	Merge command line arguments into config .
5905	Load address books .
5906	Prepare search queries for address book parsing
5907	Create a new contact .
5908	Add birthdays to vCard list .
5909	Given a list of vCard objects and a list of vCard objects return a list of phone number strings
5910	List contacts
5911	Modify a vCard contact .
5912	Delete a contact
5913	Execute the source command .
5914	Merge a list of vcards .
5915	Copy or move a vCard .
5916	Get action by alias .
5917	Convert a boolean config value to a boolean
5918	Create a new contact .
5919	Create an AddressBook object from a file .
5920	Create a contact object from user input .
5921	Create a contact object from an existing contact .
5922	Get a list of names from a vCard field .
5923	Add a list of categories .
5924	Parse type value .
5925	Convert a list into a string .
5926	Convert a string to a date .
5927	Compare two UIDs .
5928	Search all contacts
5929	Search contacts by name .
5930	Search for contacts matching the given UID .
5931	Search the address book .
5932	Return a dictionary mapping short UIDs to lists of contacts .
5933	Returns the short UID of the given UID .
5934	Find vCard files matching the given search pattern .
5935	Load a VCard file .
5936	Get abook by name .
5937	List of available architectures .
5938	Available architectures .
5939	Get the argspec for a function .
5940	Dispatch a command .
5941	Safely read a prompt .
5942	Encodes the given value to UTF - 8 .
5943	Guesses the type of the given kwargs .
5944	Add commands to a parser .
5945	Decorator to mark a function as named .
5946	Decorate a function with positional arguments .
5947	Prompt user for confirmation .
5948	Replace the current query with a new one .
5949	Like filter .
5950	Get the cached result of the query .
5951	Return the first entity in the collection .
5952	Delete entities from the database .
5953	Called when an entity is deleted
5954	Add a prefix to a redis key .
5955	Estimate the lua code for a work index .
5956	Perform a search .
5957	Count the number of elements in a sorted set .
5958	Connect to the database .
5959	Convert a string to a list of unicode strings .
5960	Refreshes indices for a model .
5961	Clean old index .
5962	Add an object to the database .
5963	Get the value of a key .
5964	Write data to redis .
5965	Save changes to the database .
5966	Delete the object .
5967	Get a list of models from Redis .
5968	Register a reduce function .
5969	Open a semaphore .
5970	Return the number of available CPUs
5971	Send a result to the result queue .
5972	Process a worker .
5973	Add a work item to the call queue .
5974	Ensure the executor is running .
5975	Wrap non - picklable objects .
5976	Start the server .
5977	Duplicate a file descriptor .
5978	Get a reusable executor .
5979	Wait for the jobs to complete .
5980	Get preparation data .
5981	Prepare process data .
5982	Close all open fds .
5983	Terminate a process without using psutil .
5984	Terminate a process .
5985	Get the exitcodes of the terminated workers .
5986	Format the exitcodes .
5987	Main program .
5988	Ensure the semaphore tracker is running .
5989	Process an event .
5990	Run the program .
5991	Interactively interact with the terminal .
5992	Split a string into a list of arguments .
5993	Get the stack trace for a frame .
5994	Run a list of hooks .
5995	Forget the current stack .
5996	Get an integer from a string .
5997	Get an integer .
5998	Process commands .
5999	Queue startfile
6000	Find the next token in a string .
6001	Print error message .
6002	Read a command from stdin .
6003	Close the connection .
6004	Disassemble a message .
6005	Disassemble bytes .
6006	Count the number of frames in a frame .
6007	Get the name of the call function .
6008	Print a stack trace for a process .
6009	Lookup a subcommand by prefix .
6010	Show short help for a subcommand .
6011	Add a command callback .
6012	Run a subcommand .
6013	Start the debugger .
6014	Show a category of commands .
6015	lineinfo
6016	Find a frame that is a debugged function .
6017	Map thread names to thread IDs .
6018	Get an integer from a string .
6019	Get onoff or off .
6020	Set boolean value .
6021	Set an integer value .
6022	Run show_bool .
6023	Show an integer value .
6024	Show the value of the variable .
6025	Check if this is a def statement .
6026	Return True if this is a class definition .
6027	Quit the current thread .
6028	Set default background color .
6029	Determine if a color is dark .
6030	Get the signature of a function .
6031	Return a list of all expressions
6032	Display a frame .
6033	Format the message .
6034	Read a message from the socket .
6035	Log a debug message .
6036	Raise an error if a subcommand is undefined .
6037	Run routine .
6038	Pretty print a simple array .
6039	Look up the name of a signal .
6040	Lookup a signal by name .
6041	Return the canonical name of a signal .
6042	Set a handler for a signal .
6043	Check and adjust sighandlers .
6044	Show info signal
6045	Handle a signal .
6046	Handle a print signal .
6047	Handle a signal .
6048	Convert a filename to a module name .
6049	Search for a file in a list of directories .
6050	Try to find a file in a directory .
6051	Return a list of all . py files .
6052	Write a message to the output .
6053	Run the program .
6054	Columnize commands .
6055	Post a mortem .
6056	Close the connection .
6057	Write a message to the socket .
6058	Complete an identifier .
6059	Add a string to the command queue
6060	Add frames to ignore .
6061	Return the canonical name of a file .
6062	Return the filename of the debugger .
6063	Check if the tracer is started .
6064	Check if we should stop at this frame
6065	Set the next frame .
6066	Print the stack trace of a function .
6067	Run the debugger .
6068	Check that the function name is correct .
6069	Delete a breakpoint .
6070	Delete a breakpoint by its number
6071	Disable all breakpoints
6072	Disable a breakpoint by number .
6073	Delete all breakpoints between filename and lineno .
6074	Open a file .
6075	Read a line from stdin .
6076	Prompts the user for confirmation .
6077	r A whitespace token .
6078	r
6079	Execute a query and return a Future .
6080	Restore original login .
6081	Load a module .
6082	Iterate over the documents in a project record .
6083	Main function .
6084	Transcode a JSON or CSV file to a stream .
6085	Open a JSON or CSV file .
6086	Normalize data in a stream .
6087	Convert a date string to a timestamp .
6088	Detect file encoding .
6089	Stream json lines from file .
6090	Transcode a file to UTF - 8 .
6091	Open a CSV file .
6092	Read a CSV file .
6093	Main function .
6094	Connect to a Luminoso API .
6095	Save a token to disk .
6096	Make a request .
6097	Delete a resource .
6098	Wait for a build to finish .
6099	Get the root URL for a given URL .
6100	Save a token to a file .
6101	Make a request to the Luminoso API .
6102	Make a POST request .
6103	Change the path .
6104	Get the default account .
6105	Get the documentation of this resource .
6106	Wait for a job to finish .
6107	Perform a GET request .
6108	Print result as CSV .
6109	Read parameters from JSON file .
6110	Simplify a document .
6111	Create a project .
6112	Upload documents to a project .
6113	Main function .
6114	Upload a stream of documents to a project .
6115	Upload a file .
6116	Main function .
6117	Create a LuminosoUser object from a username and password .
6118	Login the user .
6119	Post login page .
6120	Get data .
6121	Fetch data for each period
6122	Load the View class from the dotted view name .
6123	Initialize the view .
6124	Render view for get request .
6125	Handle incoming messages
6126	Update the menus
6127	Return the default handlers for this site .
6128	Called when a message is received
6129	Update from enaml
6130	Create the widget .
6131	Initialize widget .
6132	Destroy this component .
6133	Called when a child is added .
6134	Remove a child from this component .
6135	Iterate over all child widgets of this node .
6136	Set an attribute .
6137	Update a proxy .
6138	Notify that the document has been modified .
6139	Return a list of nodes matching the query .
6140	Prepare the proxy .
6141	Initialize the widget .
6142	Set the source of this component .
6143	Called when a change in mode is detected .
6144	Observer for block changes
6145	Update the children of this block .
6146	Read a file .
6147	Print an error message and exit .
6148	Error parsing command line .
6149	Get a product by name .
6150	Create a new session .
6151	Reset the store .
6152	Returns a list of stores matching the search term .
6153	Set delivery system .
6154	Get a store s catalog
6155	Add an item to the basket .
6156	Add a pizza to the basket .
6157	Adds a side to the basket .
6158	Removes an item from the basket .
6159	Set payment method
6160	Process payment .
6161	Perform a GET request .
6162	Perform a POST request .
6163	Call API .
6164	Add an item to the menu .
6165	Add an exit item to the list .
6166	Draw the menu .
6167	Process user input .
6168	Select the currently selected item .
6169	Parse old menu data .
6170	Return the top N values in a DataFrame .
6171	Group a DataFrame by a given group .
6172	Convert string to datetime
6173	Convert datetime to string .
6174	Change date format of a dataframe .
6175	Cast a column to a given type .
6176	Rank the values in a DataFrame .
6177	Waterfalls a dataframe .
6178	Perform a basic math operation .
6179	Round values in a DataFrame .
6180	Absolute values of a dataframe .
6181	Pivot a DataFrame into a new DataFrame .
6182	Pivot a dataframe by group .
6183	Group a DataFrame by columns .
6184	Compute the cumulative sum of a dataframe .
6185	Add missing row to a dataframe .
6186	Decorator to catch exceptions .
6187	Decorator to log a message .
6188	Log the execution time of a function .
6189	Decorator to log input and output shapes .
6190	Rename a dataframe .
6191	Compute the cumulative sum of a dataframe .
6192	Combine columns with aggregation .
6193	Get a parameter value from a function call .
6194	Remove cachedir entries older than limit .
6195	Roll up a dataframe by grouping levels .
6196	Find the maximum value of a column in a dataframe .
6197	Find the minimum value of a column in a dataframe .
6198	Fill missing values in a DataFrame .
6199	Add an offset to a date object .
6200	Add months .
6201	Add nb_years years to dateobj .
6202	Parse a date string .
6203	Filter a dataframe by date .
6204	Calculate percentage of a column
6205	Ada family core .
6206	Updates the learning rate of the optimizer .
6207	Get training parameters
6208	Computes the updates for the given parameters and gradients .
6209	First glimpse sensor .
6210	Prepare the model .
6211	Compute the cost of a tensor .
6212	Apply a function to the training and validation sets .
6213	Vectorize target .
6214	Report training and validation results .
6215	Train the model .
6216	Sample a batch of samples .
6217	Compute the alignments of the model .
6218	Compute the context vector .
6219	Concatenate variables .
6220	Pad the training and validation sets .
6221	RMSprop core .
6222	Report time .
6223	Compute the cost function for the given data .
6224	Run the monitor .
6225	Build the loop variables .
6226	Scan a step of the loop .
6227	Compute momentum updates and free parameters .
6228	Run iftrain .
6229	Set the number of batches to skip .
6230	Load parameters from a file .
6231	Train one step .
6232	Run the training step .
6233	Run a valid step .
6234	Report a score map .
6235	Get the current data set .
6236	Apply a function to the tensor .
6237	Print information about the parameters .
6238	Create a variable of the specified type .
6239	Create neural variables from dataset .
6240	Return a shared value .
6241	Stack encoders .
6242	Stack decoders .
6243	Encode x .
6244	Decodes x .
6245	Create a 2D Gaussian kernel .
6246	Register a layer .
6247	Monitor layer outputs .
6248	Returns a list of all parameters
6249	Setup input variables
6250	Compute the output of a function .
6251	Save parameters to file .
6252	Load parameters from a file .
6253	Report network statistics .
6254	Register parameters .
6255	Register multiple updates .
6256	Register new training updates .
6257	Register monitors .
6258	Calculate the L2 norm of a list of tensors .
6259	Dump elt_to_pickle into file_obj .
6260	Load elements from a file .
6261	Load parameters from a file .
6262	Create request elements .
6263	Decodes a user state .
6264	Parse credentials data .
6265	Filter x - request elements .
6266	Log the user in .
6267	Normalize a dictionary .
6268	Convert a list of items to a dictionary .
6269	Try JSON or XML first .
6270	Resolve provider class .
6271	Create a cookie .
6272	Save session data .
6273	Get cookie data .
6274	Return the deserialized data .
6275	Generate a signature .
6276	Serialize a value .
6277	Check if the token is valid .
6278	Check if the session has expired so far .
6279	Serialize credentials .
6280	Return True if content is a binary string .
6281	The response content .
6282	Create request elements .
6283	Get user information .
6284	Authorizes the request .
6285	Login to OpenID .
6286	Generate a session key .
6287	Set a session variable .
6288	Generate a CSRF token .
6289	Log a message .
6290	Return True if status is in category .
6291	Split a URL into base and params .
6292	Decorator for cross - origin middleware .
6293	Set CORS headers .
6294	Return a dictionary of keyword arguments for the given app instance .
6295	Return a string representation of an object .
6296	Ensure inst is iterable .
6297	Return True if a is close to b .
6298	Decorator to mark a function as deprecated .
6299	Deserialize audio segment .
6300	Create an AudioSegment from a file .
6301	Create an AudioSegment from a NumPy array .
6302	Execute sox command
6303	Filter a WAV file for silence .
6304	Compute the FFT of the signal .
6305	Generate frames from raw data .
6306	Normalize the SPL by the average RMS .
6307	Return a copy of this segment with the other segments combined .
6308	Resample the audio file .
6309	Serialize this segment .
6310	Compute the spectrogram of the image .
6311	Given a list of offset_front_ids and a list of offsets_corresponding_to_onsets find the offset_front_id that overlaps with those offsets .
6312	Get the offset front id after onset_sample_idx .
6313	Get the offset front id after an onset front .
6314	Given an onset_front_id and an offset_fronts and an offset_fronts and an offset_fronts and an onset_fronts and an offset_fronts and an onset_fronts and an offset_fronts and an onset_fronts and an onset_fronts and an onset_fronts and an onset_fronts and an onset_fronts and an onset_fronts and an onset_fronts and an onset_fronts and an onset_fronts and an onset_fronts and an onset_front
6315	Given a set of onset fronts and an offset fronts return a list of onset fronts that overlap with the offset fronts .
6316	Update the segmentation mask .
6317	Return the id of the front of the index .
6318	Given a list of onset_fronts return a generator that yields the IDs of each of them .
6319	Given a list of onset_fronts and onset_front_id return a list of offsets corresponding to those onsets .
6320	Remove overlaps in fronts
6321	Remove fronts that are too small .
6322	Break a list of fronts into poorly - matched fronts .
6323	Merge adjacent segments .
6324	Split a mask into multiple masks .
6325	Downsample a two - dimensional mask .
6326	Perform ASA task .
6327	Bandpass filter .
6328	Lowpass filter .
6329	Convert a list of lists to tf input .
6330	Expand and standardize a dataset .
6331	Compare two lists ignoring order .
6332	Group audit scores by group .
6333	Load audit confusion matrices .
6334	Convert a list of lists to TF inputs .
6335	Update the index URL from the configuration files .
6336	Autodetect requirements files .
6337	Resolve all streams .
6338	Resolve a stream property .
6339	Resolve by predicate .
6340	Handle an error .
6341	Push a sample to the stream .
6342	Push a chunk of data .
6343	Get information about the stream .
6344	Open a stream .
6345	Perform a time - correction .
6346	Get a child element by name .
6347	Get the next sibling of this element .
6348	Return the previous sibling of this element .
6349	Set the name .
6350	Set the value of the field .
6351	Append a child element .
6352	Prepend a child element .
6353	Append a copy of an element .
6354	Return a copy of this XMLElement with the contents of elem appended .
6355	Remove a child from this node .
6356	The results of the resolver .
6357	Print a pair of words .
6358	NAME autocomplete . py
6359	Compute the edge n - grams from a token .
6360	Iterate over a pipe .
6361	Perform an unordered map operation .
6362	Make a fuzzy word .
6363	Do a fuzzy query .
6364	Do fuzzy index .
6365	Extrapolate manytomany relations .
6366	Show help for command .
6367	DBINFO
6368	DBKEY
6369	Geohash command .
6370	List housenumbers
6371	Index a document
6372	BESTSCORE
6373	str - distance between two strings
6374	Send a request .
6375	Map a list of requests to a list of responses .
6376	Get a Bits object from an array .
6377	Convert a HArray to a BitVector .
6378	Convert a slice to a slice .
6379	Find files matching pattern in directory .
6380	Return True if sigOrVal is in iterable .
6381	Static ForEach generator .
6382	Return a copy of sig with howMany bits filled .
6383	Return the ceil of x .
6384	Checks if a number is a power of 2 .
6385	Add a case statement .
6386	Register a default statement .
6387	Register all interfaces of an object .
6388	Called before each simulation step .
6389	Log a change to the vcdWriter
6390	Render a HWProcess .
6391	Return a list of Agent objects that can be added to a unit .
6392	Get the associatedClk property .
6393	Yield unique elements from an iterable .
6394	Group a collection by a function
6395	Flatten an iterable .
6396	Merges nested if statements into one .
6397	Remove unconnected signals .
6398	Check if the statement is too simple .
6399	Merges two processes .
6400	Given a list of Process instances return a list of Process instances .
6401	Send a write request .
6402	Convert a Unit object to a list of Unit objects .
6403	Given a list of HDLStatements return the name for the outputs of the process .
6404	Cut off drivers of a signal .
6405	Register a signal .
6406	Synthesize this instance .
6407	Get the maximum ID for a given statement .
6408	Returns the maximum id of the statements in a process .
6409	Write data to the interface .
6410	Change direction of master interface .
6411	Load declarations .
6412	Returns a list of signals for this interface .
6413	Returns the physical name of this port .
6414	Return the bit length of the array .
6415	Returns the sensitivity of an operation
6416	Evaluate an operator .
6417	Convert bits to another type .
6418	Convert a signed integer to a HStructT .
6419	Return the number of words between start and end .
6420	Group by word index .
6421	Pretty prints an interface .
6422	Generate frames from a TransTmpl .
6423	Walks through the parts of this TransPart .
6424	Return a generator that packs the given data .
6425	Clean signal meta .
6426	Given a list of statements and a list of outputs discover the enclosure for each statement .
6427	Given a list of signals and a set of event dependent sensitivity values add them to the context .
6428	Get the context of the current statement .
6429	Called when self is reduced .
6430	Merge two Statements .
6431	Check if two lists are mergable .
6432	Merge a list of statements into a single list of statements .
6433	Merge two lists of statements .
6434	Try to reduce a list of statements .
6435	Called when parent event dependent .
6436	Set the parent statement .
6437	Given a list of statements register them as stements .
6438	Destroy this statement .
6439	Register a new register .
6440	Create a new HStruct with the given name and dtype .
6441	Clean the subunit .
6442	Recursively walk the fields of sigOrVal .
6443	Unpack data into a HStruct
6444	Return a copy of this operator with the specified signed value .
6445	Add sensitivity to a process .
6446	Evaluate a set of conditions .
6447	Connects a SimUnit to another SimUnit .
6448	Return a function that can be used to update the next value .
6449	Create an updater for an array .
6450	Create a vector from a numpy array .
6451	Registers the given HWProcess .
6452	Evaluate a param .
6453	Set the value of this parameter .
6454	Create a HStruct from an interface map .
6455	Recompute the port count for all memories .
6456	Get index on which is index applied
6457	Convert a Python value to a Python value .
6458	Try to auto - cast sigOrVal to toType .
6459	Cast the given value to the given type .
6460	Walk the parameters of an interface .
6461	Return a list of connected physical interfaces .
6462	Packs an interface into a signature .
6463	Convert a rom to a process .
6464	Convert this unit to RTL .
6465	Register an interface .
6466	Try to reduce and return val if val is zero .
6467	Try to reduce a value to a mask .
6468	Get the base name scope .
6469	Return True if the object should be serialized .
6470	Create a new HdlType .
6471	If container .
6472	Get the base condition of a conjunction .
6473	Returns a SimBitsT object for the given width and signed flag .
6474	Get the name of a constant .
6475	Cut off drivers of this signal .
6476	Load data from a numpy array .
6477	Load from HStruct .
6478	Load from HType .
6479	Return the number of items in this HArray .
6480	Walks the tree starting at the given offset .
6481	Return the sign of val .
6482	Merge this IfContainer with another IfContainer .
6483	Get the indent string for a given indent number .
6484	Raises IntfLvlConfErr if a property is already in use .
6485	Register a parameter .
6486	Update parameters from otherObj .
6487	Register a unit .
6488	Register an interface .
6489	Register an array .
6490	Get a single driver .
6491	Perform static evaluation on all operands .
6492	Create a new RtlSignal with resT .
6493	Return a copy of this context with the indent increased .
6494	Try to connect to a unit .
6495	Propagate the current clock to all units
6496	Propagate clk_n and rst_n .
6497	Propagate clk_n and rst_n .
6498	Propagate rst_n to all units .
6499	Propagate RST to all units .
6500	Iterate over the bits of a signal .
6501	Return a tuple of a boolean indicating whether the object should be serialized or not .
6502	This method is used to serialize an object only once .
6503	Return a tuple of a boolean and a dictionary of private properties .
6504	Get the name of this object .
6505	Make an association .
6506	Prepare a unit for simulation .
6507	Convert a Unit to a SimModel .
6508	Re - connects signals from synthesizedUnitOrIntf to modelCls
6509	Convenience function for simUnitVcd .
6510	This method is called when the IOTile device receives a write request .
6511	Connect this port to a signal .
6512	Registers a signal to be sent to this port .
6513	Connects this driver to the network .
6514	Get the international signature of this instruction .
6515	Return True if process is dependent on sig .
6516	Add a process to the queue .
6517	Add a process to the run queue .
6518	Schedule a comb update done event .
6519	Schedules the values to be applied to the combiner .
6520	Resolve strategy .
6521	Run all comb processes .
6522	Run the sequence processes .
6523	Apply values to signals .
6524	Return a copy of sig .
6525	Write value to signal .
6526	Add a process to the queue .
6527	Simulate a unit .
6528	Create a function that can be used as an op .
6529	Convert ternary operators to if statements .
6530	Create a HDL process .
6531	Calculate the hamming distance between two hashes .
6532	Calculate the average hash of an image .
6533	Calculate the distance between two images
6534	Setup Vizio platform
6535	Update state .
6536	Mute a volume .
6537	Move the volume up .
6538	Move volume down .
6539	Set the volume level .
6540	Reset all pieces .
6541	Return the piece at the given square .
6542	Remove piece at square .
6543	Set piece at square .
6544	Check if move is suicide or check by dropping pawn .
6545	True if the king was suicide .
6546	Is game over?
6547	Checks if the game is a checkmate .
6548	Return True if the repetition is a fourfold repetition .
6549	Pop a move off the stack .
6550	String representation of the board .
6551	Push a usi to the queue .
6552	Calculate zobrist hash .
6553	The piece s symbol .
6554	Create a color from a symbol .
6555	Return the usi for this piece .
6556	Create a piece from a USI string .
6557	Parse a list of commits .
6558	Parse a commit message .
6559	Load config from CLI .
6560	Execute from command line with config .
6561	Add config file argument .
6562	Load config file .
6563	Generate a YAML string from a dictionary .
6564	Return a Markdown representation of the class .
6565	Cast val to the correct type .
6566	List dates between two dates .
6567	Parse date from string
6568	Load a currency file .
6569	Set missing rates to None .
6570	Compute missing rates for a given currency .
6571	Get the rate for a given date .
6572	Convert an amount to another currency .
6573	Group an iterable by n elements .
6574	Animate frames .
6575	Read a single record .
6576	Write a record to the file .
6577	Map words to memory .
6578	Read DAF file comments .
6579	Add an array .
6580	Closes the DAF .
6581	Given a tdb and a tdb2 return a list of positions
6582	Closes the DAF .
6583	Load the PCK data .
6584	Compute tdb and tdb2 .
6585	Visit a Call node .
6586	Visits binary operations .
6587	Visit a Dict node .
6588	visit a JoinedStr node by returning a fresh instance of it
6589	Visit a keyword node .
6590	Visit an except handler node .
6591	Detect the logging level of a node .
6592	Get the name of the except handler .
6593	Get the id attribute of a value .
6594	Return True if node is a bare exception .
6595	Check exc_info keywords .
6596	Delete a file if needed .
6597	Create a widget for a database file .
6598	Return rendered PDF .
6599	Override render_to_response .
6600	Quote a string .
6601	Configure MongoDB .
6602	Convert string to underscore
6603	Ensure the collection is indexed .
6604	Parse a CSV file .
6605	Load content from file .
6606	Parse the given line and return a PriceModel object .
6607	Translates a symbol in the database .
6608	Load symbol maps .
6609	Get the session .
6610	Add a price .
6611	Import prices from CSV file .
6612	Show the latest prices available for all securities .
6613	List prices .
6614	Download prices .
6615	Remove old price entries .
6616	Get the default session .
6617	Add a new symbol map .
6618	List all symbol maps .
6619	Get symbol map by symbol .
6620	Read lines from file .
6621	Map entity to price model .
6622	Map a PriceModel to a Price entity .
6623	Read configuration file .
6624	Get config template path .
6625	Create user config file
6626	Get the path to the config file .
6627	Get the contents of the config file .
6628	Set a configuration option .
6629	Get the value of an option .
6630	Save configuration to file .
6631	Parse a symbol into namespace and mnemonic .
6632	Add a new price entity .
6633	Add a price entity to the database .
6634	Download and save a price .
6635	DAL session object .
6636	Get a list of prices .
6637	Get prices on a given date .
6638	Prune all prices .
6639	Remove all prices for a given symbol .
6640	Download a price from Finance .
6641	Get security data .
6642	Return a partial function .
6643	Update child calls .
6644	Recursively descend the tree .
6645	Decorate a function to remove the root node from its children .
6646	Check that student and solution parts have the same length .
6647	Raises InstructorError if code and incorrect_msg are specified .
6648	Assert that student code contains text .
6649	Verify that an import of a package exists .
6650	Check if student output is correct .
6651	Check if a printout exists .
6652	Assert that there are no errors .
6653	Check if an option has been chosen .
6654	Check a function .
6655	Get the result from a process .
6656	Override a solution .
6657	Check if an instance is in the solution process .
6658	Return a list of all defined items .
6659	Convert this state to a child state .
6660	Get the output of a parser .
6661	Test if a state has a context loop .
6662	Check if a state has a context .
6663	Check a part .
6664	Check the index of a part .
6665	Check the arguments of a function .
6666	Check a call .
6667	Get true anomaly .
6668	Initialize the application .
6669	Initialize LDAP configuration .
6670	Add a server to the pool .
6671	De - contextualise a connection .
6672	Teardown the request context .
6673	Authenticate a user .
6674	Perform a direct bind to the LDAP server .
6675	Binds to LDAP and performs an LDAP Search .
6676	Get groups for a specific user .
6677	Get information about a user .
6678	Get information about a user .
6679	Get an LDAP object .
6680	Make a connection to the LDAP server .
6681	Make a connection to the database .
6682	Create a connection to the server .
6683	Destroy a connection .
6684	Perform a search .
6685	Search for labels .
6686	Search a repository .
6687	Search for jobs in a collection .
6688	Speak the client .
6689	Announce command .
6690	Update secrets .
6691	Update headers .
6692	Require client secrets
6693	Download a file .
6694	Stream the response to a file .
6695	Update authorization token .
6696	Get or create a folder .
6697	Read a response from the server .
6698	Get the bucket .
6699	Update the secrets .
6700	Initialize the client .
6701	Load secrets .
6702	Get a list of logs
6703	List all logs in the bucket .
6704	Create an endpoint folder .
6705	Initialize transfer client .
6706	List all containers
6707	Show backend status .
6708	Add a variable to a client .
6709	Remove a client variable
6710	Activate SREGISTRY .
6711	Delete a backend .
6712	Update the base image name .
6713	Create a basic auth header .
6714	Generate a signature .
6715	Generate a signature for a request .
6716	Perform a DELETE request .
6717	Make a HEAD request to url .
6718	Paginate a GET request .
6719	Verify of certificates disabled .
6720	Remove an image .
6721	Get the sregistry version lookup .
6722	Return a list of installed requirements
6723	Get Singularity version .
6724	Check if a software is installed .
6725	Get the installation directory .
6726	Get the path to the thumbnail for the robot .
6727	Run a command .
6728	Get metadata for an image file .
6729	Update the secrets .
6730	Print the results of a build .
6731	Kill all running commands .
6732	List logs for a container .
6733	Get all collections
6734	Update the secrets .
6735	Update secrets .
6736	Get SREGISTRY client .
6737	Run IPython .
6738	Get manifests for a repository .
6739	Get the manifest for a repository .
6740	Get the download cache directory .
6741	Extracts environment variables from Docker container configuration .
6742	Update the base setting .
6743	Update private token .
6744	Get the metadata for this job .
6745	Get client settings .
6746	Get and update a setting .
6747	Update a client setting .
6748	Generate a signature for a request .
6749	List builders .
6750	Load templates by name
6751	Get the IP address of an instance .
6752	Run a build .
6753	List containers in the bucket .
6754	List all containers .
6755	Command line entry point .
6756	Main function .
6757	Initialize the database .
6758	Get build template .
6759	List all endpoints .
6760	List all endpoints
6761	List files at an endpoint .
6762	Share an image .
6763	Read client secrets .
6764	Build the services to use .
6765	Delete an object .
6766	Delete a file .
6767	Destroy an instance .
6768	Get all subparsers and print help
6769	Generate a random string .
6770	Get a temporary directory path .
6771	Extract a tar archive .
6772	Extract a tar archive .
6773	Get the hash of a file .
6774	Read a file .
6775	Read a JSON file .
6776	Clean up a list of files .
6777	Push an image to S3 .
6778	Get or create a collection .
6779	Get a collection by name .
6780	Get a container .
6781	Get a list of images
6782	Inspect a container .
6783	Renames an image .
6784	Move image to path .
6785	Remove a container
6786	Add an image to the registry .
6787	Push an image to a registry .
6788	Parse a recipe header
6789	Find a single recipe in the manifest .
6790	Create a build package from a list of package files .
6791	Run a build .
6792	Update blob metadata .
6793	Format a container name .
6794	Return True if we should use the user color .
6795	Emit an error message .
6796	Write a message to a stream .
6797	Print a table of rows .
6798	Push a container to GCP .
6799	Get a template by name .
6800	Get image manifest
6801	Get build template .
6802	Update secrets .
6803	Make a string representation of a class .
6804	A context manager that raises S3 errors .
6805	Create a temporary file .
6806	Return a gravatar url for a user .
6807	Return a gravatar url .
6808	Check if an email has a gravatar .
6809	Get gravatar profile URL .
6810	Chimera blocks generator .
6811	Chimera block quadratic model .
6812	Enumerate resonance smiles
6813	Return a list of ResonanceMolSupplier objects .
6814	Normalize a molecule .
6815	Apply a transform to a molecule .
6816	Canonicalize a molecule .
6817	Validate smiles
6818	Disconnect a molecule .
6819	Standardize smiles .
6820	Enumerate tautomers in SMILES .
6821	Canonicalize Tautomer smiles .
6822	Standardize a molecule .
6823	Return the tautomer parent of mol .
6824	Find the parent fragment of a molecule .
6825	Remove stereochemistry from a molecule .
6826	Return the isotope parent of a molecule .
6827	Charge the parent of the given molecule .
6828	Get the superparent of a molecule .
6829	Main entry point for molvs
6830	Remove all fragments from a molecule .
6831	Choose a fragment from a molecule .
6832	Integrate an IVP .
6833	Get GitHub stats
6834	Get members of an organization .
6835	Get teams of organization .
6836	Get repos .
6837	Get the total number of contributors for a repo .
6838	Return the number of open pull requests and number of closed pull requests .
6839	Get all issues for a repository
6840	Get the readme for a repo .
6841	Get license for repo .
6842	Get all commits for a repository
6843	Write org . json file
6844	Write totals to file .
6845	Write languages to file .
6846	Make sure directory exists .
6847	Remove a date from a file .
6848	Government organizations .
6849	Create a GitHub Enterprise session .
6850	Check API rate limits .
6851	Connect to GitHub .
6852	Query GitHub repositories .
6853	Get organization .
6854	Write stargazers to a file .
6855	Create a project from a gitlab repository .
6856	Create a project object from DOE code .
6857	Return the license object for a given license .
6858	Get data from GitHub
6859	Get all releases
6860	Get a list of referrers
6861	Get data
6862	Write a list of github repos to a JSON file .
6863	Write data to file .
6864	Check data redundancy
6865	Write data to file .
6866	Write referrers to file .
6867	Process DOE CODE JSON .
6868	Process a DOE Code URL .
6869	Process a JSON file .
6870	Login to GitHub .
6871	Get all members of an organization
6872	Write this user to a file .
6873	Connect to a stashy server .
6874	Connect to gitlab .
6875	Query repos .
6876	Return the SLOC of a git repo
6877	Compute labor hours in a month .
6878	Remove null values from a dictionary .
6879	Read a GQL file .
6880	Query GitHub from a file .
6881	Submit a git query
6882	Wait for a reset to happen .
6883	Waits for a number of seconds .
6884	Load data file .
6885	Save data to file .
6886	Create a connection to TFS .
6887	Create a project analysis client .
6888	Create a TFS Core Client .
6889	Create TFS Git Client .
6890	Create TFS Git Client
6891	Get Git Repositories for a project .
6892	Get Tfvc Branches for a project .
6893	Get the number of commits for a year .
6894	Calculate the total number of commits for each week
6895	Write last year commits to file .
6896	Configure backends .
6897	Return a MetricsInterface for the given thing .
6898	Record a timing event .
6899	Context manager for timing metrics .
6900	Decorator for timing a function .
6901	Generate a tag .
6902	Log a timing event .
6903	Log a histogram entry .
6904	Roll up metrics .
6905	Order a list of members by the given field .
6906	Convert a DB value to an enum .
6907	Convert a value to a python value .
6908	Make sure the value is of the correct type .
6909	Resolve a path .
6910	Given a list of usls and a set of allowed terms return a mapping of cells to usls .
6911	Return the mean value of the series .
6912	Increment the counter by value .
6913	Return the mean rate of the counter .
6914	Mark this Derive .
6915	Send a metric to the buffer .
6916	Serialize a metric .
6917	Format a metric string .
6918	Send a batch of metrics .
6919	Get the value of an option .
6920	Make sure data is valid JSON .
6921	Get or set a setting .
6922	Get a mapping of ledger codes to guids .
6923	Get the current divisions .
6924	Map exact invoice numbers to foreign invoice numbers .
6925	Solve the SAT problem .
6926	Create a view .
6927	Create a form view .
6928	Create a method view .
6929	Create an APIView .
6930	Create a generic API view .
6931	Register a view set handler .
6932	Create a stream from a file descriptor .
6933	Read data from the socket .
6934	Close the connection .
6935	Called when a connection lost .
6936	Register a watch request .
6937	Unwatch an alias .
6938	Register a watch for a path .
6939	Setup the client .
6940	Get an event from the stream .
6941	Trigger a touch event .
6942	Update the short and long intervals .
6943	Update the short and long intervals .
6944	Close all connections .
6945	Return True if the connection is starved .
6946	Connect to nsqd .
6947	Query the NSQ Lookup Service .
6948	Set the maximum number of in - flight connections .
6949	Log a message to the logger .
6950	Register a listener .
6951	Remove a listener .
6952	Trigger an event .
6953	Publish a message to a topic .
6954	Set the feature transform to use .
6955	Compute the prediction of the model .
6956	Calculate the theta of a point
6957	Parse a log file .
6958	Remove temporary fastq files
6959	Merge default adapters .
6960	Run trimmomatic .
6961	Read a depth file .
6962	Main function .
6963	Set template path
6964	Set main channel names .
6965	Get user channel information
6966	Render a template .
6967	Return the template as a string .
6968	Set the input and output channels .
6969	Update main fork forks .
6970	Sets the secondary channel .
6971	Update the attributes of the component .
6972	Set the pipeline compiler channels .
6973	Set the raw inputs .
6974	Set secondary inputs .
6975	Add extra inputs to the process .
6976	Parse coverage header string .
6977	Parse an assembly file .
6978	Get the content of a sequence
6979	Filter contigs based on the given comparisons .
6980	Get assembly length
6981	Write the filtered assembly to a file .
6982	Write the assembly report to a file .
6983	Remove inner forks .
6984	Checks for errors in the pipeline string .
6985	Runs sanity checks in a pipeline string .
6986	Parse a pipeline string
6987	Given a fork process and a list of pipeline_list return the lane of the fork process .
6988	Parse lanes from raw string .
6989	Establish a linear connection between processes .
6990	Fork a connection between two processes .
6991	Add unique identifiers to the pipeline string
6992	Remove unique identifiers from pipeline links
6993	Check that the required files exist .
6994	Return a mapping of column names to positions in the header .
6995	Convert hours and minutes to seconds .
6996	Covert a string to a float .
6997	Extract pipeline processes from log file .
6998	Clear the inspect information .
6999	Update barrier status
7000	Retrieve the contents of a log file .
7001	Assess resource warnings .
7002	Update process stats
7003	Parse the log file .
7004	Update the parser and trace parser .
7005	Display the overview screen .
7006	Up or Down .
7007	Move right or left .
7008	Get the last n lines from the log file .
7009	Prepares the static info for the pipeline .
7010	Load a . treeDag . json file
7011	Get the hash of the run .
7012	Get the path to the nextflow pipeline file .
7013	Main script .
7014	Main function .
7015	Run Brew innuendo .
7016	Brew a recipe .
7017	List all available recipes .
7018	Validate a pipeline string .
7019	Builds the upstream pipeline for a task .
7020	Builds a pipeline fragment for a given task .
7021	Define a pipeline string
7022	Run auto pipeline .
7023	Return a string representation of a component .
7024	Write report to file .
7025	Main function .
7026	Fix contig names in assembly file .
7027	Remove temporary fastq files
7028	Parse files
7029	Parse a log file .
7030	Iterate over all entries in the storage .
7031	Get the contig id from a contig string .
7032	Get the plot data
7033	Write report data to . report . json file
7034	Main function .
7035	Parse an assembly file
7036	Get summary stats from contigs
7037	Returns a list of x - bar labels
7038	Calculate GC property .
7039	Calculate GC proportion for a sliding window .
7040	Run Skesa .
7041	Write a report to a JSON file
7042	Return the index of the last biased position in the list .
7043	Trimming range assessment .
7044	Get the optimal trim position for 5 and 3 .
7045	Retrieve summary information from a file .
7046	Check the validity of the summary file .
7047	Parse bowtie log
7048	Parse process name .
7049	Add a dependency to the pipeline .
7050	Search the tree backwards for a template .
7051	Build the header
7052	Build the footer
7053	Set main channels for all processes
7054	Set the init process .
7055	Set secondary channels
7056	Set status channels .
7057	Return a string representation of a resource dictionary .
7058	Return a string representation of a container .
7059	Returns a string representation of the parameters
7060	Returns a string with the merged parameters .
7061	Return manifest string
7062	Set the configurations
7063	Write a DAG to a file .
7064	Render pipeline .
7065	Write configuration files to the project directory .
7066	Export params to stdout
7067	Export directives to stdout
7068	Fetches the docker tags
7069	Build the nextflow .
7070	Set the Kmer range to the specified value .
7071	Main function .
7072	Get the hash of the report .
7073	Update the trace watch .
7074	Update the log watch .
7075	Send a live report .
7076	Initialize live reports .
7077	Close connection to the server .
7078	Convert a fastq file to a tab file .
7079	Run FastQC .
7080	Send Mash Dist to output file
7081	Main function .
7082	Build a list of available versions
7083	Main function .
7084	Colorize a message .
7085	Print the list of processes in a dict
7086	Processes all processes in process_map .
7087	Guess the compression type of a file .
7088	Get the range of a qual string .
7089	Get a list of valid encodings in a range .
7090	Parse a coverage table file
7091	Filter assembly file .
7092	Filter a BAM file based on coverage .
7093	Evaluate the minimum assembly coverage .
7094	Get assembly size from assembly file .
7095	Main function .
7096	Convert CamelCase to CamelCase .
7097	Return a mapping of process name to Process class .
7098	Main function .
7099	Quickhull algorithm .
7100	Map self . data to self . W
7101	Apply a median filter to X .
7102	Compute the Krnl gaussian .
7103	Compute Squared Euclidean distance .
7104	Compute the covariance matrix of X and G .
7105	Apply a gaussian filter .
7106	Compute the concentration of X
7107	Return the circular shift of X .
7108	Return the embedded space of X .
7109	Helper function for plotting algorithms .
7110	Plot boundaries .
7111	Plot the labels .
7112	Plot one track .
7113	Plot a tree .
7114	Extracts a list of feature segments from a feature matrix .
7115	Convert a list of feature segments into a 2D - FMC segment .
7116	Compute the similarity between two features .
7117	Fit to X and Y .
7118	Perform partial fitting .
7119	Read references from an audio file .
7120	Find Sandbox estimations .
7121	Save estimations to file .
7122	Get all boundary algorithms .
7123	Get configuration for a feature .
7124	Get dataset files
7125	Read hierarchy references from a jam file .
7126	Get the duration of a feature
7127	Write a MREX file .
7128	Get dataset file path .
7129	Align a list of beat times with a song .
7130	Estimate beats from the audio data .
7131	Read beat annotations from file .
7132	Compute beat sync features .
7133	Read features file
7134	Write features to a JSON file
7135	Returns a list of parameter names for this object .
7136	Compute framesync times
7137	Return a list of frame times for this feature .
7138	Get the audio file features .
7139	Select features .
7140	Preprocess features .
7141	Postprocess the data .
7142	Main function .
7143	Print results .
7144	Compute GTM results .
7145	Compute information gain .
7146	Process a track file .
7147	Get the name of the results file .
7148	Process a segmentation file .
7149	Add a config variable .
7150	Compute all features for a file .
7151	Process a file .
7152	Compute the gaussian cost .
7153	r Normalize a lognormal distribution .
7154	Normalize min and max values .
7155	Normalize a numpy array .
7156	Get the number of frames in a given duration
7157	Remove empty segments .
7158	Sonify a set of clicks .
7159	Synchronizes new labels with old labels .
7160	Process segmentation level .
7161	Align end hierarchies .
7162	compute distance to node
7163	Estimate the K - means of the K - means of the K - clusters
7164	Clustered data .
7165	Run kmeans on X
7166	Compute BIC
7167	Return the magnitude of X
7168	Convert segments . json file to bounds
7169	Convert a JSON bounds file to a numpy array .
7170	Convert segments json to labels
7171	Convert a JSON file to a list of beats
7172	Compute FFMPEG2D
7173	Compute the most frequent labels of X .
7174	Filter activation matrix .
7175	Get boundaries module .
7176	Get the module for a given label ID .
7177	Run hierarchical segmentation .
7178	Segment using the specified boundaries and labels algorithms .
7179	Run the segmentation algorithm .
7180	Process a track .
7181	Process audio file .
7182	Update the beta matrix using cvxopt
7183	Main function .
7184	Decorate a function as a coroutine .
7185	Return the sum of init and update .
7186	Set a task in the queue .
7187	Spool an iterable over words .
7188	Send source lines to target .
7189	Wraps an HTTP interface to make a push request .
7190	Translates from source to target .
7191	Get the translation table for a given language .
7192	Print the translation table .
7193	Remove nodes from a network .
7194	Write a network to a Pandas HDF5 file .
7195	Create a network from a Pandas HDF5 file .
7196	Set a variable .
7197	Aggregate accessibility variables .
7198	Get the ids of nodes in the kdtree .
7199	Plot the data .
7200	Set the pois for a given category .
7201	Find nearest pois for a given distance and category .
7202	Count the number of nodes below impedance
7203	Process a node .
7204	Make an OSM query .
7205	Build a node query .
7206	Query OSM for nodes .
7207	Check if value is a regular expression .
7208	Compares the given value against the given expectation .
7209	Decorate a function with a fluent proxy .
7210	Compares two values .
7211	Trigger methods on instance .
7212	Match a request against this matcher .
7213	Get a matcher by name .
7214	Initialize a matcher .
7215	Set the request body .
7216	Set the JSON body .
7217	Set a key value pair .
7218	Append functions to target .
7219	Trigger a request .
7220	Set the URL .
7221	Set headers .
7222	Add a matcher for a set of headers .
7223	Add a matcher for a list of headers .
7224	Set the Content - Type header .
7225	Set the query parameters .
7226	Set the request body .
7227	Add a JSON matcher .
7228	Add an XML matcher .
7229	Read a file .
7230	Set the status of the object .
7231	Set the error .
7232	Return a new or existing Response instance .
7233	Match incoming request against registered mock matchers .
7234	Activate an async function .
7235	Set the mock engine .
7236	Enable networking .
7237	Create a mock expectation .
7238	Remove a mock .
7239	Activate mock engine
7240	Disable mock engine .
7241	Check if we should use networking .
7242	Match a request against registered mock definitions .
7243	Return a copy of this request .
7244	Activate the engine .
7245	Use a temporal engine .
7246	Add an interceptor to the engine .
7247	Remove an interceptor by name .
7248	Get a setting .
7249	Convert the DecryptedCol to SQL .
7250	Set the original value on the instance .
7251	Get placeholder .
7252	Returns a DecryptedCol instance for the given alias .
7253	Returns a placeholder for the public key .
7254	Hunt for repeated YAML keys .
7255	Base regression function
7256	Return the inverse of the covariance matrix .
7257	r Recursively walk the tree .
7258	Calculate averages for all nonterminals .
7259	Propagate averages for a node .
7260	Explained variance .
7261	Compute the regression model .
7262	Find the root of the tree .
7263	Set the integral merger rate
7264	Calculate the number of branches in the tree
7265	Calculate the cost of a node .
7266	Attach the merger cost to the tree .
7267	Optimize the coalescent time scale .
7268	Generate a sequence from a profile .
7269	Normalize a profile .
7270	Set the GTR value .
7271	Set GTR model .
7272	Set the sequence length .
7273	Assign sequences to nodes
7274	Prepare the tree .
7275	Prepares the tree of nodes .
7276	Calculate the distance to the root of the tree .
7277	Reconstruct the tree anc .
7278	Compute branch mutation matrix
7279	Return the expanded sequence of a node .
7280	Create the Fitch profiles
7281	Return the fitch state of a node .
7282	Find the intersection of two arrays .
7283	Compute the LH of the tree .
7284	The ancestral likelihood of the tree .
7285	Convert branch length to GTR .
7286	Perform branch length optimization .
7287	Run the branch length optimization .
7288	Compute the optimal branch length for a node .
7289	Optimize sequences and branch lengths .
7290	Get the reconstructed alignment of the tree .
7291	Compute the Q matrix
7292	Create a custom GTR instance .
7293	Return the standard model .
7294	Check that Q is all zero
7295	Given a sequence pair and a multiplicity estimate return the logarithm of the probability of t being greater than zero
7296	Compute the optimal t for a sequence pair .
7297	Compute the optimal probability of a sequence to be separated by the time t .
7298	Compute the log likelihood of a t - profile .
7299	Evolve a profile to a tensor .
7300	Compute the log likelihood of a sequence .
7301	Set branch length mode
7302	Apply a clock filter to the tree .
7303	Plot the root to tip .
7304	Resolve multiple polytomies .
7305	Print tree log - likelihood .
7306	Add a coalescent model to the tree .
7307	Find the best root position .
7308	Assure that the tree is in the right place .
7309	Create GTR model
7310	Read VCF if necessary
7311	Perform ancestral reconstruction
7312	Calculate the FWHM for a given distribution .
7313	Create a delta distribution .
7314	Multiply a list of distributions into a single distribution .
7315	Assign dates to each node .
7316	Setup tree regression .
7317	Make a time - tree .
7318	Compute timetree likelihood
7319	Convert dates to human readable dates
7320	Calculate the uncertainty of a node due to rate variation .
7321	Get the maximum posterior region for a given node .
7322	Find the minimum of the interpolation object
7323	Return the median value of the interpolated grid .
7324	Return a numeric date .
7325	Create a classifier from a regression model .
7326	Return a connection to the guacd server .
7327	Close the connection .
7328	Receive an instruction .
7329	Send data .
7330	Send an instruction .
7331	Establishes a connection to the Guacamole server .
7332	Convert unicode to utf - 8 .
7333	Load an instruction .
7334	Encode an argument into a string .
7335	Encode the instruction .
7336	Return the URL for a class .
7337	Returns the URL for this instance .
7338	Return the URL for a class .
7339	Download the object .
7340	The parent object of this job .
7341	Ask for credentials .
7342	Login to solvebio .
7343	Show the logged in user .
7344	Print the user details .
7345	Returns a copy of this query with the specified filters applied .
7346	Create a new chromosome with a range of chromosomes .
7347	Return a copy of the chromosome filtered by the given position .
7348	Get a list of facets .
7349	Process filters .
7350	Return the next page .
7351	Execute a query .
7352	Create a dataset migration .
7353	Main function .
7354	Download a vault folder
7355	Construct an instance from a dictionary .
7356	Logout the user .
7357	Make a request to the API .
7358	The child object of this task .
7359	Cancel the task .
7360	Parse SNPEff info .
7361	Convert a row to a dictionary .
7362	Get credentials from netrc .
7363	Save the configuration to a file .
7364	Format a value .
7365	Normalize tabular data .
7366	Build a row .
7367	Build a line .
7368	Return a list of attributes for a cell .
7369	Format a table .
7370	Create a dataset migration .
7371	Validate a full path .
7372	Upload a file to a vault .
7373	Validate a vault path .
7374	Validate the API host URL .
7375	Add paths to the manifest .
7376	Annotate records .
7377	Evaluate the expression .
7378	Set the format name .
7379	Register a new output format .
7380	Format output data .
7381	Adapter for tabulate .
7382	Get the user configuration directory .
7383	Return a list of system configuration directories .
7384	Read the default config file .
7385	Read configuration files .
7386	Return the path to the user config file .
7387	Return a list of system config files .
7388	Return a list of additional files in this directory .
7389	Write the default config file .
7390	Read configuration files .
7391	Truncates a string to a maximum length .
7392	Replace all occurrences of replace with replace .
7393	Call commands in sequence .
7394	Apply options to a command .
7395	Apply an option to a command .
7396	Initialize options .
7397	Run pep8radius .
7398	Run the command .
7399	Truncates a string .
7400	Format numbers .
7401	Format a row .
7402	Create a vertical table .
7403	Generate a table from data .
7404	Render a template file .
7405	Return True if type is a number .
7406	Return True if type is a boolean
7407	Check if the given type is binary .
7408	Generate a key .
7409	Generate a keypair .
7410	Find all objects matching the given template .
7411	Insert image into QR code .
7412	Export a panel .
7413	Return the first day of the given weekday .
7414	Repeats the date .
7415	Repeat a date range in reverse order .
7416	Perform biweekly calculations .
7417	Handle a single chunk event .
7418	Export all the variants in a case .
7419	Return a list of document lines for verified variants .
7420	Given a list of MT variants export them to a file .
7421	Update user roles
7422	List str variants for a given institute .
7423	Retrieve a single variant .
7424	Retrieve a variant from the store .
7425	Verify a variant .
7426	Export a case .
7427	Return a list of variants for a given institute .
7428	Classify a variant .
7429	View a single evaluation .
7430	Get the acmg classification
7431	Upload a panel to the database .
7432	Download verified excel files
7433	Given a list of HGNC gene IDs return a dictionary mapping HGNC IDs to gene IDs .
7434	Add incomplete penetrance info to genes
7435	Link HGNC genes .
7436	Make a request to MME
7437	Get a list of connected nodes
7438	Get cytoband coordinates
7439	Get the subcategory of a given category
7440	Get the length of a given category
7441	Get the end of a variant
7442	Parse coordinates from a variant .
7443	Check some coordinates .
7444	Create a new panel .
7445	Update a panel .
7446	Export a panel .
7447	Edit a gene .
7448	Save a delivery report .
7449	Retrieve a list of HPO phenotypes .
7450	List all whitelisted users
7451	Build a phenotype object
7452	Retrieve information about a gene .
7453	Convert HGNC genes to JSON .
7454	List all institutes
7455	View transcripts .
7456	Display a list of events on a given day .
7457	Extract variants from a variant query .
7458	Get a list of variants for a given str .
7459	Return variant information for str variants .
7460	Create a variant from a case .
7461	Parse a variant .
7462	Return header for variants export .
7463	Get variant information .
7464	Get predictions for a list of genes .
7465	Process a variant case .
7466	Find the bai file for a bam file .
7467	Get observations for a variant .
7468	Parse a gene .
7469	Return a string representation of a transcript .
7470	Return the end position of a variant .
7471	Return the frequency of a variant .
7472	Generate human readable clinsig objects
7473	Generate a link to the thousandg variant .
7474	Generate a URL for a cosmic mutation .
7475	Generate a beacon URL for a variant .
7476	Generate a link to a variant .
7477	Return the human readable version of the spidex .
7478	Return a list of expected inheritance models for a variant .
7479	Return a list of all callers for a given variant .
7480	Retrieve a list of variants for a given institute and case .
7481	Export CLINVAR data .
7482	Get a clinvar submission .
7483	Retrieve an ACMG variant .
7484	Submit a variant evaluation .
7485	Evaluate a single evaluation .
7486	Upload HGNC symbols to store .
7487	Create verified excel file .
7488	Export all genes to . bed format
7489	Parse a clinvar signature into a list of dictionaries .
7490	Parse a list of compounds
7491	Export all genes
7492	Build an individual object
7493	Load variants
7494	Show a single case .
7495	List scout view collections
7496	Load an institute .
7497	Update an institute .
7498	Return a file handle for a given file path .
7499	Get the current network .
7500	Get the next and prev nodes of a network .
7501	Check year .
7502	Check the weekday of a date .
7503	Parse case data .
7504	Add peddy information
7505	Parse individual data .
7506	Parse individuals from a list of samples .
7507	Parse a case .
7508	Parse a PED file .
7509	Build an evaluation object
7510	Export mitochondrial variants for a case .
7511	Return True if pvs is pathogenic .
7512	Return True if pvs is likely pathogenic .
7513	Return True if bs_terms is likely Benign .
7514	Given a list of ACMG terms return a list of ACMG terms .
7515	Add gene information to the variant object
7516	Fetch variants from a case .
7517	Retrieve variants from Sanger .
7518	Get a single variant
7519	Get a list of variants for a gene .
7520	Return a list of verified variants .
7521	Get a list of causatives for a given institute .
7522	Check the causative variants of a case .
7523	Iterate over the causatives of a variant .
7524	Delete variants for a case .
7525	Return a list of variants overlapping the given variant .
7526	Get all variants that have been evaluated in some way for a case .
7527	Get the VCF file for a region .
7528	Retrieve variants for a sample .
7529	Get a connection to MongoDB .
7530	Given a list of variant_ids and a list of form_fields return a list of objects for each variant .
7531	Given a list of clinvar objects and a csv_type return a dictionary of header values
7532	Return a list of CSV lines for a list of submission objects .
7533	Load transcripts from Ensembl .
7534	Load a panel
7535	Build an Exon object
7536	Delete a panel
7537	Delete all indexes
7538	Delete a user
7539	Delete s genes collection
7540	Delete scout exons
7541	Delete a case .
7542	View individuals .
7543	Parse matches for a patient .
7544	List cases in institute .
7545	Load a user by email .
7546	Login to Google
7547	Build an institute object .
7548	Delete an event
7549	Create a new event .
7550	Fetches events for a particular variant .
7551	Get all events for a user .
7552	Add a phenotype to a case .
7553	Remove phenotype from case
7554	Create a comment on a case .
7555	Parse genotypes from a variant .
7556	Check that chromosome and pos are valid coordinates .
7557	List HPO terms .
7558	Export transcripts
7559	Load the exons from the database .
7560	Load a region .
7561	Return a queryset of all events for a given month .
7562	Get live events .
7563	Parse requirements . txt
7564	Return the gene with the given hgnc_id
7565	Update a gene panel
7566	Create a new gene panel
7567	Export a panel .
7568	Extract information from a case archive .
7569	Migrate case .
7570	Migrate a case .
7571	Research a case .
7572	Load HGNC genes .
7573	List HPO terms
7574	Create a Flask application .
7575	Configure extensions .
7576	Register blueprints .
7577	Configure coverage .
7578	Run scout view aliases
7579	Build panel object
7580	Export verified variants .
7581	Export variants
7582	Create a VCF entry from a variant object .
7583	Test if mongod is running
7584	Generate a md5 hash of a list of arguments .
7585	Initialize the application .
7586	Setup the database .
7587	Run scout index
7588	Setup the Scout database .
7589	Run scout setup demo
7590	Setup database connection
7591	List institutes
7592	Parse genetic models .
7593	List gene panels
7594	Add institute to database
7595	Update an institute .
7596	Fetch an institute by ID
7597	Return True if date is a valid date .
7598	Get a datetime object from a date string .
7599	List HPO genes .
7600	Parse rank score entry .
7601	Add a user to an institute .
7602	Check MongoDB connection .
7603	Initialize the application .
7604	Load a delivery report .
7605	Add a user to the database
7606	Run pileup .
7607	Load exons .
7608	Update case compounds
7609	Add gene links to a gene object
7610	Show gene information .
7611	Parse a HGNC gene line .
7612	Parse hgnc genes .
7613	Get an open clinvar submission for a user and institute .
7614	Update a clinvar submission .
7615	Get clinvar_subm_id
7616	Add new variants and case data to clinvar submission .
7617	Update the status of a clinvar submission .
7618	Retrieve all clinvar submissions for a user and institute .
7619	Delete a clinvar object
7620	Convert a case ID to a dictionary of CLIN variables .
7621	Parse HPO OBO .
7622	List genes .
7623	Show a single gene .
7624	List genes .
7625	Check if panels exist in database .
7626	Load variants for a case .
7627	Load a case from the database .
7628	Decorator to render a template .
7629	Check if user has access to institute
7630	Return a list of user institutes .
7631	Get the HGNC ID of a gene .
7632	Update a panel .
7633	Load all disease terms
7634	Load the disease terms from omim
7635	Parse the frequencies of a variant .
7636	Parse the frequency of a variant .
7637	Parse SV frequencies for a variant .
7638	List users
7639	Build a HGNC gene .
7640	Load panel from parsed panel .
7641	Load OMIM panel .
7642	Compares two panels .
7643	Update the version of the Mim database entry
7644	Add a gene panel to the database .
7645	Get a panel by id
7646	Delete a panel
7647	Fetch a gene panel
7648	Get gene panels .
7649	Build gene to panels dictionary
7650	Update a panel
7651	Add a pending action to a panel .
7652	Apply pending changes to panel .
7653	Return a set of clinical symbols in a case .
7654	List cases .
7655	Send a record to the SMTP server .
7656	Load indexes from the database .
7657	Update indexes
7658	Drop all indexes
7659	Build a mongo variant query .
7660	Build a mongo query for a case .
7661	Build clinsig query
7662	Add coordinates to the query
7663	Add gene - related parameters to the query
7664	Drops whole database
7665	Parse a panel from a CSV file .
7666	Build clnsig object
7667	Load a list of gene objects into the database .
7668	Load transcript bulk .
7669	Load a batch of transcripts into the database .
7670	Fetch a HGNC gene .
7671	Get the ID of a HGNC symbol
7672	Get a list of HGNC genes for a given symbol .
7673	Fetches all genes in the database
7674	Return the number of genes in the database .
7675	Drop the hgnc_gene collection .
7676	Drop the transcripts collection .
7677	Drop the exons collection .
7678	Fetches all transcripts
7679	Build a dictionary of hgnc symbols to gene objects
7680	Find gene by alias .
7681	Fetches all genes by alias
7682	Fetches all ensembl genes
7683	Return the HGNC symbol for a given HGNC symbol .
7684	Add hgnc_id to genes
7685	Get the coding intervals for the given genes .
7686	Load the omim gene panel
7687	List cases for a given institute .
7688	Get information about a case .
7689	Get matches from MME server .
7690	Matchmaker endpoint .
7691	Delete a case .
7692	Show a case report .
7693	Generate a case report .
7694	Diagnosis a case .
7695	List phenotypes in a case .
7696	List phenotypes .
7697	Create a new event .
7698	Update case status .
7699	Assign a case to an institute .
7700	List HPO terms .
7701	Mark a variant as validated .
7702	Mark a variant as causative .
7703	Download a delivery report .
7704	Shares a case .
7705	Reruns a case .
7706	Open a research .
7707	Download a vcf2 cytosure file from the store .
7708	Download a case s multiqc .
7709	Return a list of cases matching the given query .
7710	Generate the case report content .
7711	Return the contents of a coverage report .
7712	Returns a list of clinvar submissions for a given user and institute .
7713	Write the mt excel files
7714	Update the synopsis of a case .
7715	Query phenomizer for diseases
7716	Convert a VCF to a cytosure format .
7717	Given an institute ID and a case name return a dict containing the institute and case details .
7718	Retrieve a list of variants with Sanger ordered by case .
7719	Add a patient to Matchmaker
7720	Delete multiple patients .
7721	Get matches from the MatchMaker server
7722	Match a case against a list of patients
7723	Update the omim gene panel
7724	Parse the INFO of a variant .
7725	Build a transcript
7726	Load an institute .
7727	Parse the CADD for a variant .
7728	Scout case .
7729	Update a variant
7730	Update variant rank for all variants
7731	Update variant compounds .
7732	Update compounds of variants
7733	Update compounds in the variant collection .
7734	Update the compounds for a case .
7735	Load a single variant .
7736	Upsert a variant .
7737	Load variants bulk .
7738	Assign a user to a case .
7739	Shares a case .
7740	Diagnose a case .
7741	Mark a case as checked .
7742	Order verification event .
7743	Get sanger ordered variants .
7744	Validate a variant .
7745	Mark variant as solved .
7746	Update dismiss variant .
7747	Update ACMG .
7748	Given a chromosome and a position return a dictionary with the keys simple_id and variant_id .
7749	Parse a simple ID .
7750	Generate a md5 key for a document .
7751	Convert a panel of genes .
7752	Create a new variant id from a variant object .
7753	Return the number of cases in the database .
7754	Update dynamic gene list
7755	Fetches a case .
7756	Delete case .
7757	Add a case to the database .
7758	Replace a case .
7759	Update a case .
7760	Submit an evaluation .
7761	Get all evaluations for a given variant
7762	Parse Ensembl transcripts
7763	Parse Ensembl gene request .
7764	Parse Ensembl transcript request .
7765	Parse Ensembl line
7766	Parse ensembl genes from a file .
7767	Parse Ensembl exons .
7768	Parse Ensembl exon request .
7769	Initialize a logger .
7770	Parse OMIM line .
7771	Parse OMIM morbid lines .
7772	Extract phenotypes from genemap file
7773	List Mim genes .
7774	Convert a string to a number .
7775	Format a month .
7776	Format a day .
7777	Format a month name .
7778	Popover helper
7779	Get panel information .
7780	Parse a gene dictionary .
7781	Parse a list of gene lines .
7782	Parse gene panel .
7783	List diseases
7784	Drop HPO terms
7785	Get a list of users in the store .
7786	Parse the conservation data for a variant .
7787	Parse the conservation of a variant .
7788	Get general case information .
7789	Get all cases in the database .
7790	Render a context to a JSON response .
7791	Get the year and month from the request .
7792	Check for cancelled events .
7793	Fetch a hpo term
7794	Search HPO terms
7795	Get a disease term .
7796	Fetches all disease terms for a given gene .
7797	Load a disease term into the database .
7798	Given a list of HPO terms generate a list of gene IDs
7799	Read an HDF5 file .
7800	Setup frequencies axis
7801	Setup time axis
7802	Read a filterbank file .
7803	Compute the longitude and latitude of the station .
7804	Blank a coarse channel bin .
7805	Print information about the file .
7806	Calculate the extent of the plot
7807	Plot waterfall plot .
7808	Plot time series .
7809	Write the filterbank to a file .
7810	Calibrate bandpass to N1
7811	Convert data to coarse channels
7812	Apply Mueller to data arrays
7813	Calculate differential gain and phase from noise diode measurements
7814	r Fracpols .
7815	Write waterfall and cross - pols .
7816	Find the closest value in xarr to val
7817	Rebin a 2D array .
7818	Unpack a numpy array .
7819	Calculate the difference between the noise diode and the waterfall
7820	Plot stokes diode
7821	Plot calibrated diode data
7822	Plot the coarse - coarse - coarse spectra
7823	Open a file .
7824	Setup selection range .
7825	Calculate the size of the selection
7826	Calculate the selection shape
7827	Set up channel indices
7828	Set the frequencies of channels
7829	Populate the timestamps from the header .
7830	Populate frequencies array
7831	Calculate the number of coarse channels
7832	Calculate the number of blobs in the grid .
7833	Check if the data array is heavy .
7834	Read data .
7835	Read all data from the file
7836	Read a row from the file .
7837	Read data from the container .
7838	Update header
7839	Print file info
7840	Write data to a file .
7841	Write a file to HDF5
7842	Write data to HDF5 light .
7843	Get the blob dimensions for a chunk .
7844	Detects the chunk dimensions .
7845	Grab data for plotting
7846	Command line tool for creating spectra from GuppiRaw files .
7847	Read the first header .
7848	Find the number of data blocks .
7849	Print average and standard deviation statistics .
7850	Plot the histogram
7851	Generate filterbank header .
7852	Find the size of the header
7853	NAME matchfils . py
7854	Command line tool for creating HDF5 Raw files .
7855	Fold calibrated time series .
7856	Integrate waterfalls by coarse channel .
7857	Calculate calfluxes
7858	Get the mean frequency of each channel
7859	Calculate noise diode ON and OFF spectra
7860	Calculate the diode spectrum of a calibrator .
7861	Calculate the Tsys for a given time series .
7862	Find folded spectra of the target source with the noise diode ON and OFF
7863	Get the length of the header of a file .
7864	Check if filename is a filterbank file .
7865	Fix the header of a file .
7866	Generate the header string for a SIGPROC file .
7867	Convert angle value to sigproc angle
7868	Calculate the number of integers in a file .
7869	Return a dictionary representation of the traceback .
7870	Create a subparser for a record type .
7871	Create a zonefile line parser .
7872	Remove comments from text .
7873	Add a default name to the text .
7874	Parse a single line .
7875	Parse a zone file from a string .
7876	Parse zone file .
7877	Quote a field .
7878	Parse Avro schema string .
7879	Convert a list of classes to a Python package .
7880	Generate the source code for a class .
7881	Decorator to disable auto_store .
7882	Convert a record to JSON compatible .
7883	Load a record from a dictionary .
7884	Load a json record .
7885	Add a schema to the registry .
7886	Get a schema by name .
7887	Return a dictionary representation of this object .
7888	Mixin a class
7889	Create a record from a class .
7890	Return the JSON schema for a record .
7891	Get the root schema for a record .
7892	Read lines from input_stream .
7893	Write output to output_stream .
7894	Push a value onto the front of a dictionary .
7895	Perform a search query .
7896	Perform a raw search .
7897	Return a list of all entities with the given attributes .
7898	Get entity from href .
7899	Given a quote return it .
7900	Escape a string .
7901	Return the elementary rotation matrix
7902	Construct a covariance matrix from a 3D vector .
7903	Calculate the vrad error for a given spt .
7904	Calculate parallax error
7905	G magnitude error
7906	r Calculate the magnitude error of an EOM .
7907	Make a plot of the magnetic distribution .
7908	Return the average number of traits for a given beta .
7909	Calculate the angular distance between two points .
7910	Transform cartesian coordinates .
7911	Transform spherical coordinates to polar coordinates .
7912	Transform the covariance matrix .
7913	Returns the error scaling factor for the given observable and beta .
7914	Make a plot of the data
7915	Make a plot of vmin and vmax .
7916	Return a function that evaluates to True if any of the given functions evaluates to True .
7917	Wraps a method so that it will raise a helpful exception .
7918	Unquote a string .
7919	Iterate over each item in the collection .
7920	Return a new QuerySet with elements that do not match the given function .
7921	Return a new Collection filtered by a function .
7922	Apply a function to each item in the collection .
7923	Return a new Collection with items that do not match the given function .
7924	Zip together the iterators until all of them runs out of values .
7925	Find a node .
7926	Get the path to the serach directory .
7927	Iterate over a group of characters .
7928	Given a regdescr return a list of options that can be used to register a group .
7929	Return a string representation of an event .
7930	Given a list of events build a list of scheduled runs .
7931	Print results .
7932	Print results to stdout .
7933	Print the results of the layer search .
7934	Remove comments and pragmas from code .
7935	Round x to the next base .
7936	Given a list of indices and a block size return a list of blocks of size block_size .
7937	Calculate cache access
7938	Calculate number of iterations per cacheline
7939	Analyze the kernel .
7940	Perform IACA analysis .
7941	Strip comments and uncomment lines .
7942	Remove unreferenced labels .
7943	Select the best block in blocks .
7944	Select a pointer increment .
7945	Print user selected blocks
7946	Insert markers between start and end lines .
7947	Perform ICAC instrumentation .
7948	Main function .
7949	Simulate a model .
7950	Generate a sequence of integers between start and stop .
7951	Get the last modified datetime of a directory .
7952	Check arguments .
7953	Main function .
7954	Main function .
7955	Return a sympy . Symbol representing a positive integer .
7956	Transform a multidimensional array declaration to a single dimensional array declaration .
7957	Transform a multidimensional reference to a 1D reference .
7958	Find the type of a node .
7959	Force a function to return an iterable .
7960	Check that all variables have the same datatype .
7961	Set a constant .
7962	Substitutes constant expressions with constant values .
7963	Return a dictionary of variable sizes .
7964	Calculate the relative offset for a variable .
7965	Remove duplicate access variables .
7966	Get the total length of each iteration .
7967	Get loop stack .
7968	Return a list of free symbols in the index .
7969	Return a dictionary of sympy accesses for each variable .
7970	Returns a dictionary mapping variable names to their relative distances .
7971	Convert global iterator to indices .
7972	Return a sympy . Integer representing the number of global variables .
7973	Convert indices to global iterator .
7974	Get the maximum global iteration .
7975	Print kernel information .
7976	Print information about variables .
7977	Print constants info .
7978	Print kernel code .
7979	Convert AST to sympy symbol .
7980	Get the offsets for a given array reference .
7981	Get the basename of a reference .
7982	Get index type of loop .
7983	Build a list of declartions for constants .
7984	Return a list of all array declarations .
7985	Get the nest of for loops .
7986	Build array declarations from kernel ast .
7987	Find the outermost loop .
7988	Build the array initializations .
7989	Build a list of dummy calls .
7990	Build a kernel function declaration .
7991	Build a list of scalar declarations .
7992	Get kernel code .
7993	Build a kernel call .
7994	Get the main code .
7995	Perform an analysis of the instrumented binary .
7996	Build an executable file .
7997	Convert a string to a sympy expression .
7998	Return a unique identifier for this object .
7999	Get the last modification time of the file .
8000	Return a cachesim . CacheSimulator .
8001	Get the bandwidth of the benchmark .
8002	Get compiler name and flags .
8003	Parse a perfctr event string
8004	Enforce no overlap .
8005	Get the path to the header file .
8006	Align an iteration with a cl boundary .
8007	Returns a list of loads
8008	Return the number of hits in the cache .
8009	Get the number of misses in the cache .
8010	Get the number of stores in the memory hierarchy .
8011	Return the number of evicts
8012	Get infos about the cache .
8013	Fixes an environment variable .
8014	Configures the argument group .
8015	Report results .
8016	Parse the README . md file .
8017	Schedule a retry .
8018	Build a purchase item
8019	Record a purchase .
8020	Get course content
8021	Get course content from ecommerce .
8022	Update unenrolled list
8023	Send a course refund notification email .
8024	Send offer assignment notification email
8025	Get the logger configuration .
8026	Retry order .
8027	Fulfill an order .
8028	Return a SailthruClient instance for the given site code .
8029	Get a value from the cache .
8030	Set a cache item .
8031	Get the value of a configuration variable .
8032	Get the filename of the overrides file .
8033	Get value by version
8034	Get energy plus version .
8035	Return a dictionary of file references .
8036	Populate from json data
8037	Returns a list of external files .
8038	Set default values for all tables .
8039	Prepare extensible field descriptors .
8040	Get the extended name of a field .
8041	Return a dictionary of short references for each file .
8042	Get the value of a column in the table .
8043	Update value in inert field .
8044	Update record .
8045	Set default values for all fields .
8046	Add fields to the record .
8047	Remove and return the value at index .
8048	Insert a value into the list .
8049	Delete the record .
8050	Register a record hook .
8051	Register a link .
8052	Create a regex for a given line .
8053	Return the remaining duration in seconds .
8054	Serialize the event .
8055	Make an HTTP request .
8056	Get a list of available services .
8057	Try to create directory .
8058	Configure a service .
8059	Register a CA .
8060	Set the state of a recording .
8061	Update event status .
8062	Update agent state .
8063	Return the location of the configuration file .
8064	Update configuration .
8065	Check if the server is running .
8066	Initialize logging
8067	Get the current service status
8068	Serve an image .
8069	Run all modules .
8070	Parse an ICAL vCal file
8071	Get calendar schedule .
8072	Main control loop .
8073	Main control loop .
8074	Make an error response .
8075	Make a data response .
8076	Get the internal state of the service .
8077	List upcoming events .
8078	Get event by uid
8079	Delete an event .
8080	Modify an event .
8081	Extracts the parameters from a configuration file
8082	Upload media package
8083	Start recording .
8084	Return a fragment that can be used to render the test results .
8085	Return a list of all resources in this group .
8086	Return a dictionary representation of this resource .
8087	Create a fragment from a dict .
8088	Add content .
8089	Add a fragment resource .
8090	Add a fragment resource .
8091	Initialize the js function .
8092	Convert a list of resources to HTML .
8093	Convert a resource to HTML .
8094	Return a JSON response .
8095	Render to a standalone HTML response .
8096	Render fragment to standalone HTML .
8097	Calculate the probability density function
8098	Convert values to one dimensional array .
8099	Lookup values from error table .
8100	Perform chromatogram hypothesis computation for a single chromosome .
8101	Generate final error table .
8102	Extract summary errors from a DataFrame .
8103	Computes the error statistics for the given scores .
8104	Find the error statistical cutoff .
8105	Score XGBoost .
8106	Infer the peptides from a file .
8107	Infer peptides .
8108	Infer proteins from a file .
8109	Subsample an OWL file .
8110	Reduces input file to output file .
8111	Backpropagate an OSRW file .
8112	Filter a list of sqmass files .
8113	Get a group by ID .
8114	Create a group .
8115	Delete a group .
8116	Get a list of groups members .
8117	Update members of a group .
8118	Get the effective member count for a group .
8119	Check if a user is an effective member of a group .
8120	Modify docs . conf file .
8121	Create a dataset .
8122	Decrypt contents using AES256CBC .
8123	Get stdin .
8124	Get the stdout of the command .
8125	Get stderr .
8126	Get debug output .
8127	Context manager for with_stdin .
8128	Return a context manager for writing to stdout .
8129	Context manager for with_stderr .
8130	Return a context manager for writing to disk .
8131	Empty account .
8132	Empty a container .
8133	Decorate a function with a stdout filed .
8134	Decorate a function to handle stderr messages .
8135	Log an error message .
8136	Print the help message .
8137	Print usage information to file .
8138	Print version information .
8139	Make a request .
8140	Create a new account .
8141	Delete an account .
8142	Put a container .
8143	Head an object .
8144	Get an object .
8145	Put an object in a container .
8146	Post an object to a container .
8147	Resolve an option in the given section .
8148	Return a copy of this context .
8149	Write headers to file .
8150	Show authentication information .
8151	Generate a temporary URL .
8152	Quote a string .
8153	List containers .
8154	Get a client .
8155	Encrypt using AES256CBC .
8156	Decrypt data using AES256CBC .
8157	Upload a directory structure
8158	Put an account .
8159	Put a container .
8160	Get the manifest body .
8161	Create a container .
8162	Retrieve a temporary URL .
8163	Print X - Trans ID .
8164	Print help for a command .
8165	Check if buffer is empty .
8166	Encrypt a key using AES256CBC .
8167	Get the status of a repository .
8168	Get a single pull request .
8169	List pull requests for a repository .
8170	Write your forwards methods here .
8171	Returns a list of slider items
8172	Render a hero slider .
8173	Acquire readers lock .
8174	Release all readers .
8175	Acquire the writer lock .
8176	Add a task to the registry .
8177	Remove a task from the registry .
8178	Get a task by ID .
8179	Return a list of tasks sorted by task_id .
8180	Return a dictionary representation of this object .
8181	Create a task from a dictionary .
8182	Execute a perceval job .
8183	Initialize the archive manager .
8184	Run the job .
8185	Execute the command .
8186	Create an index .
8187	Create mapping in Elasticsearch
8188	Return a generator that yields chunks of JSON .
8189	Write items to writer .
8190	Add a task to the scheduler .
8191	Remove a task from the scheduler .
8192	Yields all queued items
8193	Validate task arguments .
8194	Parse archive args .
8195	Perform a job .
8196	Schedule a job task .
8197	Cancel a job task .
8198	Run the job listener .
8199	Listen on the pubsub channel .
8200	Schedules the scheduler .
8201	Schedule a task .
8202	Cancel a task .
8203	Handle a successful job .
8204	Handle a failed job .
8205	Build job arguments for a task .
8206	Get a secret .
8207	Register the view .
8208	Decorator for registering a view .
8209	Reverse the action .
8210	Get the view name .
8211	Build a version string from a version string .
8212	Resolve a key .
8213	Get the engine for a given scheme .
8214	Parse a database and schema path .
8215	Get the database configuration from a URL .
8216	Parse a database url .
8217	Create a new user .
8218	List users .
8219	Create a new password .
8220	Override build_url_field to set view_name to detail view .
8221	Parse a boolean value .
8222	Parse an integer .
8223	Return the parser for the given type .
8224	Get Django settings .
8225	Create a ModelDict from a model .
8226	Base64 encode a string .
8227	Create a field from a dictionary .
8228	Create a validator from a dict .
8229	Cartesian product .
8230	Find unique points in a list of parameters .
8231	Given a dictionary of key - value pairs change the logging dictionary .
8232	Decorate a function with a simple logging configuration .
8233	Try to create directories for filename .
8234	Get a list of strings from a string expression .
8235	Rename a log file .
8236	Set the logger .
8237	Extract replacements from a trajectory .
8238	Show progress bar .
8239	Check and replace parser arguments .
8240	Convert a parser to a StringIO object .
8241	Find multiproc options .
8242	Find multiproc dictionary .
8243	Check if log_config is set .
8244	Handle config parsing .
8245	Recursively handle a dictionary of log config .
8246	Create logging handlers and tools .
8247	Finalizes the tabula .
8248	Start redirection .
8249	Write a string to the stream .
8250	Compare two results .
8251	Check if two parameters are equal .
8252	Decorate a function to turn into a run .
8253	Decorator to mark a function as deprecated .
8254	Decorator for mutually exclusive parameters .
8255	A decorator that warns about deprecated keyword arguments .
8256	Retry a function .
8257	Add prefix naming to a class .
8258	Add parameters to the trajectory
8259	Run the network
8260	Compute the Euler Scheme
8261	Add parameters to the trajectory
8262	Calculate the lorenz distance between two values
8263	Create a storage service .
8264	Create a storage service .
8265	Add parameters to the trajectory
8266	Calculate the difference between two values
8267	Compact HDF5 file .
8268	Return True if all parameters in group are explored .
8269	Build the model eqs
8270	Pre - build the model .
8271	Build the model .
8272	Build the model for a trajectory
8273	Determine whether to pre - build the network .
8274	Build the network .
8275	Add parameters to trajectory
8276	Compute the fano factor
8277	Compute mean fano factor
8278	Compute mean fano factor over all exc neurons
8279	Add subrun to network .
8280	Add monitors to the network .
8281	Create a folder in the plot folder .
8282	Plot a result
8283	Print spike raster plot
8284	Plots the results of the analysis
8285	Get batch number
8286	Explore a batch
8287	The variables of this node .
8288	The node function .
8289	Renames the full name .
8290	Set the details of this node .
8291	Convert a node to a message .
8292	Remove a subtree .
8293	Delete a node .
8294	Remove a node or leaf .
8295	Remove a node along a branch .
8296	Translate a shortcut .
8297	Add prefix to split names .
8298	Determine the type of a node .
8299	Add a generic item .
8300	Add a node to the tree .
8301	Create a link to an instance .
8302	Check that the names are valid .
8303	Create a new group .
8304	Create a new instance of the specified type .
8305	Set details tree node .
8306	Iterate over nodes in the tree .
8307	Make a child iterator .
8308	Recursive traversal of the tree .
8309	Perform a very fast search .
8310	Search a node in the tree .
8311	Return a list of all items in the tree starting from start_node .
8312	Gets the KIDS of this node .
8313	Add a group from storage .
8314	Add a leaf from storage .
8315	Return a list of all directories in the directory .
8316	Create a Bunch of debug information .
8317	Get the parent node .
8318	Add a group .
8319	Add a link .
8320	Remove a link .
8321	Add a leaf node .
8322	Remove a child from this node .
8323	Remove a child from the group .
8324	Return True if item is contained in the trajectory
8325	Get the default value of a field .
8326	Get children .
8327	Return a copy of the groups
8328	Get all leaves .
8329	Get links .
8330	Store a child of this group .
8331	Store this trajectory in a file .
8332	Load a child .
8333	Load a trajectory .
8334	Add a parameter group .
8335	Add a parameter .
8336	Add a result group .
8337	Add a result group .
8338	Add a derived parameter group .
8339	Add a derived parameter .
8340	Add a config group .
8341	Add a configuration group .
8342	Evaluate one max of individuals .
8343	Add commit variables to traj
8344	Make a git commit .
8345	Flatten a nested dictionary .
8346	Flatten a nested dictionary .
8347	Create a progress bar .
8348	Get the argspec of a function .
8349	Given a function and a dictionary of keyword arguments return a dictionary of matching keyword arguments .
8350	Format a timestamp as a string .
8351	Convert a port number to a TCP port .
8352	Try to race directories .
8353	Reset the progress bar .
8354	Get the remaining time for the given index .
8355	Return a copy of self .
8356	Remove an annotation .
8357	Return a string representation of the annotation .
8358	Make an ordinary result .
8359	Make a shared result .
8360	Create shared data .
8361	Request data from the server .
8362	Get the data node .
8363	Returns True if item is a supported data type .
8364	Create shared data .
8365	Manipulate the data in the trajectory .
8366	Lock a client .
8367	Send a shutdown signal .
8368	Close the connection .
8369	Start the client .
8370	Send a REQ and wait for a response .
8371	Acquire a lock .
8372	Listen for incoming ZMQ messages .
8373	Put data into the queue .
8374	Detect the forked process .
8375	Handle data .
8376	Receive data and handle them .
8377	Receive data from the queue .
8378	Receive data from the socket .
8379	Store an item in the cache .
8380	Store a message in the references dictionary
8381	Store a list of references .
8382	Decorate a function to parse the config file .
8383	Collect options from a section .
8384	Collects configuration values from the config file .
8385	Interpret the config file .
8386	Add parameters to trajectory .
8387	Convert a rule number to a binary rule .
8388	Make a random initial state .
8389	Plot a pattern .
8390	Generate a cellular automaton .
8391	Main function .
8392	Process a signal update .
8393	Get the overview group .
8394	Load data from a file .
8395	Store a parameter or result .
8396	Load several items from an iterable .
8397	Check HDF5 properties .
8398	Store multiple items at once .
8399	Close the HDF5 file .
8400	Extract file information .
8401	Backup a trajectory .
8402	Read a row from a trj table
8403	Prepare trajectory for merging .
8404	Load the meta data for a trajectory .
8405	Load a sub - tree branch .
8406	Check the version of the trajectory .
8407	Fill the run table .
8408	Load exploration data for a trajectory .
8409	Store the explorations of a trajectory
8410	Make overview tables
8411	Store a trajectory .
8412	Store a sub - tree branch .
8413	Create a leaf node .
8414	Load nodes from a DFS trajectory .
8415	Store trajectory nodes in hdf5 file
8416	Check if we need to search for an entry .
8417	Get or create a table .
8418	Get a node by name
8419	Set all attributes to recall natives .
8420	Recall native data types
8421	Add or modify a row .
8422	Insert values into a row .
8423	Extracts an insert dictionary from a HDF5 file .
8424	Cut a string to max_length
8425	Create or get a group .
8426	Create or get trajectory groups .
8427	Store annotations on node .
8428	Load annotations from node s attributes .
8429	Store a group .
8430	Load a trajectory group .
8431	Load all annotations and comments from a trajectory node .
8432	Extract missing flags from data dictionary .
8433	Add a summary for the given instance .
8434	Add meta info to the PGM .
8435	Create a HDF5 group from a dictionary .
8436	Store a parameter or result .
8437	Write data into a shared array .
8438	Write a shared prm file .
8439	Write a dictionary as an object table .
8440	Write data to PGM file .
8441	Write data into another HDF5 file .
8442	Write data into array .
8443	Delete a link .
8444	Delete a parameter or result or group .
8445	Write data into a pytable .
8446	Make a description of a PARM file .
8447	Get a table column .
8448	Get the length of the longest string
8449	Load data into a dict
8450	Load a dictionary of lists into a normal dictionary .
8451	Read shared data .
8452	Read a PGM table .
8453	Read a PARM file .
8454	Load a trajectory .
8455	Make a set name .
8456	Set properties .
8457	Add a list of dynamic imports .
8458	Set the crun parameter .
8459	Iterate over the runs in the trajectory .
8460	Shrink the trajectory .
8461	Set default parameters for a parameter .
8462	Presets a parameter .
8463	Prepare the experiment .
8464	Get the value of a run .
8465	Check if a run is completed .
8466	Remove explored parameters from disk .
8467	Copies the skeleton of from node to node_in
8468	Explore the trajectory .
8469	Update run information .
8470	Add a single run info entry .
8471	Lock all parameters .
8472	Lock all derived parameters .
8473	Finalize the run .
8474	Load a skeleton .
8475	Load data from a file .
8476	Backup a trajectory .
8477	Make a list of all the wildcards that need to be reversed .
8478	Merge multiple trajectories into one .
8479	Merge multiple runs into a single run .
8480	Renames a full name .
8481	Merge derived parameters from another trajectory .
8482	Merges links from another trajectory into this one .
8483	Merge config from other trajectory .
8484	Merge two trajectories .
8485	Merge results from another trajectory .
8486	Migrate trajectory to new storage service .
8487	Store this trajectory in the storage service .
8488	Restore default values of parameters .
8489	Set explored parameters to the given index .
8490	Make a single run .
8491	Get a list of run names .
8492	Get information about a run .
8493	Find the index of a parameter in a list of parameters .
8494	Start a run .
8495	Finalize run .
8496	Set start time
8497	Set the finish time of the run .
8498	Construct a new instance of a class .
8499	Return a copy of the given parameter dictionary .
8500	Finalize the run .
8501	Get the configuration dictionary .
8502	Return a dictionary of results .
8503	Store items in the trajectory .
8504	Load items from disk .
8505	Remove items from the network .
8506	Delete a list of links .
8507	Remove all children .
8508	Delete items from the trajectory .
8509	Pool single run .
8510	Wrapper for _frozen_pool_single_run .
8511	Configure pool .
8512	Configure frozen pool .
8513	Process a single run .
8514	Configures frozen SCOOP .
8515	Perform a single run .
8516	Configure logging system .
8517	Configure niceness .
8518	Handle SIGINT and SIGTERM .
8519	Run a single run .
8520	Wrap the handling function with logging .
8521	Load a class .
8522	Create a class from a class name .
8523	Get the length of the range .
8524	Return a string representation of the current value .
8525	Checks whether two values are equal .
8526	Get the range of the array .
8527	Explore a parameter .
8528	Expand the list of values in the parameter .
8529	Perform sanity checks on a list of values .
8530	Store the data in the object table .
8531	Load data from disk .
8532	Load data from a dictionary .
8533	Return True if val1 equals val2 .
8534	Check if data is a supported matrix .
8535	Serialize a sparse matrix .
8536	Build a tuple of names for a sparse parameter .
8537	Reconstruct a matrix from a list of data .
8538	Load parameters from a dictionary .
8539	Store data in pickle format .
8540	Load data from pickle
8541	Translate key .
8542	Convert HDF5 value to string
8543	Return a copy of self .
8544	Set positional values .
8545	Get data from result .
8546	Set a single result .
8547	Returns True if item is a supported SparseParameter .
8548	Store the data in a dictionary .
8549	Load parameters from a dictionary .
8550	Set a single result .
8551	Store the result in a dictionary .
8552	Load data from pickle
8553	Main function .
8554	Upload a file .
8555	Download a file .
8556	Create a session .
8557	Merge trajectories .
8558	Start saga jobs .
8559	Multiply two reals
8560	Run the Euler integration .
8561	Given a trajectory and a list of results return a pandas DataFrame with the results .
8562	Add parameters to the simulation
8563	Add exploration of I and tau_ref
8564	Execute a network pre run .
8565	Execute a network run .
8566	Extract subruns from trajectory .
8567	Execute a network run .
8568	Add Parameters of Components
8569	Pre - run the network .
8570	Run the network .
8571	Run the network .
8572	Make a filename for a trajectory .
8573	Return the next element in the chain .
8574	Merge all trajectories in a folder .
8575	Handle SIGINT .
8576	Read configuration from file .
8577	Request Ecobee PIN .
8578	Request tokens from Ecobee .
8579	Refresh access token .
8580	Get thermostat data .
8581	Write tokens to file .
8582	Set HVAC mode .
8583	set fan minimum on time
8584	Set thermostat hold temperature .
8585	Set climate hold
8586	Delete a vacation
8587	Resume a program .
8588	Send a message .
8589	Set the humidity of a thermostat .
8590	Generate a delay to enter in SELECTING .
8591	Generate a random timeout resend .
8592	Generate a timeout request for renew .
8593	Generate a random renewing time .
8594	Return a copy of the state as a dictionary .
8595	Reset all attributes .
8596	Get the timeout for a given state and function
8597	Set the timeout of a function .
8598	Send a discover packet .
8599	Select an offer .
8600	Send a DHCP request .
8601	Set the timeouts for the current state .
8602	Process received ACK packet .
8603	Process received NAK packet .
8604	Initialize state .
8605	Set state to BOUND
8606	Set the state to RENEWING .
8607	Rebind the script .
8608	Execute the script .
8609	Error state .
8610	Wait for response to select .
8611	Raise an error if there are too many retries .
8612	Raise RENEWING exception if request is too long .
8613	Wait for response to request .
8614	Receive an offer .
8615	Process incoming ACK .
8616	Receive NAK .
8617	Process received ACK .
8618	Process received NAK .
8619	Handle incoming ACK .
8620	Handle NAK rebinding .
8621	Renews the lease .
8622	Set a query parameter .
8623	Add a new query parameter .
8624	Remove a query parameter .
8625	Get status of supervisor .
8626	Create output dictionary from data .
8627	Main entry point .
8628	Validate a message .
8629	Read a TdmsFile and return a list of chn_names and chn_data
8630	Add deformation to chn_names .
8631	Convert tdms to fcs
8632	Check if this diff is equal to another .
8633	Create a patch .
8634	Delete the next patch .
8635	Delete a patch .
8636	Check if file exists in patch
8637	Backup a file
8638	Add a file to the database .
8639	Run the Quilt command .
8640	Create the directory .
8641	Copy this directory to another directory .
8642	Link this file to another file .
8643	Copy this file to another directory .
8644	Get the directory of this file .
8645	Backup a file .
8646	Refresh a patch .
8647	Unapply a patch .
8648	Unapply the top patch .
8649	Unapply all patches .
8650	Apply a patch to the series .
8651	Apply the next patch .
8652	Apply all patches to the series .
8653	Read the series file .
8654	Save the patchlines to a file .
8655	Add a patch to the document .
8656	Insert a list of patches .
8657	Add a list of patches .
8658	Remove a patch .
8659	Return a list of patches after the given patch .
8660	Return the patches before the given patch .
8661	Return a list of patches until the given patch .
8662	Replace a patch .
8663	Create the version file .
8664	Check the version of the database .
8665	Add this command to the given parser .
8666	Add arguments to a parser .
8667	Add the arguments to a subparser .
8668	Set subparsers arguments .
8669	Add subparsers to the parser .
8670	Check if file exists in patch
8671	Check if file exists in next patches
8672	Revert a file .
8673	Import a patch .
8674	Import patches
8675	Add a way to the graph .
8676	Yield node ids that are not present in the graph .
8677	Add a node to the graph .
8678	Build a route from a relation .
8679	Create a route name for a relation .
8680	Get the agency id for a relation .
8681	Extract public transport relations .
8682	Add a relation .
8683	Create dummy data .
8684	Patch agencies .
8685	Create dummy trip stoptimes
8686	Write a zipped file .
8687	Write the buffers to a file .
8688	Build an Agency object .
8689	Extract stops from a relation .
8690	Build a list of Shapes for a relation .
8691	Return a list of supported versions .
8692	Send an APDU .
8693	Authenticate devices .
8694	Register a client .
8695	Authenticate a client .
8696	Register a U2F device .
8697	Convert data to unicode
8698	Wrap a function with error handling .
8699	Wraps a class with error decorators .
8700	Return True if filepath matches only blame patterns .
8701	Get the email address for a given email address .
8702	Return the entry with the given filename .
8703	Convert markdown to reST .
8704	Start Flawless web server .
8705	Record an error .
8706	Get an image from a URL .
8707	Convert a string to an Image object .
8708	Decorate a function with a validator .
8709	Raise ImageSizeError if image is too big .
8710	Raise ImageSizeError if width is too big .
8711	Raise ImageSizeError if height is too big .
8712	Parses a category and returns it .
8713	Parse the totals of a field .
8714	Yields all items in the file .
8715	Save an error to the log .
8716	Parse the source and save it to the database .
8717	Parse an item into a dictionary .
8718	Get an instance of the model .
8719	Save an item .
8720	Download a file .
8721	Load the source file .
8722	Get the items from the CSV file .
8723	Setter for allow_network_access .
8724	Run docker command .
8725	Add files to the Docker container .
8726	Add a file to the sandbox .
8727	Get a list of enrollments for a course .
8728	Returns a list of enrollments for a course .
8729	Returns a list of enrollments for a given section .
8730	Returns a list of enrollments for a given sis_section_id .
8731	Get a list of enrollments for a user .
8732	Enroll a user in a course .
8733	Get a list of all roles in an account .
8734	Get a list of roles in an account .
8735	Get the effective course roles for an account .
8736	Get a role .
8737	Get a role by SIS ID .
8738	Get a course .
8739	Get a course by SIS ID .
8740	Get a list of courses in an account .
8741	Returns a list of courses in the specified SIS account .
8742	Get a list of courses published in an account .
8743	Returns a list of courses published in the specified SIS account .
8744	Get a list of courses for a given regid .
8745	Create a course .
8746	Update a course ssis_course_id .
8747	Get activity for a given term .
8748	Get the grade for a given term .
8749	Get statistics by account .
8750	Get activity by SIS course ID .
8751	Returns the list of assignments for a given course .
8752	Retrieve student summaries for a course .
8753	Returns the activity for a given sis_user_id and sis_course_id .
8754	Gets the messaging for a given sis user .
8755	Get a list of external tools in an account .
8756	Returns a list of external tools in a course .
8757	Create an external tool .
8758	Update an external tool .
8759	Delete an external tool .
8760	Check that all required parameters are set .
8761	Get a user .
8762	Get a list of users for a course .
8763	Returns a list of users for a given sis_course_id .
8764	Create a user .
8765	Get a list of logins for a user .
8766	Updates a user login .
8767	Get the next page .
8768	Get a resource from the API .
8769	Get a paged resource .
8770	Get a resource .
8771	Send a PUT request to a resource .
8772	Post a resource .
8773	Delete a resource .
8774	Returns a list of CanvasAdmin objects .
8775	Create an admin .
8776	Create an admin by SIS account ID .
8777	Delete an admin .
8778	Delete an admin by SIS account ID .
8779	Create a new grading standard for a course .
8780	Get a specific section .
8781	Get a section by SIS ID .
8782	Get a list of sections in a course .
8783	Get a list of sections in a course .
8784	Get a list of sections in a course .
8785	Get a list of sections with students in a course .
8786	Create a course section .
8787	Update a course section .
8788	Get quizzes for a course .
8789	Get a specific account .
8790	Get a list of sub accounts .
8791	Update an account .
8792	Update SIS ID .
8793	Get authentication settings for an account .
8794	Updates the authentication settings for the specified account .
8795	Get a term by its sis_id
8796	Import a CSV file .
8797	Import a directory .
8798	Get import status .
8799	Build the import . zip file .
8800	Get all assignments for a course .
8801	Update an assignment .
8802	Get a list of available reports .
8803	Get a list of reports by type .
8804	Create a report .
8805	Create a course provisioning report .
8806	Create a course SIS export report .
8807	Create an unused courses report .
8808	Get report data .
8809	Get the status of a report .
8810	Delete a report .
8811	Move detections in a label .
8812	Flip detections in a label
8813	Get a dict from an object
8814	Get the config from the settings .
8815	Returns the value of edit_empty_value .
8816	Parse arguments and keyword arguments .
8817	Create metrics .
8818	Setup logging .
8819	Configure the registry .
8820	Create metrics .
8821	Get a metric by name .
8822	Handle the home page .
8823	Handle metrics .
8824	Query Wolfram API .
8825	Fix HTTPMessage .
8826	Query Wolfram Alpha API .
8827	Return a list of information about the pod .
8828	Return a list of pods that have a result .
8829	Encode data to JSON .
8830	Call an API .
8831	Make a GET request .
8832	Delete a resource .
8833	Make a PUT request .
8834	Make a POST request .
8835	Process a query .
8836	Group sentences by length .
8837	Disambiguates a PDF file .
8838	Disambiguate a query .
8839	Segment text .
8840	Get a language .
8841	Fetch a concept .
8842	Fit the model to the specified features and classes .
8843	Score a set of features .
8844	Fit the MDR grid to features .
8845	Fit the model to the given features and class labels .
8846	Score a set of features .
8847	Fit the model to the given features and targets .
8848	Transform a list of features .
8849	Compute the score of the continuous MDR model .
8850	Predict MDR for X and Y .
8851	Generate n - way models .
8852	Plots the MDR grid
8853	Get the configuration from the application .
8854	Get a configuration value .
8855	Create a vector from members .
8856	Create a vector from members .
8857	Evaluate a file .
8858	Evaluate a stream .
8859	Evaluate a string .
8860	Bootstrap a repl module .
8861	Run the compiler .
8862	Create a MultiFunction .
8863	Add method to map .
8864	Add a method .
8865	Get a method by key .
8866	Remove key from map .
8867	Remove a method .
8868	Return True if v is a macro variable .
8869	Get line and column from a Lisp form .
8870	Decorate a ParseFunction with a location function .
8871	Raise ParserException if node does not appear in tail position .
8872	Assert that a node is a tail node .
8873	Resolve a bare symbol .
8874	Resolve a symbol .
8875	Parse an AST and return a Node .
8876	Whether to warn on shadowed variables .
8877	Add a new symbol to the symbol table .
8878	Map entries to lrepr .
8879	Return a string representation of a sequence .
8880	Return a string representation of o .
8881	Fallback to lrepr .
8882	Fix missing locations .
8883	Compile and execute a ReaderForm .
8884	Compile a Python module .
8885	Compile a module .
8886	Compile bytecode .
8887	Create a sequence from an iterable .
8888	Munge a string .
8889	Replace underscores with dashes .
8890	Create a new Fraction instance .
8891	Get a logging handler .
8892	Create a new Map .
8893	Partition a collection by n elements .
8894	Decorate a function with a location .
8895	Read a namespaced name .
8896	Read a collection .
8897	Read a list .
8898	Read a vector .
8899	Read a set .
8900	Read a map literal .
8901	Read a string .
8902	Read a symbol .
8903	Read a keyword .
8904	Read a meta tag .
8905	Read a function definition .
8906	Read quoted string .
8907	Expand a syntax quoted form .
8908	Process a quoted form .
8909	Read a syntax quoted form .
8910	Read a unquote .
8911	Read a DELEF instruction .
8912	Read a single character .
8913	Read a regex pattern .
8914	Read a reader macro .
8915	Read the next comment .
8916	Read next token .
8917	Read expressions from a stream .
8918	Read a string .
8919	Read a file .
8920	Update the location of a character .
8921	Move to the back of the stack .
8922	Read the next token .
8923	Return a bytes object representing the bytecode of the given code .
8924	Get the bytecode from the cache .
8925	Return the path to the cache file .
8926	Hook imports .
8927	Find a Basilisp module .
8928	Execute cached module .
8929	Compiles a module .
8930	Execute a module .
8931	Create a new symbol .
8932	Find all keywords in text .
8933	Get or create a keyword map .
8934	Create a keyword .
8935	Chain a list of generated PyASTs into a single PyASTStream .
8936	Load an attribute .
8937	Wraps a generator function to generate a Python AST .
8938	Generate a Python AST for a collection of nodes .
8939	Add location information to a generated PyAST .
8940	Decorate a function to add location information .
8941	Decorate a function with ast_with_loc .
8942	Check if a variable is dynamic .
8943	Check if variable is redefable .
8944	Convert an AST into an ast . Expr .
8945	Return an ast . FunctionDef .
8946	Check if we should warn on redef .
8947	Convert a Do AST node to a Python AST .
8948	Generate a name for a function .
8949	Convert a list of bindings into an ast . ast .
8950	Convert a single - arity function to a Python function .
8951	Convert a multi - arity function to a Python function .
8952	Convert a function node to a Python AST .
8953	Convert an IF node to a Python AST .
8954	Convert an If node to an AST .
8955	Convert an Invoke node to a Python AST .
8956	Convert a quote node to a Python AST .
8957	Convert a Recur into a Python AST .
8958	Convert a Recur into a Python AST .
8959	Convert a SetBang node to a Python AST .
8960	Convert a Throw node into a Python AST .
8961	Convert a Try node to an AST .
8962	Convert a local symbol to a PyExpr .
8963	Find a variable in a namespace .
8964	Convert a VAR node to a Python AST .
8965	Convert a HostField node to a Python AST .
8966	Convert a MaybeClass node to a Python AST .
8967	Convert a MaybeHostForm node to a Python AST .
8968	Convert a LispForm into a Python AST .
8969	Convert a collection literal into a Python AST .
8970	Generate a Python AST from a Lisp AST node .
8971	Yield all imported modules .
8972	Return an astroid . ImportFrom node .
8973	Create a namespace variable .
8974	Create a new set .
8975	Create a new set with the given members .
8976	Visit an ExceptHandler AST node .
8977	Return None if node is not an expression .
8978	Visit a FunctionDef AST node .
8979	Visit a While AST node .
8980	Visitor for Try AST node .
8981	Create a new module .
8982	Return the first element of o .
8983	Return the rest of a sequence .
8984	Return the nth occurrence of the nth element in coll .
8985	Get the nth element of a sequence .
8986	Return the union of o and seq .
8987	Convert an object to a sequence .
8988	Concatenate sequences .
8989	Return the association of m and kvs .
8990	Return the conjugate of coll and xs .
8991	Decorate a function with a partial function .
8992	Dereferences an object .
8993	Returns True if v1 equals v2 .
8994	Divide x by y .
8995	Sorts a collection by key .
8996	Return True if coll contains k .
8997	Get the value of a key .
8998	Convert an object to a lisp representation .
8999	Convert an object to a Python object .
9000	Return a string representation of o .
9001	Collect arguments from a tuple .
9002	Wrap a function in a trampoline .
9003	Decorate a function with attributes .
9004	Decorate a function with meta data .
9005	Mark a function as a basilisp function .
9006	Resolve an alias .
9007	Resolve a symbol to a variable .
9008	Add a generated python variable .
9009	Bootstraps a namespace .
9010	Intern a variable .
9011	Intern a variable in a namespace .
9012	Find a variable in a namespace .
9013	Find a variable in a namespace .
9014	Find the variable with the given namespace qualified name .
9015	Add a default import for a module .
9016	Add an alias .
9017	Intern a symbol .
9018	Intern a symbol .
9019	Find a variable by symbol .
9020	Add an import .
9021	Return the module that imports sym .
9022	Add a reference to a symbol .
9023	Get a reference variable by symbol .
9024	Refers all symbols in other_ns_interns .
9025	Refers this namespace to another namespace .
9026	Get or create a namespace .
9027	Get or create a namespace .
9028	Get a namespace by name .
9029	Remove a namespace .
9030	Return a completion matcher for the given text .
9031	Given a prefix and an optional name_in_ns return a list of complete aliases .
9032	Given a prefix and an optional name_in_module return a list of fully qualified imports .
9033	Return a list of interned names .
9034	Completes all references to the given value .
9035	Completes the given text .
9036	Return a tuple of positional arguments .
9037	Create a list from members .
9038	Create a list from members .
9039	Change the style of a scalar .
9040	Decrypt a JWT .
9041	Encrypts a JSON - encoded string .
9042	Delete an item from the cache .
9043	Return a tuple of a selector and a comparison .
9044	Close the stream .
9045	Parse a FiQL string into an Expression object .
9046	Dump ndb model to file .
9047	Hook handler for objects .
9048	Decode a date string .
9049	Decode a JSON value .
9050	Encode an object to JSON .
9051	Validate release version .
9052	Generate changelog .
9053	Find strongly connected components of a graph .
9054	Robust topological sort .
9055	Set the parent expression .
9056	Return the parent expression .
9057	Add an operator to this expression .
9058	Add an element .
9059	Create an AND expression .
9060	Create an OR expression .
9061	Decorator for logging functions .
9062	Parse received messages .
9063	Convert a list of tuples into a dictionary .
9064	Check a list of messages for a given command .
9065	Prepare a message for sending .
9066	Send all buffered messages to the socket .
9067	Enable a slide .
9068	Save a template to a file .
9069	Load a template
9070	Get information about a stage .
9071	Increments a file .
9072	Locate the package . json file .
9073	Parse package JSON .
9074	Handle an API error .
9075	Validate API response .
9076	homogenize two waves
9077	Interpolate the dep vector of a wave .
9078	Get the indep vector of two waveforms .
9079	Verify waveforms are compatible .
9080	Load the systemjs manifest
9081	Create a par tuple from a MODB file .
9082	Run a trace .
9083	Shorten a URL .
9084	Expand a short URL .
9085	Get the URL stats for a short URL .
9086	Get stats from database .
9087	Get db stats
9088	Execute a pypkg command .
9089	Echo a command to the terminal .
9090	Log a message .
9091	Decorator that caches the result of a method .
9092	Yield chunks from iterable .
9093	Yields chunks from iterable .
9094	Flatten an iterable .
9095	Signal handler for SIGINT .
9096	Print a tab - separated string .
9097	Create a dummy class .
9098	Create a number from human readable string .
9099	Create a YOURLSClient .
9100	Trace a waveform module .
9101	Print links to dependencies
9102	Make a common entry .
9103	Make a multi - entry .
9104	Convert a string of operators to a list of words .
9105	Generate chunks of noise .
9106	Given a frequency vector and a data matrix split it into individual data points .
9107	Write touchstone file .
9108	Bound a waveform to a given interval .
9109	Build the units for a given operation .
9110	Return a copy of the wave with a new dep_name .
9111	Calculate the running area of a ray .
9112	Check that indep_min and indep_max are valid inputs .
9113	Calculate the arccosine of a wave .
9114	Calculate the arccosh of a wave .
9115	Return the arccosine of a wave .
9116	Calculate the arccosine of a wave .
9117	Average a waveform .
9118	Return a copy of the wave with the dep_units set to dB .
9119	Derivative of a waveform .
9120	Compute the imaginary part of a wave .
9121	Return the absolute magnitude of a waveform
9122	Fourier Transform Fourier Transform
9123	Fourier Transform .
9124	Return the database for a waveform .
9125	Return the imaginary part of a waveform .
9126	Return the absolute value of a wave function .
9127	Return the phase of a waveform
9128	Ifft function .
9129	Create an integral waveform .
9130	Calculate the group delay .
9131	Return the logarithm of a wave .
9132	Naverage a waveform .
9133	Return the integral of a waveform .
9134	Return the maximum magnitude of a waveform .
9135	Return the minimum value of a waveform .
9136	Phase a wavevector .
9137	Round a wave to the specified number of decimals .
9138	Calculate the square root of a wave .
9139	Sub - waveform .
9140	Convert a wavevector to a complex array .
9141	Convert a wavevector to a float
9142	Convert a wavevector to an integer
9143	Calculate the weighted value of a wave .
9144	Find all JASPM packages in the given path .
9145	Get short description from long description .
9146	Build an expression .
9147	Return the next item after pos .
9148	Get a list of functions from an expression .
9149	Given a list of expressions return a list of tuples of the left and right delimiters .
9150	Parse an expression .
9151	Remove consecutive delimiters from expression .
9152	Split a string by a separator .
9153	Convert number to engineering notation .
9154	Return a string representation of a number with no exponent .
9155	Convert a number to Peng .
9156	Convert a string to a float .
9157	Return the fractional part of a Peng number .
9158	Convert a string to a float .
9159	Convert a peng number to an EngPower object .
9160	Return the power of a suffix .
9161	Remove extra delimiters from an expression .
9162	Convert a number to a scientific string .
9163	Convert number to scientific tuple .
9164	Find a sourcemap comment in a file .
9165	Returns True if the application has a JS extension .
9166	Bundle the application .
9167	Get the trace for a given app .
9168	Return True if hashes in dep_tree match hashes in self . hashes
9169	Format a hexdump string .
9170	Parse a docstring .
9171	Return a list of valid identifiers .
9172	Attempt to import an object from a module .
9173	Split a line into parts .
9174	Check if the context has been initialized
9175	Return help text for builtin function .
9176	Find a function in a context
9177	List the directory structure of the given context .
9178	Determine if an argument is a flag .
9179	Process arguments .
9180	Extract the value of an argument .
9181	Invoke a function .
9182	Invoke a command .
9183	Invoke a string .
9184	Parse a parameter declaration .
9185	Parse a return declaration .
9186	Classify a section .
9187	Classify a line .
9188	Join multiple paragraphs .
9189	Wrap and format the maindoc .
9190	Convert the given value to the given type .
9191	Convert a binary value to a Python object .
9192	Get the size of a type
9193	Format a value .
9194	Raise ArgumentError if type is invalid .
9195	Check if the given type name is known .
9196	Split a typename into base and subtypes .
9197	Instantiate a complex type .
9198	Get a type by name .
9199	Check if a format is known .
9200	Inject a type into the registry .
9201	Load type from module .
9202	Check if the positional and keyword arguments are filled .
9203	Add a parameter .
9204	Set a typed return value .
9205	Set a custom return value .
9206	Given a short - name return the first matching parameter .
9207	Get the type of a parameter .
9208	Return the signature of the function .
9209	Format the return value .
9210	Convert a positional argument .
9211	Check the specification of the function .
9212	Convert an argument to a type .
9213	Format the message .
9214	Convert to a dictionary .
9215	Check and execute a function .
9216	Parse a list of validators into a list of tuples .
9217	Find all objects in a container .
9218	Create a context from a module .
9219	Get help text for a function .
9220	Decorator for parameters .
9221	Decorate a function with a custom return value .
9222	Decorator to mark a function as a return type .
9223	Decorator to mark a class as a context .
9224	Decorator to annotate a function .
9225	Mark a function as annotated .
9226	Return the short description of a function .
9227	Load cron modules
9228	Install cronjobs
9229	Print the crontab
9230	Uninstall cron job .
9231	Create a handler for a given uri .
9232	Load project configs
9233	Save projects config to file .
9234	Define a singleton property .
9235	Get all projects that depend on this project .
9236	Decorate a function with a post - processing hook .
9237	Initialize the project .
9238	Set a key - value pair .
9239	Set the value of a field .
9240	Create an instance from an iterable .
9241	Set the value of an option .
9242	Set multiple values at once .
9243	Apply a function over the current state .
9244	Collect a number of arguments into a tuple .
9245	Raise NotImplementedError if not implemented .
9246	Apply f to pure and return the result .
9247	View the current fold .
9248	Convert Fold to a list of B .
9249	Apply a function over this set .
9250	Set a value in the state .
9251	Iterate over an iterable .
9252	Get the kind of an option .
9253	Main function .
9254	Return a copy of this vector with the vector steptowards other .
9255	Handle input .
9256	Move robots towards the player .
9257	End the game .
9258	Enter move .
9259	Play game .
9260	Make a move .
9261	The winner of the game .
9262	Yields all possible wins .
9263	Process a single item .
9264	Open a spider .
9265	Upload a chunk of data to S3 .
9266	Create a file - like object .
9267	Get account state .
9268	Get the state of an asset .
9269	Get a block .
9270	Get block hash .
9271	Get the system fee for a block .
9272	Get the contract state of a script .
9273	Get raw transaction .
9274	Get the storage for a script .
9275	Get a transaction output .
9276	Invoke a contract .
9277	Invoke a function .
9278	Invoke a script .
9279	Send a raw transaction .
9280	Validate an address .
9281	Calls a JSON - RPC method .
9282	Return True if s is a valid hash256 string .
9283	Check if a string is a valid hash160
9284	Encodes a list of parameters into a dictionary .
9285	Decode an invocation result .
9286	Decorator to specify the first argument of a function .
9287	Apply a transformation to a datetime .
9288	Apply the query to a timezone .
9289	Save the template to a file .
9290	Render the barcode .
9291	Calculate checksum .
9292	Render the code .
9293	Connect to the KVS server .
9294	Main entrypoint .
9295	Download a file from S3 .
9296	Upload a file to S3 .
9297	Downsync a S3 bucket .
9298	Display a diff of the S3 configuration .
9299	Parse an environment variable .
9300	Set basic credentials .
9301	Set API key .
9302	Get JSON content from folder .
9303	Return a dictionary of all available schemas .
9304	Get the JSON schema for this resource .
9305	Return a RefResolver for this schema .
9306	Validate an object .
9307	Return a list of valid examples .
9308	Get the list of invalid examples .
9309	Returns the URL to redirect to after authorization .
9310	Auth user process url
9311	Get an auth token .
9312	Get the user s id .
9313	List files in a folder .
9314	Create a folder .
9315	Add a comment to an object .
9316	Decodes an object .
9317	Set drop target .
9318	Start the drag and drop operation
9319	Set the default TTL .
9320	Inspect an object .
9321	Show a shell .
9322	Migrates font from old style to new style .
9323	Load a page .
9324	Get a parameter from a tag .
9325	Send a message
9326	Create a custom tool tip window .
9327	Mouse down event handler
9328	Mouse move event handler
9329	Handles resize events
9330	Key event handler
9331	Delete selected objects
9332	Duplicate selected objects
9333	Refresh the image .
9334	Calculate the best position for a widget .
9335	Retrieves the PyData associated with the item .
9336	Sets the PyData for the item .
9337	Find the data for a particular PyData .
9338	Delete a wx . ListCtrl .
9339	Delete all items
9340	Clear all columns .
9341	Set the selection of the item
9342	Get string selection
9343	Set client data .
9344	Appends a string to the list .
9345	Represent an object as a string .
9346	Get a GUI object by name .
9347	Create a copy of this object .
9348	Add a child to the sizer
9349	Set the parent component
9350	Draw the tile background .
9351	Empties background .
9352	Draws the text on the screen .
9353	Find modules in a directory .
9354	Return a sorted list of column headings
9355	Reset the view .
9356	Updates the values in the grid table .
9357	Update column attributes .
9358	Sorts a column .
9359	Clear the list .
9360	Create a combobox .
9361	Begins the editing process .
9362	Ends editing a cell
9363	Returns True if the given key is accepted .
9364	Key event handler
9365	Register a type handler .
9366	Enables the specified item .
9367	Checks if the menu item is enabled .
9368	Enables the menu .
9369	Checks if the menu is enabled .
9370	Removes a menu .
9371	Submit the form .
9372	Set object s attributes .
9373	visit an HTML table node
9374	Get the documenter class for an object .
9375	Mangle a signature .
9376	Import module by name .
9377	Create an autolink role .
9378	Show an alert dialog .
9379	Prompt the user for input .
9380	Select a font .
9381	Select a color .
9382	Choose a directory .
9383	Find a dialog .
9384	Sets whether or not this item has children .
9385	Set the icon
9386	Show the window .
9387	Parse a resource file .
9388	save rsrc to filename
9389	Build a window from a dictionary .
9390	Build a GUI object from a response
9391	Connect a component to a controller
9392	Convert a property name to its Python equivalent .
9393	Set the clipboard data
9394	Find autosummary in docstring .
9395	Load an application .
9396	Inspect an object
9397	Activate a child item
9398	update the name
9399	Show the context menu .
9400	Return a representation of the field .
9401	Register an expression filter .
9402	Decorator to register a node filter .
9403	Assert that the current path exists .
9404	Fail if there is no current path .
9405	Assert that the current path exists .
9406	Fail if there is no current path .
9407	Select the option .
9408	Apply the filter .
9409	Get a webdriver object .
9410	Return the XPath expression for this expression .
9411	Return True if the node matches the filters .
9412	Switch to a frame .
9413	Accepts an alert dialog .
9414	Accepts a confirmation dialog .
9415	Dismiss a confirm dialog .
9416	Accepts a prompt .
9417	Dismiss a prompt .
9418	Save the page to a file .
9419	Save a screenshot .
9420	Raise server error .
9421	Determine if the given value matches this filter .
9422	Checks if a field is checked .
9423	Check if element has no checked field .
9424	Checks if a field is unchecked .
9425	Check if element has no unchecked field .
9426	Assert a text query .
9427	Fail if there is no text .
9428	Assert that the given title exists .
9429	Fail if there is no title .
9430	Assert that the page has the given title .
9431	Fail if there is no title .
9432	Find all elements matching the query .
9433	Find the first item in the collection .
9434	Return the inner content of a node .
9435	Return the inner text of a node .
9436	Normalize a URL .
9437	Create a setter decorator for a function .
9438	Synchronizes the session with the server .
9439	Check if error should be caught .
9440	Compare the number of results in the cache .
9441	Cache at least size results .
9442	Checks if the given options are None .
9443	Create a failure message .
9444	Returns True if count matches options .
9445	Normalize text .
9446	Normalize whitespace .
9447	Convert text to a regular expression .
9448	Determine if this request resolves to the expected path .
9449	Resize the window .
9450	Start the server .
9451	Setter for fcgetter .
9452	Setter for instance method .
9453	Sets the class method .
9454	Return a formatted traceback .
9455	Return the source code for an object .
9456	Get the logger for the given instance .
9457	Setter for logger .
9458	Call API .
9459	List channels .
9460	List users .
9461	Make a message .
9462	Translates a slack message .
9463	Send a slack message .
9464	Read a slack channel .
9465	Run the slack client .
9466	Run the client .
9467	Return the differences between two dictionaries .
9468	Colorize a message .
9469	Called when a task starts
9470	Print the result of a v2 run .
9471	Print stats on v2 playbook .
9472	Print the skipped task .
9473	Convert a prefix to an address mask .
9474	Decorator to check if value is empty .
9475	Add a model .
9476	Get a dictionary of all elements in the tree .
9477	Load data from a dictionary .
9478	Convert to a dictionary .
9479	Parse config element .
9480	Parse the state of the device .
9481	Translates the configuration .
9482	Load all JINJA filters
9483	Find yang file .
9484	Convert a model to a dictionary .
9485	Return the differences between f and s .
9486	Perform an HTTP POST request .
9487	Build authorization code URI
9488	Get a token .
9489	Extract query parameters from a URL .
9490	Dequery a URL .
9491	Build a URL .
9492	Log exception .
9493	Make a response object .
9494	Make a redirect error response .
9495	Make a JSON response .
9496	Get authorization code .
9497	Refresh a refresh token .
9498	Get a token .
9499	Get authorization code from URI .
9500	Get token from POST data
9501	Get the authorization object .
9502	Open the specified bus .
9503	Read a single byte from the bus .
9504	Read number of bytes from the bus .
9505	Read a single byte from the bus .
9506	Write bytes to the bus .
9507	Write a byte value to the bus .
9508	Write an I2C block of data to the bus .
9509	Return the cdn url .
9510	Copy a file .
9511	Create a local copy of a file .
9512	Create a remote copy of a file .
9513	Construct a File object from a dict .
9514	Upload a file .
9515	Upload a file from a URL .
9516	Upload a file from a URL synchronously .
9517	Returns a list of cdn urls for this group .
9518	Construct a group object from a group info dictionary .
9519	Create a group .
9520	Perform the base API request .
9521	Return a generator of file uuids .
9522	List API resources .
9523	Print progress bar .
9524	Make an upload request .
9525	Get home mode status
9526	List cameras .
9527	Get information about a list of cameras .
9528	Get a snapshot of a camera .
9529	Disable a camera .
9530	Get a motion setting for a camera .
9531	Save a camera event .
9532	Update the motion settings .
9533	Check if li is the last li in the list .
9534	Get a list of nodes from a single list .
9535	Get the ilvl value of a li element .
9536	Get the vMerge element .
9537	Get the grid span of a trace .
9538	Get the td at the given index .
9539	Return True if style is false
9540	Return True if the paragraph is bold .
9541	Return True if r is an Ialics document .
9542	Return True if the document is underlined .
9543	Return True if p is a title .
9544	Get text run content data .
9545	Return a dictionary of relationship info .
9546	Get the document data .
9547	Get ordered list type
9548	Build a list .
9549	Build a tr element .
9550	Build a table element .
9551	Get the content of a tag .
9552	Remove tag from tree .
9553	Find a dataset .
9554	Load MNIST .
9555	Load cifar10 .
9556	Plot an array of images .
9557	Plot the weights of each layer .
9558	Plot the given filters .
9559	Generate batches of arrays .
9560	Encode a list of characters .
9561	Generate batches of training data .
9562	Predict a sequence of sequences .
9563	Add random weights to the filter .
9564	Encodes x .
9565	Decodes z with the given layer .
9566	Find the output of a layer .
9567	Compute the score of x .
9568	Predict the maximum value of x .
9569	Predict the predicted probabilities of x .
9570	Predict logit at x .
9571	Compute the score of x and y .
9572	Create a batch of features and labels .
9573	Generate random batches of sequences .
9574	Load a network from a file .
9575	Generate a random matrix .
9576	Generate a random vector .
9577	Yields tuples of output name and expression matching patterns .
9578	Given a list of layers and a list of patterns return a tuple of name and param .
9579	Create a BernoulliDropout from keyword arguments .
9580	A list of variable names .
9581	Compute the accuracy of the model .
9582	Perform a scan .
9583	Build an activation .
9584	Reservoir function .
9585	Set the loss .
9586	Iteratively train a dataset .
9587	Train the model .
9588	Return a hash of the layers and losses .
9589	Build a computation graph .
9590	List of input layers .
9591	Returns a list of variables in this loss .
9592	Find a parameter in the layer .
9593	Feed forward computation .
9594	Predict the value at x .
9595	Returns the score of the given data .
9596	Save model to file .
9597	Load a model from a file .
9598	Calculate the loss of each layer .
9599	Build a graph from the given kwargs .
9600	The output size of the layer .
9601	Connect inputs to outputs .
9602	Bind the graph to the network .
9603	Resolve input shapes .
9604	Resolve output shapes .
9605	Log this layer .
9606	Log the number of parameters
9607	Format string .
9608	Resolve the shape of a layer .
9609	Find a parameter by name .
9610	Add a bias to the model .
9611	Return a dictionary representation of the model .
9612	r Calculate the loggabor of a point .
9613	Compute the loggabor image of a given image .
9614	Add a tier .
9615	Remove a tier by name .
9616	Get a tier by name .
9617	Convert to EAF .
9618	Add a point to the tier .
9619	Add an interval
9620	Remove an interval .
9621	Remove a point .
9622	Yields a list of intervals
9623	Get all intervals
9624	Indent an element .
9625	Add an annotation to a tier .
9626	Add a CV entry to the controlled vocabulary .
9627	Add a description to a controlled vocabulary .
9628	Add an external reference .
9629	Add a language .
9630	Add a lexicon reference .
9631	Add a linguistic type .
9632	Add a linked file .
9633	Add a locale .
9634	Add a secondary linked file .
9635	Add a tier .
9636	Remove time slots from the timeslot dictionary .
9637	Extracts time slots from the EAF .
9638	Generate a unique annotation id .
9639	Generate a unique timestamp .
9640	Returns a list of child tiers for the given id_tier
9641	Get the full time interval .
9642	Get the annotation data after time .
9643	Get the annotation data before time .
9644	Returns a list of tier IDs for a given linguistic type .
9645	Merge multiple tiers .
9646	Remove all annotations from a tier .
9647	Remove a description from a controlled vocabulary .
9648	Remove a license .
9649	Remove linked files .
9650	Remove a property .
9651	Remove a reference annotation .
9652	Remove secondary linked files .
9653	Remove a tier .
9654	Remove a list of tiers .
9655	Rename a tier .
9656	Shift the annotations by time .
9657	Entry point for the algorithm .
9658	Pretty - print storage information .
9659	Get the base level of text .
9660	Get embedding levels .
9661	Return a list of embedding levels for the given storage .
9662	Calculate the runs for a level .
9663	Resolve weak types .
9664	Resolve neutral types .
9665	Reverse a contiguous sequence .
9666	Re - applies L1 and L2 .
9667	Process the current file .
9668	Convert a list of lines into a list of strings .
9669	Add a new attribute to an object .
9670	Parse command line arguments .
9671	Maintain backwards compatibility .
9672	Show the current window .
9673	Discover and return a GUI .
9674	Deregister host .
9675	Add an entry to the filemenu .
9676	Context manager to temporarily select the maintained selection .
9677	Context manager to temporarily change the current time .
9678	Show no GUI .
9679	Load types .
9680	Get cumulative data .
9681	Get the values of a single axis .
9682	Draw a constant line .
9683	Load transform parameters .
9684	Reverse a mapping .
9685	Generate a range of floats .
9686	Add data to the list .
9687	Add filters to defs element .
9688	Add data to the configuration .
9689	Burn the chart .
9690	Calculate left margin
9691	Calculate the right margin .
9692	Calculate top margin .
9693	Add a popup to the foreground .
9694	Calculate bottom margin .
9695	Draws the graph .
9696	Make a datapoint text element .
9697	Draw x labels
9698	Draw y labels .
9699	Draw the x - axis guidelines .
9700	Draw y guidelines .
9701	Draws the graph titles .
9702	Render inline styles .
9703	Create SVG element .
9704	Return a list of stylesheet resources for this resource .
9705	Run a bot .
9706	Send data to the socket .
9707	Connect to the server .
9708	Send a PRIVMSG message .
9709	Return a list of patterns that should be handled .
9710	Create a new nick .
9711	Handle a ping .
9712	Called when a server is registered .
9713	Enter event loop .
9714	Register with Boss .
9715	Task runner
9716	Require that the user is a boss .
9717	Command patterns .
9718	Register a success message .
9719	Execute a task .
9720	Add a nick to the queue .
9721	Send validation email .
9722	Send a password reset notification .
9723	Validate password strength .
9724	Verify a token .
9725	Delete a user .
9726	Only allow POST requests .
9727	Get the thread pool executor .
9728	Return a docker API client .
9729	Get TLS client certificate and key .
9730	The name of the service .
9731	Call a docker method
9732	Execute a docker command .
9733	Poll Docker for tasks .
9734	Stop the Docker service .
9735	Filter queryset .
9736	Update the instance s password .
9737	Update a user s password .
9738	Validate email address .
9739	Create a new token .
9740	Delete a token .
9741	Make sure that the user is authenticated and that the email is correct .
9742	Send confirmation email .
9743	Update the expiry time of the object .
9744	Context for password reset email .
9745	Handles email notifications .
9746	Password reset email handler .
9747	Custom validation email handler .
9748	Authenticate a user .
9749	Authenticate the given credentials .
9750	Show a notebook .
9751	Process hv plots .
9752	Create a custom JS callback
9753	Get a widget for a parameter .
9754	Render a HoloViews object
9755	Create a TextInput widget .
9756	Return a list of named objects
9757	Get the owner of a method .
9758	Assign user and password from HTTP Auth credentials .
9759	Ping the server .
9760	Get information about a resource .
9761	Get cluster health .
9762	Convert bytes to readable string .
9763	Total CPU load .
9764	Memory size in bytes .
9765	Get the total number of transactions in the network .
9766	List of volume IDs .
9767	Get a volume by ID
9768	Get volume size in bytes .
9769	Return percentage of used volume .
9770	Returns the average disk temperature of a volume .
9771	Get the maximum disk temperature for a volume .
9772	Get a disk by ID
9773	Login to the API .
9774	Make a GET request to the url
9775	Execute a GET request
9776	Update this entry .
9777	Returns a SynoUtilization object
9778	Returns a SynoStorage object .
9779	Create a context for a request .
9780	Get the tenant token .
9781	Build the widget s attributes .
9782	Set INSTALLED_APPS .
9783	Return a copy of settings with INSTALLED_APPS removed .
9784	Return a dictionary of global settings .
9785	Handle GET requests .
9786	Get a value from the config .
9787	Change the value of a key .
9788	Migrate the config file .
9789	Start the webserver .
9790	Wait for the server to respond .
9791	Get new access information .
9792	Check if token is present .
9793	Set access credentials .
9794	Refresh OAuth2 tokens .
9795	Create a DynamoDB manifest table .
9796	Split a path into bucket and prefix .
9797	Check if a bucket is Glacier .
9798	Extract run_id from filename .
9799	Clean a dictionary .
9800	Add run_id to manifest .
9801	Check if run_id is in manifest .
9802	Extracts a schema from a schema URI .
9803	Fixes the given schema .
9804	Parse a list of contexts into a list of tuples .
9805	Parse an unstructured event .
9806	Transform a line into a good event .
9807	Convert a SnowplowEvent to a dictionary .
9808	Get the name of the template to use .
9809	Print a list of contexts .
9810	Print the variables in the context .
9811	Format a SQL string as HTML .
9812	Format a Django context object as HTML .
9813	Format a dictionary as HTML .
9814	Style text .
9815	Format an object .
9816	Format an object .
9817	Get a token from a string .
9818	Return a list of latex nodes .
9819	Convert latex string to text .
9820	Set the tex input directory .
9821	Read an input file .
9822	Convert latex to text .
9823	Convert a unicode string to Unicode .
9824	Unescape a string .
9825	Get organisation information .
9826	Get a list of boards
9827	Returns a list of members
9828	Updates an organisation .
9829	Remove a member
9830	Add a member to a group .
9831	Add a member to a group .
9832	Get information about a list .
9833	Add a card .
9834	Get information about a label .
9835	Fetches a list of items .
9836	Update a label .
9837	Update a label .
9838	Get the authorisation URL .
9839	Get card information .
9840	Get a board .
9841	Get a list of users .
9842	Get a list of checklists
9843	Add a comment .
9844	Add an attachment to a file .
9845	Add a new checklist .
9846	Add a label from a dictionary .
9847	Add a label from a class .
9848	Add a member
9849	Get member information .
9850	Get a list of cards
9851	Returns a list of organisations
9852	Create a new board .
9853	Decorator for dispatching methods .
9854	Get information about this board .
9855	Get a list of lists
9856	Get a list of labels .
9857	Get a card .
9858	Get a list of checklists
9859	Get an organisation .
9860	Update a board .
9861	Add a list .
9862	Add a label .
9863	Get checklist information .
9864	Get a card .
9865	Returns a list of ChecklistItems
9866	Update a checklist .
9867	Add a new item to the list .
9868	Remove a check item .
9869	Updates the name of a checklist item .
9870	Update the state of a checklist .
9871	Add authorisation parameters to a query string .
9872	Raises a Unauthorised exception if the user is unauthorized .
9873	Build a Trello URL .
9874	Fetches a JSON response .
9875	Create an organisation .
9876	Create a new board .
9877	Create a label .
9878	Create a list .
9879	Create a new card .
9880	Create a new checklist .
9881	Create a new member .
9882	Get an organisation .
9883	Get a board .
9884	Get a list .
9885	Get a card .
9886	Get a checklist .
9887	Create a new member .
9888	Extract domain from URL .
9889	Convert text to markupless .
9890	Convert text to raw text .
9891	Convert text to raw text pairs .
9892	Set a user s password
9893	Split text with locations .
9894	Mark a regex as split .
9895	Mark the beginning and end of a regex .
9896	Main function .
9897	Create an AES cipher .
9898	Get cipher mode .
9899	Return the priority of this request .
9900	Check the encryption scheme .
9901	Publish a message
9902	Make a unique id .
9903	Connect to the broker .
9904	Handle a CONNECTIONACK packet .
9905	Encodes a string .
9906	Decodes a string .
9907	Encodes a 16 - bit integer into a bytearray .
9908	Encodes a length into a byte string .
9909	Decodes the length of a string .
9910	Encodes the packet .
9911	Encode the packet .
9912	Decode a packet .
9913	Encodes the session into a string .
9914	Decode a packet .
9915	Decode a packet .
9916	Encodes the message .
9917	Encode the packet .
9918	Decodes a packet .
9919	Encodes the message .
9920	Encode the payload .
9921	Decode a packet .
9922	Decode a packet .
9923	Get the URL for a method .
9924	Make a request to the API .
9925	Refresh the blocks .
9926	Format the data .
9927	Fit data and return transformed data
9928	Fit KMeans to data .
9929	Fit meanshift to data .
9930	Fit the classifier .
9931	Predict clusters from data .
9932	Map clusters to ids
9933	Sort clusters according to their contents
9934	Get a date from a string
9935	Returns the total number of points in a dictionary
9936	Returns the maximum time span of a dictionary
9937	Display a unit picker .
9938	Return a pretty version of a string .
9939	Convert analyte to namemass
9940	Convert analyte to massname
9941	Collate data from a directory .
9942	Enumerates a boolean array .
9943	Convert a list of tuples into a boolean array .
9944	Smooth a 2D array .
9945	Fast gradient computation .
9946	Find the minimum of x and y .
9947	Cluster data by meanshift .
9948	Cluster data using KMeans .
9949	Cluster data using DBSCAN .
9950	Get all defined SRMs
9951	Read configuration file
9952	Read latools . cfg file
9953	Print all configuration files
9954	Copy a SRM file to a directory
9955	Create a config file .
9956	Change the default configuration .
9957	Excludes downholes from a filter
9958	Return a filtered copy of the input array .
9959	Despike the signal .
9960	Plot the autorange plot .
9961	Create a list of numpy arrays representing the number of traces in the time series .
9962	Calculate ratio of analytes
9963	Calibrate the data .
9964	Sample stats from analytes .
9965	Returns a dictionary of ablation times
9966	Filter analyte with a threshold
9967	Filter gradient threshold .
9968	Calculate correlation .
9969	Calculate correlation filter .
9970	Add a new filter
9971	Returns a dictionary of parameters for the filter .
9972	Plot histograms of data .
9973	Compute summary statistics for the given data .
9974	Load reference data .
9975	Looks up a type in the registry .
9976	Returns a Pandas DataFrame with the atomic weight of each element .
9977	Calculate the mass of a molecule
9978	Generate a namedtuple of ANSISequences .
9979	Annihilate a list of predicates .
9980	Deduplicates a stack .
9981	Gauss - weighted stats calculation
9982	Gauss function .
9983	Compute the standard deviation of a numpy array .
9984	Return a list of samples for the given subset .
9985	Despike the data .
9986	Calculate the weighted mean of the background .
9987	Calculate the background time points using interpolation .
9988	Perform background subtraction .
9989	Calculate ratios for background subtraction .
9990	Make a subset of the analysis .
9991	Apply a percentile threshold to a set of samples .
9992	Fit a classifier .
9993	Apply a classifier .
9994	Filter the data using correlation filter .
9995	Apply a filter to each sample .
9996	Apply a filter to each sample .
9997	Print the status of the filter .
9998	Apply a defragmentation to the data .
9999	Filter the number of removed samples .
10000	Generate a histogram of gradients for each analyte .
10001	Plot gradient of analytes .
10002	Plot histograms of the focus .
10003	Draws trace plots for all analyses .
10004	Draws gradient plots for each sample .
10005	Filter a set of samples .
10006	Sample stats .
10007	Get statistics for each sample .
10008	Export a minimal reproduction dataset .
10009	Export traces to a directory .
10010	Save the analysis log .
10011	Export minimal reproduction dataset .
10012	Split file by regex .
10013	Return a new Functor with the result of applying f and g to each element of fa .
10014	Plot PCA components .
10015	Return the bayes scale of s .
10016	Return the median value of s .
10017	Despike a signal .
10018	ExpDecay despike function
10019	Add a component .
10020	Remove a set or index .
10021	Clear all data .
10022	Remove unused switches .
10023	Return the key that matches the fuzzkey .
10024	Make a numpy array from a key .
10025	Given a key or a dictionary of key - value pairs grab the corresponding component
10026	Return a string representation of the components .
10027	Log a function .
10028	Write a log file .
10029	Read a log file
10030	Wrap a function with timeout .
10031	Get information about the device .
10032	Send a message .
10033	Parse a file or string .
10034	Generate a link to a notebook .
10035	Return the thumbnail div .
10036	Return the code div as a string .
10037	Code example .
10038	The URL of the image .
10039	Get the output file .
10040	Process the notebook .
10041	Create a notebook using nbconvert .
10042	Download a list of files .
10043	Create a thumbnail .
10044	Get the description of the resource .
10045	Scale an image .
10046	Save image to thumbnail directory .
10047	Copy the thumbnail figure
10048	Get the URL for a notebook .
10049	Given a field_name and a list of db_table_fields return a list of language codes
10050	Return the default value for a field .
10051	Process a thumbnail file .
10052	Pre - save file .
10053	Refresh the cache .
10054	Get all thumbnails .
10055	Create a thumbnail .
10056	Delete a thumbnail .
10057	Create a thumbnail .
10058	Get a thumbnail for a source .
10059	Delete a thumbnail .
10060	Handle a received message .
10061	Subscribe to a number of events .
10062	Return a set of accepted and delivered states .
10063	Register a provider .
10064	Send a message .
10065	Create a receiver blueprint .
10066	Return the receiver blueprints for all registered receivers .
10067	Receive a message .
10068	Receives a status message
10069	Wraps a function to return a JSON response .
10070	Forward an incoming message .
10071	Signs a transaction .
10072	Estimate the gas of a transaction .
10073	Estimate transaction gas .
10074	Write to the output buffer .
10075	Read a line from the serial port .
10076	Send a message .
10077	Return the message as a string .
10078	Check if the message has bad headers .
10079	Attaches an attachment .
10080	Register services .
10081	Create a Config object from a module .
10082	Register resources .
10083	Raises ValueError if key is empty .
10084	Raise an exception .
10085	Setup the data manager .
10086	Return the total number of samples in a given wavelength .
10087	Calculate the cauchy equation
10088	Initialize the backend .
10089	Login to the backend .
10090	Get a list of domains .
10091	Get all elements .
10092	Patch an object .
10093	Delete a resource .
10094	Check if two paths are on the same volume .
10095	Create a directory .
10096	Initialize the logger .
10097	Raise a usage error .
10098	Claim a list of file_readers .
10099	Create a new column header based on MuTect metaheader .
10100	Claim VCFs in file_readers .
10101	Initialize population stats .
10102	Claim VCF file readers .
10103	Split data into lines
10104	Find the prefix of a line terminator .
10105	Return the suffix line terminator of data .
10106	Seek to the next line .
10107	Seek to the previous line .
10108	Return a list of lines from the file .
10109	Return the first n lines of the file .
10110	Follow lines from the file .
10111	Claim VCFs from file_readers .
10112	Parse a VCF record .
10113	Return a dictionary of sample tag values
10114	Return a set of tags for the VCF record .
10115	Join info fields .
10116	Format the field name .
10117	Return the sample field name .
10118	Return a string representation of the VCF .
10119	Add a sample tag value .
10120	Add or replace a filter .
10121	Return a list of available categories .
10122	Return a subclass of _ProductsForm .
10123	Create a form for staff products .
10124	Add a product error .
10125	Memoize a function .
10126	Create a model fields form factory .
10127	Return a list of items that are pending or purchased .
10128	Send an email .
10129	Iterates over Osm stream .
10130	Parse an OSM file .
10131	Iterate over OSM notes .
10132	Returns True if the given user passes the condition .
10133	Check if the given user meets the criteria .
10134	Return the quantity remaining for the given user .
10135	Filter the queryset before it is saved .
10136	Filter the queryset before it is saved .
10137	Filter out items that have been reserved beyond the limits .
10138	Filter out cancelled proposals
10139	Pre - filter conditions .
10140	Decorator to mark the cart as modified .
10141	Create a cart for the given user .
10142	Auto extend the reservation duration .
10143	Apply a voucher to the cart .
10144	Validate the cart .
10145	Fix vouchers and discounts
10146	Recalculate the discounts in the cart .
10147	Add a discount to the cart .
10148	Create a report view .
10149	Yields a list of rows .
10150	Create a form instance for the given request .
10151	Render the given data .
10152	List all reports .
10153	List items sold .
10154	Summarize all sales made .
10155	Returns a list of payments .
10156	List of credit note refunds .
10157	List product status .
10158	List usage by item .
10159	List product line items .
10160	Returns a list of invoices paid by the given date .
10161	View credit notes .
10162	List invoices .
10163	List attendees .
10164	Show the status of the speaker registrations .
10165	Return a list of all products in the cart .
10166	Returns a list of categories that are missing from the context .
10167	Return the number of credit notes available for this invoice .
10168	Check if the user has sold out and unregistered .
10169	Guided registration page .
10170	Edit a profile .
10171	Handle a profile request .
10172	List products in a category .
10173	Handles the products form .
10174	Handles a voucher .
10175	Checkout an invoice .
10176	Redirect to the invoice with the given access code .
10177	Show a single invoice .
10178	Create a manual payment form .
10179	Refund an invoice .
10180	Apply a credit note to an invoice .
10181	Amend registration form .
10182	Extend a user s reservation .
10183	Process an invoice mail .
10184	List badges .
10185	Render a badge .
10186	Returns a list of available discounts .
10187	Annotate queryset with past uses .
10188	Returns a list of available products .
10189	Apply payment to invoice .
10190	Calculate the cancellation fee for this credit note .
10191	Generate a random access code .
10192	Lazy evaluation of a function .
10193	Get an object by name .
10194	Create invoice for cart .
10195	Create a manual invoice .
10196	Generate the line items from the cart .
10197	Apply credit notes to invoice .
10198	Check if the user can view this invoice .
10199	Refresh invoice data .
10200	Validate that the invoice is allowed to pay .
10201	Update invoice status
10202	Mark invoice as paid .
10203	Check if invoice matches cart .
10204	Update invoice validity .
10205	Marks the invoice as void .
10206	Refund the invoice .
10207	Send email .
10208	Update the annotation .
10209	Flatten a single field .
10210	Print downloads
10211	Download the results of a processor .
10212	Get project data
10213	Returns a list of processor objects
10214	Print processor inputs .
10215	Post data to the API .
10216	Upload a file to a processor .
10217	Upload a file .
10218	Download a list of data objects .
10219	Return all subclasses of c .
10220	Get repo and project .
10221	Get variants with suggested changes .
10222	Get variant phenotypes with suggested changes merged .
10223	Search variants by coordinates .
10224	Bulk search variants by coordinates .
10225	Update this element .
10226	Remove duplicates from a sequence .
10227	Authenticate asana .
10228	Select a value from a list .
10229	Get saved issue data .
10230	Move saved issue data to another namespace .
10231	Get saved task data .
10232	Get a task by id .
10233	Save data to file .
10234	Set a flag .
10235	A decorator that wraps a function with retries .
10236	Flush the queue .
10237	Create a task .
10238	Format task numbers with links .
10239	Create a missing task .
10240	List of data types for this project .
10241	Log EKM Meter Debug Message
10242	Initialize the serial port .
10243	Set polling values .
10244	Combine V4 and V3 definitions .
10245	Render JSON reads since timestamp .
10246	Set the context string .
10247	Calculate the FPF from a polar angle .
10248	Set maximum demand period
10249	Set meter password .
10250	Unpack data into a struct
10251	Convert raw data from V3 to V4
10252	Render a SerialBlock to a JSON string
10253	Return True if the CRC is correct .
10254	Split an Ekm date into a namedtuple .
10255	Get the months buffer .
10256	Set legal CT ratio
10257	Assigns a schedule to the simulation .
10258	Assign a schedule to a season .
10259	Set season schedules
10260	Assigns a new holiday date .
10261	Read schedules .
10262	Given a schedule and a period extract a namedtuple representing the schedule and period .
10263	Read month tariffs .
10264	Extract a month tariff .
10265	Read Holiday Dates
10266	Extracts the date of a holiday .
10267	Read settings .
10268	Write a command message .
10269	Authenticates a password .
10270	Update all observers
10271	Initialize the LCD lookup
10272	Send a request .
10273	Make a request A packet .
10274	Make a request to the meter .
10275	Make A and B fields .
10276	Calculate the power - factor fields
10277	Set the LCD command .
10278	Set the relay duration .
10279	Send termination string .
10280	Set the input ratio of a pulse .
10281	Set zero resettable KWH .
10282	Set the LCD password .
10283	Iterate over fields in a schema .
10284	Iterate over a schema .
10285	Generate paragraphs .
10286	Generate random text .
10287	Return a summary of the results .
10288	Colorize text .
10289	Write text to the stream .
10290	Return a summary of a result .
10291	Parse command line arguments .
10292	Setup ivoire .
10293	Run tests .
10294	Transform the given config .
10295	Transform a describe node .
10296	Transform a describe body .
10297	Transform an example node .
10298	Transform an example body .
10299	Returns an astroid . Arguments node with a self argument .
10300	Register the file finder .
10301	Convert source bytes to code .
10302	Apply an argument parser to the command line .
10303	Load a module by name .
10304	Load a module from a path .
10305	Discover files in a directory .
10306	Return a function that checks the contents of a file .
10307	Return a function that checks a file for new messages .
10308	Add a command to the config file .
10309	Remove a config file .
10310	Restart a place .
10311	Call a function .
10312	Get a taservice .
10313	Create a procmon service
10314	Refresh the session .
10315	Remove expired nodes .
10316	Remove a node from the cluster .
10317	Get the last updated time of a node .
10318	Get all nodes
10319	Refresh the session .
10320	Increment the number of times that have been modified .
10321	Dereferences the resource .
10322	Return a list of values separated by delimiter .
10323	Check if a path is bad .
10324	Merges two Status objects .
10325	Check if a token exists .
10326	Create a new Query with the given value .
10327	Return a constant function .
10328	Splat a function .
10329	Unsplat a function .
10330	Run a process .
10331	Create a timer service .
10332	Completely parse a reader .
10333	Parse a literal .
10334	Create an optional parser .
10335	Repetition parser .
10336	Create a repetition parser .
10337	Repetition 1 separator parser .
10338	Create a repetition parser .
10339	Check the state of a location .
10340	Close the call .
10341	Check if the state is valid .
10342	Add a heart service .
10343	Wrap a service in a multi service .
10344	Freeze graph from checkpoint .
10345	Freeze the model .
10346	Save graph only .
10347	Save graph only from checkpoint .
10348	Save weights from checkpoint .
10349	Restore from checkpoint .
10350	Parse a tag .
10351	Render the tag .
10352	Validate tag arguments .
10353	Get the context data .
10354	Parse a template tag .
10355	Get the context data for this tag .
10356	Convert caffe model to TensorFlow session .
10357	Freeze a Caffe model .
10358	Save graph only .
10359	Make a list of rows from seq .
10360	grouper_nofill_str
10361	Yields every other item in iterable .
10362	Remove duplicates from an iterable .
10363	Peek at the next element in an iterable .
10364	Yields the next item that satisfies the predicate .
10365	Partition a number of items into bins .
10366	Convert an item to an iterable .
10367	Catch all exceptions and suppress them .
10368	Return a list of unique elements in a sequence .
10369	Assert that iterable is ordered .
10370	Swap before and after items in partition_result .
10371	Partition a dictionary by key .
10372	Get the first n queues .
10373	Reset the iterator .
10374	Parse as variable .
10375	Tag a template .
10376	Return the descendant public keychain .
10377	Fetch sqlite master record list .
10378	Iterate over an object .
10379	Parse a selector and return the result .
10380	Parse a selector .
10381	Parse a selector production .
10382	Return the parents of lhs and rhs .
10383	Return the ancestors of lhs and rhs .
10384	Return the siblings of lhs and rhs .
10385	Parse nth - child production .
10386	Return a list of nodes matching validators .
10387	Send ICMP ping to dst .
10388	Make a request to the API .
10389	Expire the cache .
10390	Set a key value pair .
10391	Get the value of a key .
10392	Return True if k is in the store .
10393	Check if a beacon chain is valid .
10394	Create a NistBeaconValue object from a JSON string .
10395	Load a NistBeaconValue from XML .
10396	Return the rendered content of the response .
10397	Get the contents of the logfile .
10398	Get a list of rows .
10399	Validate token .
10400	Return a cryptography engine .
10401	Validate a token .
10402	Create a new token .
10403	Return a counter between a and b .
10404	Return a counter between a and b .
10405	Calculate the average duration in seconds .
10406	Add the outputs to the routing hash
10407	Setup sources
10408	Send a list of events .
10409	Restarts the source watchdog .
10410	Parse a format string .
10411	Parse a log line .
10412	Validate the expires_at field .
10413	Validate the message .
10414	Verify the token .
10415	The name of the device .
10416	Warn if node is not local .
10417	Connect receivers .
10418	Create a secret link .
10419	Send an accept notification email .
10420	Send confirmation notifications .
10421	Send email validation notification .
10422	Send a rejected email .
10423	Send email notification .
10424	Create a new secret link .
10425	Validate a token .
10426	Revokes the link .
10427	Create a new request .
10428	Get a message by receiver .
10429	Confirm email .
10430	Accepts the request .
10431	Reject this request .
10432	Create a secret link .
10433	Generate a SHA512 hash for the given parameters .
10434	Verify a signature .
10435	Check if a record is embargoed .
10436	Access request handler .
10437	Confirm email address .
10438	Return an instance of SSHCommandClientEndpoint .
10439	Reverse a column
10440	The currently selected item .
10441	Return a list of items in the query .
10442	Get the version from the file .
10443	Set the version of the file .
10444	Initialize SSH configuration .
10445	Start timer .
10446	Get the next event from the queue .
10447	List secret links .
10448	Create a new Riemann client .
10449	Stop the connection .
10450	Empty the queue .
10451	Add events to the queue .
10452	Create a new client .
10453	Create Elasticsearch client
10454	Encode an Event protobuf .
10455	Encodes a list of events into a protobuf message .
10456	Decodes a protobuf message .
10457	Send a list of events .
10458	Generate file previews .
10459	Retrieve a preview .
10460	Send a dict to RabbitMQ
10461	Main message loop .
10462	Return True if we have enough time to log this event .
10463	Respond to a challenge .
10464	Abort the SASL authentication .
10465	Perform SASL mapping .
10466	Parse an admin footer tag .
10467	Build payment parameters .
10468	Builds the payment parameters for a register credit card .
10469	Pay with an alias .
10470	Get the version string .
10471	Constructs the widget .
10472	Post - construction hook .
10473	Configure shortcuts .
10474	Activates the item at the given index .
10475	Select an item .
10476	Navigates to the given index .
10477	Finalizes the options .
10478	Run pyside - rcc .
10479	Clean the resource directory .
10480	Fetches all children .
10481	Re - fetch children
10482	Returns the icon for the item at the given index .
10483	Call a command .
10484	Get the maximum file descriptor .
10485	Close a file descriptor .
10486	Close all open fds .
10487	Redirect stream to target .
10488	Set the widget s attributes .
10489	Import app module .
10490	Import project modules .
10491	Include a template .
10492	Get a gravatar url for an object .
10493	Get a gravatar image .
10494	Check if path is a valid filesystem location .
10495	Check if url is a valid s3 location .
10496	Get the absolute path to a template file .
10497	List objects in S3 .
10498	Build a JSON representation of the workflow .
10499	Execute the request .
10500	Archive a folder .
10501	Create a directory .
10502	List all files matching a pattern
10503	Restore a project to a folder
10504	Create a new API client .
10505	List files in a folder .
10506	Download a file .
10507	Check if a storage path exists .
10508	Get the parent entity for a given path .
10509	Create a folder .
10510	Uploads a file .
10511	Delete a file or folder .
10512	Validate the storage path .
10513	Create a new client .
10514	Create a new storage instance .
10515	Get details about an entity .
10516	Set metadata for an entity .
10517	Get metadata for an entity .
10518	Updates metadata for an entity .
10519	Delete metadata for an entity .
10520	List projects .
10521	Get details about a project .
10522	Create a project .
10523	Delete a project .
10524	Create a folder .
10525	Get details about a folder .
10526	Delete a folder .
10527	Uploads a file content .
10528	Copy content of a file .
10529	Download file content .
10530	Get the signed URL for a file .
10531	Emit a record .
10532	Returns a copy of this object with the specified service and version .
10533	Return an instance with the specified HTTP Headers .
10534	Return an instance with the specified parameters .
10535	Add an exception to the throws list .
10536	Returns a list of field names to display .
10537	Create a map job .
10538	Run GATK Genotype GVCFs .
10539	Run Oncotator .
10540	Sort the list by a function .
10541	Returns a list of datetime . datetime objects .
10542	Load data .
10543	Shift the time series by t
10544	Return the sum of the raw data
10545	Run the RFXCOM command .
10546	Create a new user .
10547	Parse VN results .
10548	Parse release results .
10549	Parse a list of products s staff results .
10550	Parse character results .
10551	Parse tag results .
10552	Parse user results .
10553	Write a list of files to a tar file .
10554	Iterate over a list of files and call an operation on them .
10555	Copy a file .
10556	Make spark parameters .
10557	Returns a list of docker parameters .
10558	Refresh the metadata from the database .
10559	Run MuTect .
10560	Create a file .
10561	Return a list of streams in this directory .
10562	Export the device to a directory .
10563	Search VNDB .
10564	Parse search results .
10565	Add a stream to the dataset .
10566	Reset the API key .
10567	List all users
10568	Run BWA index .
10569	Connect to the server
10570	Add a stream to the database .
10571	Add a stream to the database .
10572	Insert a datapoint into the cache .
10573	Sync the database .
10574	Start syncing .
10575	Stop syncing .
10576	Download a file from a URL .
10577	Upload a file to S3
10578	List all labels in ontology .
10579	Print a tree of ontologies .
10580	Get mean insert size
10581	Get the current Docker container ID .
10582	Run star indexing .
10583	Create a new document .
10584	Export the stream to a directory .
10585	Return a Device object for this path .
10586	Get the labels of an ontology .
10587	Get the hierarchy of an ontology .
10588	Run wrapper .
10589	Populates an argument parser from config data .
10590	Get the empty config file .
10591	Get the path to the mounted volume
10592	Add an option to the argument parser .
10593	Create an argument parser .
10594	Create pipeline command .
10595	Set the authentication credentials .
10596	Handle a server response .
10597	Ping the server .
10598	Create a new resource .
10599	Update a resource .
10600	Delete a resource .
10601	Subscribe to a stream .
10602	Create a user .
10603	Return a list of devices
10604	Run cutadapt .
10605	Run samtools faidx
10606	Run samtools index
10607	Run sambamba markdup .
10608	Run samblaster .
10609	Mark duplicates in bam bai
10610	Run picard sort
10611	Run BaseRecalibrator .
10612	Run Kallisto
10613	Run rsem on a bam file .
10614	Get user affinity
10615	Send a command to the server .
10616	Subscribe to a stream .
10617	Connect to the websocket .
10618	Reconnect to the server .
10619	Resubscribes to all subscriptions
10620	Called when a websocket connection is established .
10621	Called when a websocket is closed
10622	Called when an error occurs
10623	Process a websocket message .
10624	Check if we have a ping
10625	Run GATK SelectVariants
10626	Run GATK variant filtration .
10627	Run GATK variant recalibration .
10628	Apply variant recalibration .
10629	GATK combine variants
10630	Quick check a bam file
10631	Load handlers from a dictionary .
10632	Write configuration to file .
10633	Get the current configuration .
10634	Get an ontology term
10635	Search ontology by name .
10636	Suggest an ontology .
10637	Iterate over the descendants of an ontology .
10638	Iterate over the descendants of an ontology .
10639	Iterate over the labels in the ontology .
10640	Iterate over terms in a hierarchy .
10641	Run fastqc .
10642	Add a stream to the query .
10643	Create a Flask application .
10644	Start Spark master container .
10645	Start the worker .
10646	Start the datanode
10647	Stop the Spark worker .
10648	Check the status of the container .
10649	Base tokenizer .
10650	Lookup a zone by name .
10651	Fetch configuration for a zone .
10652	Merge a list of ResourceRecordSets into one .
10653	Validate a changeset .
10654	Return a list of members with the best fitness score .
10655	Returns the fitness score of the group .
10656	Return the average cost function value for each member .
10657	Return the median cost function value for each member .
10658	Returns a dictionary of parameters .
10659	Returns a list of all members in the group .
10660	Add a parameter .
10661	Generate a new population .
10662	Normalize a list of keys .
10663	Get environment variables .
10664	Wraps a callable with an exception trap .
10665	Transform a list of hits into a list of packages
10666	Transform a result into a string .
10667	Convert an HTML element to XHTML .
10668	Convert xhtml to HTML .
10669	Convert a document to HTML .
10670	Open in browser .
10671	Drop this node from the tree .
10672	Drop this tag .
10673	Get element by id .
10674	Return a cssselect expression .
10675	Return a namedtuple containing all log handler members .
10676	Get counts from environment variables .
10677	Returns True if there is only one class or module .
10678	Check if a module is a single module
10679	Check that the params are correct
10680	Check that the id is correct .
10681	Decode a file path .
10682	Escape a list of arguments .
10683	Return the codec name for the given encoding .
10684	Detects the encoding of the file .
10685	Get the remote address of the proxy .
10686	Convert an amount to a decimal .
10687	Parse data from a string .
10688	Parse a file .
10689	Convert a BeautifulSoup tree to HTML .
10690	Get the current traceback .
10691	Format the exception as a string .
10692	Render a summary .
10693	Generate a plaintext traceback .
10694	Return a list of AnnotatedLines
10695	Render the source table .
10696	Determine if the egg_info matches the search_name .
10697	Get the index URLs for a project .
10698	Find all versions of a project .
10699	Find an installed requirement .
10700	Sort a list of links .
10701	Get the content type of a URL .
10702	Return a generator of Link objects .
10703	Determine if this link is verifiable .
10704	Find data files for a package .
10705	Return a list of files that don t match any of the exclude patterns .
10706	Parse a requirements file .
10707	Join a sequence of lines .
10708	Ignore comments in a file .
10709	Compile a marker .
10710	Visit an AST node .
10711	visit a Attribute node by returning a fresh instance of it
10712	Coerce a string to a number .
10713	Copy the current request context .
10714	Push this context onto the stack .
10715	Pop an app context off the stack .
10716	Return a copy of this request .
10717	Match the request with the URL adapter .
10718	Push the current request context onto the stack .
10719	Make path relative .
10720	Check if a distribution is editable .
10721	Add a url - value preprocessor .
10722	Register a function as a default URL function .
10723	Register an error handler .
10724	Stream a generator or function .
10725	Make a response .
10726	Generate a URL for a given endpoint .
10727	Safely join a file .
10728	Get the root path of a module .
10729	Returns a FileSystemLoader for the template folder .
10730	Run completion script .
10731	Get the cookie domain .
10732	Generate a cache key for a link .
10733	Determine if a wheel is purelib .
10734	Yields a list of paths to uninstallation files .
10735	Check that a wheel is compatible with this version of pip .
10736	Build a wheel and return its path .
10737	Iterate over all symbols in code .
10738	Decorate a function to ensure fresh rates are available .
10739	Add egg - info files to self . filelist .
10740	Write the delete marker file .
10741	Return True if running under virtualenv .
10742	Get the user name
10743	Create a distutils scheme .
10744	Parse cache - control headers .
10745	Check if we have a cached request .
10746	Cache the response .
10747	Update zipimporter cache .
10748	Load template file .
10749	Install site . py .
10750	Save paths to file .
10751	Convert a value to a string .
10752	Add filters to the filter manager .
10753	Configure handler .
10754	Add handlers to a logger .
10755	Common logger configuration .
10756	Execute a Python script file .
10757	Temporarily override the temporary directory .
10758	Get the URL and revision of the Git repository .
10759	Get an item from an object .
10760	Generate a source file .
10761	Compile Jinja2 templates .
10762	Get the default cache directory .
10763	Find all eggs in a zip file .
10764	Find distributions on a path .
10765	Declare a package as a namespace .
10766	Return the mro of cls .
10767	Find an adapter in the registry .
10768	Ensure directory exists .
10769	Iterate over all entry points in this distribution .
10770	Return True if the given distribution can be added to this package .
10771	Find the best match for req .
10772	Evaluate a marker .
10773	Evaluate a markerlib text .
10774	Format a log record .
10775	Format a number as a currency .
10776	Parse a number pattern .
10777	Return a decimal quantum for the given precision .
10778	Get the decimal precision of a number .
10779	Compute scientific notation elements .
10780	Return the total number of seconds since the epoch .
10781	Parse a list of requirements .
10782	Return the patched class .
10783	Check that a requirement string is valid .
10784	Fetch the build egg .
10785	Roll dice .
10786	Convert an object to a Price class .
10787	Price validator .
10788	Validate the request .
10789	Get a method by id .
10790	Apply a method to the server
10791	The blueprint module .
10792	Get the blueprint name .
10793	Attach a class to the request .
10794	Make an abstract distribution .
10795	Add a requirement .
10796	Walk through requirements and call handler for each requirement .
10797	Check if we should skip installing this req .
10798	Return a list of requirements to install .
10799	Return a list of all namespace packages .
10800	Serialize an object to JSON .
10801	Tokenize a document with an annotation .
10802	Merge annotations between two sequences .
10803	Copy annotations from src to dest .
10804	Compress a list of tokens .
10805	Serialize a sequence of tokens into HTML .
10806	Given a list of tokens expand them into HTML .
10807	Locate an unbalanced end .
10808	Take a list of chunks and fixup them .
10809	Flatten an element .
10810	Split text into words .
10811	Create a start tag .
10812	End a tag .
10813	Serialize an HTML fragment .
10814	Fixes the insertion and deletion of ins and del tags .
10815	Extract a constant from code .
10816	Return the cache URL for this service .
10817	Autolink an element .
10818	Kill conditional comments .
10819	Create a document from a string .
10820	Decorator that ensures that the API returns JSON .
10821	Return a TreeWalker for the given tree type .
10822	Export svn repository to location
10823	Get the revision number for a given location
10824	Decorate a function to be used as a setup method .
10825	The name of the module .
10826	Whether to propagate exceptions .
10827	Find the path to the instance variable .
10828	Update the template context .
10829	Handle HTTP exceptions .
10830	Trap HTTP exceptions .
10831	Handle an exception .
10832	Raise a routing exception .
10833	Perform a full dispatch request .
10834	Make a default OPTIONS response .
10835	Create the URL adapter .
10836	Injects default values for a given endpoint .
10837	Yield unique values from iterable .
10838	Handle package requirements .
10839	Convert a Requirement to a requirement string .
10840	Convert a pkginfo file to metadata .
10841	Import all modules in this directory .
10842	Iterate over all classes in this module .
10843	Return a list of all method names in this class .
10844	Find the basename of a file .
10845	Check if path is a module path .
10846	Walks the directory tree starting from basedir .
10847	Return a list of absolute paths to modules .
10848	Set default arguments for JSONEncoder .
10849	Load default arguments .
10850	Set multiple keys .
10851	Increment the value of a key .
10852	Serialize a Python object to a string .
10853	Build a dictionary of editable options
10854	Find the link for this requirement .
10855	Ensure that the source directory exists .
10856	Remove temporary source .
10857	Get the distribution of this package .
10858	Get data from the stream .
10859	Get WSGI headers .
10860	Convert an IRI to a URI .
10861	Get the user cache directory .
10862	Get the user data directory .
10863	Get the path to the user s log directory .
10864	Get the user config directory .
10865	Return a list of site config directories for appname .
10866	Iterate over all module files .
10867	Restart with reloader .
10868	Convert a string to text .
10869	Find the CA bundle to use .
10870	Parse an HTML document .
10871	Parse a document from a stream .
10872	Parse a document fragment .
10873	Return a sorted list of all non - zero transmissions
10874	Convert args to tokens
10875	Binds to the server .
10876	Print the report .
10877	Load bytecode from file .
10878	Given a dictionary of parameters and a dictionary of keyword arguments merge them into a new dictionary .
10879	Run a command .
10880	Get the implementation version .
10881	Return a list of distributions for a given location .
10882	Find external links .
10883	Open a local file .
10884	Process a URL .
10885	Return a list of paths that have been removed from sys . path .
10886	Return a set of directories in sys . path .
10887	Add a package .
10888	Add a directory to sys . path .
10889	Check if user site is enabled
10890	Add user - site packages .
10891	Set quit handler .
10892	Alias mbcs .
10893	Set the default encoding .
10894	Force global eggs after local site packages .
10895	Fix sys . path .
10896	Wrapper around subprocess . Popen .
10897	Check if pyrex is installed .
10898	Convert Cython source files to Python source files .
10899	Debug application .
10900	Get a resource .
10901	Return the user agent string .
10902	Check if name is a valid URL .
10903	Unpack a link into a local directory .
10904	Download a file from an HTTP URL .
10905	Check if a file is already downloaded .
10906	Register a currency action .
10907	Register an exchange .
10908	Decode data .
10909	Default template context processor .
10910	Render a template .
10911	Render a template .
10912	Render a template string .
10913	Parse a version string .
10914	Check if a variable is declared .
10915	visit a Name node by returning a fresh instance of it
10916	visit a Include node by returning a fresh instance of it
10917	visit a FromImport node by returning a fresh instance of it
10918	Create a wheelfile from a directory .
10919	Execute a function atomically .
10920	Create a service factory .
10921	URL encode a string .
10922	Return a list of wheels that match a requirement .
10923	Populate a requirement set from a list of requirements .
10924	Export Bazaar to location .
10925	Lookup an ASIN .
10926	Iterate over all pages .
10927	The ancestor of this node .
10928	A list of AmazonBrowseNode objects .
10929	Safely get element by path .
10930	Get the text of an element .
10931	Get the date of the element .
10932	Price and Currency .
10933	List price .
10934	Send the request and return the response .
10935	Build the response .
10936	Create an attribute getter for an environment variable .
10937	Return a title from a string .
10938	Sorts a list .
10939	Group values by attribute .
10940	Perform a map operation .
10941	Create a new logger .
10942	Return True if val1 == val2 .
10943	Verify signature .
10944	Derive a key from the secret key .
10945	Generate a signature for the given value .
10946	Signs the given value .
10947	Verify signature .
10948	Unsign a signed value .
10949	Signs the given value .
10950	Validate a signed value .
10951	Serialize an object to a string .
10952	Server error .
10953	Find all packages matching where .
10954	Given a list of package names return a generator that yields package names that require parents .
10955	Yield all directories in base_path .
10956	Prepare the response for the request .
10957	Unsign a wheelfile .
10958	Unpack a wheel file .
10959	Install wheel scripts .
10960	Rearrange the graph .
10961	Redraw the canvas .
10962	Get a node by ID .
10963	Change the directed connection between all graphs .
10964	Add edges to the graph .
10965	Called when a component has changed .
10966	Handle a left click event .
10967	Called when the diagram canvas has changed .
10968	Clear the diagram canvas .
10969	Called when a domain model has changed .
10970	Map the domain model .
10971	Unmaps the elements of a model .
10972	Map an element to a diagram node .
10973	Set node attributes .
10974	Parse xdot data .
10975	Process font .
10976	Process an ellipse .
10977	Process a polygon .
10978	Process a polyline .
10979	Process text .
10980	Process an image .
10981	Render a GridFS file .
10982	Save an object to a dot file .
10983	Load a dot file .
10984	Check if a point is in the image .
10985	Draw the bounds .
10986	Open the new dot graph wizard .
10987	Connect to the database .
10988	Parse dot code .
10989	Create a new graph
10990	Open file dialog .
10991	Save the model to a file .
10992	Save the model to a file .
10993	Configure the graph .
10994	Configure nodes .
10995	Configure edges .
10996	Godot dialog .
10997	Add a node to the graph .
10998	Add an edge to the graph .
10999	Add a subgraph .
11000	Add a cluster .
11001	Request a graph .
11002	Show options dialog .
11003	Configure dot code
11004	Prompts the user to exit .
11005	Move components to the origin .
11006	Save to a file like object .
11007	Load data from a file like object .
11008	Save to file .
11009	Load object from file .
11010	Create an Alias property .
11011	Parse a text file .
11012	Return a list of start words .
11013	Add a chain .
11014	Remove a chain .
11015	Build a chain .
11016	Generate a random sentence .
11017	Create a graph .
11018	Add a node to the tree .
11019	Delete a node
11020	Get a node by ID
11021	Delete an edge between two nodes .
11022	Add an edge to the graph .
11023	Add a subgraph to the graph .
11024	Called when a program has changed .
11025	Set the node lists of all edges .
11026	Parse a dot file .
11027	Parse a dot file .
11028	Build the top graph .
11029	Build a graph from a list of tokens .
11030	Returns a tuple of time units and multiplier .
11031	Format a duration in seconds .
11032	Load new path .
11033	Create the graph editor .
11034	Split a sequence into n elements .
11035	Split an iterable into multiple windows .
11036	Main entry point .
11037	Get the children of an object .
11038	Append a child to an object .
11039	Insert a child into an object .
11040	Delete a child from an object .
11041	Called when a node has been replaced .
11042	Called when the children of an object are changed .
11043	Get the label for an object .
11044	Set the label of an object .
11045	Called when the label has changed .
11046	Initialize the widget .
11047	Update the editor .
11048	Add listeners .
11049	Called when a node has been replaced .
11050	Called when a node has changed .
11051	Add nodes to the graph .
11052	Called when an edge has been replaced .
11053	Called when an edge has changed .
11054	Add edges to the graph .
11055	Parse Xdot directive .
11056	Handle drawing events .
11057	Create a node from a row .
11058	Create an edge from a graph .
11059	Prepare the database connection .
11060	Parse a drawing directive .
11061	Parse xdot directive .
11062	Called when a drawing has changed .
11063	Called when component position changes
11064	Called when component position changes
11065	Handle a right down event .
11066	Show information about a particular style .
11067	Draw the main layer .
11068	Check if a point is inside the polygon .
11069	Draw the main layer .
11070	Handle an event .
11071	Run the queue .
11072	Returns the full URL for the given page number .
11073	Render the previous and next links .
11074	Render the seo links .
11075	Return True if candidate matches pattern .
11076	Sorts a list of content types based on their specificity .
11077	Rewrite a URL .
11078	Remove username and password from URL .
11079	Create a URL identifier .
11080	Normalize host .
11081	Discover modules in directory .
11082	Discover modules in a directory .
11083	Return a list of module names found in the given module name .
11084	List all classes in a module .
11085	List all classes in a module .
11086	Ensure directory exists .
11087	Create a blob from a string .
11088	Luhn Check
11089	Get the git version
11090	Load a module .
11091	Add a path .
11092	Find a module .
11093	Split a line into multiple lines .
11094	Remove namespaces from the root element .
11095	Check the version of the package .
11096	Create a new instance from a YAML file .
11097	Merge a dictionary of actions into this one .
11098	Execute all actions in the environment .
11099	Create an instance from a YAML file .
11100	Add details to a message
11101	Send an email .
11102	Add image_rendition to context
11103	Log account attempts .
11104	Add URL to queue .
11105	Start the workers .
11106	Set a key value pair .
11107	Get a key .
11108	Get the value of a key .
11109	Get the index for a key .
11110	Delete a key .
11111	Plot heatmap .
11112	Add a number of months to the current date .
11113	Add months to a date .
11114	Return True if this is a Christmas period .
11115	Use a music service .
11116	Use a storage service .
11117	Load data from a CSV file .
11118	Return a list of lists from a JSON file .
11119	Write data to JSON file .
11120	Filter by reference label .
11121	Average by label .
11122	Feature importance report .
11123	Restore data from session .
11124	Merge two dictionaries recursively .
11125	Decorator for dispatching multiple functions .
11126	Decorate a function as a method .
11127	Find all registered blocks .
11128	Verify that the given block is valid .
11129	Register a block .
11130	Unregister a block .
11131	Convert a file to MP3 .
11132	Return a string describing a reasonable version .
11133	Handle SSL redirect .
11134	Initialize celery .
11135	Queue an email .
11136	Parse Accept header value .
11137	Parse cache control directives .
11138	Parse a content type .
11139	Parse a forwarded header value .
11140	Parse a comma separated list .
11141	Parse parameter list .
11142	Resize an image to fit the given width .
11143	Add a value to this link .
11144	Download a file .
11145	Connect to Google Drive .
11146	Upload a file .
11147	Connects to the music folder .
11148	Write sky parameters to file
11149	Update filenames
11150	Read AHPI from file
11151	Scale a_phi by a_parameter
11152	Read pure water absorption from file
11153	Read pure water scattering from file
11154	Read iop from file
11155	Write iop to file
11156	Build b
11157	Build total absorption
11158	Build total attenuation C
11159	Build all b and c from IOPs
11160	Set the batch parameters
11161	Reads a parameter file and converts it to a dictionary .
11162	Convert a string to a list of floats .
11163	Read a PR report file .
11164	Set signal handler .
11165	Handle a signal .
11166	Default signal handler
11167	Pause the process .
11168	Abort the process .
11169	Call status callbacks .
11170	Unregisters an event from a list of signals .
11171	Fetch metric data .
11172	Return a sorted list of metrics .
11173	Return a list of elements from iterable .
11174	Print an item to stdout .
11175	Pretty print a sequence of items .
11176	Parse the signature of a function .
11177	Create a signature from a partial instance .
11178	Make a copy of self . argv .
11179	Return True if filename should be ignored .
11180	Determine the key for a file .
11181	Convert a VLQ encoded string to an integer .
11182	Read a table .
11183	Parse user data header .
11184	Get the duration in seconds .
11185	Print details about the game .
11186	Get the data from the UI .
11187	Search file result
11188	Write batch to file .
11189	Data processing .
11190	Display the graphic connection .
11191	Print graphic information .
11192	Display error message .
11193	Hide error message .
11194	Run planarrad
11195	This function needs to be tested . We don t know if she works .
11196	Quit PlanarRad .
11197	Save the figure in the planarradpy folder .
11198	Opens the log file .
11199	To DO .
11200	Prerequisite actions
11201	Click event handler
11202	Mouse move event handler
11203	Display the graphic target .
11204	Create a lockset for signing a genesis block .
11205	Sign the message .
11206	Hash the message .
11207	Check if the cluster is valid .
11208	Issue a new cash entry .
11209	Get the lock for the last round .
11210	Return the last vote proposal for this block .
11211	Get the last valid lockset .
11212	Get the amount of time to wait before timing out .
11213	Called when a proposal is received .
11214	Generate a list of private keys .
11215	Delay a packet .
11216	Deliver a packet to a sender
11217	Create a NAC proxy .
11218	Return the native contract class for the given address .
11219	Register a native contract .
11220	Update the filter .
11221	Receives a list of transactions
11222	Convert vgg to RGB
11223	Convert image to VGG
11224	Get the F layer .
11225	Get layer output .
11226	Get the features of x .
11227	Create a new key file .
11228	Finishes the job .
11229	Load a table from a file .
11230	Put items into the batch .
11231	Release this bulk load .
11232	A list of table names .
11233	Fix distutils . ccompiler . CCompiler . compile .
11234	Find the Teradata home directory .
11235	Get a configuration value .
11236	Set a configuration value .
11237	Table command .
11238	Execute a command .
11239	Get a value from the settings .
11240	Write default configuration to a file .
11241	Set the names of columns to be filtered .
11242	Write a TeradataEncoder to writer .
11243	Return the settings as a string .
11244	Convert a string to a float .
11245	Return a dictionary of gains from a string .
11246	Parse a device settings string into a dictionary .
11247	Wrap text with indent .
11248	Detect Soapy devices .
11249	Set the center frequency .
11250	Calculate PSD result .
11251	Wait for a result .
11252	Update the PSD .
11253	Read data from file .
11254	Write data to file .
11255	Submits a function to the queue .
11256	Return the number of repeats for a given number of bins .
11257	Calculate the frequency plan .
11258	Create a buffer .
11259	Setup the stream .
11260	Stop the stream .
11261	Tune to new frequency
11262	Perform a frequency sweep .
11263	Set the slave address .
11264	Run CMake .
11265	Filter datetimes based on a given number .
11266	Return a new datetime with hour minute second and microsecond removed .
11267	Mask a date to a specific weekday .
11268	Return a list of datetimes that should be kept .
11269	Convert a list of datetimes to a list of datetime objects .
11270	Return a set of dates to keep .
11271	Return a list of dates to delete .
11272	Get the SPI control byte .
11273	Read a single bit .
11274	Write a single bit .
11275	Get the bit number of a given bit pattern .
11276	Watch a port for interrupts .
11277	Handle events .
11278	Bring gpio interrupt into userspace .
11279	Set the interrupt edge .
11280	Wait until a file exists .
11281	Register a pin function map .
11282	Deregister a pin function .
11283	Enable interrupts .
11284	Send bytes to the SPI device .
11285	Render the accordion group .
11286	Check if the form has any errors .
11287	Render a link to the form .
11288	Extract package version from setup . cfg .
11289	Add the pack field to the form .
11290	Check the status of the response .
11291	Perform a GET request .
11292	Download a file .
11293	Upload a link to a folder .
11294	Upload a file .
11295	Upload a remote file .
11296	Get the status of a remote upload .
11297	List a folder .
11298	List running conversions .
11299	Calculate the humidity
11300	Calculate the dewpoint of a temperature .
11301	Publish the message .
11302	Get VPro CRC from binary data .
11303	Verify checksum .
11304	Unpack a storm date .
11305	Detect archive rev .
11306	Wakeup device .
11307	Send a command to the weather station .
11308	Send DMPAFT command .
11309	Get the newest archive fields
11310	Parse the loop fields .
11311	Update weather data .
11312	Initialize logging .
11313	Return a list of pub services
11314	Get wind gust
11315	Set parameters for PWS .
11316	Set arguments .
11317	Publish the values to the file .
11318	Decorate a function to accept a request .
11319	Initialize the application .
11320	Return True if all of the given requirements are satisfied .
11321	Push override onto the stack .
11322	Pop an override context from the stack .
11323	Add an override to the stack .
11324	Push additional context onto the stack .
11325	Pop an additional context from the stack .
11326	Add additional items to the stack .
11327	Remove duplicated field names .
11328	Interpret the results of a query .
11329	Extract params from query .
11330	Run a query .
11331	Return a pandas . DataFrame containing the data .
11332	Returns a NetworkX graph .
11333	Plot a pie chart .
11334	Plot the data .
11335	Plot a bar chart .
11336	Write results to a CSV file .
11337	Check if the user has the permission .
11338	Return the context data for this widget .
11339	Return a sorted list of widgets sorted by position .
11340	Returns a list of widgets that need to be updated .
11341	Register a widget .
11342	Unregister a widget .
11343	Get widget last update .
11344	Get widget setting .
11345	Save a setting .
11346	Check if we should update .
11347	Convert an array to a numpy array .
11348	Return an array of shape shape .
11349	Concatenate two arrays .
11350	Check if any of the arguments is a SparkContext
11351	Format axes .
11352	Create a BoltArraySpark .
11353	Aligns the array with the given axes .
11354	Convert to a Spark DataFrame .
11355	Return a tordd array .
11356	Stack the elements of this RDD into a new RDD .
11357	Apply a function to each element of the RDD .
11358	Chunk the RDD .
11359	Apply a function to each element of this RDD .
11360	Apply a function to each element of this RDD .
11361	Get the plan for this tensor .
11362	Remove padding from value .
11363	Get the number of chunks in a plan .
11364	Get slices from plan .
11365	Get a mask for a given set of indices .
11366	Repartition the RDD .
11367	Stack this RDD into a new RDD .
11368	Align the values along the specified axis .
11369	Return the first element of this RDD .
11370	Return the statistics of this RDD .
11371	Return the mean along an axis .
11372	Return the variance of the array .
11373	Return the standard deviation of the Series .
11374	Sum along axis .
11375	Return the maximum along an axis .
11376	Return the minimum along an axis .
11377	Chunk the RDD .
11378	Swap kaxes and vaxes .
11379	Transpose the array .
11380	Swap two axes .
11381	Reshape this array to the given shape .
11382	Reshapes the keys and values according to the given shape .
11383	Squeeze the array along the specified axis .
11384	Return a new RDD with this RDD s astype dtype .
11385	Clip the elements of this RDD .
11386	Convert this RDD to a numpy array .
11387	Convert an argument to a tuple .
11388	Convert an iterable into a tuple .
11389	Raise ValueError if shape is not in axes .
11390	Return True if a and b are all close .
11391	Listify a list of integers .
11392	Slicify a slice .
11393	Check that new and old axes are consistent .
11394	Check that new and old are reshapeable .
11395	Concatenate a sequence of arrays .
11396	Return a flattened version of arry .
11397	Zip rdd with index .
11398	Wrap a function so that it can be used as a decorator .
11399	Looks up a constructor .
11400	Reshape this RDD to the given shape .
11401	Transpose the RDD .
11402	Reshape this RDD .
11403	Transpose the RDD .
11404	Return a new array with the given shape and dtype .
11405	Return an array of zeros of the specified shape .
11406	Concatenate multiple arrays .
11407	Compute the discrete likelihood of the data .
11408	Returns the most likely alpha value for the given data .
11409	Returns the logarithm of the logarithm of the alpha value of the given data .
11410	Find the best alpha value for the given data .
11411	Compute the best alpha value for each sample .
11412	Plot a PPF .
11413	Calculate the lognormal distribution
11414	Sanitize turbo tags .
11415	Configure Yandex Analytics .
11416	Given a list of tags return a list of tuples
11417	Return the MD5 hash of the key .
11418	Return the SHA256 hash of the key .
11419	Return the SHA512 hash of the key .
11420	Parse a long from a byte string .
11421	Decode a base64 encoded public key
11422	Parses and validates options .
11423	Process an SSH public key .
11424	Parse DSA key .
11425	Process an ECDSA SHA1 hash .
11426	Process ed25519 keys .
11427	Parse public key data .
11428	Step the authentication process .
11429	Step the authentication process .
11430	List of available mechanisms .
11431	Store a credential .
11432	Main function .
11433	Initialize setuptools .
11434	Create an audio file .
11435	H5bp CSS .
11436	Return a normalized version of DJFRONTEND_NORMALIZE .
11437	Return a fontawesome stylesheet .
11438	Generate a modernizr script tag .
11439	Return a jQuery script tag .
11440	Return jQuery UI script tag .
11441	Include jQuery DataTables .
11442	Return a jQuery - DataTables stylesheet .
11443	Include jquery . dataTables_themeroller stylesheet .
11444	Return jQuery formset .
11445	Return jQuery Scroll To
11446	Make jQuery smooth scroll .
11447	Template tag for twbs css
11448	Returns a JavaScript script tag that can be used to launch Google Analytics .
11449	Render a textarea .
11450	Generate a list of hashes for authentication .
11451	Calculate the expiry time for a given number of minutes .
11452	Get a user s token .
11453	Serialize a User object .
11454	Deserialize a profile .
11455	Update a user .
11456	Auth failed .
11457	Validate a user .
11458	Check if the request is secure .
11459	Get a user s username
11460	Create a new user .
11461	Logs in a user
11462	Logs the user out .
11463	Login to the API .
11464	Login with password .
11465	Login with a resume token .
11466	Change password .
11467	Forgot password .
11468	Reset password .
11469	Merge two dicts recursively
11470	Read a file .
11471	Get the AleaIdField for an object .
11472	Given a list of object_ids return a mapping of object_pk to object_id .
11473	Return the object id associated with the given meteor id .
11474	Given a model and a list of meteor ids return a list of object ids .
11475	Get an object by id .
11476	Set default forwards .
11477	Set the default reverse for this operation .
11478	Truncate a list of models .
11479	Truncate database forwards .
11480	Truncate database backwards .
11481	Initialize options .
11482	Finalize the command options .
11483	Run meteor build .
11484	Convert a path to a directory .
11485	Seed the random number generator .
11486	The state of the sensor .
11487	Generate a random string .
11488	Decorator for API endpoints .
11489	Iterate over all API endpoints of an object .
11490	Clears the API path map cache .
11491	Pretty print a value .
11492	Validate kwargs .
11493	Called when the connection is opened .
11494	Called when connection is closed .
11495	Process incoming messages .
11496	Process DDP frames from a message .
11497	Process a DDP message .
11498	Dispatch message to handler
11499	Connect to the server .
11500	Receive a ping message .
11501	Subscribe to a channel .
11502	Unsubscribes from a channel .
11503	Send a method call .
11504	Return a JSON - ready response .
11505	Run the server .
11506	Main entry point .
11507	Print a message .
11508	Stop the PostgresGreenlet .
11509	Run the postgres greenlet .
11510	Connect to PostgreSQL .
11511	Poll for NOTIFYs .
11512	Greenify all threads .
11513	Generate a random ID .
11514	Autodiscover API modules .
11515	Return the exception as a dictionary .
11516	Get an object by name .
11517	Emit a record .
11518	Create a negotiator middleware .
11519	Add a route context to the application .
11520	Add a resource object .
11521	Run the application .
11522	Send a message .
11523	Send multiple APNs messages .
11524	Fetch inactive APNs registration IDs .
11525	Send gcm message .
11526	Send a bulk message .
11527	Send registration data to GCM .
11528	Send a POST request .
11529	Get a model from a module .
11530	Fast forward selection algorithm
11531	Search Giphy .
11532	Translate a phrase to a GIF .
11533	Get trending gists
11534	Get a GIF .
11535	Get Giphy screensaver .
11536	Upload a file to Giphy .
11537	Normalize data .
11538	Fetch data from API .
11539	Translate a GIF .
11540	Get trending GIFs .
11541	Fetch a GIF .
11542	Upload a GIF .
11543	Create the access control element .
11544	Authenticate the user .
11545	Upload a video .
11546	Check the upload status of a video .
11547	Update a video .
11548	Delete a video .
11549	Check video availability .
11550	Show a video .
11551	Show a list of videos .
11552	Upload a video to Youtube .
11553	Upload a video .
11554	Uploads a video .
11555	Remove a video .
11556	Fetches a video entry .
11557	Save the instance
11558	Delete this video .
11559	Update metadata .
11560	Updates a metadata field .
11561	Update this item .
11562	loads a string into a list of nodes
11563	Dump a list of trees .
11564	Load data from a file .
11565	Read a file .
11566	Parse a node .
11567	Create a new node .
11568	Return a newick representation of this node .
11569	Return ASCII art string .
11570	Return the node with the given label .
11571	Prune the tree .
11572	Resolve polytomies .
11573	Remove all internal names .
11574	Remove leaf names .
11575	Decorator that ensures that the user is authenticated .
11576	Disposes a JSON string .
11577	Raise an exception if the setting does not exist .
11578	Get the last argument .
11579	Get a list of arguments for a request .
11580	Decorate a callback to be run asynchronously .
11581	Get a cookie .
11582	Delete a cookie .
11583	Redirect user to OpenID endpoint .
11584	Get an authenticated user .
11585	Generate OAuth request parameters .
11586	Redirect user to OpenID endpoint .
11587	Make a request to Facebook .
11588	Get an authenticated user .
11589	Concatenate arguments to a URL .
11590	Parse a header line .
11591	Add a value to the headers .
11592	Get a list of headers .
11593	Parse a single line of text .
11594	Parse headers .
11595	Normalize a header name .
11596	Convert unicode to utf - 8 .
11597	Convert bytes to unicode .
11598	Convert a value to a basestring .
11599	Recursively convert obj to unicode .
11600	Check for conflicting settings .
11601	Iterate over all subclasses of cls .
11602	Return policy name and origin .
11603	Return the number of occupied points .
11604	Write a gro file .
11605	Write a PDB file .
11606	Determine the number of molecules in a list of molecules .
11607	Resize PBC for lipids .
11608	Write a rudimentary topology file .
11609	Yield lines from a resource file .
11610	Send a message to a user .
11611	Send a message to a list of users .
11612	Get messages for a user .
11613	Process the response .
11614	Check config file .
11615	Verify that the profile name is valid .
11616	Retrieve data from config
11617	Retrieve password from config .
11618	Update config data .
11619	Update config password .
11620	Create a new config profile .
11621	Display required items
11622	Get data from user
11623	Get auth from user
11624	Configure a profile .
11625	Write data to a profile .
11626	Write auth data to config file
11627	Add attachments to the message .
11628	Send the message .
11629	Send a message .
11630	Create a message object from a message type .
11631	Create a credential property .
11632	Returns a property that validates the given attribute .
11633	Validate input .
11634	Validate Twilio .
11635	Validate SlackPost .
11636	Validate whatsapp .
11637	Send a coroutine to the server .
11638	Add a message to the queue .
11639	Get body from file .
11640	Takes a dictionary of keyword arguments and cleans them up .
11641	Send a message .
11642	Get chat id by username
11643	Send the message .
11644	Send the message .
11645	Get SMTP server address .
11646	Generate the email .
11647	Add headers to the message .
11648	Add the body to the message .
11649	Add attachments to the message .
11650	Get a SMTP session .
11651	Return an SMTP_SSL instance .
11652	Create SMTP session with TLS .
11653	Send the email .
11654	Save tags to file .
11655	Unload the image .
11656	Get a region of the image .
11657	Check that all keys and values are valid .
11658	Clear the internal list .
11659	Write this tag to a byte string .
11660	Read data from file .
11661	Delete the file .
11662	Resize the file .
11663	Insert a chunk .
11664	Save the frame to a file .
11665	Delete a file .
11666	Parse a file .
11667	Process a normal line .
11668	Add lines to the block .
11669	Draw a string .
11670	Parse an ISO 8601 time string .
11671	Turns a list of words into an HTML line .
11672	Make an HTML word .
11673	Make HTML para string .
11674	Make HTML code .
11675	Make HTML code for a list of items .
11676	Save the tags to a file .
11677	Update the parents of a file .
11678	Run the game .
11679	Register a mapping for a vendor and product .
11680	Get a registered controller .
11681	Register a freeform key .
11682	Signs a string with AWS secret access key .
11683	Return a dict of request headers .
11684	Send a request .
11685	Send a GET request .
11686	Send a POST request .
11687	Send a DELETE request .
11688	Create an APEValue from a string .
11689	Send a request .
11690	Perform an autopaginating API call .
11691	List hosted zones .
11692	Create a hosted zone .
11693	List resource record sets by zone id .
11694	Change a resource record set .
11695	Draw an image .
11696	Draw an image region .
11697	The size of the packet .
11698	Replace old pages with new pages .
11699	Find the last OggPage with the given serial number .
11700	Set a section .
11701	Add markup to the document .
11702	Process content .
11703	Get a markup by tag name .
11704	Create a writer for a hosted zone .
11705	Lock a file .
11706	Insert bytes into a file .
11707	Delete bytes from file .
11708	Convert data to UTF - 8
11709	Add a change .
11710	Parse change info .
11711	Measure a string .
11712	Check if this object has been modified .
11713	Delete this resource record set .
11714	Save this record set .
11715	Parse an ID3v1 tag .
11716	Make ID3 v1 format .
11717	Read size bytes from the file .
11718	Delete all keys starting with key
11719	Called when a frame is loaded
11720	Update common frames .
11721	Convert unknown frames to V24 .
11722	Unload the sound .
11723	Play the sound .
11724	Set the audio loop points .
11725	Return a list of glyphs and values
11726	Return a list of glyph names that match the filter .
11727	Dump an encoding list to a file .
11728	Dump an unsigned array .
11729	Main function .
11730	Check if a file exists .
11731	Make a list of file paths
11732	Parse a HostedZone XML element .
11733	Parse a delegation set .
11734	Write a list of blocks to a file .
11735	Group blocks by padding .
11736	Delete a VCFLAC file .
11737	Save the audio file .
11738	Parse a RRset alias .
11739	Parse a list of resource record values .
11740	Parse a resource record set .
11741	Delete this HostedZone .
11742	Add a record to this zone .
11743	Create a new A resource record .
11744	Create an AAAA record .
11745	Create a cname record .
11746	Create an MX resource record .
11747	Create a NSResourceRecordSet .
11748	Create a PTR record .
11749	Create a SPF record .
11750	Create a SRV record .
11751	Create a TXT record .
11752	Register a TXXX key .
11753	Get the initial values for a change .
11754	Write a change to the XML file .
11755	Write a change set to XML .
11756	Initialize the logs
11757	Return the item with the given alias .
11758	Freeze a dictionary .
11759	Join HTML attributes into a string .
11760	Initialize the application .
11761	Initialize the bars .
11762	Bind a bar .
11763	Return a dictionary of arguments for this command .
11764	Returns the URL for this resource .
11765	Returns True if this request is the current request .
11766	Validate metric class .
11767	Get statistic by name .
11768	Calculate statistics .
11769	Try to import all installed apps .
11770	Return a CSV dump of a metric .
11771	Handle the command .
11772	Get a list of values from GET variables .
11773	Get a GET parameter as a boolean .
11774	Get the next colour .
11775	Returns a dictionary of parameters for a gecko chart
11776	Widget for the number widget .
11777	Returns a tuple of the latest count and the metric title
11778	Generate a geckoboard line chart .
11779	Get the latest geckometer .
11780	Returns a list of metrics for a gecko board .
11781	Returns a list of active gadgets .
11782	Register gadget .
11783	Get the context data for this widget .
11784	Print a message and exit .
11785	Decorator for validating parameters .
11786	Prompt user for long input .
11787	List input .
11788	Prompt the user for a file name .
11789	Get the schedule for a given year
11790	The winner of the game .
11791	Season of the date .
11792	Get the starters of the game .
11793	The surface of the game .
11794	Won toss game .
11795	Get weather information .
11796	Return the sports ref information
11797	Schedule games from each month .
11798	Get the standings of the sports .
11799	Get team stats table
11800	Get roy voting
11801	Returns a DataFrame of line score for each team .
11802	The season of the date .
11803	Get player stats
11804	Change working directory to dirPath .
11805	Decorator to check if the cache file exists .
11806	Get the key for a class instance .
11807	Memoize a function .
11808	Calculate the age of a person .
11809	Get stats table
11810	Get stats per game .
11811	Return a table of stats for a given kind .
11812	Get stats per minute .
11813	Get stats per 100 percent .
11814	Get the advanced stats table .
11815	Get the statistics for a given kind of shooting .
11816	Get stats from the PBKP backend .
11817	Get basic game log data .
11818	Get session data
11819	Expand details DataFrame into main DataFrame
11820	Add team and opp columns to features
11821	Create columns for each team
11822	Initial win prob .
11823	Return a DataFrame of passing playoffs .
11824	Get the simple year award .
11825	The name of the team .
11826	Get boxscores for a given year
11827	Return a pq object for a given year .
11828	Get a list of coach IDs for a given year .
11829	Return a dataframe of games for a given year .
11830	Get the offensive coordinator for a year .
11831	Get the defensive coordinator for a year .
11832	Return the Stadium URL for a given year .
11833	Get the offensive scheme of a year .
11834	Returns the defensive alignment of a year .
11835	Split off splits for a given year .
11836	Get HTML from given URL .
11837	Flatten links in a TD element .
11838	Convert a relative URL to an ID .
11839	Convert kwargs to query string
11840	Read from a file .
11841	Put the data into the read queue .
11842	Get a read lock .
11843	Close the queue .
11844	Get a batch of examples .
11845	Get the remainder of a batch .
11846	Get a queue from the dataset .
11847	Yields rows from the queue .
11848	Parse a file - like object .
11849	Write pb_objs to ofp .
11850	Read a varint .
11851	Read a group of objects .
11852	Close the stream .
11853	Write a list of pb2 objects .
11854	Flush the write buffer .
11855	Get the game directory .
11856	Input text with keyboard emulation .
11857	Make a fake movie .
11858	Evaluate traits .
11859	Wait until condition is true .
11860	Wait until all traits are present .
11861	Add a list of exceptions to ignore .
11862	Get the volume of the current process .
11863	Return the source of the given operator .
11864	Send a message .
11865	Get the status of the device .
11866	Power off the device .
11867	Power on .
11868	Set the volume
11869	Select a source
11870	Deobfuscates a key .
11871	Calculate the CRC32 checksum of plaintext .
11872	Obfuscate a value .
11873	Check if a song is missing a schema
11874	Get a list of all links
11875	check if song name is valid
11876	Parse a song from a URL .
11877	Generate a Google URL for a song .
11878	Parse download url from Google .
11879	Parse a song and return the website url .
11880	Download an HTML page .
11881	Download a file using requests
11882	Download a file using wget
11883	Find station codes by city name
11884	Get location observation .
11885	Parse an observation response .
11886	Get observation data for a station .
11887	Return a list of search paths .
11888	Return a list of available compilers .
11889	The mimetype of the file .
11890	The mimetype of the compiler result .
11891	Return the compiler format extension .
11892	Register a processor for a given mimetype .
11893	Unregister a processor .
11894	A list of paths to search for .
11895	Register the default settings for this plugin .
11896	Import QtCore .
11897	Returns a netnode object for the current settings .
11898	Add a plugin name to the list of available plugins .
11899	Delete a netnode plugin name
11900	Import settings from config file .
11901	Export settings to config file .
11902	Returns a DirectoryIDASettings instance .
11903	Iterate over all keys in the database .
11904	Simple error handler .
11905	Get a DynamoDB table .
11906	List DynamoDB tables .
11907	Fetch items for a given category
11908	Return the ID of a metadata item .
11909	Return the updated_on timestamp of the item .
11910	Fetch the owner team for a crate .
11911	Fetch the owner user for a crate .
11912	Fetch Crate versions
11913	Fetch Crate version downloads
11914	Fetch crate data
11915	Get the summary of the cats .
11916	Fetches a list of catalogs .
11917	Fetch a crate by ID
11918	Fetch a crate attribute .
11919	Fetch a page of items
11920	Fetch items by category .
11921	Fetch items from Kitsune API
11922	Get a list of questions .
11923	Fetch a list of events .
11924	Get the updated date of an event .
11925	Return the category of an item .
11926	Get items from ReMo .
11927	Return a list of buffered messages .
11928	The priority of the request .
11929	Close the context .
11930	Submit a list of blocks .
11931	Cancel a block .
11932	Cancel all transfers .
11933	Get a list of events .
11934	Fetch all items of a given category .
11935	Get all cells spreadsheet data
11936	Parse the feed .
11937	Return a list of export formats for the given pid type .
11938	Get the permission factory .
11939	Create a blueprint .
11940	Create a URL rule .
11941	Create a record view .
11942	Default view method .
11943	Export a record .
11944	Time a callable function .
11945	Close the socket .
11946	Remove a client .
11947	Increment a counter metric .
11948	Send a timing metric .
11949	Add a timing measurement .
11950	Send a gauge metric .
11951	Send a gauge delta request .
11952	Set a metric .
11953	Add data to the batch .
11954	Create a batch client .
11955	Return a unit client .
11956	Send all batches to the server .
11957	Create a MyPermissionChecker
11958	Create a TCPBatchClient .
11959	Flush all batches .
11960	Return a unit TCPClient object .
11961	Create a new user .
11962	Interpret the given object as an OpenMath object .
11963	Convert a term to OpenMath .
11964	Convert an object to Python .
11965	Convert an object to OpenMath .
11966	Register a converter to openmath .
11967	Register a conversion function to a class .
11968	Initialize the application .
11969	Yield valid choices .
11970	Split kwargs into model fields and fields_agrs .
11971	Register a field type .
11972	Create a value for this field .
11973	Return a tuple of form data and files .
11974	Decorator to mark a field as required .
11975	Decorator for field choices attribute .
11976	Return a string representation of a decimal field .
11977	Generate email field data .
11978	Generate data for a date field .
11979	Generate data for a datetime field .
11980	Return a string representation of a float field .
11981	Return a string representation of an integer field .
11982	Generate a random time .
11983	Return a random string for a choice field .
11984	Return the data for a multiple choice field .
11985	Return a random choice from the queryset .
11986	Encode a Python object to bytes .
11987	Publish package .
11988	Tag the repository .
11989	Decorator to check if a field is blank .
11990	Load a Python global variable .
11991	Build an instance from a state .
11992	Convert a list to an OMApplication
11993	Create a Python tuple .
11994	Decodes data into bytes .
11995	Encodes a byte string .
11996	Convert a number to a fixed value .
11997	Format a number .
11998	Format a number as money .
11999	Convert numpy data to numpy array .
12000	Packs data from an array .
12001	Add a workspace .
12002	Remove a workspace .
12003	List all workspaces
12004	Get a WebSocket by name .
12005	Check if a repository exists .
12006	Synchronize workspaces
12007	Clone a repository .
12008	Check if ndio is available .
12009	Convert an array to a list of voxels
12010	Create a vector from a list of voxels .
12011	List workspaces .
12012	Update a repository
12013	Set the console handler .
12014	Execute a command .
12015	Load a PNG file .
12016	Save numpy data to a png file .
12017	Save a collection of numpy arrays .
12018	Print the status of a workspace .
12019	Print repository status
12020	Get the block size of a dataset .
12021	Post cutout without chunking .
12022	Load a Tiff file .
12023	Save numpy data to TIFF file .
12024	Load a multi - layer TIF file .
12025	Write configuration to file .
12026	Clone a repository .
12027	Get the version of yoda .
12028	Mix a name and a greeting .
12029	Option decorator .
12030	Reserve IDs for a channel .
12031	Merge ids into channel .
12032	Propagate data to channel
12033	List projects in a dataset .
12034	Get a dataset by name .
12035	List datasets .
12036	Parse command line arguments .
12037	Show a workspace .
12038	Show a workspace .
12039	Show all workspaces
12040	Returns the URL for the given endpoint .
12041	Try to guess the format from a file extension .
12042	Open a file .
12043	Convert a file .
12044	Build a graph .
12045	Compute the invariants for a graph file .
12046	Convert a graph file .
12047	Convert a list of ramons to a dictionary .
12048	Get RAMON type .
12049	Delete a channel .
12050	Add a dataset .
12051	Return a JSON representation of a dataset .
12052	Create a dictionary for a dataset .
12053	Create a channel dictionary .
12054	Create a dictionary for a project .
12055	Identify image dimensions .
12056	post data to ndio
12057	Find the path to a workspace .
12058	Get public tokens .
12059	Get project info
12060	Set metadata .
12061	Make a GET request to the given URL .
12062	Make a POST request .
12063	Delete a URL .
12064	Load a hdf5 file .
12065	Save array to HDF5 file .
12066	Infer gaps in tree .
12067	Recover IO .
12068	Install jinja translations .
12069	Acquire a lock for exclusive use .
12070	Calculate the percent of a part of the data .
12071	Get statistics about the cache server .
12072	Get a list of cache slabs
12073	Return the context data as a dictionary .
12074	Show the status of the memcache server .
12075	Displays a dashboard page .
12076	Show statistics about the memcache server .
12077	List Slabs for a server .
12078	Convert a number of bytes to a human readable string .
12079	Given a dictionary of children find out which one to use
12080	Add a directory .
12081	Applies the applicator to the config file .
12082	Absolute path to this file .
12083	Read the contents of the file .
12084	Write data to file .
12085	Configure the logger .
12086	Create the file .
12087	Applies the given applicator to this node .
12088	The absolute path of the file .
12089	Remove the directory .
12090	Prepare all children .
12091	Remove all children .
12092	Return the absolute path to the given path .
12093	List all files in this directory .
12094	Write data to a file .
12095	Read a file .
12096	Add a file to the tree .
12097	Save the configuration to disk .
12098	Load configuration from file .
12099	Remove the file if it exists .
12100	Load plugins from directory
12101	Recursively updates a dictionary recursively .
12102	Return a child node .
12103	Resolve a key path to a list of nodes .
12104	Get the value of the node .
12105	Update the configuration .
12106	Load the configuration file .
12107	Return a string representation of obj .
12108	Build the URL for a callback .
12109	Process input .
12110	Send output to socket
12111	Send an RPC request .
12112	Read input from socket .
12113	Write output to socket .
12114	Decorator that ensures that a function is not reentrant .
12115	Get remote settle modes .
12116	Configure the node .
12117	The source address of the link .
12118	Target address of the link .
12119	Called when session is closed .
12120	Create a new sender .
12121	Request a sender link .
12122	Create a new receiver .
12123	Request a receiver link .
12124	Called when a link is destroyed
12125	Called when a session is closed .
12126	Process an endpoint event .
12127	Add markers to a Markdown document .
12128	Close the receiver link .
12129	Close the receiver link .
12130	Get host and port from server address .
12131	Connect to a socket .
12132	Create a server socket .
12133	Return the list of connections that need processing .
12134	Decorator that ensures that the connection is not reentrant .
12135	Process the SASL session .
12136	Read the next output buffer .
12137	Create a sender .
12138	Reject a sender link .
12139	Create a new receiver .
12140	Log connection failure .
12141	Called when connection is active
12142	Called when the connection is closed .
12143	Handle a protocol error .
12144	Decorator for twilio views .
12145	Get color string
12146	Returns a dictionary of font names to fonts
12147	Set the compression option .
12148	Add an object to the PDF .
12149	Write a stream to the output buffer .
12150	Write a stream .
12151	Add a page to the document .
12152	Set color scheme .
12153	Set the default font .
12154	Add a page to the PDF .
12155	Set font size .
12156	Add text .
12157	Add a newline .
12158	Add a pie chart .
12159	Output pages .
12160	Return a list of pages that have changed .
12161	Output fonts .
12162	Output images .
12163	Write the object to the stream .
12164	Transform the current matrix .
12165	Calculate the absolute position of a point .
12166	Set font style
12167	Rotate a point by the angle .
12168	Set information about the object .
12169	Set the display mode .
12170	Closes the document .
12171	Write PDF header .
12172	Put all pages in the PDF .
12173	Put a resource dictionary into the session .
12174	Put information about the PDF .
12175	Put a catalog
12176	Write trailer .
12177	Floyd algorithm .
12178	Yields values from seqs in a naive way .
12179	Gosper sequence generator .
12180	Brent function .
12181	Test if the x - point is within the given length
12182	Return True if y_fit is True
12183	Returns True if x is greater than test_ordinate .
12184	Returns True if y is greater than test_ordinate .
12185	Return a copy of this cursor .
12186	Add x to the x - axis
12187	Add dy to y .
12188	Draw the table .
12189	Create a tag .
12190	List tags .
12191	Get a list of labels by name .
12192	Update a tag .
12193	Delete a tag .
12194	Create a tag .
12195	List tagit actions .
12196	Returns a list of tags with the given label .
12197	Create a hook .
12198	List hooks .
12199	Update a hook .
12200	Create an alert .
12201	Get alerts by type .
12202	Updates an alert .
12203	Setup sphinx extension .
12204	Get the path to the themes directory .
12205	Send a POST request to logentries .
12206	List all hosts
12207	Get a log set .
12208	Find attacker slider .
12209	Return the duration in seconds
12210	Update the model .
12211	Compute the transition matrix .
12212	Compute the bin magnitude .
12213	Free memory .
12214	Read data from the socket .
12215	Yield lines from the buffer .
12216	Yields bytes from the buffer .
12217	Get the status of the connection .
12218	Generate info .
12219	Return a formatted info message .
12220	Execute a command .
12221	Get capabilities .
12222	Ask NNTP to read mode .
12223	Quit the server .
12224	Get a datetime object from the server .
12225	Show help message .
12226	Generate new groups .
12227	Generate new news .
12228	Generate a list of new news .
12229	List active groups .
12230	List active times .
12231	List new groups .
12232	List overview format generator .
12233	List all extensions .
12234	Generate a list of dictionaries for a given keyword .
12235	Return a list of the results of the query .
12236	Send GROUP command .
12237	Get the next article .
12238	Article message .
12239	Execute HEAD command .
12240	Get the body of a message .
12241	Get the title of the network .
12242	Send an XHDR command .
12243	Send an XZHDR command .
12244	XOVER command generator .
12245	XPAT command generator .
12246	Return a list of xpaths matching the given pattern .
12247	XFEATURE COMPRESS GZIP
12248	Send a POST request to NNTP .
12249	Return the offset of a number .
12250	Parse a timestamp .
12251	Return a datetime object from a string .
12252	Perform a POST request .
12253	Perform a DELETE request .
12254	Perform a GET request .
12255	List scheduled queries .
12256	List tags for this account .
12257	Get tags by name or ID
12258	Create an alert report .
12259	Delete a tag .
12260	Create a scheduled query .
12261	Create an alert report .
12262	Delete a tag .
12263	Convert an integer or tuple to a string .
12264	Parse a newsgroup line .
12265	Parse a header line .
12266	Unparse headers .
12267	Send a POST request .
12268	Run a suite of tests .
12269	Return a docstring for the given defaults .
12270	Decorator that appends default kwargs to a function .
12271	Return a docstring for the defaults .
12272	Set the value .
12273	Check that the value is of the correct type .
12274	Get the value of the model .
12275	Check that value is a scalar .
12276	Symmetric error .
12277	Set errors .
12278	Set parameters from keyword arguments .
12279	Import metrics .
12280	Extract a dictionary from a list of metrics .
12281	Filter metrics by name .
12282	Call the API .
12283	Terminal expression .
12284	Parse an operator .
12285	Add operator .
12286	Initialize missing properties .
12287	Returns a list of parameter objects
12288	Get parameter values
12289	Returns an array of parameter errors
12290	Clear all derived parameters .
12291	Setter for method .
12292	Get environment variables .
12293	Returns the URL parameters .
12294	Perform a GET request .
12295	Perform a DELETE request .
12296	Perform a POST request .
12297	Perform a PUT request .
12298	Call the API .
12299	Raises WrongSceneNameError if the sceneInfo is invalid .
12300	Verify type product .
12301	Get the size of a remote file
12302	Download the scene .
12303	Validate bands .
12304	Connect to USGS
12305	Return a decorator that prefixes a name with a given prefix .
12306	Get the timezone for a given time zone .
12307	Return a copy of dt with tzinfo set .
12308	Join a sequence of strings with a delimiter .
12309	Get the positions of the newline characters in text .
12310	Convert a point to a source string .
12311	Dump the results to the console .
12312	Filter relays .
12313	Load a list of fortune files .
12314	Set the chance of a file .
12315	Main entry point .
12316	Parse a rule .
12317	Special handling .
12318	The grammar of the input .
12319	List of rules in the grammar .
12320	List of comments in the grammar .
12321	The list of directives in the document .
12322	Return the compiled source code .
12323	Compile the grammar .
12324	Return the list of import statements .
12325	Return a string representation of the token type enum .
12326	Return a class definition string .
12327	Get the entry point name .
12328	Get the definition of a rule .
12329	Get the source of a rule .
12330	Get the transform for a rule .
12331	Convert an expression to ASN .
12332	Convert an AST node to ASN .
12333	Given a list of operands hoist them into a list of operands .
12334	Remove grouping groups from an OptreeNode .
12335	Convert an AST node to code .
12336	Convert an AST node to code .
12337	Convert an AST terminal to code .
12338	Convert an ast option group to a string .
12339	Convert an AST repetition group to code .
12340	Convert special handling to code .
12341	Convert an astroid . Alternation node to code .
12342	Convert an astroid . astroid . Concat node to code .
12343	Return an astroid . Exclusion node as string .
12344	Return the code for a multiplication operation .
12345	Return an astroid . astroid . Repeat node as string .
12346	Find directives that match a predicate .
12347	Return True if child is a child of parent .
12348	Parse directives from a comment .
12349	Handle API response .
12350	Generate a new ID .
12351	Remove a hotkey .
12352	Add command line arguments .
12353	Configure logging .
12354	Validate arguments .
12355	Convert a list of operators to postfix operators .
12356	Convert a list of operators into an OptreeNode .
12357	Reduce a list of operators .
12358	Add command line arguments .
12359	Load plugin manifest .
12360	Get a metric definition by name .
12361	Get the length of each field in the table .
12362	Get the length of each column in the metrics table .
12363	Escape underscores in metric names .
12364	Output the fields in Markdown format .
12365	Output metrics in Markdown format .
12366	Generate a Markdown representation of the report .
12367	Parse text .
12368	Determine how many characters have been consumed .
12369	Add command specific arguments
12370	Parse a string into a datetime object .
12371	Takes a JSON string and outputs a CSV file .
12372	Output a JSON string to stdout .
12373	Output a raw JSON string .
12374	Convert a JSON payload to XML
12375	Return True if the node is a default node .
12376	Pretty print a terminal .
12377	Repetition extractor .
12378	Get a terminal node .
12379	Extract a repetition .
12380	Try to extract an exclusion .
12381	Count the number of leading whitespace in text .
12382	Call an extractor .
12383	The position of this node .
12384	Return True if this node is empty .
12385	Add ignored items .
12386	Return True if value is a node type .
12387	Return a new ParseNode with flattened children .
12388	Return a new ParseNode with all children trimmed .
12389	Merge another ParseNode into this one .
12390	Return a new ParseNode with a different type .
12391	Return a compressed ParseNode .
12392	Return the current position .
12393	Return the maximum position in the file .
12394	Advance to the next character .
12395	Move to the next line .
12396	Move to the previous line .
12397	Return the last read line .
12398	Increment the cursor position by length .
12399	Save current cursor position .
12400	Restore the current context .
12401	Return a string representation of this function .
12402	Set the name of this signature .
12403	Return the number of variables in this signature .
12404	Return the number of functions in this signature .
12405	Update the count of variables and functions
12406	Update this scope .
12407	Union two scopes .
12408	Update this scope with the intersection of the given scopes .
12409	Return a new scope with the intersection of this scope and sig .
12410	Remove keys from oset that are not in oset .
12411	Return a copy of this scope with the given signature removed .
12412	Symmetric difference update .
12413	Return the symmetric difference of two scopes .
12414	Add a Signature to the scope .
12415	Remove a Signature .
12416	Discard a Signature .
12417	Return a list of signatures in this scope .
12418	Return the first signature in the signature list .
12419	Return the last signature in the signature list .
12420	Get a signature by key .
12421	Get a scope by symbol name .
12422	Get a Signature object by symbol name .
12423	Get all Polymorphic return values .
12424	Call the injector .
12425	Normalize an AST .
12426	Set attributes from othernode .
12427	Yields all values in the tree .
12428	Check if a hit is ok
12429	Compute the signature of this function .
12430	Resolve the type of the function .
12431	Return a list of resolved names for the given type .
12432	Set the resolved name of a type .
12433	Delete a local file .
12434	Delete a file from S3 .
12435	Delete a file .
12436	Save a local file .
12437	Save a file to S3 .
12438	Save object to file .
12439	Find objects in S3 .
12440	Create a new enum type .
12441	Check the types of the arguments of a function .
12442	Set one object in a chainmap
12443	Add a method to the class .
12444	Decorator to register a hook .
12445	Decorator to register a rule .
12446	Decorator to register a directive .
12447	Decorator to register a class decorator .
12448	Bind src to dst
12449	Read eol .
12450	Push the rule nodes to the stack .
12451	Pop the rule nodes from the stack .
12452	Get the value of a node .
12453	Add a parsed stream .
12454	Begin tag .
12455	Marks the end of a tag .
12456	Set rules .
12457	Set hooks .
12458	Set directives .
12459	Evaluate a rule .
12460	Evaluate a hook .
12461	Peeks at the given text .
12462	Read one character .
12463	Read a single character .
12464	Read until EOF .
12465	Ignore blank lines .
12466	Set the dtype of the cluster hits .
12467	Set the cluster dtype .
12468	Check that all required fields are present in the hits .
12469	Add a rule clause name .
12470	Add a rule to bnf .
12471	Add a rule .
12472	Add sequences to sequences .
12473	Add an alternative to this node .
12474	Add a range to a sequence .
12475	Add a rule to sequence .
12476	Add a capture to the sequence .
12477	Add a bind to a sequence .
12478	Add a hook .
12479	Set the value of a parameter .
12480	Parse a string parameter .
12481	Parse a single character .
12482	Parse a param pair .
12483	Set hook name
12484	Hook a parameter .
12485	Get rules from EBNF .
12486	Ignore C++ files .
12487	Add a state .
12488	Return a dot representation of the graph .
12489	Write self to a dot file .
12490	Write the image to a png file .
12491	Return a string representation of the events .
12492	Return the next state .
12493	Reset all living state .
12494	Infer a block of code .
12495	Infer a subexpr .
12496	Infer an ID from a symbol .
12497	Infer a literal .
12498	Dump local info about nodes
12499	Parse a parserrule .
12500	Exit scope .
12501	Return a list of If statements .
12502	Visit a Call AST node .
12503	Visitor for CallTrue AST node .
12504	Visit a Hook node .
12505	Evaluate a rule .
12506	Visit a Capture AST node .
12507	Visit a scope node .
12508	Visit an Alt node .
12509	Visit a Seq node .
12510	visit a RepOptional node by returning a fresh instance of it
12511	Visitor for Rep0N AST node .
12512	visit a Rep1N node by returning a fresh instance of it
12513	Concatenate src and dst .
12514	Set the indent of a list .
12515	Convert a list into a string .
12516	Echo nodes .
12517	Populates an edge from a sequence .
12518	Populate a state register from a sequence of sequences .
12519	Build the state tree .
12520	Return True if n == val .
12521	Build a grammar from a string .
12522	Load a grammar from a file .
12523	Parse a string and return a Node .
12524	Parse a file .
12525	Set a node .
12526	Set node value as int
12527	Get a subnode .
12528	Default serializer .
12529	Get depositions
12530	Dump a deposition to a dictionary .
12531	Return a list of bibrec IDs in the database .
12532	Return a list of bibrec IDs for a given date .
12533	Import bibdoc file .
12534	Dump a BibDoc file .
12535	Get a list of check IDs .
12536	Check BibDoc .
12537	Serialize an object to a dictionary .
12538	Get all accounts .
12539	Dump a User object to a dictionary .
12540	Get all Featured Communities .
12541	Return list of modified bibrec IDs .
12542	Return a list of modified record IDs .
12543	Get collection restrictions .
12544	Get revisions of a record .
12545	Get all collections of a record .
12546	Create a record from a MARCXML string .
12547	Return the number of records matching the given query .
12548	Dump a record .
12549	Dump ra to a dictionary .
12550	Load a common model .
12551	Collects all of the Things installed on the system .
12552	Initialize the app context .
12553	Memoize a function .
12554	Get run SQL .
12555	Get connected roles .
12556	Execute a query and return the results .
12557	Return a dict representation of the token .
12558	Load a token .
12559	Import a record .
12560	Get the value of a configuration variable .
12561	Serialize an object to a dictionary .
12562	Get list of users in Invenio v1 .
12563	Return the number of users in the database .
12564	Dump a User object to a dictionary .
12565	Load deposit .
12566	Create record and pid .
12567	Load a record .
12568	Load a list of records .
12569	Inspect records in a dump .
12570	Load dumps from a list of sources .
12571	Load communities .
12572	Load users .
12573	Load a deposit .
12574	Get profiling statistics .
12575	Start the web server .
12576	Dump profiling data .
12577	Delete profile .
12578	Stop profiling .
12579	Get the status of the job .
12580	Decorator to disable timestamp .
12581	Load user .
12582	Calculate translations in parallel .
12583	Merge multiple images into one .
12584	Add one dimensional zeros to an array .
12585	Create a dump .
12586	Create a record .
12587	Update a record .
12588	Create PIDs for a record .
12589	Delete a record .
12590	Create files in a record .
12591	Create a file .
12592	Delete buckets from a record .
12593	Return a list of pids that are missing
12594	Prepare revisions .
12595	Prepare files
12596	Prepares the list of pids to be used by the daemon .
12597	Return True if the document is deleted .
12598	Load community .
12599	Load a featured community .
12600	Dump a thing .
12601	Check a thing .
12602	Delete this widget
12603	Calculate the magnitude of a vector .
12604	Normalize a vector .
12605	Transform a list of texcoords .
12606	Ensure bones are present in data .
12607	Set the length of this bone .
12608	Set the parent of this bone .
12609	Calculate pivot point
12610	Start animation .
12611	Set the current state .
12612	Unsets the current state .
12613	Set the state of the bone .
12614	Unsets the state of the bone .
12615	Ensure that the model data is available for the given object .
12616	Redraws the mesh .
12617	Draw the batched object .
12618	Set the model .
12619	Write reports to a file .
12620	Return an XML representation of the testsuite .
12621	Add a menu to the window .
12622	Redraws the label .
12623	Redraws the label .
12624	Draws the background .
12625	Delete a widget
12626	Redraw the label .
12627	Register event handlers .
12628	Register event handlers
12629	Add the main label .
12630	Add an OK button .
12631	Exit the dialog .
12632	Add a confirm button
12633	Add a cancel button
12634	Update progressbar
12635	Render all actors in the scene .
12636	Render the world in 3D .
12637	Open a step in the current case .
12638	Check if a resource exists .
12639	Add a category
12640	Get the missing texture .
12641	Get a model by name .
12642	Load a model .
12643	Returns the model data for the given name .
12644	Load a model data file .
12645	Add a widget to the container .
12646	Draws the submenu .
12647	Redraw the background .
12648	Redraw the scrollbar .
12649	Check if the mouse is inside a bounding box .
12650	Return the p - value of this node .
12651	Adds a layer to the stack .
12652	Get a region from a buffer .
12653	Draw the buffers .
12654	Add a function to the action list .
12655	Execute the action .
12656	Register a new name .
12657	Add a layer .
12658	Draw the layers .
12659	Delete all layers .
12660	Return a WatchingList with the borders of the widget .
12661	Return a WatchingList for this widget .
12662	Get the size of the widget .
12663	Read HDF5 file .
12664	Make a connection matrix .
12665	Set fields .
12666	Add fields to the query .
12667	Check element types .
12668	Return the space of the element .
12669	Compute centroids and volumes of all elements .
12670	Return angles in degrees .
12671	Compute the edges of the mesh .
12672	Compute the stats of the mesh .
12673	Convert an element set to a node set .
12674	Convert a node set to a surface .
12675	Convert surface to element sets
12676	Returns a pandas DataFrame with the metadata for each field .
12677	Metadata of the step .
12678	Make directories if necessary
12679	Run the post - processor .
12680	run gmsh
12681	Read history report .
12682	Read a field report .
12683	Convert list to string
12684	Return equation string
12685	Return a string representation of a UNSORTED set .
12686	Parse the response .
12687	Make a HTTP GET request
12688	Write a XY report to a file .
12689	Write a field report .
12690	List available components .
12691	Return the error message for this field .
12692	Return True if this exception was thrown by a descriptor .
12693	Set the data for this variable .
12694	Get axis mode .
12695	Set the axis options
12696	Create a new class .
12697	Poll datafeeds .
12698	Try to convert value to float .
12699	Convert a string to a number .
12700	Plot a graph .
12701	Force a unicode string .
12702	Make a clean HTML string .
12703	Return True if mime_type is in include_mime_types .
12704	Clean a domain name .
12705	Return the left cuts of a domain name .
12706	Make a hash keyword .
12707	Collects words from a sentence .
12708	Index a stream item .
12709	Return a list of tokens that have been inverted .
12710	Return a dictionary of document frequencies for a list of hashes .
12711	Lookup the stream ids for a hash .
12712	Lookup the stream ids for a given hash .
12713	Convert a ProtoStreamReader to a list of StreamItems .
12714	Create a streamitem from an entry .
12715	Make a content item from a node .
12716	Read a varint .
12717	Read an object from the stream .
12718	Serialize a StreamItem key .
12719	Convert a streamitem to a key and data .
12720	Context manager to temporarily change the working directory .
12721	Strip prefix from string .
12722	Strip a suffix from a string .
12723	Return True if haystack contains needle .
12724	Return a simple and generic error page .
12725	Start the server .
12726	Shutdown the server .
12727	Add a route to the router .
12728	Register an error handler .
12729	Serve a static file .
12730	Get the error page callback .
12731	Add a route .
12732	Resolve a route .
12733	Resolve a non - literal route .
12734	Normalize pattern .
12735	Return the response body .
12736	Add a header .
12737	Set a cookie .
12738	The status line of the response .
12739	The content type of the response .
12740	Get all values for a key .
12741	Recursively delete a directory .
12742	Get list of open file descriptors
12743	Show file type stats
12744	Run rejester .
12745	Attempt to fetch a corpus .
12746	Get a list of lines from a file .
12747	Generate random adjspecies pair .
12748	Generate a random adjspecies pair .
12749	Morph a sentence .
12750	Get the similarity between two requests .
12751	Hiragana correction .
12752	List entities .
12753	Show summary of a review .
12754	List keywords .
12755	Chronological analysis .
12756	Create a new stage .
12757	Initialize stages from config .
12758	Initialize all stages .
12759	Run the reader .
12760	Run all writers .
12761	Run a series of incremental transforms .
12762	Replace the config with a new one
12763	Create a WSGI application .
12764	Given a list of sentences make a list of chains .
12765	Find all mentions in target_mentions and chain_mentions .
12766	Return True if any of target_mentions matches any of chain_mentions .
12767	Given a rating and a list of tokens return a list of regexes that match those tokens .
12768	Return a list of tuples where each tuple is a tuple of cleansed strings and the second part is a Token object from which it came .
12769	Create a NER file .
12770	Align a chunk with a NER file .
12771	Terminate the child process .
12772	Multiplies p by n .
12773	Fix email addresses in text .
12774	Generate sentences from a string .
12775	Make a label index .
12776	Given a stream item make a list of sentences .
12777	Convert HTML entities to unicode .
12778	make a cleansed file
12779	make ner file
12780	Clean up a span .
12781	Align a chunk with a NER file .
12782	Make paths absolute
12783	Instantiate the pipeline configuration .
12784	Generate a chunk of the JS corpus .
12785	Re - based cleaning of HTML .
12786	Make the given HTML cleanly visible .
12787	Create a clean visible file .
12788	Remove punctuation and whitespace from a string .
12789	Main function .
12790	Try to load a stage module .
12791	Load external stages from a file .
12792	Load module stages .
12793	Initialize a stage .
12794	Read data from idx_bytes into idx_bytes .
12795	Return True if href is a valid URL .
12796	make a list of labels
12797	Yield paths in input_dir .
12798	Get a list of tasks .
12799	Get random available keys
12800	Yield tokens from a sentence .
12801	Get sentences from ner_dom .
12802	Retry a function .
12803	Verify that the md5 of data is correct .
12804	Get S3 bucket .
12805	Decode data from S3 .
12806	Get a chunk from a key .
12807	Convert stream_id to kvlayer key .
12808	Convert kvlayer key to stream id .
12809	Generate a key for a stream item .
12810	Main function .
12811	Build an argparse parser .
12812	Add xpaths to stream item .
12813	Convert a list of sentences to char tokens .
12814	Convert a list of tokens to character offsets .
12815	Convert a list of offsets into a list of xpaths .
12816	Add an element to the document .
12817	Return a piece of XPath .
12818	Return the index of the current text node .
12819	Iterate over all descendants of elem .
12820	Return a list of elements in source .
12821	Select elements by name .
12822	Select elements matching a pattern .
12823	Return a list of elements that have the specified attribute .
12824	Return the next sibling of elem .
12825	Make pretty text .
12826	Call the inkscape binary .
12827	Export text to a file .
12828	Export SVG to PDF .
12829	Convert SVG file to PNG file .
12830	Returns a Jinja environment for the given file path .
12831	Setup template file .
12832	Fills the document with the given contents .
12833	Save template content to file .
12834	Create a document from a template file .
12835	Fill the document with SVG code .
12836	Render SVG file .
12837	Render a PDF file .
12838	Create an expat parser .
12839	Parse an HTML document .
12840	Return an HTML fragment from a string .
12841	Insert text into the element .
12842	Insert node before refNode .
12843	Return a clone of this element .
12844	Execute the command .
12845	Return a string representation of a node .
12846	Insert a child into this element .
12847	Parse config file .
12848	Get google API credentials .
12849	Create event datetimes .
12850	Create a calendar event .
12851	Main entry point .
12852	Get file extension .
12853	Add an extension to a file .
12854	Create a temporary file .
12855	Remove all files with the given extension .
12856	Convert a CSV file to JSON .
12857	Replace the content of a file .
12858	Parse the HTML .
12859	Add the next tag to the blacklist .
12860	Create italic tag .
12861	Create a strong tag .
12862	Create an underline tag .
12863	Parse the attributes of a tag .
12864	Remove linebreaks from tags .
12865	Get the query string from the href .
12866	Parse an attribute .
12867	Translate key values in a dictionary .
12868	Return a JSON string representation of the object .
12869	Find all files matching regex
12870	Concatenate strings .
12871	Return True if full starts with part .
12872	Check if a part of a string contains another .
12873	Get the length of a string .
12874	Return a boolean representation of obj .
12875	Iterate over a sequence .
12876	Lookup a key in a table .
12877	Replace special characters in SVG code .
12878	Check that svg_file is a valid SVG file .
12879	Merge two SVG files .
12880	Merge PDF files .
12881	Embed font files to SVG .
12882	Embed a font into a SVG file .
12883	Check inputs .
12884	Check that provided function is callable .
12885	Recursive function .
12886	Create an input file from a list of dictionaries .
12887	Recursively add options to self . _options .
12888	Convert an object to a string .
12889	Convert an object to a number .
12890	Convert an object to a boolean .
12891	Serialize xp_ast .
12892	Changes the encoding of a file .
12893	Save a VCard string into a QR code .
12894	Launch gromacs .
12895	Call a command .
12896	Convert a LaTeX file to PDF .
12897	Return a list of options for the given psy tree .
12898	Transform a geometry to another spatial reference .
12899	Create a geometry .
12900	Expand this rectangle by the given rectangle .
12901	Intersect two envelopes .
12902	Return True if this envelope intersects other .
12903	Create a polygon .
12904	Create a new instance from ZNM data .
12905	Write DataFrame to file .
12906	Select rows matching condition .
12907	Create a Table from a nuclei
12908	Return the intersection of two tables .
12909	Return a new Table with rows not in table .
12910	Return a subset of Z where Z is odd even .
12911	Return a list of elements that are even or odd .
12912	Return a list of elements with even numbers .
12913	Calculate the error in a DataFrame .
12914	Compute the RMSE of the error .
12915	Calculate the binding energy of a binding
12916	r Calculates the second order derivative of S2N .
12917	r Calculates the s1n parameter for this model .
12918	Derivative of s2p .
12919	r Calculate the s1p of a proton
12920	Create a derived table .
12921	Use db session to call func with args and kwargs
12922	Derive a key from the master password .
12923	Bootstrap a new database .
12924	Search domains by name .
12925	Modify a domain .
12926	Create a new domain .
12927	Extract hbs from a file .
12928	Return the vsi prefix for a path .
12929	The SRID of this authority .
12930	Main function .
12931	Initialize logging .
12932	Update a file .
12933	Return a dictionary of available drivers .
12934	Get an image driver for a given path .
12935	Convert a geom to a numpy array .
12936	Rasterize a layer .
12937	Open a raster file .
12938	Create a raster from a byte string .
12939	Create a copy of a raster .
12940	Get the DMD options as a dictionary .
12941	Create a raster file .
12942	Set GeoTransform .
12943	Read an array from the file .
12944	Raster envelope .
12945	Get the image driver .
12946	Create a new raster .
12947	Return a masked array of the geometry .
12948	The nodata value of the series .
12949	Read a raster .
12950	Resample the image .
12951	Save the image to a file .
12952	Set the projection of a SpatialReference .
12953	Warp this raster to another spatial reference .
12954	Calculate the length of a chunk .
12955	Lookup alphabet for given charset .
12956	Encode a chunk .
12957	Convert chunk to long .
12958	Get the chunk at index .
12959	Memoize a function .
12960	Return a compiled regular expression for the given filename .
12961	Normalize date format .
12962	Detects the default timezone .
12963	Convert this object to a dictionary .
12964	Activate pdb hook .
12965	Emphasis an object .
12966	Handle incoming jobs .
12967	Main worker .
12968	Run the worker pool .
12969	Sets the classification of this ProposalLineItem .
12970	Send a message .
12971	Turn on a light .
12972	Turn on a switch .
12973	Turns on a light .
12974	Turn off a device .
12975	Send messages from the queue .
12976	Send a reliable message .
12977	Create an adapter for the given object .
12978	Sets the nature of this Content .
12979	Update the dictionary of options .
12980	Reset all options to their default value .
12981	Set configuration files .
12982	Yields tuples of options and their values .
12983	Yields the default values for all options .
12984	Create a config file at index .
12985	Update a configuration dictionary .
12986	Read configuration file .
12987	Read configuration files .
12988	Return a list of option names .
12989	Return a list of sections for a command .
12990	Solve the options of a command .
12991	Add options to a parser .
12992	Build the command line parser .
12993	Parse command line arguments .
12994	Execute zsh comp command .
12995	Complete a zsh command .
12996	Return a list of command names for a bash command .
12997	Complete bash command .
12998	Start a master process .
12999	Called when a connection is made .
13000	Called when a line is received .
13001	Close the worker .
13002	Called when a job is loaded
13003	Called when a response is received .
13004	Close the job .
13005	Run a list of jobs .
13006	Close the server .
13007	Change the state .
13008	Add a result .
13009	Wait until the task has changed .
13010	Load the next job .
13011	Complete the job .
13012	Add a result .
13013	Cancel the current job .
13014	Wait until all jobs have completed .
13015	Distributes jobs to the ready callbacks .
13016	Add a new job set .
13017	Get a job .
13018	Return a job to the pool .
13019	Add a result to a job .
13020	Called when a job is done .
13021	Closes the dialog .
13022	Remove duplicates from a list .
13023	Return True if obj matches regex .
13024	Get all entries in the cache .
13025	Get AWS region .
13026	Filter a list of entries by a set of filters .
13027	Get host by name
13028	Create a new instance from a dictionary .
13029	Get the value of an attribute .
13030	Sort entries by attribute .
13031	Return a string representation of the table .
13032	Create a new instance from a boto instance .
13033	Return True if the value matches the filter .
13034	Display the public IP address .
13035	Render a list of entries .
13036	Add timestamp to event dict
13037	Setup logbook .
13038	Create a logger .
13039	Configure celery .
13040	Get a worker report
13041	Delete a job
13042	Create a switch option .
13043	Returns a dictionary of configuration options
13044	Set a configuration value from a string .
13045	Config command handler .
13046	Create zsh and bash files .
13047	Render a list of columns .
13048	Render a row .
13049	Render a table .
13050	Prepare a list of rows .
13051	Colorize text .
13052	Get a color hash from a string .
13053	Generate a random color .
13054	Get user input .
13055	Check user credentials .
13056	Check if token is valid .
13057	Decorator that ensures that the user has a valid token .
13058	Determine if a process is running .
13059	Dynamically import a module .
13060	Get self IP address
13061	Make a request .
13062	Prepare post parameters .
13063	Serve the application .
13064	Render a template .
13065	Stream a command to stdout .
13066	Streams a list of commands into a list of dictionaries .
13067	Stream commands from a list of dicts .
13068	Get network days between two dates .
13069	Get the path to a command .
13070	Build ssh command .
13071	Build scp command .
13072	Copy entries to a remote path .
13073	Copy entries from a remote path to a local path .
13074	Run a command on a list of hosts .
13075	Connect to an entry via SSH .
13076	Load a LSI profile .
13077	Create a LsiProfile object from command line arguments .
13078	Add a relationship to the document .
13079	Return a list of paths related to this package .
13080	Load relationships from a string .
13081	Add a part to the registry .
13082	Load a part .
13083	Find the value for the given name .
13084	Construct a Type instance from an element .
13085	Parse a chatl string .
13086	Build a JWT .
13087	Given an AMPAL object assign the force field for each residue .
13088	Find the maximum rad and npnp of all keys .
13089	Make a dictionary of force field parameters .
13090	Return a file - like object .
13091	Yields matching segments from zf .
13092	Copy a directory .
13093	Open a bucket .
13094	Upload a directory to S3 .
13095	Upload a file to a bucket .
13096	Upload an object to a bucket .
13097	List filenames in a directory .
13098	List directory names in a directory .
13099	Create a prefix for a directory .
13100	Delete a file .
13101	Ensure that a user is logged in .
13102	Return the loud version of the language .
13103	Delete a directory .
13104	Get the home URL .
13105	Decorate a function to silence the namespace .
13106	Breadcrumb for project home page .
13107	Breadcrumb for project home page .
13108	Given a list of AMPAL objects return the energy of each interaction .
13109	Get the internal energy of an ampal object .
13110	Returns a list of hotspots in the tree .
13111	Get a token for a given host .
13112	Upload data to LTD .
13113	Determine if we should skip travis events .
13114	Purge a surrogate key .
13115	Register a build .
13116	Confirm a build .
13117	Deep update a dictionary .
13118	Main entry point for ltdconveyor .
13119	Edit a part .
13120	List contents of a directory .
13121	Split path into drive and path components .
13122	Find a file in a directory .
13123	Get the editor for a file .
13124	Process a module node .
13125	Generate a chart .
13126	Generate HTML for a chart .
13127	Serialize a dataset into a chart .
13128	Patch json data
13129	Convert JSON data to HTML .
13130	Convert a dictionary to a pandas DataFrame
13131	write html file
13132	Return the appropriate chart class for a given chart type .
13133	Encode x and y fields .
13134	Create a GitHub user role .
13135	Infer tarball URL from app . json file .
13136	Create a heroku app .
13137	Delete an app .
13138	Decorator for iterables .
13139	Generate a random binary string .
13140	Generate a random IP address .
13141	Generate a random date .
13142	Create a new session object .
13143	Make an API request .
13144	Create a build .
13145	Check the status of a build .
13146	Generate a sequence number generator for the given prefix .
13147	Memoize a function .
13148	A decorator that ensures a function is unique .
13149	Register subcommands .
13150	Return the root argument parser .
13151	Get the description of the class .
13152	Return the help string for this command .
13153	Run the command .
13154	Encode a dataset .
13155	List athletes
13156	Get the last n activities .
13157	Request activity list .
13158	Request activity data .
13159	Return the endpoint for the given athlete .
13160	Return the URL for the activity endpoint .
13161	Make a request to GoldenCheetah .
13162	Create a build .
13163	Create a URL with authentication .
13164	Generate a random title .
13165	Generate a random person .
13166	Get a random last name .
13167	Render the chart .
13168	Set dataset .
13169	Render the chart .
13170	Check chart type .
13171	Return the URL for this request .
13172	Show the page .
13173	Save the image to a file .
13174	Make a request to the server .
13175	Return a PIL Image object .
13176	Write data to a file .
13177	Calculate the checksum of the file .
13178	Generate a random amount .
13179	Decorator for entity names .
13180	Get unprotected and protected claims .
13181	Return the signing keys as a dictionary .
13182	Unpack a metadata statement .
13183	Create a signed metadata statement .
13184	Evaluate a metadata statement .
13185	Corrects the federation usage of metadata statements .
13186	Add metadata statements to a request .
13187	Parse command line arguments .
13188	Add command line arguments to an argparse parser .
13189	Apply logging options to log files .
13190	Log a verbose message .
13191	Return the letter map for a word .
13192	Yield anagrams in a word .
13193	Convert a class name to an AMP string .
13194	Transform a timeseries to a list of points
13195	Get the last value from a timeseries
13196	Validate a page number .
13197	Get a page of items from an iterator .
13198	Change the permissions of a file or directory .
13199	Create an internal signing service .
13200	Create a signing service .
13201	Sign a request .
13202	Create a new resource .
13203	Update metadata statement .
13204	Update signature .
13205	Yields bundle contents
13206	Create a bundle .
13207	Returns a list of urls for the given asset type .
13208	Return the HTML tags for the given asset type .
13209	Return a list of HTML tags for each asset type .
13210	Make sure the url is a valid protocol .
13211	Find links in a given URL .
13212	Called when AMP server is connected .
13213	Get all modules in the project .
13214	Import service modules .
13215	Convert a date string into a tuple of lower and upper dates .
13216	Select fields from a document
13217	Apply a list of datemap fields to a document .
13218	Print cursor .
13219	Print the results of the query .
13220	Given a list of tasks and a dependency graph return a list of DiGraphs
13221	Add default dependencies for project .
13222	Add default assettypes for project .
13223	Add default sequences for project .
13224	Add userrnd shot to project .
13225	Post save handler .
13226	Create a shot for the given sequence .
13227	Create all tasks for an element
13228	Connect to a peer .
13229	Send a packet to a peer .
13230	Get a value from a section .
13231	Decorate a function with nova .
13232	Register a Cinder event handler .
13233	Decorate a function with a neutron event type .
13234	Register a function as a glance event .
13235	Decorate a function to process Swift events .
13236	Register a function as a keystone event .
13237	Decorate a function to process heat events .
13238	Add a factory to the registry .
13239	Remove a factory .
13240	Connect to a remote peer .
13241	Receive data from a connection .
13242	Disconnect a connection .
13243	Call a remote command .
13244	Called when a connection has been made .
13245	Called when a connection is made .
13246	Called when data has been received
13247	Send data to the device .
13248	Called when a connection is lost .
13249	Returns the local protocol for the given connection identifier .
13250	Called when a remote data received .
13251	Disconnect from the server .
13252	Centered a string .
13253	Print a clock on the right .
13254	Return a version number string .
13255	Identify the unit framework for a target unit .
13256	Raise TraitError if value is not in target unit .
13257	Pads data with padding .
13258	Unpads data .
13259	Sign a message .
13260	Gather metadata statements .
13261	Pretty print anagrams .
13262	Create an argument parser .
13263	Main function .
13264	Process incoming data .
13265	Called when a type is unregistered .
13266	Create a stub for a remote function .
13267	Ping a remote call .
13268	Return a regex for matching command names .
13269	Create an AmpList from a string protobuf .
13270	Return a string representation of this AmpList .
13271	Verify the metadata statement .
13272	Parse a remote response .
13273	Dump a database to a file .
13274	List databases .
13275	Get local files from a given path
13276	Syncs a folder .
13277	This decorator checks if the user has access to the given services .
13278	Logs the user in .
13279	Build a package .
13280	Create a readonly connection .
13281	Load data from file .
13282	Create a self - signed JWT .
13283	Create a signed JWT .
13284	Decorator to mark a function as a library .
13285	Given a test directory find all python files in that directory .
13286	Main function .
13287	Return the score of a letter .
13288	Calculate the score of a word .
13289	Generate wordlists .
13290	Check if a word is a valid scrabble word .
13291	Main function .
13292	Entry point for stackoverflow .
13293	Called when a string is received .
13294	Get the command and responder for the given command name .
13295	Parse the request values .
13296	Run the responder .
13297	Write a response .
13298	Called when a connection lost .
13299	Build a JSONAMPDialectReceiver .
13300	Convert jwks to a KeyJar
13301	Load a bundle from a JSON string .
13302	Process a customer event .
13303	Process a Cinder customer event .
13304	Process a customer event .
13305	Process an event .
13306	Process an event .
13307	Process a customer event .
13308	Process a heat customer event .
13309	Serve the application .
13310	Print a message to stdout .
13311	Print a message to stderr .
13312	Register a command subclass .
13313	Register a command subclass .
13314	Returns the string representation of the given value .
13315	Create a new argument from a string .
13316	Update completers dictionary .
13317	Connect to Ternya
13318	Initialize a connection to the broker .
13319	import customer s service modules
13320	Initialize the nova consumer .
13321	Initialize the cinder consumer .
13322	Initialize the neutron consumer
13323	Initialize the glance consumer .
13324	Initialize heat notification consumer
13325	Enables notification for a given Openstack component .
13326	Get song information
13327	Download a music file .
13328	Execute instructions .
13329	Load a module by name .
13330	Call a function .
13331	Dump a database to a file .
13332	Render a DITA file .
13333	Cleanly shutdown the application .
13334	Run the application .
13335	Context manager to temporarily change the working directory .
13336	Copy a directory tree .
13337	Run the debugger .
13338	Get the mtime of a file .
13339	Check if an item has changed
13340	Sync the database .
13341	Clear the cache .
13342	Scrape a feed .
13343	Download the image to disk .
13344	Check if the image has been modified
13345	Fancy tag compiler .
13346	Find the caller .
13347	Get the defining component of a peptide .
13348	Main function .
13349	Find a symbol in the stack .
13350	Returns True if the given PE is contained in the given root .
13351	Check if a peptide is global
13352	Get the name of the data type .
13353	Get the names of the attributes related to a resource .
13354	Create an enum object from an EDT .
13355	Create a bridge function .
13356	Create an external entity .
13357	Create a function that can be used as a decorator .
13358	Returns the constant value of the given cnst_syc .
13359	Create a class method for an operation .
13360	Create a derived attribute .
13361	Create a class from an object .
13362	Make a simple association .
13363	Create a linked association .
13364	Create an association .
13365	Create a domain from a bp model .
13366	Run the RPC call .
13367	Accept the connection .
13368	Reject the call .
13369	Raise an exception .
13370	Send a call to the collector .
13371	Establish a connection to a worker .
13372	Dispatch a reply .
13373	Guess the type of value .
13374	Deserializes a value into a Python object .
13375	r LPAREN expr RPAREN
13376	r LPAREN RPAREN
13377	Get a feature collection .
13378	Get many documents .
13379	Put features into the index .
13380	Delete a document .
13381	Delete all documents from the index .
13382	Delete the index .
13383	Return a generator yielding the id and fc of each hit .
13384	Return a generator that yields the ids of each hit in the database .
13385	Scan a prefix for features .
13386	Return a generator that yields the ids of all documents in a prefix .
13387	Perform a fulltext search .
13388	Get a list of fulltext scan IDs for a query .
13389	Perform a keyword scan .
13390	Get a list of the ids of all keywords in a query .
13391	Return a generator that yields the ids of each hit in the index .
13392	Return the source of a feature .
13393	Return a list of filters for a given range .
13394	Create the index .
13395	Create mappings for this index .
13396	Get index mappings for indexed features .
13397	Get the field types for this document .
13398	Construct a disjunction of terms from a query .
13399	Compute the number of bytes required to encode a feature collection .
13400	Count the number of bytes that match the given filter predicates .
13401	Return a pretty string representation of fc .
13402	Process command line options .
13403	Default formatter for error messages .
13404	Return a pretty representation of a link .
13405	Pretty - print unique identifier .
13406	Check the uniqueness of a class .
13407	Check link integrity .
13408	Check subtype integrity .
13409	Return a function that maps feature names to feature indices .
13410	Convert an integer to a string .
13411	Put items into the database .
13412	Delete all tables and indexes .
13413	Scan a key range .
13414	Scan a list of key ranges .
13415	Scan an index .
13416	Get the scan prefix for a given index .
13417	Index scan prefix and return key .
13418	Perform a scan of the index .
13419	Define an index .
13420	Put a key - value pair in the index table .
13421	Put raw value into index .
13422	Return a list of index keys for a given index name .
13423	Get an index by name .
13424	Check the name of a package .
13425	Add a direction to a string .
13426	Get the name of the type .
13427	Get the refered attribute
13428	Build the core type element .
13429	Build an enum type .
13430	Build a complexType element .
13431	Build user type element .
13432	Build a type from a string .
13433	Build a class element .
13434	Build a component element .
13435	Build an xs:schema element .
13436	Prettify an XML string .
13437	Fetch bikes .
13438	Set the positional information of a node .
13439	Decorator to track the production of a function .
13440	r Doctests
13441	r RULE_NOTEQUAL
13442	r
13443	r
13444	r RGE
13445	r RULE_EQUAL
13446	r
13447	r LSQBR
13448	r
13449	r R QMARK
13450	r LESSTHAN t
13451	r GTE ?
13452	r + b
13453	Create a queue .
13454	Delete a queue .
13455	List all queues
13456	List exchanges
13457	Purge a queue .
13458	Create an email message .
13459	Read the text cache from the server .
13460	Returns True if text is visible
13461	Main entry point .
13462	Serialize a value to a string .
13463	Serialize an association .
13464	Serialize a class .
13465	Main function .
13466	Perform a search and return a list of elements
13467	Partition a collection by a condition .
13468	Run the app .
13469	Returns the extra context to pass to the backend .
13470	Find a link between two instances .
13471	Formalize the target link .
13472	Compute the lookup key for a given instance .
13473	Compute the index key for a given instance .
13474	Returns the type of an attribute .
13475	Create a new instance .
13476	Yield all instances of this class .
13477	Define a class .
13478	Send a message .
13479	Receive messages from socket .
13480	Check for dead code .
13481	Parse emails .
13482	Returns a function that can be used as a decorator .
13483	Return a table of RPC specs for the given app .
13484	Normalize postcode .
13485	Get the next value from the stream .
13486	Accept S_SYS .
13487	accept C_C
13488	Accept a PE package .
13489	Get the brightness of the image .
13490	Match the pattern against the value .
13491	Find a match in the document .
13492	Return a QTextEdit . ExtraSelection for the given character position .
13493	Called when the cursor position has changed .
13494	Get the stack trace of the exception .
13495	Create an inputhook for Qt4 .
13496	Get a mapper by name .
13497	Add a route to the router .
13498	Add a route to the router .
13499	Add a function to the data store .
13500	Add a function to a path .
13501	Call a method .
13502	Execute the command .
13503	Called when the user presses up .
13504	Return True if the cursor is down .
13505	Get the previous history item .
13506	Get the next history entry .
13507	Handle execute reply .
13508	Check if history is locked .
13509	Get the edited history .
13510	Set history .
13511	Store the current input buffer .
13512	Closes the console .
13513	Build the Record Collection
13514	Convert a collection to a pandas DataFrame .
13515	Generate a DataFrame from a pandas DataFrame .
13516	Set attributes on this object .
13517	Subscribe to topics .
13518	Log a message .
13519	Sorts a list of lists in place .
13520	Iterates over a remote iterator .
13521	Convert a notebook to this notebook format .
13522	Get the supported platform .
13523	Get an importer for the given path .
13524	Create a StringIO instance .
13525	Parse a version string .
13526	Check if setuptools is installed .
13527	Add a distro
13528	Find plugins in plugin_env .
13529	Get the cache path for a given archive .
13530	Parse an entry point from a string .
13531	Return the parsed package info .
13532	Compute dependencies for this package .
13533	Parse filename .
13534	Collapse leading whitespace .
13535	Hides the widget .
13536	Reimplement Qt method
13537	Returns the current text cursor .
13538	Updates the current item .
13539	Register admin site .
13540	Return a list of NT Partitions
13541	Compute system CPU times .
13542	Get a list of system CPU times .
13543	Read from stdin without blocking .
13544	Read data from stdin .
13545	Update tab bar visibility .
13546	Create a tab with the current kernel .
13547	Add a tab with frontend .
13548	Add an action to the menu .
13549	Make dynamic magic function .
13550	Populate self . all_magic_menu .
13551	Dialog close event handler
13552	Generate a random password .
13553	Return True if the given hashed password matches the given passphrase .
13554	Create an editable boolean cell .
13555	Return an indented short title for an item .
13556	Collects the ajax_editable_boolean values from the list_display .
13557	Toggle a boolean .
13558	Check if the user has permission to change this object .
13559	Check if the user has permission to delete this object .
13560	Add n children to G .
13561	Create a bintree graph .
13562	Submit jobs to the graph .
13563	Check that the tree is valid .
13564	Make color table .
13565	Return a copy of this color scheme .
13566	Add a new color scheme .
13567	Set the active scheme .
13568	Return the path to the lib directory .
13569	Handle iopub messages .
13570	Handle stdin request .
13571	Wait for kernel to be running .
13572	Set the style .
13573	Get the format for a given token .
13574	Get the format from the document .
13575	Get a QTextCharFormat object from a style .
13576	Find a command in a list of paths .
13577	Normalize path .
13578	Raise DistutilsSetupError if value is not a valid package namespace .
13579	Check that entry points are valid .
13580	Return True if the last line is blank .
13581	Return True if the source contains the last two blank lines .
13582	Transform an assign system line .
13583	Transform an assignment line to a magic string .
13584	Transform classic prompt .
13585	Transform an IPython prompt .
13586	Push a list of lines onto the stack .
13587	Determine if we should accept more input .
13588	Find indent in text
13589	Store lines in the buffer .
13590	Reset the source to its raw state .
13591	Handle cell magic .
13592	Append a line to the buffer .
13593	Transform a cell .
13594	Push a list of lines onto the stack .
13595	Initialize observers .
13596	Post a notification .
13597	Get the set of observers for a notification .
13598	Add an observer to a notification type .
13599	Create a new background job .
13600	Update the status of all jobs .
13601	Print a group report .
13602	Flush a group of jobs .
13603	Update the status of the job .
13604	Report the status of the task .
13605	Initialize the background job .
13606	Insert a value at a given index .
13607	Return a copy of this directory .
13608	Declare a special variable .
13609	Declare a list variable .
13610	Declare a special set variable .
13611	Set the working directory .
13612	Move to a random state .
13613	Calculate the energy of a route .
13614	Return the default values for the given keys .
13615	Check that the table exists .
13616	Convert a list into a dictionary .
13617	Render a check expression .
13618	Print a warning message .
13619	Parse config file .
13620	Create a table from a list of rows .
13621	Create a link tag .
13622	Return a script tag for a javascript file .
13623	Generate a css file
13624	Create an image tag .
13625	Subtract two numbers .
13626	Multiply two numbers .
13627	Divide two numbers .
13628	Modulo function .
13629	Get model verbose name .
13630	Split a line of user input .
13631	Add options to the parser .
13632	Add a builtin .
13633	Remove a builtin .
13634	Deactivates all builtins .
13635	Find the base name of a requirement .
13636	Yield links with explicit rel links .
13637	Convert a string to a list of filenames .
13638	Run coverage script .
13639	Add a callback action .
13640	Append an action .
13641	Parse command - line arguments .
13642	Print a help message .
13643	Handle help .
13644	Check command line arguments .
13645	Execute a Python script .
13646	Print debug information .
13647	Unserialize an object .
13648	Set the display hook .
13649	Log uncaught exceptions .
13650	Return True if url is a valid TCP or IPC URL .
13651	Validate a URL .
13652	Validate a url container .
13653	Pull a list of keys from globals .
13654	Select n random ports .
13655	Decorate a function as a remote function .
13656	Create a parallel function .
13657	Map a sequence of sequences .
13658	Get the tail of the readline history .
13659	Set auto - indent mode .
13660	Initialize logstart
13661	Save sys module state .
13662	Restore the original sys module state .
13663	Register a function that will be called after the query is executed .
13664	Create a new main module .
13665	Cache main namespace .
13666	Initialize the user namespace .
13667	Return a list of all namespace references .
13668	Reset the execution history .
13669	Delete a variable
13670	Remove all keys that match the given regex .
13671	Push variables to the user namespace .
13672	Find an object by name .
13673	Return the info for a property .
13674	Find an object by name .
13675	Inspect an object .
13676	Initialize the history manager .
13677	Show traceback .
13678	Show the traceback .
13679	Show traceback .
13680	Show a syntax error .
13681	Add indentation to the current line .
13682	Completes the text .
13683	Set a custom completer .
13684	Set the namespace and global namespace of the current frame .
13685	Run a line magic function .
13686	Find a magic by name .
13687	Define a macro .
13688	Execute a shell command .
13689	Auto rewrite input .
13690	Get a dictionary of user variables .
13691	Evaluate the user - defined expressions .
13692	Evaluate an expression .
13693	Execute a file in the current directory .
13694	Run cached cell magic .
13695	Run a cell .
13696	Run a list of ast nodes .
13697	Activate pylab .
13698	Expand variables in a command .
13699	Create a temporary file .
13700	Extracts input lines from the history manager .
13701	Find user code .
13702	Clean up all temporary files .
13703	Publish a message to a sender .
13704	Send a message .
13705	Decorator for skipping test functions .
13706	Decorator to mark a function as known failure .
13707	Decorator to mark a function as deprecated .
13708	List all profiles in path
13709	List all bundled profiles
13710	Find a distribution by key .
13711	Run a command .
13712	Determine the path to a file .
13713	Return the next line from the file .
13714	Send a string to the child .
13715	Send CTRL - C .
13716	Prepare regex pattern .
13717	Waits for a pattern to match .
13718	Wait for a match .
13719	Prepare regex pattern .
13720	Search for a string in the buffer .
13721	Search the buffer for a match .
13722	Create a listener for the progress bar .
13723	Unpack a directory .
13724	Emit a message .
13725	Return the last error
13726	Check the output of a command .
13727	Find the source for a file .
13728	Return a sorted list of arcs that have been executed .
13729	Return a sorted list of possible arcs that are missing .
13730	List of arcs that are unpredicted .
13731	Return a list of branch lines .
13732	The total number of branches .
13733	Return a mapping of branch arcs to branch lines
13734	Return a dictionary of branch statistics .
13735	Set the precision .
13736	Calculate the percentage of covered statements .
13737	Return a string representation of the PC covered .
13738	Highlight text .
13739	Highlight a string .
13740	Highlight words in string .
13741	Run the given function .
13742	Unquote quotes .
13743	Indent a string .
13744	Return a marquee string .
13745	Format a screen string .
13746	Dedents text .
13747	Wrap paragraphs .
13748	Find the optimal separator width for a list of rows .
13749	Get a value from a list .
13750	Compute the item matrix for a list of items .
13751	Return a SList with the given fields .
13752	Build kernel command line arguments .
13753	Setup SSH tunnels
13754	Pretty print an object .
13755	Pretty print object .
13756	Get the MRO of an object .
13757	Pretty print an object .
13758	Return a function that prints a sequence of objects .
13759	Create a pprinter for a dictionary .
13760	Pretty print super class .
13761	Pretty print a re pattern .
13762	Pretty print a Python object .
13763	Pretty print a function .
13764	Pretty print exceptions .
13765	Return the old function for the given type .
13766	Given a type module and a type name return a deferred type printer function .
13767	Write an object to the output .
13768	Write a breakable line .
13769	End a group .
13770	Flush the output buffer .
13771	Pretty print an object .
13772	Return a ColorSchemeTable with the exception colors
13773	Write row into ods
13774	Get text from the clipboard .
13775	Get OSX clipboard text .
13776	Get text from the clipboard .
13777	Create a temporary directory for building .
13778	Rekey a dictionary .
13779	Extract dates from an object .
13780	Squash dates in an object .
13781	Return a JSON - serializable date .
13782	Convert a python object to JSON .
13783	Make sure we can write to target dir .
13784	Write a script to the install directory .
13785	Sleep for t seconds .
13786	Create a new argument parser .
13787	Convert pyx sources to c
13788	Main function .
13789	Build a PackageFinder instance .
13790	Change the log level .
13791	Create a default logger .
13792	Check if the flags have changed .
13793	Print alias help .
13794	Print help for all flags .
13795	Print subcommands .
13796	Print help .
13797	Print examples .
13798	Update the current config with the given config .
13799	Initialize a subcommand .
13800	Flattens the flags of this class .
13801	Parse command line arguments .
13802	Load a config file .
13803	Generate the configuration file .
13804	Downsample an array by k elements .
13805	Format info .
13806	Write a message to stdout .
13807	Called when a config has changed .
13808	Return a help string for a class .
13809	Return help text for a trait .
13810	Return the class configuration section .
13811	Clear the instance of this class .
13812	Return an instance of this class .
13813	Format a failure .
13814	Called when a crash occurs .
13815	Flushes the channel .
13816	Emits self . started_channels signal .
13817	Read data from a file .
13818	Read from a file and return it .
13819	Process a subprocess .
13820	Split a string into tokens .
13821	Compress a dhist
13822	Register the magics class .
13823	Record a magic function .
13824	Decorator to mark a method as magic .
13825	Decorator for magic functions .
13826	Return a dictionary of lsmagic documentation
13827	Register a class of magic objects .
13828	Register a function .
13829	Format a string for LaTeX .
13830	Parse command line options .
13831	Add a default option to the options table .
13832	Display a GUI reference .
13833	Create a task with a callable .
13834	Get information about a task .
13835	Return the callable object for this task .
13836	Calculate the next run .
13837	Submit this task .
13838	Run the task .
13839	Run asap .
13840	Run a task for a given number of iterations .
13841	Run the given callable once .
13842	Find the actual controller key file .
13843	Binds an IPython kernel .
13844	Read steps from a file and execute them .
13845	Create an interrupt event .
13846	Listen for multiple objects .
13847	Filter a namespace .
13848	List all objects in a namespace .
13849	Raise ValueError if options are mutually exclusive .
13850	If matplotlib was manually set to non - interactive mode this function should be a no - op .
13851	Send all figures to the display .
13852	Send a figure .
13853	Load an extension .
13854	Unload an extension .
13855	Generate random ports .
13856	Initialize the notebook web application .
13857	Handle SIGINT .
13858	Confirm user to exit
13859	Shutdown all kernels
13860	Calculates the price options for each day .
13861	Replace multiple occurrences of a string in a dictionary .
13862	Render the command .
13863	Build the kernel launch command .
13864	Create a zip file .
13865	Fix version in metadata . txt
13866	Return True if obj is a mappable type .
13867	Get a partition of a sequence .
13868	Monkey patch pexpect . spawn .
13869	Run a file .
13870	Run a source script .
13871	Report coverage data .
13872	Create the XML file .
13873	Download a file from supercomputing . org .
13874	Given a list of frequencies reduce them to a list of frequencies
13875	Compute n - digit frequencies
13876	Convert text file to digits .
13877	Calculate one - digit frequencies
13878	Calculate the frequency of a sequence of digits .
13879	Calculate the n - digit frequencies
13880	Plot two digit frequencies
13881	Plot one digit frequency plot .
13882	Print debug expression .
13883	Reverse a view .
13884	Return True if prefix is private .
13885	Create a DocFileSuite from a list of paths .
13886	Debug a source code .
13887	Run a python script in debug mode .
13888	Debug a module .
13889	Return a dictionary of all files in a hash
13890	Compress all files under hashroot .
13891	Return a list of keys matching globpat .
13892	Allow or deny a record .
13893	Return True if the record matches any of the matchers .
13894	Format an error .
13895	Embed an interactive shell .
13896	Main loop .
13897	Create new csv writers .
13898	Prepare the directories for translation .
13899	Write PO entries .
13900	Write the header to a file .
13901	Subscribe to a user .
13902	Initialize the command line parser .
13903	Run a Python module .
13904	Run a Python file .
13905	Create a code object from a Python source file .
13906	Make a code object from a . pyc file .
13907	Return an HTML table for the given item matrix .
13908	Set the current value .
13909	Cancel completion .
13910	Select a row and column .
13911	Move the cursor up .
13912	Move the cursor down .
13913	Move to the left .
13914	Move the cursor to the right .
13915	Update the list .
13916	Return frequency of words in text .
13917	Print word frequency .
13918	Return a string representation of this element .
13919	Write to a file .
13920	Validate a pin .
13921	Send a shared pin .
13922	Delete a shared pin .
13923	Send a pin to a user .
13924	Delete a user s pin .
13925	Subscribe to a topic .
13926	List user s subscriptions .
13927	Monitor a function .
13928	Begins a progress bar .
13929	Start a task .
13930	A context manager for a subtask .
13931	Update the progressbar .
13932	Create a new progress monitor .
13933	Update the progress bar .
13934	Page a string .
13935	Move package to new location .
13936	Load pyconfig files .
13937	Load configuration file .
13938	Load a config file as a dict .
13939	Load flag from config .
13940	Decodes command line arguments .
13941	Load configuration from argv .
13942	Load configuration from command line .
13943	Parse command - line arguments .
13944	Convert the namespace to a Config object
13945	Find a module .
13946	Add a callback to the stop_callbacks list .
13947	Notify that the process started .
13948	Notify that the process has stopped .
13949	Interrupt the process and then kill it .
13950	Return a list of arguments to pass to mpi_cmd .
13951	Start the MPILauncher .
13952	Send local file to remote
13953	Fetch a file from a remote server .
13954	Return the number of registered engines .
13955	Start n engines .
13956	Start a job .
13957	Return default context .
13958	Parse job id from output .
13959	write batch script
13960	Start a batch script .
13961	Make the context menu .
13962	Appends a JPG file .
13963	Appends a PNG file .
13964	Appends a SVG element .
13965	Add an image to the document .
13966	Copy image to clipboard
13967	Get an image from the document .
13968	Insert an image .
13969	Insert an SVG document .
13970	Save an image .
13971	Called when the process has changed .
13972	Initialize the environment .
13973	Auto rewrite input .
13974	Ask the user to exit .
13975	Set the next input .
13976	Read configuration file .
13977	Get a list of values in a section .
13978	Get a list of lines in a section .
13979	Read an environment variable from the command line .
13980	Set attributes from keyword arguments .
13981	Load configuration from file .
13982	Set attribute from config option .
13983	Expand a user path .
13984	Set the delimiters to use .
13985	Split a line by the delimiter .
13986	Return a list of all global matches .
13987	Return a list of attributes that match text .
13988	Called when the splitter has changed .
13989	Return a list of file matches .
13990	Find aliases that match text .
13991	Return a list of matches for the given text .
13992	Return the default arguments for an object .
13993	Completes the text .
13994	Called when user presses Ctrl + C .
13995	Return True if the record matches one of the tests .
13996	Return a list of records that match check .
13997	Extract subdict from rec
13998	Return True if we should not print output .
13999	Write the output prompt .
14000	Write format data to stdout .
14001	Log the output of the command .
14002	Raise an exception if the object is freezed .
14003	Convert a string to a timestamp .
14004	Called when an event loop has changed .
14005	Dispatch a control message .
14006	Dispatches a message to all handlers .
14007	Start the shell .
14008	Handle one iteration of the shell .
14009	Publish a pyin message .
14010	Abort a request .
14011	Send a clear_reply to the server .
14012	Convert a topic to a string .
14013	Send shutdown message
14014	Add modules to the stack .
14015	Remove sys modules from the stack .
14016	Return the absolute path to a directory .
14017	Return True if name is a file .
14018	Check if obj is a class
14019	Check if path is a package .
14020	Return the package name of a file .
14021	Convert a label to a human readable label .
14022	Return the last key matching regex .
14023	Given a function and a module return a function that takes no arguments .
14024	Create a new class with the given module .
14025	Get the CPU times of the system .
14026	Get the process s cmdline .
14027	Return a list of open file tuples .
14028	Get a list of connection objects for this process .
14029	Check if user has group .
14030	Resolve a class .
14031	Calculate usage percentage .
14032	Memoize a function .
14033	Decorator to mark a function as deprecated .
14034	Login to Google Docs .
14035	Get GDocs key .
14036	Ensure the temp path exists .
14037	Clear temporary files .
14038	Uploads a file to Google Docs .
14039	Synchronize local and GDocs data .
14040	Download translations from GDocs .
14041	Upload po files to ODS .
14042	Clear the docs .
14043	Connects to QT console .
14044	Check URL accessibility .
14045	Check if url has contents .
14046	Get the response code from a URL .
14047	Compare the content type of a URL .
14048	Return True if the response code matches the given code .
14049	Validate data .
14050	Clear output .
14051	Find the absolute path to a command .
14052	Create a list of CodeUnits from a list of morfs .
14053	Return the name of the root directory .
14054	Return the source file .
14055	Return True if the file should be Python .
14056	Return the total number of seconds since epoch .
14057	Get the result .
14058	Wait for all outputs to complete .
14059	Get a dict of the results from the engine .
14060	Abort this message .
14061	Get elapsed time in seconds .
14062	Wait for tasks to finish .
14063	Publish a displaypub event .
14064	Wait for all outputs to be ready .
14065	Wait for results to arrive .
14066	Return absolute path to file .
14067	Given a list of patterns return a list of absolute file paths .
14068	Return the separator of a string .
14069	Find python files in a directory .
14070	Return the relative filename of filename .
14071	Return the canonical filename for filename .
14072	Get data from a zip file .
14073	Return True if the given path matches this directory .
14074	Return True if fpath matches one of the patterns in self . pats .
14075	Map a path to its canonical form .
14076	Start the event loop .
14077	Create a wx event loop .
14078	Loop on Tkinter .
14079	Start the gtk loop .
14080	Run a cocoa loop .
14081	Enable the given GUI .
14082	Compute the GOE of a point .
14083	Compute the absolute difference between eigenvectors of a matrix .
14084	Compute the differences in the ensemble .
14085	Initialize the step .
14086	Parse a YAML file .
14087	Parse a step configuration .
14088	Initialize the crash handler .
14089	Load config file .
14090	Initialize profile directory .
14091	Generate a default config file .
14092	Write the file to disk .
14093	Erases the file .
14094	Return a dictionary of line names and lists of lists of keys .
14095	Return a dictionary of arc names and sorted keys .
14096	Write the data to a file .
14097	Read a file .
14098	Read data from a file .
14099	Read a file .
14100	Combine parallel data .
14101	Add line data to the file .
14102	Add arc data .
14103	Add lines and arcs to hash .
14104	Return a summary of the lines .
14105	Get pasted lines .
14106	Main loop .
14107	Replace the readline history with a multiline one .
14108	Prompt the user for input .
14109	Edit the last syntax error .
14110	Check if we should recompile
14111	Prompts the user to exit .
14112	Get url and revision from VCS url .
14113	Create a new frontend master .
14114	Initialize the colors for the widget .
14115	Return a tuple containing the identity identity url pub_url and location .
14116	convert RObject to numpy array
14117	Find the source code for an object .
14118	Set colors of the active scheme
14119	Toggle the color scheme .
14120	Format a traceback as text .
14121	Format a structured traceback .
14122	Format list .
14123	Format exception only .
14124	Show exception only .
14125	Start the debugger .
14126	Set the mode to use .
14127	Decorator that ensures that the user is a member of a group .
14128	Ensure that fromlist is a list .
14129	Add a line to the code .
14130	Add a new section .
14131	Get a function by name .
14132	Return the code for the given expression .
14133	Render the template .
14134	Do dots .
14135	Render a template .
14136	Return a dictionary of default formatters .
14137	Return the old function for a given type .
14138	Get a deferred print function for a given type and name .
14139	Called when precision has changed
14140	Return a list of user config files .
14141	Configure command line options .
14142	Configure logging .
14143	Set the working directory .
14144	Dumb page .
14145	Display a string on screen .
14146	Page a file .
14147	Get pager command .
14148	Get pager start string
14149	Print a string snipped .
14150	Pretty print a basic object .
14151	Print a string in PNG format .
14152	Print a string to a PNG file .
14153	Return True if o can be printed as LaTeX .
14154	Print a LaTeX string .
14155	Add options to the plugin .
14156	Validate a list of strings .
14157	Validate that all keys in a dict are strings .
14158	Run the IOLoop .
14159	Handle incoming messages .
14160	Execute a code .
14161	Send a complete request .
14162	Get information about an object .
14163	Send a history request .
14164	Send a shutdown request to the kernel .
14165	Flushes the queue .
14166	Send an input message .
14167	Start channels .
14168	Stop all channels .
14169	True if channels are running .
14170	Load configuration from file .
14171	Write connection file .
14172	Start a kernel .
14173	Shutdown the kernel .
14174	Restart the kernel .
14175	Kills the running kernel .
14176	Interrupt the current kernel .
14177	Send a signal to the kernel .
14178	Check if the kernel is running .
14179	The shell channel .
14180	The sub - channel .
14181	The HIB channel .
14182	Bind a kernel to the IPython notebook .
14183	Log a debug message .
14184	Get the list of registered extension classes .
14185	Pre - step execution .
14186	Execute the post - step hook .
14187	Execute all extensions .
14188	Walk the egg directory .
14189	Scan a module .
14190	Launch a new IPController instance .
14191	Save connection dictionary to file .
14192	Load config from JSON
14193	Load secondary config .
14194	Execute a cell in parallel .
14195	Enable autopx
14196	Disable autopx .
14197	Run a cell .
14198	Run the heartbeat task if there is one .
14199	Run a task .
14200	Remove a task .
14201	Patch protocol for agent .
14202	Patch an attribute if it is missing .
14203	Accept a connection .
14204	Reject the connection .
14205	Get a proxy agent .
14206	Called when a form is valid
14207	Delete the object .
14208	Make sure the user is logged in .
14209	Report a coverage report .
14210	Check all modules .
14211	Open the specified file .
14212	Fix error editor .
14213	Get the clipboard contents .
14214	Add a function to the chain .
14215	Get metadata for a module .
14216	Configure the logger .
14217	Import an item from a package .
14218	Try passwordless SSH .
14219	Try passwordless openssh .
14220	Try passwordless paramiko .
14221	Establish a tunnel connection to a remote server .
14222	Open a tunnel to a remote host .
14223	Stop scheduling tasks .
14224	Unwrap an exception .
14225	Register an engine
14226	Unregisters an engine .
14227	Handle an execute reply .
14228	Send notifications to the client .
14229	Send all results to the client .
14230	Send control messages to the client .
14231	Flush ignored control messages .
14232	Process iopub messages .
14233	Spin for a given interval .
14234	Stop spinning .
14235	Spin the hub .
14236	Wait for jobs to complete .
14237	Send an apply request to the client .
14238	Send an execute request to the server .
14239	Get a result from the hub .
14240	Get the status of a queue .
14241	Purge a set of results .
14242	Get the history of a hub .
14243	Perform a database query .
14244	Return a set of opcodes for the given names .
14245	Get the byte parser .
14246	Return a set of lines matching the given regexes .
14247	Parse the text .
14248	Return the first line of the given line .
14249	Find the first line in a list of lines .
14250	Parse Python source .
14251	Return a sorted list of arcs .
14252	Return a dictionary mapping line numbers to their exit counts .
14253	Return a list of child ByteParser objects .
14254	Yields bytes and line numbers .
14255	Find all lines in this code .
14256	Return a string representation of a block stack .
14257	Split the code into chunks .
14258	Check that all chunks are valid .
14259	Yield the arcs of the trace function .
14260	Return a list of all chunks .
14261	Return a set of all arcs in this parser .
14262	Add options to parser .
14263	Start coverage .
14264	Report module coverage .
14265	Determine if a file should be included .
14266	Interpret a source distribution name .
14267	Open a URL with authentication .
14268	Fetch a distribution .
14269	Get the parent module of obj .
14270	The root topic of the engine .
14271	Render a template .
14272	Configure the command .
14273	Format an error .
14274	Split data by num elements .
14275	Convert a notebook to this notebook format .
14276	Convert hex color to RGB .
14277	Get colors for a given stylename .
14278	Return a QFont object for the given family .
14279	Handle execute reply .
14280	Handle a history reply .
14281	Handle a pyout message .
14282	Handle display data .
14283	Called when the widget is started .
14284	Execute a file .
14285	Process an execute error message .
14286	Process an execute payload .
14287	Set the default color scheme .
14288	Edit a file .
14289	Make an in prompt .
14290	Make a continuation prompt .
14291	Called when the style sheet has changed .
14292	Called when the syntax style has changed .
14293	Handle async response .
14294	Signs the given url parameters .
14295	Transform data into a dict .
14296	Virtual memory information .
14297	Get system CPU times .
14298	Return a list of process UIDs
14299	Get the gids of the process .
14300	Return a list of process threads
14301	Return a list of open files for this process .
14302	Get the commit hash of a package .
14303	Return information about a package .
14304	Get system information .
14305	Return the number of CPU cores on the system .
14306	Return the number of CPUs .
14307	Get the next set of results .
14308	Fetch one row .
14309	Fetch many rows .
14310	Fetch all rows .
14311	Connect to multiple peers .
14312	Read a notebook from a JSON string .
14313	Read a notebook from a string .
14314	Reads a text file .
14315	Write nb to file .
14316	Write nb to fp .
14317	Convert IPynb files to metadata
14318	Load a value from a dictionary .
14319	Return True if the given name matches this filter .
14320	Determine if the given class is wanted .
14321	Determine if a directory should be included .
14322	Determine if a file should be loaded .
14323	Determine if a function is wanted .
14324	Determine if a method should be called .
14325	Determine if a module is wanted .
14326	Read lines from a file .
14327	List commands .
14328	Print a list of lines .
14329	Pdef
14330	Calculate the conversion factor between two currencies
14331	Convert a currency from one currency to another .
14332	Compute the return value for a given rate .
14333	Get the encoding of a stream .
14334	Return the encoding to use when reading from stdin .
14335	Write connection file .
14336	Initialize the heartbeat channel .
14337	Log connection information .
14338	Initialize the session .
14339	Initialize IO streams .
14340	Initialize the kernel .
14341	Initialize the connector .
14342	Register with controller .
14343	Convert HTML to text .
14344	Convert Markdown to plain text .
14345	Convert domain to FQDN .
14346	Add options to the parser .
14347	Configure NoseExclude .
14348	Check if a directory should be excluded
14349	Return True if the extension links to a dynamic library .
14350	Calls each function in the list .
14351	Call each function in reversed order .
14352	Append a function to the list .
14353	Insert a function into the list .
14354	Format the usage string .
14355	Initialize the application .
14356	Create a pid file for this server .
14357	Remove the pid file .
14358	Get pid from pid file .
14359	Construct a parser for a magic function .
14360	Return the real name of a magic function .
14361	Highlight a block of text .
14362	Rehighlights the given block .
14363	Set the format .
14364	Copies the current selection to the clipboard .
14365	Execute a shell command .
14366	Called when the prompt has finished .
14367	Return True if a tab is pressed .
14368	Make a context menu .
14369	Filter a console key press event .
14370	Insert a continuation prompt .
14371	Handle a complete reply .
14372	Set a callback that will be called when a command is executed .
14373	Handle the exec callback .
14374	Handle execute reply .
14375	Handle input request .
14376	Handle kernel died .
14377	Handle object info reply .
14378	Handle a pyout message .
14379	Handle stream messages .
14380	Handle a shutdown reply .
14381	Execute a file .
14382	Interrupt the kernel process .
14383	Reset the interpreter .
14384	Restarts the kernel .
14385	Show a call tip .
14386	Send the completion request to the kernel .
14387	Process an execute error message .
14388	Process an execute message .
14389	Called when the document contents change .
14390	Add a plugin .
14391	Execute all plugins in the chain .
14392	Yields the results of each plugin .
14393	Execute all plugins and return the result .
14394	Configure plugins .
14395	Load plugins .
14396	Load all builtin plugins .
14397	Convert latex to png .
14398	Convert latex to HTML .
14399	Convert a string to an image .
14400	Check if the requirements file exists .
14401	Return a generator that yields Process instances .
14402	Calculate CPU usage .
14403	Return a dictionary representation of this object .
14404	Get the process name .
14405	Get the executable for this process .
14406	Get the children of this process .
14407	Get CPU percent
14408	Returns the percentage of memory available on the system .
14409	Get a list of memory maps .
14410	Check if the process is running .
14411	Suspend the current process .
14412	Resume the current process .
14413	Kill this process .
14414	Wait for the process to finish .
14415	Wire up the kernel .
14416	Trap main and main_quit from gtk
14417	Check if an IP is shadowed by another .
14418	Initialize all registered transformers .
14419	Register a transformer .
14420	Unregister a transformer .
14421	Initialize checkers .
14422	Register a checker .
14423	Unregister a checker .
14424	Initialize handlers .
14425	Register a handler .
14426	Unregister a handler .
14427	Prefilter line info .
14428	Find handler for line_info .
14429	Transform a line .
14430	Prefilter a line .
14431	Prefilter lines .
14432	Check if the given line_info is an autocall .
14433	Return the handler for the given line_info .
14434	Return the handler for the given line .
14435	Check if line_info is an alias .
14436	Process a line of text .
14437	Process a line of code .
14438	Handle the given line .
14439	Handle the magic command .
14440	Handle a single line of input .
14441	Handle a command line .
14442	Override Qt method
14443	Reimplement Qt method
14444	Paints the widget .
14445	Show call info .
14446	Show the call tip .
14447	Called when the cursor position has changed .
14448	Create a proxied attribute .
14449	Canonicalize path .
14450	Validate an instance against a schema .
14451	Return a copy of the MaskedDict .
14452	Return True if the virtualenv is running under no - global .
14453	Compute the frequency of each word in a list of targets .
14454	Decorator for views .
14455	Set the default aliases for the kernel .
14456	Soft define an alias .
14457	Define an alias .
14458	Validate that an alias exists .
14459	Call an alias
14460	Transform an alias .
14461	Expand aliases .
14462	Autohelp directive .
14463	Reset all attributes to default values
14464	Split a string by ANSI or special characters .
14465	Get a color from the color map .
14466	Returns a QTextCharFormat object for this widget .
14467	Generate a JWT .
14468	Decorator Wrapper
14469	Clean expired JWTs .
14470	Check if a token is already used
14471	Validate a JWT .
14472	Acquire a semaphore .
14473	Return the common prefix of items .
14474	Filter event .
14475	Returns the size hint for this widget .
14476	True if the cursor can be cut .
14477	True if the user can paste the clipboard .
14478	Clear the screen .
14479	Cut the widget .
14480	Execute the command .
14481	Get the input buffer .
14482	Set the input buffer .
14483	Set font .
14484	Paste the text into the clipboard .
14485	Print the dialog .
14486	Prompt to the top of the screen .
14487	Reset font .
14488	Appends input to the editor .
14489	Appends an HTML string to the document .
14490	Appends an HTML fragment containing plain text .
14491	Appends a plain text message .
14492	Clears the temporary buffer .
14493	Complete with items .
14494	Fill the temporary buffer .
14495	Checks if a key is down .
14496	Create the underlying control .
14497	Create the page control .
14498	Filter a page key event .
14499	Get the block s plain text .
14500	Get the end cursor .
14501	Return the column number of the cursor .
14502	Get the line from the input buffer .
14503	Get the cursor for the prompt .
14504	Get selection cursor .
14505	Insert a continuation prompt .
14506	Insert HTML into the editor .
14507	Insert html into the editor .
14508	Insert a plain text string .
14509	Keep the cursor in the buffer .
14510	Quit the keyboard .
14511	Page text .
14512	Called when a prompt is started .
14513	Read a line from the widget .
14514	Set the continuation prompt .
14515	Set the top cursor .
14516	Show a prompt .
14517	Adjust scrollbars .
14518	Main function .
14519	Copies a config file to the current location .
14520	Create a profile directory .
14521	Find a profile directory by name .
14522	Convert a comparison function to a key .
14523	Read a file .
14524	Read multiple lines from stdin .
14525	Create a temporary file .
14526	Close the stream .
14527	Write data to file .
14528	Add a new heartbeat handler .
14529	Add a new heart failure handler .
14530	Handle a pong message .
14531	Return a list of batches from a sequence .
14532	Convert a path to a filename .
14533	Walk a directory .
14534	Display a number of loops .
14535	Calculate the time unit for a given elapsed time .
14536	Extract wininst configuration from a dist file .
14537	Uncaches a zipdir .
14538	Quote a string .
14539	Check for conflicts .
14540	Set fetcher options for easy_install .
14541	Create the home directory
14542	Determine if a file is an archive file .
14543	Create a proxy for an object .
14544	Create a readonly proxy object .
14545	Create a new heading cell .
14546	Create a new notebook node .
14547	Create a new notebook node .
14548	Check if path is writable .
14549	Unquote a filename .
14550	Return the filename of a Python file .
14551	Find a file in a list of paths .
14552	Get the home directory .
14553	Get the XDG config directory
14554	Get the IPython installation directory .
14555	Get the directory where IPython is installed .
14556	Get the path to an IPython module .
14557	Check if target is outdated
14558	Return the hash of a file .
14559	Check for old IPython configuration files .
14560	Update suggestions dictionary for an object .
14561	Returns a list of suggestions for the given object .
14562	Get suggestions for an object .
14563	Return the relative path to this directory .
14564	Glob a directory .
14565	Return a list of lines from the file .
14566	Read the MD5 hash of the file .
14567	Begin profiling .
14568	Print a profiler report .
14569	Cleans up the stats file .
14570	Handle the command .
14571	Enable a wx application .
14572	Disable event loop .
14573	Disable Qt4 .
14574	Enable interactive mode .
14575	Enables the current GUI .
14576	Enable Pyglet .
14577	Save a wave function .
14578	Initialize the database .
14579	Run a SQL query .
14580	Get session info .
14581	Get the last n lines .
14582	Get a range by string .
14583	Get the name of the history file .
14584	Set the name of a session .
14585	Reset the session to its initial state .
14586	Get a range session .
14587	Store the output of a line .
14588	Write the cache to the database .
14589	Stop the simulation .
14590	Get the number of CPUs on the system .
14591	Get system CPU times .
14592	Return a list of disk partitions
14593	Return a list of process IDs
14594	Return a nicely formatted pair .
14595	Format a list of statements and lines .
14596	Return a short version of the stack trace .
14597	Decorator that checks the cache .
14598	Join a list of regexes .
14599	Remove a file .
14600	Update the MD5 hash of v .
14601	Update cluster profiles
14602	Start a cluster .
14603	Stop a cluster .
14604	Find a command in the PATH .
14605	Process a system command .
14606	Find code units in the coverage data .
14607	Calls report_fn for each file in morfs .
14608	Raises exceptions .
14609	Set the current trace .
14610	Decorate a function with a time limit .
14611	Load IPython extensions
14612	Run the shell code .
14613	Run commands from IPythonApp . exec_lines
14614	Run startup files .
14615	Run all the exec_files
14616	Run code given at command line .
14617	Run the module .
14618	Decorator to add a method that will be called for the given types .
14619	Return the filename of a static file .
14620	Read data from a file .
14621	Escape special characters .
14622	Report the coverage data .
14623	Make local static report files .
14624	Write html to file .
14625	Calculate the hash of a file .
14626	Write the index . html file .
14627	Read coverage data from a directory .
14628	Write coverage status to disk .
14629	Sorts two lists .
14630	Get a slice of a sequence .
14631	Split a sequence into chunks of size size .
14632	Read configuration file .
14633	Read MANIFEST . in .
14634	Convert a glob pattern to a regular expression .
14635	Return True if filename matches any of patterns .
14636	Return a list of versioned files .
14637	Start a kernel .
14638	Shutdown a kernel .
14639	Kills a kernel .
14640	Get a kernel by id .
14641	Get kernel ports .
14642	Get the notebook for a given kernel .
14643	Start a kernel .
14644	Shutdown a kernel .
14645	Interrupt a kernel .
14646	Restart a kernel .
14647	Create an iopub stream .
14648	Create a shell stream for a kernel .
14649	Create a new hb stream .
14650	Reset instance attributes to their default values .
14651	Export HTML to a file .
14652	Export an XHTML file .
14653	Ensure image tag is utf8 .
14654	Fix an HTML string .
14655	Export the document .
14656	Try to get a unique instance of a class .
14657	Takes a list of tokenized terms and a list of search fields and returns a query that includes all of them .
14658	Get text query .
14659	Get a date greater query .
14660	Build a date less query .
14661	Get null or blank query .
14662	Set case insensitive fields .
14663	Add options to the parser .
14664	Validate a method s attribute .
14665	Return True if the given method should be called .
14666	Rotate the ring .
14667	Patch pyzmq
14668	Create a parser from a WSDL schema .
14669	Get websocket URL .
14670	Reserializes a list of messages .
14671	Inject cookies into the request .
14672	Start heartbeats .
14673	Start the heartbeat timer .
14674	Stop the heartbeat .
14675	Load data from file
14676	Get index .
14677	Seek to the given block index .
14678	Edit a block .
14679	Show the block at the given index .
14680	Show all blocks .
14681	Run a series of methods on a collection .
14682	Batch a collection of cars .
14683	Run a function in a thread .
14684	Run parallel processes .
14685	Decorate a function with an object .
14686	Decorate a function with objattrs .
14687	Get the source code of a traceback .
14688	Return a list of lines that are inspectable .
14689	Displays a progress bar .
14690	Clean up a controller .
14691	Perform a pre - call .
14692	Set the ignore state
14693	Save a list of messages to the client s history .
14694	Sync the results of a function with the client .
14695	Execute a function after spinning .
14696	Get all messages .
14697	Get a message from the queue .
14698	Decorate a function as a property .
14699	Get only the given fields .
14700	Parse a URL .
14701	Return a list of modules in path .
14702	Get the list of root modules
14703	Quick completer .
14704	Return a list of modules that can be imported .
14705	Completer for magic_run .
14706	Return a list of directory completions .
14707	Quote attribute .
14708	Configure the plugin .
14709	Write the error report to a file .
14710	Add an error to the error list
14711	Add a failure .
14712	Add a successful test .
14713	Generate a random twobin
14714	Randomly weight a list of loads .
14715	Register an engine .
14716	Unregisters an engine .
14717	Handle stranded tasks .
14718	Dispatch a task submission .
14719	Audit the timeouts of the depending jobs .
14720	Fail an unreachable message .
14721	Check if the job can be run .
14722	Mark a job as unmet
14723	Submit a task .
14724	Dispatch a result message .
14725	Handle a result .
14726	Handle unmet dependencies .
14727	Update the dependency graph .
14728	Create a new log file .
14729	Print the current log state .
14730	Write a log line .
14731	Write data to the log .
14732	Stop logging .
14733	Create a new NotebookNode .
14734	Add a string to the command chain .
14735	Add a regex to the dispatcher .
14736	Given a key return a generator of objects that match that key .
14737	Return a list of values that match the key .
14738	Called when a notebook dir has changed .
14739	List notebook names
14740	Create a new notebook id .
14741	Delete a notebook .
14742	Check if a notebook exists .
14743	Find the path for a notebook .
14744	Get the path to a notebook file .
14745	Get a notebook .
14746	Get a notebook object .
14747	Save a new notebook .
14748	Save a notebook .
14749	Save a notebook object .
14750	Delete a notebook .
14751	Create a new notebook .
14752	Copy a notebook .
14753	Given a list of tokens return a list of tokens .
14754	Generate a list of tokens from a source string .
14755	Load the default config file .
14756	Return a list of classes that are subclasses of InteractiveShellApp .
14757	Parse command line arguments .
14758	Initialize the IPython app .
14759	Initialize the shell .
14760	Initialize the banner .
14761	Return a string representation of obj .
14762	Parse notifier name .
14763	Set the default value for this trait .
14764	Add or remove notifiers .
14765	Return a dict of traits matching the given metadata .
14766	Get the metadata for a trait .
14767	Validate the value .
14768	Get the default value .
14769	Return True if all items in the collection are satisfied .
14770	Return True if the result is unreachable .
14771	Return a dictionary representation of this result .
14772	Return the depth of n in tree .
14773	Print a bintree tree .
14774	Disambiguate a DNS URL .
14775	Return the result of applying f to each element of the sequence .
14776	Validate targets .
14777	Dispatch a monitor traffic event .
14778	Dispatch a query .
14779	Handle a new heart .
14780	Handle a heart failure .
14781	Save a task request .
14782	Save a task result message .
14783	Save iopub message .
14784	Handle a connection request .
14785	register a new engine
14786	Unregister an engine .
14787	Finish a registered engine .
14788	Send a shutdown request .
14789	Purge results from the database .
14790	Extract data from a record .
14791	Get results for a message .
14792	Get the history of a message .
14793	Query the database .
14794	Change working directory to newdir .
14795	Decodes the output of a completed command .
14796	Run a command under the root directory .
14797	Execute the script .
14798	Dispatch a message .
14799	Check if the message is from this session .
14800	Report a list of morfs .
14801	Annotate a file .
14802	Get installed version of apt cache policy
14803	Squash unicode objects .
14804	Extract a header from a message .
14805	Check packers .
14806	Create a message .
14807	Sign a list of messages .
14808	Serialize a message .
14809	Send a message to a stream .
14810	Send a list of messages to a stream .
14811	Receive a message from a socket .
14812	Feed identities into msg_list .
14813	Deserialize a message .
14814	Save SVG document .
14815	Convert a SVG string to the clipboard .
14816	Convert an SVG string to an image .
14817	Return information about the object .
14818	Get the docstring of an object .
14819	Get the source of an object
14820	Get the signature of a Python function .
14821	Return a tuple of call line and docstring .
14822	Find the absolute path of an object .
14823	Find the line number of the source of an object .
14824	Get the definition of a function .
14825	Return the head color of the color table .
14826	Print no info message
14827	Print the definition of an object .
14828	Print the documentation of an object .
14829	Show the source of an object .
14830	Print the contents of a file .
14831	Format a list of fields .
14832	Print information about an object .
14833	Search for a pattern in a namespace .
14834	Return a threaded reactor .
14835	Decorator to mark a function as a deferred .
14836	Find the best string match .
14837	Convert to XML string .
14838	Convert to XML .
14839	Load all modules in packages .
14840	Invert a dictionary .
14841	Merge this struct with another struct .
14842	Convert an object into a Python object .
14843	Format a string .
14844	Get a list of matplotlib figure objects .
14845	Print a matplotlib figure .
14846	Return a function that can be used to run a matplotlib script .
14847	Select a figure format to use .
14848	Find the GUI and backend to use .
14849	Activate matplotlib .
14850	Configure inline support for a shell .
14851	Activate pylab .
14852	Log a trace event .
14853	Start tracing .
14854	Stop tracing .
14855	Start tracing .
14856	Install the real tracer .
14857	Start the coverage collector .
14858	Stop this Collector .
14859	Pause all tracers .
14860	Resume all registered tracers .
14861	Return a dict of line data .
14862	Collect exceptions from a list of RemoteError objects .
14863	Render the traceback .
14864	Start coverage process .
14865	Return the canonical directory for a CodeUnit .
14866	Return the source code for a file .
14867	Determine if a filename should be traced .
14868	Return True if the file should be traced .
14869	Log a warning .
14870	Check for packages in self . source_pkgs .
14871	Start the runner .
14872	Clean up after shutdown .
14873	Exclude a regex .
14874	Return the regular expression that should be used for exclusion .
14875	Save data to file .
14876	Combine parallel data .
14877	Harvest data .
14878	Run the analysis .
14879	Take a Morf analysis and return a tuple of filename statements excluded and missing statements .
14880	Analyzes a code unit .
14881	Report the results of the analysis .
14882	Annotate a list of morfs .
14883	Generate HTML report .
14884	Report coverage data .
14885	Display a list of objects .
14886	Display a list of objects as HTML .
14887	Display a list of objects as SVG .
14888	Display a list of objects in PNG format .
14889	Display a list of images .
14890	Display a list of objects in LaTeX format .
14891	Display a list of objects as JSON .
14892	Display a list of JavaScript objects .
14893	Reloads the data .
14894	Find a command in the PATH .
14895	Execute a system command .
14896	Forward read events from a pipe .
14897	Read lines from the socket and send them to the client .
14898	Find launcher class .
14899	Start the cluster .
14900	Build a launcher class .
14901	Start the cluster .
14902	Start the cluster .
14903	Get a wx application .
14904	Check if wx event loop is running .
14905	Start event loop .
14906	Get the QApplication instance .
14907	Return True if QT4 is running in event loop .
14908	Start event loop .
14909	Create a blank canvas .
14910	Draw a cross .
14911	Draw a line .
14912	Set text at position .
14913	Create an AnnotatedImage from a grayscale image .
14914	Generate a random UUID .
14915	Generate a unique key for a GET request .
14916	Get the domain of a URL .
14917	Get the arguments from a URL .
