0	Convert SINA XML to a list of URLs .
1	Download a dailymotion video .
2	Download sina video .
3	Print text with colors .
4	Print a message to stderr .
5	Print a message and exit .
6	Print a message and exit .
7	Detect OS .
8	Download videos from vimeo .
9	Get info from ckplayer xml
10	Get video url from video id .
11	Get the real mgtv url
12	Legitimize text .
13	Download a video .
14	Download a stream .
15	Download a video .
16	Match all patterns in text .
17	Parse a query parameter .
18	Get the content of a URL .
19	Send a POST request .
20	Parse a host string .
21	Get room id by key .
22	Get title by json topic part
23	Download Wanmen data by course .
24	Download by course topic part .
25	Returns True if the given task instance exists .
26	Clear the event buffer .
27	Get a connection to the database .
28	Get AWS access key and secret key .
29	Get the value of a field .
30	Copy an expert SQL file .
31	Dump a table to a file .
32	Uploads the file to Google Cloud Storage .
33	Get the maximum partition of a table .
34	Get connection information .
35	Get the current state of a task
36	Restart num_workers_expected workers .
37	Get the client .
38	Translate a list of values to another language .
39	Get an instance .
40	Create an instance .
41	Patch an instance .
42	Delete an instance .
43	Get a database .
44	Create a new database .
45	Patch a database .
46	Delete a database .
47	Export an instance .
48	Start the sql proxy .
49	Stop the sql proxy .
50	Get the version of the SQL proxy .
51	Create a connection to the database .
52	Retrieve a connection from the database .
53	Delete the connection from the database .
54	Returns a CloudSqlProxyRunner instance .
55	Get the database hook .
56	Clean up the database hook .
57	Reserve a free TCP port .
58	Normalizes a job id .
59	Get the error code from an exception .
60	Delete all DagRuns from the database .
61	Delete all DAG task instances .
62	Set the paused state of all DAGs .
63	Print performance results .
64	Heartbeat the scheduler .
65	Invoke the lambda function .
66	Create evaluate operations .
67	Create a directory .
68	Convert string to float if possible .
69	Make a naive datetime aware .
70	Make a naive datetime .
71	Return a datetime object .
72	Get the connection to the druid broker .
73	Return a requests session .
74	Send a request to an endpoint .
75	Check response and raise AirflowException .
76	Run a request and check the response .
77	Create a new session .
78	Decorator to provide session .
79	Drop all tables in the database .
80	Get pretty exception message .
81	Get records from the database .
82	Get a pandas DataFrame from the database .
83	Run the query .
84	Insert rows into a table .
85	Get the Cosmos DB client .
86	Check if a collection exists .
87	Create a collection .
88	Check if a database exists .
89	Create a database .
90	Delete a database .
91	Delete a collection .
92	Insert multiple documents .
93	Delete a document .
94	Get a single document .
95	Get documents from a collection .
96	Get a function by name .
97	Create a new function .
98	Update a Lambda function .
99	Upload a function zip file .
100	Delete a function .
101	Get the statuses of all dependencies .
102	Return True if all dependencies are met .
103	Return a generator of failure reasons .
104	Parse S3 configuration file .
105	Get the current credentials .
106	Get connection .
107	Flush the buffer .
108	Check if fileloc is a zip file .
109	Return a list of file paths in the given directory .
110	Construct a task instance .
111	Starts the process .
112	Send a TERMINATE_MANAGER signal to the child .
113	Exit gracefully .
114	Start the DagFileProcessorManager .
115	Start parsing the DAG .
116	Start parsing the DAG .
117	Refresh the DAG directory .
118	Print file processing statistics .
119	Remove import errors from the database .
120	Log file processing stats .
121	Set the file paths to be processed .
122	Wait until all processors have finished .
123	Heartbeat the processing threads .
124	Terminate all child processes
125	Create SSH connection to remote host .
126	Create a transfer job .
127	Get a transfer job .
128	List all jobs that match the filter .
129	Update a transfer job .
130	Delete a transfer job .
131	Cancel a transfer operation .
132	Pause a transfer operation .
133	Resume a transfer operation .
134	Wait for a GCP transfer job to complete .
135	Find tasks for a given task instance .
136	Return number of open slots .
137	Run a command and return its output .
138	Remove an option from a section .
139	Get a specific section .
140	Allocate a list of keys for this project .
141	Begin a transaction .
142	Commit changes to the project .
143	Look up a set of keys .
144	Rollback a transaction .
145	Run a query .
146	Get an operation by name .
147	Delete an operation .
148	Poll an operation until it is done .
149	Export to Google Cloud Storage .
150	Import a file from a bucket .
151	Publish a message to a target .
152	Get the hostname .
153	Return an instance of LanguageServiceClient .
154	Analyze entities .
155	Annotate a text document .
156	Classify text .
157	Return a list of template fields for fullname .
158	Link to a template field .
159	Disposes of the database connection pool .
160	Prepare classpath .
161	Check the target task id .
162	Detect if the cache variable is set .
163	Convert an object to a dictionary .
164	Splits a list into chunks of size chunk_size .
165	Reduce an iterable in chunks .
166	Chain tasks .
167	Pretty print a table .
168	Render a log filename .
169	Get a connection to the API .
170	Wait for an operation to complete .
171	Coerce content to a string .
172	Handle databricks operator execution .
173	Run pig .
174	Fetch the state of a celery task .
175	Return the number of tasks per send process .
176	Return the number of tasks per fetch process .
177	Set a variable s default value .
178	Get a connection to the API .
179	Create a job .
180	Get a job .
181	Wait for a job to complete .
182	Create a new version .
183	Set default version
184	List all versions of a model .
185	Delete a version .
186	Create a model in a project .
187	Get a model by name .
188	Write batch data to DynamoDB .
189	Integrate the plugins .
190	Get the default executor .
191	Get an executor by name .
192	Called when an error occurs .
193	Return a pymssql connection
194	Trigger a dag .
195	Delete a dag .
196	Get information about a task .
197	Get all available pools .
198	Create a new pool .
199	Delete a pool .
200	Create or update a container group .
201	Get the state exit code details .
202	Get the messages for an instance .
203	Get logs for a container .
204	Delete a container group .
205	Check if a container exists .
206	Decorate a function to apply default values .
207	Construct an ingest query .
208	Receive a message from a channel
209	Find all DagRun records .
210	Get all the task instances in this DAG .
211	Get a task instance .
212	Get the previous execution of this dag run .
213	Get the previous scheduled dagrun .
214	Update the state of the task .
215	Verify integrity of this task .
216	Send a request to the Jenkins server and return the response .
217	Convert Airflow context to Airflow variables .
218	Conditionally trigger a dag .
219	Send a metric .
220	Query a metric .
221	Get a DAG by ID
222	Kill a list of zombies .
223	Bag a DAG .
224	Collect all the DAGs in a given folder .
225	Return a report on the loaded DAGs .
226	Add a number of days to a date .
227	Format a string with input_format .
228	Check if the file is a directory .
229	Return True if the file is a directory .
230	Clear task instances .
231	Get the next try number .
232	Generate command line for airflow .
233	Get the current state of the task .
234	Record the task as FAILED .
235	Refresh this task from the database .
236	Clear all XCOM data .
237	Return the key for this task .
238	Returns True if all the dependencies of this task are done False otherwise .
239	Return the next retry datetime for this task .
240	Returns True if the job is ready to be retried .
241	Check if the pool is full .
242	Get the DagRun for this task .
243	Push a key - value pair to the XCOM .
244	Pull a set of tasks from XCOM .
245	Initialize the run context .
246	Close the logger .
247	Get a connection to the API .
248	Start an instance .
249	Set a new machine type .
250	Get an instance template .
251	Insert an instance template .
252	Get an instance group manager .
253	Patch an instance group manager .
254	Wait for an operation to complete .
255	Check if a bucket exists .
256	Create bucket .
257	Check if a prefix exists in a bucket .
258	List prefixes in a bucket .
259	List keys in a bucket .
260	Check if a key exists .
261	Get an object from S3 .
262	Read a key from S3 .
263	Select an object from S3 .
264	Check if wildcard key exists .
265	Get a wildcard key .
266	Upload a file to S3 .
267	Load data from a string .
268	Load a file - like object .
269	Load a file - like object .
270	Copy an object from one bucket to another .
271	Query Cassandra .
272	Convert a User instance to a dict .
273	Send an email .
274	Return an instance of SpeechClient .
275	Recognize speech .
276	Execute the query .
277	Load an entry point plugins .
278	Check if a plugin is valid .
279	Skip a set of tasks .
280	Get a connection to AzureDLFS .
281	Check if a file exists .
282	Upload a file from local_path to remote_path .
283	List files in path .
284	Execute the query .
285	Uncompress a compressed file .
286	Query the mssql database .
287	Decorator to log action logs .
288	Build metrics .
289	Create a cgroup from a path .
290	Delete a cgroup
291	Parse host name .
292	Make an API call .
293	Get Salesforce connection .
294	Make a query
295	Describe an object
296	Get a list of available fields for an object .
297	Get object from Salesforce .
298	Convert a column to a timestamp .
299	Write an object to a file .
300	Get connection to MongoDB .
301	Get a mongo collection .
302	Replace multiple documents in a collection .
303	Check if a mail attachment exists .
304	Retrieve mail attachments .
305	Download mail attachments .
306	Get attachments by name .
307	Return a tuple of the filename and payload .
308	Put records to firehose .
309	Get the status of a task instance .
310	Send an email .
311	Send email using SMTP .
312	Process the result value .
313	Check if a blob exists .
314	Check for a prefix in a container .
315	Load a string blob .
316	Read a file from a container .
317	Delete a file from a container .
318	Run MLSD .
319	Get FTP connection .
320	List files in a directory .
321	Retrieve a file from the FTP server .
322	Store a file locally .
323	Get the modification time of a file .
324	Execute the hook .
325	Get a connection to the file service .
326	Check if a directory exists .
327	Check if a file exists .
328	List all the files in a directory .
329	Create a directory .
330	Load a file .
331	Load a file from a string .
332	Load a file from a stream .
333	Get the storage connection .
334	Copy an object from one bucket to another .
335	Download a file from S3 .
336	Upload a file to a bucket .
337	Check if an object exists .
338	Check if object is updated after ts .
339	Delete a blob .
340	List blobs in a bucket .
341	Get the size of a file .
342	Get the CRC32C checksum of an object .
343	Get the MD5 hash of an object in a bucket .
344	Create a new bucket .
345	Composes multiple objects in a bucket .
346	Check if secondary training status has changed .
347	Get the secondary training status message .
348	Upload a file to S3 .
349	Configure S3 resources .
350	Check if s3 url is valid .
351	Get a connection to the log service .
352	Create a new training job .
353	Create a new hyperparameter tuning job .
354	Create a new transform job .
355	Create an endpoint .
356	Describe a training job .
357	Check the status of a job .
358	Check the status of a training job .
359	Execute the dataflow .
360	Run migrations in offline mode .
361	Run all migrations in the database .
362	Delete an instance .
363	Create an instance .
364	Create a table .
365	Delete a table from an instance .
366	Update a cluster .
367	Prepare Hive CLI command .
368	Prepare a dictionary of hive configuration values .
369	Load data from a DataFrame .
370	Load a text file into the database .
371	Get the metastore client
372	Check if a named partition exists .
373	Check if a table exists .
374	Get connection to Hives Server .
375	Get results from HQL .
376	Convert a HQL query to a CSV file .
377	Get records from HQL .
378	Get results as a pandas DataFrame .
379	Return a connection to the API .
380	Get token endpoint .
381	Send the message .
382	Bind a dictionary of parameters to an operation .
383	Escape special characters .
384	Casts a string field to a given type .
385	Validate a value .
386	Get a connection to the BigQuery service .
387	Get the bigquery service .
388	Check if a table exists .
389	Create an empty table .
390	Patch a table .
391	Cancel the query .
392	Delete a table .
393	Run the table upsert operation .
394	Grant view access to a dataset .
395	Get a dataset .
396	Get list of datasets .
397	Insert multiple rows into a table .
398	Execute an operation .
399	Execute a sequence of operations .
400	Get the next page of results .
401	Query postgres .
402	Make intermediate directories .
403	Create a queue .
404	Send a message to a queue .
405	Run a command .
406	Cleanup the configuration file .
407	Parse command line arguments .
408	Build the HTML header .
409	Build SVG container .
410	Build the js chart
411	Create a new x axis
412	Create a new y axis
413	Get a connection to the database .
414	Decorator to add a Log instance to the session .
415	A decorator to handle gzipped responses .
416	Get the last DagRun .
417	Create a new dag run .
418	Send the message .
419	Return a JSON response .
420	Open a file if it is a zip file .
421	Make a cache key .
422	Get the VideoIntelligenceServiceClient .
423	Annotate a video .
424	Get the Opsgenie API Key .
425	Get a connection to the API .
426	Send an alert to Genie .
427	Build the opsgenie payload .
428	Execute the hook .
429	Get the connection type .
430	Run a query .
431	Check the status of a query execution
432	Poll query status .
433	Return a pysftp . Connection object .
434	Handle rate limit exception .
435	Make a call to the API .
436	Get all partitions in a table .
437	Get a table .
438	Get the location of a table .
439	Get the status of a cluster .
440	Delete a cluster .
441	Describe cluster snapshots .
442	Restores a restore from a snapshot .
443	Create a new cluster snapshot .
444	Execute the API call .
445	Create a job flow .
446	Filter for file size .
447	Filter results for ignored extensions .
448	Execute the query
449	Get a pool by name .
450	Create a new pool .
451	Delete a pool .
452	Convert a dictionary to a protobuf .
453	Wait for an operation to complete .
454	Get an operation .
455	Append a label to a cluster protobuf .
456	Create a cluster .
457	Get a cluster by name .
458	Get the webhook endpoint .
459	Build Discord payload .
460	Execute the webhook .
461	Encrypt a plaintext using a key .
462	Import a table .
463	Import a query into the database .
464	Export a table .
465	Get the text to speech client .
466	Synthesize speech .
467	Close the logger .
468	Returns a list of init containers .
469	Returns a dictionary of environment variables .
470	Get kubernetes secrets .
471	Get the security context for the worker .
472	Get extra links for the operator .
473	Heartbeat the job .
474	Launch a new process .
475	Starts the process .
476	Wait for the result to be available .
477	Exit gracefully .
478	Update import errors .
479	Process task instances .
480	Change the state of tasks without a dagrun .
481	Get concurrency maps .
482	Change the state of the executable task instances .
483	Enqueue task instances with queued state .
484	Execute the tasks in the simple_dag_bag .
485	Change the state of tasks that failed to execute .
486	Process events from the executor .
487	Process a single file .
488	Update counters .
489	Manage the state of the executor
490	Get a single dag run .
491	Return a dict of task instances for a dag run .
492	Execute tasks for given run dates .
493	Set the states of all dag runs to failed
494	Execute the job .
495	Called when a heartbeat is received .
496	Get the client .
497	Get an instance .
498	Apply a function to an instance .
499	Create an instance .
500	Update an instance .
501	Delete an instance .
502	Get a database .
503	Create a database .
504	Update a database .
505	Delete a database from an instance .
506	Poke the mail attachment .
507	Prepares the additional parameters for the image request .
508	Get a connection to the database .
509	Check if a table exists
510	Check if a record exists .
511	Build the command to poll the driver status .
512	Submit a spark job .
513	Process the spark submit log .
514	Process the driver status log .
515	Returns a task runner for the given local task job .
516	Wait for the task to end .
517	Query MySQL .
518	Configure a CSV file with the given schema .
519	Write the local schema file .
520	Returns a dict mapping column names to column types .
521	Map mysql type to string
522	Execute the hook .
523	Decorator to apply lineage .
524	Return the extra data as a dict .
525	Return a list of dates between start_date and end_date .
526	Scale time units .
527	Return the given number of days ago .
528	Initialize a role .
529	Delete a role .
530	Get the user s roles .
531	Get all permissions views for the current user .
532	Check if user has any of role_name_or_list
533	Check if user has permission .
534	Clean faulty permissions .
535	Merge permission and view menu
536	Update admin permissions view
537	Sync permissions for a DAG view .
538	Create permission for all DAG VMs .
539	Get the Fernet object .
540	Check the partition of the table .
541	Get the hook .
542	Receive messages from SQS
543	Get connection to Hadoop .
544	Get connection to namenode .
545	Check if a path exists .
546	Upload a file to HDFS .
547	Get the connection to the pinot broker .
548	Get the URI for the connection .
549	Convert a date to a dictionary .
550	Convert a time to a dictionary .
551	Get redis connection
552	Get a pandas DataFrame from the database .
553	Executes SQL .
554	Set autocommit on a connection .
555	Insert multiple rows into a table .
556	Serialize a cell .
557	Get the health of the scheduler .
558	Get extra links .
559	Get a connection to the cloudant server .
560	Execute the hook .
561	Get connection credentials .
562	Returns an authorized http object .
563	Catches HTTP errors and raises AirflowException .
564	Decorator to fallback to default project id .
565	Return a list of all unfinished tasks .
566	Prepare spark sql command .
567	Convert PIL Image or ndarray to torch . Tensor .
568	Normalize a tensor .
569	Resize an image .
570	Pad an image with padding .
571	Crop an image .
572	Crop and resize an image .
573	Flip an image horizontally .
574	Compute the perspective of an image .
575	Flip an image vertically .
576	Crop an image to a fixed size .
577	Adjust brightness of an image .
578	Adjust contrast of an image .
579	Adjust the saturation of an image .
580	Adjust the hue of an image .
581	Adjust the brightness of an image by a floating point value .
582	Rotate an image by angle .
583	Apply affine transformation to a PIL image .
584	Convert PIL image to grayscale .
585	Save an image from a tensor .
586	Find classes in a directory .
587	Read an image file
588	Read info file .
589	Read matches file .
590	Compute accuracy .
591	Set up print function for distributed mode .
592	Download file from url .
593	List all directories in a directory .
594	List all files in a directory .
595	Download a file from Google Drive .
596	Generate random parameters .
597	Generate random parameters .
598	Get random parameters .
599	Generate a random transformation .
600	Generate random parameters .
601	Download the file .
602	Download and process images .
603	Download and process data .
604	Get the current theme name .
605	Run searx autocomplete
606	Render preferences page
607	Get list of available themes .
608	Parse a full search query .
609	Parse a response from DuckDuck .
610	Custom gradient .
611	Multivariate normal diagnostic .
612	r Compute the joint log probability for two sets of effects .
613	HMC benchmark for Eight Schools .
614	Expands the docstring of a function .
615	Return a simple name for a distribution .
616	Build a random variable from a custom distribution .
617	Return a random variable of the given distribution .
618	Create a random variable for a given distribution class .
619	One - step prediction .
620	Forecast latent states .
621	Return the maximum value of x .
622	Assert that x is finite .
623	Soft assert that x is at most rank rank .
624	Compute the size of an event .
625	Perform a single - hot evaluation .
626	Get the convert_to_tensor function from an identifier .
627	Returns the size of a mixture of components .
628	Get the next interceptor .
629	Decorate a function with an interceptor .
630	Context manager for creating tapes .
631	Generate toy logistic data .
632	Visualize decision .
633	Builds an input pipeline .
634	Check that map_values is valid .
635	Apply a trace function to a state .
636	Call fn with args .
637	Call fn with args .
638	Broadcasts from from_structure to to_structure .
639	Transform a log - probability function .
640	Perform a leapfrog step .
641	Metropolis hastings step .
642	Hamiltonian Monte Carlo simulation .
643	Sign adaptation .
644	Create a model from a dictionary .
645	Convert a value to a tensor .
646	Create a scale operator .
647	Returns a function that perturbs the input state .
648	Generates a random walk uniform function .
649	Expand to event rank .
650	Returns the lower bound of the distribution .
651	Compute the cat probabilities .
652	Validate the arguments .
653	Ensure TensorFlow is installed .
654	Logistic regression .
655	Returns a pair of features and labels .
656	Cholesky covariance .
657	Compute the standard deviation of x .
658	Variance of a tensor .
659	Create a positive axis .
660	Squeeze x along axis .
661	Standardize x .
662	Inverse of z .
663	Semilocal linear trend transition matrix .
664	Semilocal linear trend transition noise .
665	Samples a halton sequence .
666	Generate permutations of dimensions .
667	Get indices .
668	Base expansion size .
669	Return all primes less than n .
670	Return machine epsilon .
671	Hermitian Hermite quadrature .
672	Fix the step size .
673	Helper function for bracketing and searching .
674	Line search after bracketing .
675	Inner bisection search .
676	Prepares the values and gradients .
677	Print a list of tensors .
678	Hermite quadrature scheme .
679	Quadrature scheme .
680	Checks for quadrature parameters .
681	Determine batch event shapes .
682	Interpolate a grid to a location .
683	Interpolate a scale .
684	Linear operator scaling .
685	Concatenate tensors .
686	Logarithm of a matrix .
687	Computes the log of a matrix .
688	Compute the vector matrix .
689	Extract log probabilities .
690	Returns the marginal hidden probabilities .
691	Posterior marginals .
692	Posterior mode .
693	Choose a random direction .
694	Sample next state .
695	If fn_result is None return fn_arg_list .
696	Right pad x to final rank .
697	One step .
698	Builds a trainable posterior .
699	Build variational loss .
700	Minimize a graph in memory .
701	Computes the mean and variance of a masked time series .
702	Computes the initial value of a masked time series .
703	Broadcasts the batch shape .
704	Construct a multivariate normal linear operator .
705	Sums of distributions .
706	Compute empirical statistics .
707	Expands trailing dimensions .
708	Canonicalizes an observed time series .
709	Mixes over posterior draws .
710	Returns the range of the current value .
711	Create a summary statistic function for the given attribute .
712	Unifies a distribution maker call signature .
713	Resolve distribution names .
714	Get the required arguments for a function .
715	Computes the KL divergence between two joint distributions .
716	Build the model .
717	Resolve a distribution graph .
718	Compute the entropy of all distributions .
719	Check that x is in the support of the distribution .
720	Create image summary .
721	Visualize reconstruction .
722	Visualize qualitative analysis .
723	Summarize distribution parameters .
724	Summarize mean in nats and bits .
725	Construct a MultivariateNormalDiag .
726	Returns zero state .
727	Call the LSTM cell .
728	Apply convolution to inputs .
729	Generate the model .
730	Reconstruct the model .
731	Sample static prior .
732	Sample a dynamic prior .
733	The batch shape .
734	Returns the batch shape tensor .
735	Makes a state space model .
736	Sample from the prior .
737	Compute the minimum required event dimension .
738	Converts a vector size to a square matrix size .
739	Argsort a numpy array .
740	Sort an array .
741	Wrapper for _ndtr .
742	Inner tensor representation of x .
743	Like ndtri .
744	Logarithm of the number x .
745	Compute the log of the asymptotic series .
746	Implementation of erfinv .
747	Logarithm of the cumulative density function .
748	Calculate the joint log probability .
749	Benchmark text messages using HMC .
750	Determines whether the marginal GP is a univariate Gaussian .
751	Returns the marginal distribution .
752	Get the index points for this process .
753	Make an IAF stack .
754	Perform one step of the kernel .
755	Bootstraps the loss function .
756	Computes the outer squared difference .
757	Returns a value and a batch jacobian .
758	Prevent 2nd derivative .
759	Distributional transform .
760	Split a covariance into marginals .
761	Decomposes the model into individual components .
762	Decomposes a time series by component .
763	Decomposes a forecast by component .
764	Convert a dense tensor to a sparse tensor .
765	Decorator for operator functions .
766	Return a string representation of a tensor .
767	Returns the sample shape .
768	Returns the sample shape tensor .
769	The value of the tensor .
770	Evaluate the value and return the result .
771	Return the numpy representation of the tensor .
772	Conjugates a prior with known scale posterior .
773	Default MLP template .
774	Uniform unit norm .
775	Log - unnormalized probabilities .
776	Log normalization .
777	Returns the common dtype of args_list .
778	Implements summary statistic .
779	Broadcasts a tensor to a list of target tensors .
780	PDF at peak .
781	Computes the effective sample size .
782	Calculate the effective sample size for a single state .
783	Potential scale reduction for a single state .
784	Return the size of an axis .
785	Broadcast a maybelist argument .
786	Hermite quadrature scheme .
787	Quadrature scheme for lognormal quantiles .
788	Merge two mappings .
789	Remove a field from the mapping .
790	Merge two values .
791	Return a deep representation of x .
792	Left - doubling increments .
793	Returns the index of the best interval .
794	Slice bounds by doubling .
795	Sample with shrinkage .
796	A single dimensional slice sampler .
797	Returns a function that sets the value of a random variable .
798	Create a log joint function for a model .
799	Get the inputs for a function .
800	vggconv block .
801	Builds the tree .
802	Check for None gradients .
803	Returns True if there is no u turn .
804	Implementation of the Leapfrog algorithm .
805	Computes the joint log joint probability .
806	Random bernoulli op .
807	Returns a default loc and scale function .
808	Returns a default mean field normal function .
809	Default multivariate normal function .
810	Deserializes a function .
811	Serialize a function .
812	Broadcasts a structure .
813	Convert a nested structure to a tensor .
814	Convert arguments to a tensor .
815	Call a function .
816	Returns a dictionary of tensor - like attributes .
817	Create a mixture prior .
818	Pack images .
819	Download a file to a directory .
820	Builds fake input functions .
821	Validate block sizes .
822	Check that flat_xs does not have conflicting shapes .
823	Construct a MultivariateNormalTriL .
824	Bernoulli layer .
825	Create a tfd . Normal layer .
826	Poisson distribution .
827	Generate a proposed Euler method .
828	Get the drift .
829	Computes the log acceptance correction .
830	Helper function to call a volatility function on a state .
831	Broadcast the volatility .
832	Construct an AR transition matrix .
833	Returns the sample shape of x .
834	Reshape input and output .
835	Call a function and reshape the output .
836	Betainc function .
837	Flat sample distributions .
838	Returns a bag of words .
839	Create a LDA variational model .
840	Returns a string representation of the topics .
841	Returns a tf . data . Dataset containing groups of words .
842	Builds fake input functions .
843	Build input functions .
844	Minimize a graph .
845	Adds control dependencies for ema .
846	Save images to a file .
847	Visualize training data .
848	Load Bernoulli MNIST dataset .
849	Convert a tf . dtype to a numpy dtype .
850	Return the base dtype for the given dtype .
851	Is dtype a bool dtype?
852	Check if dtype is complex .
853	Returns the maximum value of a dtype .
854	Return the name of the dtype .
855	Return the size of a dtype .
856	Check that all items have the same base type .
857	Assert that tensors have the same dtype .
858	Minimize an objective function .
859	Nelder - Mad one step .
860	Return a replacement function for a reflected simplex .
861	Performs the expansion function .
862	Returns a contraction function .
863	Shrinks a simplex shrunk towards the best vertex .
864	Replace x at index with replacement .
865	Check convergence .
866	Prepare the arguments for the objective function .
867	Prepare arguments for the objective function .
868	Prepare arguments for the objective function .
869	Evaluate an objective function with multiple inputs .
870	Plot weight posteriors .
871	Plot a holdout prediction .
872	Build fake data .
873	Get the config for the graph .
874	Deserializes a config dictionary .
875	Matrix multiplication .
876	Calculate the standard deviation of a statistic .
877	Assigns a log moving mean exp to a variable .
878	Make a columnar tensor .
879	Random number generator .
880	Draw random samples from a scale .
881	Pick a scalar condition .
882	Finish the log probability for one fiber .
883	Finish prob for one fiber .
884	Rotate x if necessary .
885	Undo batch normalization .
886	Validate batch normalization layer .
887	Slice a single parameter .
888	Slice a distribution s parameters to a dictionary .
889	Apply a single step to a distribution .
890	Apply a sequence of slices .
891	Apply a batch of slices .
892	Fit a model .
893	Returns a convergence criteria function .
894	Prepare arguments for TensorFlow .
895	Get the number of columns .
896	Prefers a static function .
897	Copy docstring from original_fn to new_fn .
898	Get a static predicate .
899	Returns the rank of a tensor .
900	Perform a case - insensitive comparison .
901	Create a name scope .
902	Computes the mixture standard deviation .
903	Create a scale tensor .
904	Make a diagonal scale .
905	Get shapes from loc and scale .
906	Check if a scale is a diagonal scale .
907	Check a scalar distribution .
908	Pad mixture dimensions .
909	Pick a scalar condition .
910	Moves a dimension from source_idx to dest_idx .
911	Check that x is non - negative .
912	Returns a Tensor with the same shape as a and b .
913	Try to get a static value .
914	Returns True if the dtype is known to be unsigned .
915	Returns True if the dtype is known to be signed .
916	Returns the largest integer by dtype .
917	Return the smallest integer in a dtype .
918	Returns True if dt is an integer dtype .
919	Check the shape of a categorical parameter .
920	Computes the log of the combinations of n and counts .
921	Rotates x by shift .
922	Picks a vector from a condition .
923	Prefer static broadcast shape .
924	Generate a new seed .
925	Computes the diagonal of a tensor .
926	Get the size of a dimension .
927	Process quadrature grid and probs .
928	Returns a dict of all arguments and their values from the caller s frame .
929	Expand a tensor to a vector .
930	Adds dependencies to the output tensor .
931	Validate rightmost_transposed_ndims .
932	Validate perm .
933	Returns the shape of the event tensor .
934	Concatenate two tensors .
935	Returns the dimensions of x .
936	Merges two tensors .
937	Returns a Tensor with a rank of rank at least .
938	Check that static_shape and dynamic_target_shape are equal .
939	Augments the sample batch shape .
940	Build a backward pass step function .
941	Backward smoothing update .
942	Build a Kalman filter step .
943	Linear Gaussian update .
944	Calculate the Kalman transition probability .
945	Builds a kalman mean step function .
946	Builds a covariance step function .
947	Builds a kalman sample step .
948	Propagate mean .
949	Propagate covariance .
950	Backward smoothing pass .
951	Joint samples from the state space .
952	Compute the posterior marginals .
953	Joint the mean across the timesteps .
954	Computes the joint covariances .
955	Convert latents to observations .
956	Log Normalization op .
957	The mode of the model .
958	Rotate samples .
959	Sample from the 3D distribution .
960	Copy a function .
961	Remove keys from a dict that have a different value .
962	Recursively replaces dicts with pretty dictionaries .
963	Get samples .
964	Return True if x is a namedtuple .
965	Choose base case .
966	Choose an item from a tuple .
967	Safely sum x .
968	Helper function for value_and_gradients .
969	Call a function with optional gradients .
970	Smart for loop .
971	Perform a trace scan .
972	Make a new setter for innermost results .
973	Decorate a getter to handle innermost results .
974	Enable store_parameters_in_results in kernels .
975	Replace the event shape in a shape tensor .
976	Replace the event shape in the input tensorshape .
977	Check shape .
978	Returns a tensor that summarizes whether all tensors converged .
979	Get initial state arguments .
980	Line search step .
981	Restrict values along a direction .
982	Update the position .
983	Check convergence .
984	Broadcast value to target .
985	Return the harmonic number of x .
986	Default function for exchange_proposed_fn .
987	Get a field from kernel results .
988	Get the exchanged states .
989	Returns the variance scale term .
990	Calculate the forward log - determinant of a bijector .
991	Forward transform function .
992	Returns a function that returns the inverse of a bijector .
993	One step operation .
994	Apply a where condition .
995	Secant 2 .
996	Inner function for secant2 .
997	Internal inner update function .
998	Update the value_and_gradients_function .
999	Bisection bracketing .
1000	Performs bisecting .
1001	Bisect a value and gradients function into an interval .
1002	Returns True if both tensors are finite .
1003	Checks whether a value satisfies wolfe conditions .
1004	Compute the secant of two vectors .
1005	Creates a policy for updating step sizes .
1006	Implements a single step of the leapfrog integrator .
1007	Computes the log acceptance correction .
1008	One step .
1009	Return a copy of the kernel results .
1010	Bayesian ResNet layer .
1011	Resnet block .
1012	Create an encoder function .
1013	Returns decoder and topics_words .
1014	Creates a tfd . Dirichlet prior .
1015	Samples a chain .
1016	Deep Exponential Family .
1017	Create a trainable positive deterministic variable .
1018	Returns a trainable gamma .
1019	Load NIPS 2011 papers .
1020	Initializes the parameters .
1021	Returns the Kullback - Leibler function for type_a and type_b .
1022	Read image from file .
1023	Download sprites .
1024	Create a character .
1025	Create a sequence of frames .
1026	Create a random sequence .
1027	Create a dataset of sprites .
1028	Validate a list of distributions .
1029	Flatten a list of kernels .
1030	Flatten a list of multiplicand kernels .
1031	Build fake data .
1032	Count the number of integers in an array .
1033	Find bin edges .
1034	Computes a histogram .
1035	Quantiles .
1036	Get the static dimensionality of x .
1037	Insert back keep dimensions .
1038	Make axis non - negative list .
1039	Move dimensions to the flat end of a tensor .
1040	Sorts a tensor .
1041	Creates state space models for each component .
1042	Compute amari alpha .
1043	Reverse log - likelihood .
1044	Jensen - Shannon .
1045	Pearson function .
1046	Squared Hellinger .
1047	Triangular pearson function .
1048	Power of a tensor .
1049	Returns the absolute value of a tensor .
1050	Jeffreys .
1051	Modified GAN .
1052	Computes the dual CISZAR function .
1053	Symmetrized CISZAR function .
1054	Computes the divergence between f and q .
1055	Helper function for csiszar_vimco .
1056	Raise a ValueError if x does not have the expected dimensions .
1057	Batch gather with broadcasting .
1058	Broadcast event and params .
1059	r Expectation importance sampler logspace .
1060	Broadcast event and samples .
1061	Minimize a value and gradients .
1062	Checks that the inverse Hessian is positive definite .
1063	Update the inverse Hessian .
1064	BFGS inverse hessian update .
1065	Matrix multiplication right .
1066	Tensor product of two tensors .
1067	Transpose a batch .
1068	Pads the shape of x to ndims with ones .
1069	Sum x with ndims dimensions preserved .
1070	Computes the sqrt of x .
1071	Returns common dtype of arg_list .
1072	Minimize a value and gradients .
1073	Get initial state .
1074	Get the search direction .
1075	Returns an empty queue for element .
1076	Push new_vecs onto queue .
1077	Compute the PSD of a matrix .
1078	Returns True if x is larger than det_bounds .
1079	Uniform correlation - like matrix .
1080	Rejection samples .
1081	Compute the Clopper - Pearson confidence interval .
1082	Computes the volume of true volumes .
1083	Returns a function for evaluating the Von Mises CDF series .
1084	Returns a function that is passed to value_and_gradient .
1085	One step objective function .
1086	Minimize objective function .
1087	Get initial arguments .
1088	Find the best value in the population .
1089	Checks for convergence .
1090	Get the starting population .
1091	Perform a binary crossover .
1092	Get the mutants of a population .
1093	Generate random mixing indices .
1094	Ensure a tensor is a list .
1095	Get a tolerance tensor .
1096	Soft thresholding .
1097	Clip a tensor with a value between clip_value_min and clip_value_max .
1098	Builds an input pipeline .
1099	Plot generated images .
1100	Convert a list of productions into a string .
1101	Call the LSTM .
1102	Compute latent code posterior .
1103	Hat integral .
1104	Hat integral inverse .
1105	Computes the rank of a matrix .
1106	Pin a matrix .
1107	Solve the LU problem .
1108	Inverse LU factorization .
1109	Reconstructs assertions for LU .
1110	Solve the LU problem .
1111	Construct a sparse block diagonal matrix .
1112	Validate a matrix .
1113	Gradient of the negative log likelihood .
1114	Fit a sparse model .
1115	Generate a list of slices .
1116	Generate a mask .
1117	Create a masked dense layer .
1118	Create input order .
1119	Create a list of degrees .
1120	Create masks from degrees .
1121	Create a masked initializer .
1122	Construct the masks .
1123	Call the network .
1124	Draw a sample .
1125	Create a zero - dimensional Multivariate Normal Diagram .
1126	Returns a function for observing a timeseries .
1127	Convert parameters to weights .
1128	Depth - first search of a graph .
1129	Return the best order of dependencies .
1130	Flatten a set of distributions into a single rule .
1131	Build the chain rule .
1132	Computes variational loss .
1133	Optimal variational posterior .
1134	Build is_last_day_of_season function .
1135	Build a matrix from the effects to residuals .
1136	Builds the transition matrix for the seasonal state space .
1137	Build a transition noise function .
1138	Build a constrained seasonal transition noise model .
1139	Returns True if observations is empty .
1140	Validate observation data .
1141	Add this value to the scheduler .
1142	Set a checkpoint .
1143	Set the gradient clipping constant .
1144	Optimize the tensor .
1145	Set training summary .
1146	Set the value summary .
1147	Create a new optimizer .
1148	Set training data .
1149	Set a summary trigger .
1150	Read data sets .
1151	Download and parse news20 data .
1152	Download glove . 6B . txt .
1153	Compile the tensor .
1154	Fit the model .
1155	Evaluate the model .
1156	Predicts a set of features .
1157	Read MNIST dataset .
1158	Preprocess MNIST dataset .
1159	Get end trigger .
1160	Validate the optimizer .
1161	Return the value of the field .
1162	Call BigDl function .
1163	Call a Java function .
1164	Convert RDD to Java object .
1165	Convert Python object to Java object .
1166	Get an activation by name .
1167	Create an array from a numpy array .
1168	Get the label .
1169	Read a parquet file .
1170	Write a parquet file .
1171	Get an image from the image frame .
1172	Get the image of this frame .
1173	Get the label of this ImageFrame .
1174	Get the prediction for this image .
1175	Predict the class label of x .
1176	Fit the optimizer .
1177	Transform the image .
1178	Save Keras definition to file .
1179	Build Keras model .
1180	Predict class using distributed training .
1181	Set the weights .
1182	Get the weights of the layer .
1183	Save the tensor to a file .
1184	Get or set training mode .
1185	Load a torch layer from a file .
1186	Load Keras model .
1187	Construct a criterion from a jcriterion .
1188	Load weights from json file .
1189	Load data from an imdb file .
1190	Build Keras model .
1191	Get the input shape .
1192	Get the output shape .
1193	Read MNIST dataset .
1194	Read ratings . dat .
1195	Return the path to the bigdl jar .
1196	Returns True if spark is below 2 . 2 .
1197	Export a checkpoint .
1198	Save a dictionary of tensors to a file .
1199	Expand a tile .
1200	Precompute future symbols .
1201	Simple attention .
1202	Attention layer .
1203	Compute BLEU score .
1204	Get the log file .
1205	Logs the utterance .
1206	Summary gradient updates .
1207	Dump weights to Tensorboard .
1208	Read data by config .
1209	Train evaluate model from config .
1210	Interact with the given agent .
1211	Convert a list of labels to onehot labels .
1212	Convert proba to onehot labels .
1213	Create a TensorFlow session .
1214	Loads the model .
1215	Get the momentum variable of the optimizer .
1216	Update the graph variables .
1217	Returns the f1 score of the predicted targets .
1218	Process a single word .
1219	Create a stacked CNN .
1220	Create a bi - RNN .
1221	Create a stacked bidirectional RNN layer .
1222	Stacked highway CNN .
1223	Embedding layer .
1224	r CuDNN GRU .
1225	r CuDNN compatible GRU .
1226	CuDNN LSTM .
1227	CuDNN compatible LSTM .
1228	r CuDNN Bi GRU .
1229	r CuDNN LSTM .
1230	Gradient of bi - GRU .
1231	Variational dropout .
1232	Build the model .
1233	Build word cnn .
1234	Builds the basic network .
1235	Trains the model on a batch of data .
1236	Predict on a batch .
1237	Make a vector from a list of words .
1238	Convert a list of tags to a numpy array .
1239	Advanced BLEU method .
1240	Verify that the URL is a S3 compatible URL .
1241	Extract certificates from text .
1242	Verify a chain of certificates .
1243	Verify the signature of the request body .
1244	Verify an Amazon signature chain url .
1245	Return JSON controls .
1246	Return a list of all msbot frameworks .
1247	Return a list of all Telegram controls .
1248	Return a list of all alexa .
1249	Main function .
1250	Wrap a function with a graph .
1251	Wrap a Keras function .
1252	Compute accuracy .
1253	Calculate the accuracy of the predictions .
1254	Initialize a pre - trained model .
1255	Read data from file .
1256	Make a default bot agent for Hello world .
1257	Return one - hot representation of x .
1258	Prettify metrics .
1259	Populate settings directory .
1260	Load the model .
1261	Save the model to disk .
1262	Get training op .
1263	Search for a word in the trie .
1264	Make default operation costs .
1265	Start timer .
1266	Handle a request .
1267	Act on the given utterance .
1268	Generate the response .
1269	Handle an intent request .
1270	Handle launch request .
1271	Handle unsupported messages .
1272	Pretty print struct .
1273	elmo loss to PSL
1274	Build a Chainer from a configuration file .
1275	Interact with the model .
1276	Predict on a stream .
1277	Read a file and return a list of sentences .
1278	Get a function from a module name .
1279	Decorator to register a metric name .
1280	Get a metric by name .
1281	Convert a string label to an integer .
1282	Given a list of values and a list of losses return the best value .
1283	Encodes a list of tokens .
1284	Read requirements . txt .
1285	Computes the log loss between two predictions .
1286	Export weights to hub .
1287	Show the details of an item .
1288	Create a new EcommerceAgent .
1289	Main entry point for the bot framework .
1290	Download a file .
1291	Untar a file .
1292	Download an archived file .
1293	Recursively updates a dictionary recursively .
1294	Add . md5 suffix to path .
1295	Set a query parameter .
1296	Return the alexa response .
1297	Return the JSON representation of the control .
1298	This method is used to create a postback action
1299	Return the JSON representation of the control .
1300	Return a JSON - ready representation of the activity .
1301	Computes the F1 score of the SQuAD V2 query .
1302	Return recall at k examples .
1303	Check if GPU exists .
1304	Parse a config property .
1305	Parse a config file .
1306	Expand a path .
1307	Instantiate a component from a dictionary .
1308	Process incoming requests .
1309	Delete a conversation .
1310	Refresh expired certificates .
1311	Verify a signed request .
1312	Handle a request .
1313	Load a class from a string .
1314	Register a model class .
1315	Get model class by name .
1316	Get GLM regularization path .
1317	Make a GLM model .
1318	Create a H2OCluster object from a list of key - value pairs .
1319	Shut down the H2O instance .
1320	Check if the server is running .
1321	Show the status of the cluster .
1322	List all jobs
1323	List all timezones .
1324	Fill from h2ocluster .
1325	Get metalearner parameters .
1326	Run test_func until test_func returns True .
1327	Get the summary of a column
1328	Delete a frame .
1329	Get list of model builders .
1330	Validate model parameters .
1331	Compute metrics for a given model and frame .
1332	Get model metrics .
1333	Delete a model .
1334	Print a table of data .
1335	Run count instances .
1336	Terminate EC2 instances .
1337	Stop one or more instances .
1338	Start instances .
1339	Reboot instances .
1340	Wait for SSH connections .
1341	Get the full name of a method .
1342	Find function from code .
1343	Get the signature of a function .
1344	Wrap text to wrap_at characters .
1345	Join the job .
1346	Train the model .
1347	Fit the model .
1348	Return a dictionary of parameters .
1349	Signal handler .
1350	Wipes the output directory .
1351	Remove a sandbox directory .
1352	Scrape port from stdout .
1353	Scrape cloud size from stdout .
1354	Stop the JVM .
1355	Stop all nodes .
1356	Get IP address of current node .
1357	Get the port of the current node .
1358	Get ROC metrics .
1359	Determine the size of the vector .
1360	Calculate H2O mean absolute error .
1361	Computes the H2O mean squared error .
1362	Computes the H2O median absolute error .
1363	Computes the explained variance score .
1364	Raise H2OTypeError if var is not of expected type .
1365	Assert that a string matches a regular expression .
1366	Raise H2OValueError if the expression does not satisfy the condition .
1367	Extract the arguments from the source file .
1368	Check if a variable is of type vtype .
1369	Get the name of a type .
1370	Get the source code for a lambda function .
1371	Check whether a variable is of any type .
1372	Check if a variable is constant .
1373	Return the current configuration .
1374	Read configuration files .
1375	Yields candidate log files .
1376	Execute a progress function .
1377	Store model progress .
1378	Recalculate model parameters .
1379	Estimate the completion time based on the current progress .
1380	Guess next poll interval .
1381	Compute the progress at the given time .
1382	Calculate the time at which the prediction will continue .
1383	Write text to stdout .
1384	Compute widget sizes .
1385	Get the terminal size .
1386	Set the encoding .
1387	Fit the encoder .
1388	Get a H2OFrame from the cache .
1389	Refresh the cache .
1390	Return the type of the given column .
1391	Return the columns of this H2OFrame that are of the given type .
1392	Print the contents of the H2OFrame .
1393	Describe the DataFrame .
1394	Return a new table with rows and cols columns .
1395	Multiply a matrix .
1396	Return a list of all levels .
1397	Number of levels .
1398	Set the frame level .
1399	Set the domain levels .
1400	Rename columns .
1401	Set column names .
1402	Set the name of a column .
1403	Return True if self is contained in item .
1404	Return a new H2OFrame with the given number of folds .
1405	Stratified k - fold column .
1406	Print the structure of the H2O object .
1407	Return the DataFrame as a DataFrame .
1408	Remove and return the i - th column .
1409	Compute the quantile of a DataFrame .
1410	Concatenate a list of frames .
1411	Bind data to columns of this dataframe .
1412	Bind data to this DataFrame .
1413	Split a single frame into multiple frames .
1414	Add a group by clause to the query
1415	Fill missing values .
1416	Impute values of columns .
1417	Merge two H2OFrame objects .
1418	Return a relevel expression .
1419	Insert missing values .
1420	Compute the variance of this array .
1421	Compute the cor product of the columns .
1422	Compute the distance between this H2OFrame and y .
1423	Create an as factor expression
1424	Return a new H2OFrame with the result of strsplit matching the given pattern .
1425	Return the number of rows that match the pattern .
1426	Create a substring expression .
1427	Return a new H2OFrame with rows and columns stripped .
1428	Compute the entropy of the matrix .
1429	Get the number of valid substrings .
1430	Create a table expression .
1431	Plot a histogram of this histogram .
1432	Return a new H2OFrame with the first num_words words in the first num_words words .
1433	Replace first occurrence of pattern with replacement .
1434	Convert to upper case .
1435	Find elements that match a pattern .
1436	Return a new H2OFrame with rows omitted .
1437	Return a new H2OFrame with only the first two columns .
1438	Return a new H2OFrame containing the values of the columns of the current DataFrame .
1439	Return the current minute .
1440	Return a new H2OFrame with a runif expression .
1441	Return a random stratified split .
1442	Return a new H2OFrame with a cut column .
1443	Return the maximum value of the index .
1444	Apply a function to this H2O frame .
1445	Parse text into a Code object .
1446	Parse a file into a Code object .
1447	Move the cursor .
1448	Unparse the token stream .
1449	Get the size of the model .
1450	Get the centers of the model .
1451	Returns the standard deviation of the centers .
1452	Connect to a H2O instance .
1453	Call an H2O API endpoint .
1454	Check H2O version .
1455	Lazy import a module .
1456	Upload a file to a given path .
1457	Imports a CSV file into a frame .
1458	Import Hive table .
1459	Import an SQL table .
1460	Import SQL table .
1461	Parse a raw H2O frame .
1462	Deep copy a H2OFrame .
1463	Get a single model .
1464	Get a single grid .
1465	Get a single frame .
1466	Download model to POJO .
1467	Download data from H2O .
1468	Download all logs from H2O .
1469	Export a H2OFrame to a file .
1470	Convert a H2OFrame to a list .
1471	Run a demo function .
1472	Load a dataset .
1473	Create model metrics .
1474	Upload a file to S3 .
1475	Upload custom metric .
1476	Validate a frame id .
1477	Return a human readable string representation of size .
1478	Normalize a slice .
1479	Check if a slice is normalized .
1480	Predict using pandas .
1481	Run prediction on a csv file .
1482	Mark a function as deprecated .
1483	Wait for the job to finish .
1484	Returns a dictionary of deep features .
1485	Print model summary
1486	Show the grid search results .
1487	Get a list of hyperparameters .
1488	Get a dictionary of hyperparameters .
1489	Get a grid from H2O .
1490	Returns the F1 for each model .
1491	Get the importances of components .
1492	Projects archetypes for the given test data .
1493	Plot a scree plot .
1494	Translate a name to something more readable .
1495	Remove indentation from text .
1496	extract run info from java log file
1497	Main function for extractGLRMRuntimeJavaLog .
1498	Close the session .
1499	Get the session id .
1500	Start logging .
1501	Prepare data payload .
1502	Prepare file payload .
1503	Log the start of a transaction .
1504	Log the end of a transaction .
1505	Log a message .
1506	Process a response .
1507	Print a message to stdout .
1508	Get the leaderboard for a project .
1509	Download a POJO file .
1510	Download the mojo to the given path .
1511	Fit the model .
1512	Scale the data .
1513	Inverse transform the data .
1514	Extract true string .
1515	Find the node name in each line .
1516	Find git hash branch .
1517	Find the build timeout .
1518	Find build failure .
1519	Find the build id .
1520	Extracts the job build URL from a URL string .
1521	Grab a single java message .
1522	Save a dictionary of failed tests .
1523	Update the summary file .
1524	Write content of file2read to fhandle .
1525	Write a Java message .
1526	Load java messages to ignore .
1527	Normalizes an enum constant .
1528	Find synonyms for a word .
1529	Poll the status of the job .
1530	Export the assembly to a POJO file .
1531	Fit a frame .
1532	Percentile on a sorted list .
1533	Return a dictionary of default parameters .
1534	Get the actual value of the model parameters .
1535	Get the deep features for a given layer .
1536	Get the scoring history
1537	Show model details .
1538	Get variable importances as a pandas DataFrame .
1539	Compute the residual degrees of freedom .
1540	Get the coefficients as a dictionary .
1541	Download a POJO file .
1542	Download the model from H2O .
1543	Save model details .
1544	Check that the targets are the same .
1545	List of cross validation models .
1546	H2O Gradient Boosting Estimator .
1547	H2O Deep Learning model .
1548	Generalized Linear Estimator .
1549	Wait for a keystroke .
1550	Return the cell as a pandas DataFrame .
1551	Show the table .
1552	Starts the JVM .
1553	Search for h2o . jar .
1554	Yields paths to h2o . jar files .
1555	Return the hit ratio table .
1556	Wrapper around csv . DictWriter .
1557	Convert a URI to a path .
1558	Convert a path to a URI .
1559	Parse a list of lines .
1560	Generate the documentation for a module .
1561	Discover all modules .
1562	Write API documentation for all modules .
1563	Write the index file .
1564	Returns a list of integers .
1565	Load a dictionary of java messages .
1566	Add a new java message .
1567	Update message dictionary .
1568	Extract a message from a file .
1569	Save the dictionary to a file .
1570	Print a dictionary of java messages .
1571	Parse command line arguments .
1572	Print usage and exit .
1573	Locate all python files in a directory .
1574	Find magic comment in file .
1575	Main function .
1576	Apply the pipeline to data .
1577	Summarize failed runs
1578	Extract intermittens from collected failed tests .
1579	Plot the ROC curve .
1580	Return confusion matrix .
1581	Check if Deep Water is available .
1582	Trims data back to a certain number of months .
1583	Return a dictionary of all endpoint groups .
1584	Update the site forward .
1585	Return the data as a JSON string .
1586	Comment a user .
1587	Get credentials .
1588	Like a user .
1589	Like a hashtag .
1590	Check if user is not in bot
1591	Read a list from a file .
1592	Schedule the message .
1593	Mark the message as deferred .
1594	Downloads the Linode Streaming Analytics configuration .
1595	Guess the service info from a path .
1596	Updates a command .
1597	Deletes an application definition .
1598	Create or update an application definition .
1599	Returns the URI for the given request .
1600	Returns a connection object for the given request .
1601	Perform a request .
1602	Executes script actions .
1603	Check front - door name availability .
1604	Purge deleted keys .
1605	Get the authorization server .
1606	Validate the request URI .
1607	Get CLI credentials .
1608	Get Azure CLI credentials .
1609	Resolve .
1610	Check name availability locally .
1611	Opens the request .
1612	Sets the request timeout .
1613	Set a request header .
1614	Retrieves all response headers .
1615	Sends the request .
1616	Retrieves the status of the request .
1617	Retrieves the status text .
1618	Return the response body .
1619	Sets the client certificate .
1620	Make a PUT request .
1621	Set a request header .
1622	Send the request .
1623	Return a response object .
1624	Get a readable id from an id name .
1625	Get the serialization name for an element name .
1626	Verify face to person .
1627	Adds a job to the batch .
1628	Extract properties from an XML node .
1629	Get a list of children from a path .
1630	Find namespaces from a child node .
1631	Convert XML to a Service Bus namespace .
1632	Convert XML to a Service Bus Region object .
1633	Return a namespace availability response .
1634	Convert XML to metrics .
1635	Replace the runbook content .
1636	List recommendations .
1637	Update a KB .
1638	Get member groups .
1639	Build package from PR number .
1640	Import data into a storage account .
1641	Publish a runbook .
1642	Renew the session lock .
1643	Replace a word .
1644	Add value .
1645	Returns the properties of the specified storage account .
1646	Gets the storage account keys for the given service .
1647	Regenerate storage account keys .
1648	Creates a new storage account .
1649	Updates a storage account .
1650	Deletes the specified storage account .
1651	Checks whether the storage account name is available .
1652	Gets the properties of the specified service .
1653	Creates a new hosted service .
1654	Deletes the specified hosted service .
1655	Creates a new deployment .
1656	Deletes the specified deployment .
1657	Swap the source deployment with the target deployment .
1658	Changes the deployment configuration .
1659	Updates the status of the specified deployment .
1660	Upgrades a deployment .
1661	Walks an upgrade domain .
1662	Reboots a role instance .
1663	Deletes the specified role instances from the service .
1664	Checks whether a hosted service name is available .
1665	Lists the certificates associated with the service .
1666	Gets a single certificate .
1667	Adds a certificate to a hosted service .
1668	Deletes a hosted service certificate .
1669	Gets the management certificate .
1670	Adds a management certificate to the subscription .
1671	Deletes a management certificate .
1672	Gets the properties of the specified affinity group .
1673	Creates a new affinity group .
1674	Deletes the specified affinity group .
1675	Gets a list of all subscription operations .
1676	Creates a reserved IP address .
1677	Deletes the specified reserved IP address .
1678	Associates a reserved IP address with a service .
1679	Disassociate a reserved IP address from a service .
1680	Gets the reserved IP address associated with the given name .
1681	Returns the specified role for the given service and deployment .
1682	Creates a new virtual machine deployment .
1683	Adds a role to a service .
1684	Updates a role .
1685	Deletes the specified role from the service .
1686	Captures a role .
1687	Starts the specified role .
1688	Starts the given roles .
1689	Restart the specified role .
1690	Shut down a role .
1691	Shut down the given roles .
1692	Adds a DNS server to a service .
1693	Updates the specified DNS server .
1694	Deletes the specified DNS server .
1695	List the versions of a resource extension .
1696	Replicates a virtual machine image .
1697	Unreplicates a virtual machine image .
1698	Shares a virtual machine image .
1699	Creates a new VM image .
1700	Deletes the specified virtual machine image .
1701	List VM images .
1702	Updates the specified virtual machine image .
1703	Adds a new os image .
1704	Updates an os image .
1705	Updates the operating system image .
1706	Deletes the specified image .
1707	Returns the data disk for the given role and lun .
1708	Adds a data disk to a service .
1709	Updates a data disk .
1710	Deletes the specified data disk .
1711	Adds a disk .
1712	Updates a disk .
1713	Deletes the specified disk .
1714	Summarize for management group .
1715	Build the receiver link .
1716	Fetch the next batch of messages .
1717	Renews the session lock .
1718	Creates or updates a virtual machine scale set .
1719	Convert to a single placement group .
1720	Screen text .
1721	Create a new key .
1722	Import a key .
1723	Update a key .
1724	Set a secret .
1725	Set certificate issuer .
1726	Create an instance from a connection string .
1727	Get a subscription .
1728	List all subscriptions to a topic .
1729	Send a list of messages .
1730	Get the sender for this message .
1731	Get a receiver for this entity .
1732	Get a deadletter receiver .
1733	Parse an asynchronous operation response .
1734	Perform a GET request .
1735	Perform a PUT request .
1736	Wait for an asynchronous operation to complete .
1737	Gets the status of the specified operation .
1738	Update the management header .
1739	Build a Travis package .
1740	Get certificates .
1741	Get all regions .
1742	List all available namespaces .
1743	Get a namespace by name .
1744	Creates a new namespace .
1745	Deletes the specified namespace .
1746	Checks availability of a service bus namespace .
1747	List the topics under the given name .
1748	List the notification hubs with the given name .
1749	List relays by name .
1750	Get metrics from a queue .
1751	Get metrics rollups for a topic .
1752	Get metrics rollups for a notification hub .
1753	Get metrics rollups from a relay .
1754	Create a new environment .
1755	Create a virtualenv with pip packages .
1756	Creates a new server .
1757	Sets the server administrator password .
1758	Lists the quotas for the given server .
1759	Retrieves server event logs .
1760	Creates a new firewall rule .
1761	Updates a firewall rule .
1762	Deletes the specified firewall rule .
1763	Returns a list of all firewall rules for the specified server .
1764	Lists the service objectives for the given server .
1765	Creates a new database .
1766	Updates a database .
1767	Delete a database .
1768	List databases .
1769	List agreements .
1770	Close this message handler .
1771	Close the receiver .
1772	Get the current session state .
1773	Set the session state .
1774	Receive a list of deferred messages .
1775	Merge a reservation order .
1776	Validate the challenge .
1777	Purge a table .
1778	Default error handler .
1779	Creates a queue .
1780	Deletes the specified queue .
1781	Gets the specified queue .
1782	Creates a topic .
1783	Gets the specified topic .
1784	Creates a rule .
1785	Gets the specified rule .
1786	Lists the rules for the given topic and subscription .
1787	Creates a subscription .
1788	Gets the specified subscription .
1789	Lists the subscriptions for the given topic .
1790	Sends a message to a topic .
1791	Unlocks a subscription message .
1792	Sends a batch of messages to a queue .
1793	Unlocks a message in a queue .
1794	Receive a message from a queue .
1795	Receive a subscription message .
1796	Creates an event hub .
1797	Updates an event hub .
1798	Gets the specified event hub .
1799	Sends an event to a hub .
1800	Adds content - type header to the request .
1801	Returns the Authorization header
1802	Check if the token is expired .
1803	Get token from accessconstrol server .
1804	Update request URI query .
1805	Resets a service principal profile .
1806	Delete this message .
1807	Unlocks the lock .
1808	Renews the lock .
1809	Adds custom properties to the request .
1810	Return the batch body as a dict .
1811	Get cluster health .
1812	Get cluster health using policy .
1813	Unprovision an application type .
1814	Get repair task list .
1815	Submit a property batch .
1816	General error handler .
1817	Starts a web site trace operation .
1818	ListSlotDifferencesSlot . Gets the differences between two slots .
1819	Swaps a slot .
1820	Get by type .
1821	Add face from stream .
1822	Handle redirect responses .
1823	Create and start a migration .
1824	Publish events .
1825	Move resources from one resource group to another .
1826	Set the profile to use .
1827	ListQueryResultsForManagementGroup .
1828	Create a queue .
1829	Delete a queue .
1830	Create a topic .
1831	Delete a topic .
1832	Create a subscription .
1833	Create an instance from a connection string .
1834	Get properties of the queue .
1835	Check if the lock is expired .
1836	Create a new session .
1837	Create a new subscription .
1838	Exports request rate by interval .
1839	Process the results queue .
1840	Bulk add tasks .
1841	Task collection thread handler .
1842	Build a configuration dictionary .
1843	Resets a user s password .
1844	Starts an environment .
1845	Creates a message from a response .
1846	Convert an ElementTree entry to a Rule object .
1847	Convert an ElementTree entry to a Queue object .
1848	Convert an ElementTree entry to a Topic object .
1849	Convert an ElementTree entry to a Subscription object .
1850	Create a certificate .
1851	Deletes a certificate .
1852	Get client from CLI profile .
1853	Create a client from a json dictionary .
1854	Get client from auth file .
1855	Parse an enumeration results list .
1856	Extract properties from an XML element .
1857	Delete a certificate .
1858	Get a queue .
1859	List all queues .
1860	Get a topic .
1861	List all available topics .
1862	Receive a list of messages from the queue .
1863	Settle a set of messages within a locked receive session .
1864	Get a single site .
1865	Create a new site .
1866	Delete a website .
1867	Updates a website .
1868	Restart a website .
1869	Get historical usage metrics for a website .
1870	Get metric definitions for a website .
1871	Get publish profile xml .
1872	Get the publish profile for a website .
1873	Update policies .
1874	Creates a new cloud service .
1875	Checks the availability of a job collection .
1876	Gets the Job Collection with the specified id .
1877	Completes a restore operation .
1878	Cancel scheduled messages .
1879	Send all pending messages .
1880	Reconnect to the server .
1881	Get a certificate from a publish settings file .
1882	Load cookies from the cache .
1883	Get terminal width .
1884	Get cut prefix .
1885	Print a message inplace .
1886	Format a file size .
1887	Format elapsed time .
1888	Create a progress line .
1889	Print a progress bar .
1890	Generate segment numbers for this playlist .
1891	Return the segments for this presentation .
1892	Wait for the specified amount of time .
1893	Put a segment into the queue .
1894	Put a value into a queue .
1895	Get parameters for a specific player .
1896	Extract the nonce from the redirect URL .
1897	Find vpid from url .
1898	Parse JSON data .
1899	Parse XML data .
1900	Parse query string data .
1901	Search a dictionary for a key .
1902	Spawn a new process .
1903	Iterate over tags in html .
1904	Parse a manifest .
1905	Determine the JSON encoding of a sample .
1906	Parse a JSON response .
1907	Parse XML response .
1908	Parse cookies .
1909	Parse headers .
1910	Parse query parameters .
1911	Return the formatted message .
1912	Create a log record .
1913	Login to LiveEdu account .
1914	Load a support plugin .
1915	Update a URL s query string .
1916	Iterate over chunks of audio .
1917	Return a generator of all requires for the given name .
1918	Check file output .
1919	Create file output .
1920	Create an HTTP server .
1921	Iterate over http requests .
1922	Output a stream of HTTP requests .
1923	Passthrough to the player .
1924	Opens a stream .
1925	Write data to a stream .
1926	Read data from a stream .
1927	Handle a stream .
1928	Fetch the streams for the given plugin .
1929	Fetch a list of streams from the plugin .
1930	Resolve a stream name .
1931	Format valid streams .
1932	Handle a URL .
1933	Print the loaded plugins .
1934	Authenticate to Twitch using OAuth .
1935	Load plugins from directories .
1936	Setup command line arguments .
1937	Setup console .
1938	Setup http session .
1939	Load plugins .
1940	Sets up the streamlink options .
1941	Log current versions .
1942	Extract the stream id from the text .
1943	Extract an iframe from text .
1944	Set an option .
1945	Get an option .
1946	Set a plugin option .
1947	Get a plugin option .
1948	Resolve a URL .
1949	Load plugins from the given path .
1950	Convert hours minutes seconds to int .
1951	Validate that a string starts with a given string .
1952	Validate that a string ends with a given string .
1953	Validate that a string contains a string .
1954	Get an attribute of an object .
1955	Apply a function to each item of a dictionary .
1956	Apply a function to each item of a dict .
1957	Validate a URL .
1958	Return the first element matching the XPath .
1959	XPath - XPath query .
1960	Find the URL of the player .
1961	Load audio data .
1962	Return the name of a supported player .
1963	Login to Steam .
1964	Extract the stream_id from the given HTML .
1965	Extract the stream_info from the html .
1966	Login to the login website .
1967	Map a function to a key .
1968	Make a call to the Crunchyroll API .
1969	Start session .
1970	Get information about a media .
1971	Create the crunchyroll API .
1972	Compress a string .
1973	Format a character .
1974	Format a string for output .
1975	Read n bytes .
1976	Return the value of this code .
1977	Return the explanation for this code .
1978	Set the decode table .
1979	Set the length table .
1980	Prints the code of the symbol table .
1981	Read a tuple .
1982	Return an explanation of the value at index .
1983	Return the value at the given index .
1984	Return the span of the value at index .
1985	Return the value at the given index .
1986	Return the mnemonic for a symbol .
1987	Return the mnemonic for the given index .
1988	Compile the actions table
1989	do an action
1990	Make a hex string from the stream .
1991	Process the stream .
1992	Read the metablock length .
1993	Read uncompressed data .
1994	Read a block type .
1995	Transform a list of values into a list of transformed values .
1996	Read a prefix array .
1997	Return a monochrome color .
1998	Polychrome operator .
1999	Create an arrow table from a Vaex DataFrame .
2000	Mark a function as hidden .
2001	Add virtual columns to pmvr .
2002	Add virtual columns proper motion2vperpendicular .
2003	Return a graphviz DOT representation of the node .
2004	Count the number of values in the expression .
2005	Return a new DataSwim
2006	Flask application factory .
2007	Open multiple files .
2008	Read a SAMP message .
2009	Create a DatasetAstropyTable from an astropy table .
2010	Create a DataFrame from a list of arrays .
2011	Convenience constructor for from_arrays .
2012	Create a DataFrame from a pandas DataFrame
2013	Read data from a CSV file .
2014	Return a vaex . remote . ServerRest instance .
2015	Zeldovich random variates .
2016	Concatenate a list of lists .
2017	Create a virtual range column .
2018	Open a dataset .
2019	Evaluate an expression .
2020	Decorator to call a function in a delayed way .
2021	Return a list of columns that depend on this selection .
2022	Run a task .
2023	Sort the pairs .
2024	Detects Gadget file type .
2025	Clear the plot .
2026	wait for last plot to finish
2027	Open a document .
2028	Write to a file .
2029	Split and combine masks .
2030	Return a new DStream by applying an expression to each RDD .
2031	Perform a first aggregation .
2032	Compute the mean of an expression .
2033	Compute the sum of a sequence expression .
2034	Compute the standard deviation of a sequence expression .
2035	Calculate the covariance of x and y .
2036	Calculate the minimum and maximum values of an expression .
2037	Compute the minimum of a sequence expression .
2038	Compute the approximate median of a sequence expression .
2039	Plot a plot .
2040	Compute healpix counts for a given expression .
2041	Plot a healpix image .
2042	Plot a 3D volume .
2043	Return the data type of the expression .
2044	Get the private directory for this drive .
2045	Get the current state of the model .
2046	Set the state of the column .
2047	Remove virtual_meta . yaml
2048	Write virtual_meta . yaml
2049	Write the meta . yaml file .
2050	Returns True if any of the given expressions are a subset of any of the given dimensions .
2051	Set a variable .
2052	Evaluate a variable .
2053	Evaluate a selection mask .
2054	Convert the table to a dictionary .
2055	Return a copy of the DataFrame .
2056	Convert to pandas DataFrame .
2057	Convert the DataFrame to an arrow table .
2058	Convert to astropy table
2059	Add a column to the DataFrame .
2060	Rename a column .
2061	Add virtual columns to polar coordinates .
2062	Add virtual columns for cartesian velocities .
2063	Add virtual columns cartesian velocity to polar vectors .
2064	Add virtual columns polar velocities to cartesian coordinates .
2065	Add a virtual columns rotation .
2066	Add virtual columns from spherical to cartesian coordinates .
2067	Add virtual columns to spherical coordinates .
2068	Add a virtual column .
2069	Delete a virtual column .
2070	Add a new variable .
2071	Delete a variable .
2072	Return the last n rows .
2073	Print the first n rows .
2074	Describes the DataFrame .
2075	Print the contents of two tables .
2076	Set the current row .
2077	Return a list of column names .
2078	Trim the DataFrame .
2079	Take a subset of columns .
2080	Extract a subset of the image .
2081	Sample from the matrix .
2082	Split the matrix at a fraction of its rows .
2083	Split the data into chunks .
2084	Sort the Series by a criterion .
2085	Materialize a virtual column .
2086	Undo selection .
2087	Redo selection .
2088	Check if the selection can be undone .
2089	Select a boolean expression .
2090	Select non - missing columns .
2091	Drop missing values from Series .
2092	Select a rectangle .
2093	Selects a box with the given limits .
2094	Select a circle .
2095	Selects an ellipse .
2096	Select a lasso .
2097	Select an inverse selection .
2098	Set a selection .
2099	Handle selection changes .
2100	Find valid column name .
2101	Return the root nodes of the expression graph .
2102	Return a graphviz dot object .
2103	Categorize a column .
2104	Return a new DataSwim instance with encoded values for a column .
2105	Returns a Datas object with all the data in the table .
2106	Return the length of the array .
2107	Stack two DataFrames .
2108	Concatenate two DataFrames .
2109	Export DataFrame to HDF5 file .
2110	Add a column to the DataFrame .
2111	Mark a function as deprecated .
2112	Register a function .
2113	Fill missing values .
2114	Day of week .
2115	Day of year .
2116	Check if a date is a leap year .
2117	Return the year of x .
2118	Return the month of x .
2119	Return the month name of x .
2120	Day of the year .
2121	Return the day name of x .
2122	Week of year .
2123	Get hour of day .
2124	Get the minute of a date
2125	Return the second value of x .
2126	Capitalize x .
2127	Concatenate two strings .
2128	Return True if x contains pattern .
2129	Return the number of occurrences of pat in each string in x .
2130	Find substrings in a string .
2131	Get the string at index i .
2132	Find the index of sub in x .
2133	Convert a string sequence to a ColumnStringArrow .
2134	Return a copy of x with leading whitespace removed .
2135	Pad a string to a given width .
2136	Repeats a sequence of characters .
2137	Find the first occurrence of a substring within a string .
2138	Find the first occurrence of sub in the string x .
2139	Return a new column arriving right - aligned with fillchar .
2140	Return a copy of x with all whitespace removed .
2141	Slice a string sequence .
2142	Strip whitespace from a string .
2143	Create a string column .
2144	Convert a string to upper case .
2145	Return the autotype of an array .
2146	Return a numpy recarray representation of the object .
2147	Write properties to a file .
2148	Write a comment to the file .
2149	Write a property .
2150	Iterate properties of a file - like object .
2151	Universal newlines generator .
2152	Show installed versions .
2153	Rename a keyword argument .
2154	Set the FFT library .
2155	Track beats .
2156	Adjust the harmonic component of an audio file .
2157	Convert frames to samples .
2158	Convert samples to frames .
2159	Convert time series to frames .
2160	Convert midi number to note .
2161	Convert frequencies to mels .
2162	Convert mels to Hz
2163	Frequencies of fft bins
2164	Calculate the CQT frequencies .
2165	Return frequencies of mel bands .
2166	A weighting function .
2167	Return a times - like array of samples .
2168	Return a list of samples .
2169	Hybrid CQT .
2170	Compute the pseudo - CQT of a signal .
2171	CQT filter .
2172	Filter using FFT .
2173	Remove any bottom frequencies that we don t care about
2174	Compute the CQT response
2175	Calculate the early downsampling count .
2176	Early downsampling .
2177	Calculate the accu cost .
2178	Backtracking algorithm for dtw .
2179	Run the Viterbi algorithm .
2180	Discriminative version of Viterbi .
2181	r Generates a transition matrix uniformly .
2182	Return a transition matrix .
2183	r Generates a transition matrix from the given probabilities .
2184	r Creates a transition matrix for a local model .
2185	r Detect onset strength profiles .
2186	Compute the onset strength of a signal .
2187	Given an array of events and an array of energy return the minimum onset onset for each event .
2188	Compute the onset strength for a set of data .
2189	Write times to a CSV file .
2190	Write audio to a wav file .
2191	Return a colormap .
2192	Plot a waveform .
2193	Set the current image
2194	Return mesh coordinates .
2195	Check if axes is an instance of matplotlib . axes . Axes .
2196	Helper function to scale axes .
2197	Compute the frequencies of the FFT bins .
2198	Calculate the mel frequency basis
2199	Return the frequencies for a given number of CQT bins .
2200	Compute chroma coordinates .
2201	Convert a number of frames to time .
2202	Estimate a frequency - domain waveform using piptrack .
2203	Perform a Piptrack .
2204	Compute the harmonic and percusivity of a set of samples .
2205	Harmonic function .
2206	Compute the percussive harmonic value of y .
2207	Stretch a time series using phase vocoder .
2208	Apply a pitch shift to a time series .
2209	Remix audio data .
2210	Convert a signal to a non - silent frame .
2211	Trim a signal to a given number of frames .
2212	Split a signal into samples .
2213	Phase vocoder .
2214	r Convert amplitude to db .
2215	Compute a spectrogram .
2216	Harmonic - percussive separation .
2217	Decomposes a matrix .
2218	Apply a self - similarity filter .
2219	Helper function for filtering out non - zero targets .
2220	Mel filter .
2221	Compute the chroma of a signal .
2222	Returns a function that returns a float window .
2223	r Return a constant frequency domain filter .
2224	r Compute the constant frequency lengths .
2225	Convert a number of octaves to chroma .
2226	Calculate the bandwidth of a window .
2227	Get a window .
2228	Multirate filterbank .
2229	Return the center frequency and sample rates for a given tuning .
2230	Fill the given window with the given data .
2231	Compute the sumsquare of a window .
2232	Diagonal filter .
2233	r Compute the spectral centroid .
2234	r Compute the spectral rolloff of a signal .
2235	r Spectral flatness .
2236	Polynomial fitting .
2237	Compute zero crossing rate .
2238	Compute the chroma of a signal .
2239	Chroma CQT .
2240	Mel spectrogram .
2241	Compute the Jaccard distance between two sets .
2242	Match intervals that overlap a query .
2243	Match intervals between two sets of intervals .
2244	Match two intervals .
2245	Matches events from events_from to events_to .
2246	Compute the salience of a signal .
2247	Interpolate harmonics .
2248	r Estimate the harmonic energy at this frequency across time .
2249	Compute the harmonics of a 2D array .
2250	Load a soundfile .
2251	Load audio data from a file .
2252	Convert audio to mono .
2253	Resample audio .
2254	Compute the autocorrelated power spectrum .
2255	LPC computation .
2256	Create a set of clicks .
2257	Return the tone of a signal
2258	Chirp signal .
2259	Given a directory name and a list of extensions return a list of files in that directory .
2260	Stretch an audio file using the effects module .
2261	Process arguments .
2262	Harmonic and percussive analysis .
2263	r Beats a track .
2264	Return a list of beats in ascending order .
2265	Calculate beat local score .
2266	Calculate the dp for a beat track .
2267	Find the last beat in the cumscore .
2268	Convert a recurrence matrix to a lag matrix .
2269	Convert lag matrix to recurrence matrix .
2270	Time - lag filter .
2271	Sub - segment data .
2272	Agglomerative clustering .
2273	r Enhances a path .
2274	Detect onsets .
2275	Construct a frame from a numpy array .
2276	Validate audio data .
2277	Validate an integer .
2278	Fix the length of an array .
2279	Sort a 2D array .
2280	Normalize a signal .
2281	Local max op .
2282	Peak picking .
2283	Sparsify rows of a matrix .
2284	Roll a sparse matrix .
2285	Convert a numpy buffer to a float .
2286	Convert an index to a list of slices .
2287	Synchronizes the data and index .
2288	Softmask an array .
2289	Return a tiny version of x .
2290	Convert frames to a video file .
2291	Read a single image .
2292	Get a single frame .
2293	Convert image to frames .
2294	Track the progress of a function .
2295	Run a function in parallel .
2296	Flip an image .
2297	Rotate image by angle .
2298	Clip bounding boxes .
2299	Scale a set of bounding boxes .
2300	Crop an image .
2301	Impad op .
2302	Impad to multiple of divisor .
2303	Scale a size .
2304	Resize an image .
2305	Resize an image .
2306	Rescale an image .
2307	Register a file handler .
2308	Get a priority value .
2309	Dequantize an array .
2310	Display an image .
2311	Display a list of bboxes .
2312	Read a flow from a file .
2313	Write a flow to a file .
2314	Dequantize a flow .
2315	Load a state dictionary .
2316	Load a checkpoint .
2317	Convert a dictionary of states to CPU states .
2318	Save a checkpoint .
2319	Initialize an optimizer .
2320	Initialize the logger .
2321	Current learning rate .
2322	Register a new hook .
2323	Run a workflow .
2324	Register training hooks .
2325	Convert a video file .
2326	Resize a video file .
2327	Cut a video .
2328	Concat video files .
2329	Read a list of items from a file .
2330	Read a dictionary from a file .
2331	3x3 convolution .
2332	Create an object from a dict .
2333	Read image from file .
2334	Load image from bytes .
2335	Write image to file .
2336	Convert from BGR to grayscale .
2337	Convert gray to bgr .
2338	Cast an iterable to a new type .
2339	Check if a sequence is a sequence of expected type .
2340	Slice a list .
2341	Check prerequisites .
2342	Calculate the average value of the history .
2343	Scatter input to devices .
2344	Return color value .
2345	Get the time since the last check of a timer .
2346	Start the timer .
2347	Return the number of seconds since the timer started .
2348	Elapsed time since last check .
2349	Display a flow .
2350	Convert flow to RGB .
2351	Make a color wheel .
2352	Compute accuracy .
2353	Scatter a set of targets .
2354	Scatter inputs and kwargs .
2355	Perform the actual request .
2356	Return a JSON response .
2357	Return a string representation of the request body .
2358	Handle a callback .
2359	Perform multiple requests .
2360	Make a request .
2361	Start all the workers .
2362	Normalizes a task dictionary .
2363	Parse YAML data for line numbers .
2364	Return the wheel distribution name .
2365	Get the name of the archive .
2366	Add setup . cfg requirements .
2367	Convert an egg - info file to a dist - info file .
2368	Create a message activity .
2369	Create a message with suggested actions .
2370	Create an attachment activity .
2371	Create a list of attachments .
2372	Create an attachment from a url .
2373	Create a trace activity .
2374	Setter for _telemetry_client .
2375	Read data from the database .
2376	Write changes to the database .
2377	Delete one or more documents .
2378	Create a store item from the result .
2379	Create a dictionary from a store item .
2380	Sanitize a key .
2381	Create database and container .
2382	Get or create a database .
2383	Get or create a container .
2384	Fills a QnA event .
2385	Returns a ConversationReference for the given activity .
2386	Get step name .
2387	Check if a channel supports suggested actions .
2388	Check if a channel supports card actions .
2389	Get the channel id from the activity .
2390	Check if the token is an emulator token .
2391	Create a hero card attachment .
2392	Returns a list of all parameters .
2393	Return a copy of this instance mirroring its definition .
2394	Inverse of this gate .
2395	Set a control value .
2396	Make a deep copy of the object .
2397	Return qasmif instruction .
2398	Return a QASM instruction .
2399	Run a circuit .
2400	Run a single pass .
2401	Return a list of all the passes in the list .
2402	Dump all the passes to a dictionary .
2403	Create a controller .
2404	U - base function .
2405	Return the parameters for a single gate .
2406	Return a matrix for a single gate .
2407	einsum_matmul_index is the inverse of einsum_index .
2408	einsum_vecmul_index is the inverse of einsum_index .
2409	Helper function for einsum_matmul_index .
2410	Convert a Circuit object to a DAGCircuit object .
2411	Exp fitting function .
2412	Compute the Oscillator fitting function .
2413	Plot a coherence measurement .
2414	Get the data from the raw_rb array .
2415	Plot RBBI data .
2416	Split a list of runs on parameters .
2417	r Composes two u3 gates .
2418	Convert from YZY to ZYZ .
2419	Validate the input state .
2420	Trim a PIL image .
2421	Given a list of qregs and an instruction object return a list of qregs .
2422	Convert a circuit to an instruction .
2423	Run the transpiler .
2424	Return the best subset of the coupling map .
2425	Add a barrier to the program .
2426	Calculate the average of counts and observables .
2427	Process a bit ID node .
2428	Process a custom unitary .
2429	Process a gate node .
2430	Process a CNOT node .
2431	Process a measure node
2432	Process if node
2433	Create a dag operation .
2434	Get the duration of a channel .
2435	Get the start time of one or more channels .
2436	Get the stop time for one or more channels .
2437	Iterate over the instructions in this schedule .
2438	Check that value is of expected type .
2439	Dump additional data .
2440	Load additional data .
2441	Create a validation schema .
2442	Validate an instance .
2443	Decorate a model init method to perform deep validation .
2444	Serialize the model to a dictionary .
2445	Load a model instance from a dictionary .
2446	QFT algorithm .
2447	partial trace vector
2448	Vectorize a density matrix .
2449	Devectorize a matrix .
2450	Return the rauli of a choi .
2451	Chops an array of real and imaginary numbers into a single array .
2452	Computes the outer product of two vectors .
2453	r Compute the concurrence of a state .
2454	Calculate Shannon entropy .
2455	Calculate the entropy of a state .
2456	Calculate the mutual information .
2457	Compute the entanglement of a formation .
2458	Compute the EOS of a qubit .
2459	Flatten a schedule .
2460	Shift a schedule .
2461	Insert a child component into a parent component .
2462	Append a child component to a parent component .
2463	Add a 3x3 rotation gate .
2464	Return the status of the backend .
2465	Start iteration .
2466	Returns the estimated time remaining in seconds .
2467	Disassemble a Quil program .
2468	Return the hamming distance between two strings .
2469	Create a quaternion from an axis rotation .
2470	Create a quaternion from Euler angles .
2471	Normalize the quaternion .
2472	Convert to matrix .
2473	Convert to zyz coordinates .
2474	Process data .
2475	Plot a histogram .
2476	Check the type of the value .
2477	Check if a register index is valid .
2478	Check if a matrix is a square matrix .
2479	Check if a matrix is a diagonal matrix .
2480	Return True if op is a symmetric matrix .
2481	Check if a matrix is a hermitian matrix .
2482	r Check if a symmetric matrix is positive semidefinite .
2483	Check if a matrix is an identity matrix .
2484	Check if a matrix is a unitary matrix .
2485	Convert a QuantumChannel to a choi .
2486	Convert a QuantumChannel to a superop .
2487	Convert to Kraus .
2488	Convert to Chi representation .
2489	Convert to PTM .
2490	Convert to stinespring representation .
2491	Convert to operator representation .
2492	Convert an operator to a matrix .
2493	Convert stinespring data to Operator representation .
2494	Convert a superop to a choi .
2495	Helper function for _choi_to_superop .
2496	Convert kraus data to choi .
2497	Convert Choi matrix to Kraus matrix .
2498	Convert stinespring to kraus .
2499	Convert stinespring to choi .
2500	Convert kraus vectors to stine vectors .
2501	Convert kraus operators to superop .
2502	Convert a Pauli operator to a Choi operator .
2503	Convert Choi data to Pauli data .
2504	Reravel two matrices .
2505	Transform data using Pauli operators .
2506	Check that input_dim is an n - qubit channel .
2507	Hide ticklines and labels for a matplotlib axis .
2508	Set the label convention
2509	Clear the object .
2510	Add a list of vectors .
2511	Add an annotation .
2512	Render the plot .
2513	Plot the front of the sphere .
2514	Show the figure .
2515	Two - qubit unitary operator .
2516	Return the top border as a string .
2517	Return the mid string
2518	Return a string representation of the bot .
2519	Return the length of the rectangle .
2520	Returns a list of parameters for a label instruction .
2521	Returns a label for a box instruction .
2522	Return the latex representation of this parameter .
2523	Compile a set of circuits .
2524	Filter out deprecation warnings .
2525	Return local hardware information .
2526	Check if we have a connection .
2527	Check the status of a job .
2528	Return a constant array .
2529	Square root of amplitude .
2530	Calculate a triangle .
2531	Complex cosine function .
2532	Helper function to fix gaussian width .
2533	Compute a gaussian .
2534	Compute the gaussian derivative of a signal .
2535	Perform a gaussian square .
2536	Default pass manager .
2537	Default pass manager simulator .
2538	Check if the given register exists .
2539	Return a copy of the Circ instance with mirroring .
2540	Inverse Circuit .
2541	Append an instruction to the wires .
2542	Add an instruction to the stack .
2543	Add a quantum register .
2544	Check for duplicate qubits .
2545	Check that qargs are valid .
2546	Check that all cargs are valid .
2547	Check that circuits are compatible .
2548	Return a string representation of the instruction .
2549	Draw circuit .
2550	Return the number of gate operations .
2551	The width of the instruction .
2552	Count the number of operations .
2553	Return the number of connected components .
2554	Bind parameters to the circuit .
2555	Bind a parameter to all instruments .
2556	Generate a pulse drawer .
2557	Search forward n - gates .
2558	Map a list of gates to a layout .
2559	Calculate the distance between the gates and the coupling map .
2560	Compute the score of a step .
2561	Create a copy of a DAGCircuit .
2562	Return a copy of the gate that is mapped to the layout .
2563	Return a list of DAG nodes for the given edge .
2564	Run the mapper .
2565	Add a physical qubit to the coupling graph .
2566	Add an edge from one qubit to another .
2567	Return a subgraph of the graph .
2568	The list of physical qubits .
2569	Check if the graph is connected .
2570	Compute the distance matrix .
2571	Return the distance between two qubits .
2572	Transpile a set of circuits .
2573	Add a Cu1 gate .
2574	Inverse operation .
2575	Perform a q_if instruction .
2576	Add a conditional if statement .
2577	Subscribe to an event .
2578	Dispatch an event .
2579	Unsubscribe from an event .
2580	Publish an event .
2581	Initialize qubits .
2582	Initialize the circuit .
2583	Return a list of gates to uncompute .
2584	Calculate the angle between two complex numbers .
2585	Internal multiplex function .
2586	Check if value is a virtual register .
2587	Return a copy of the layout .
2588	Combine this layout with another layout .
2589	Add a Coffoli gate .
2590	Insert a schedule into this component .
2591	Check if a property is protected .
2592	Convert a list of gates to a list of indices .
2593	Run the stochastic swap .
2594	Update a single layer .
2595	Group a set of qubits into a Pauli set .
2596	Create a Pauli object from a label string .
2597	Initialize from boolean vectors .
2598	Return the product of two Pauli operators .
2599	Convert to operator .
2600	Convert this Pauli into an instruction .
2601	Update qubits z .
2602	Update x .
2603	Insert paulis into the tensor .
2604	Append paulis to the end of the list .
2605	Delete a set of qubits .
2606	Generate a set of random samples .
2607	Create a single Pauli operator .
2608	Compute the outcome of a measure .
2609	Add a sample to the memory .
2610	Add a measure to the computational basis .
2611	Add qasm reset .
2612	Validate the initial statevector .
2613	Initialize the statevector .
2614	Get the statevector .
2615	Validate measure sampling .
2616	Run a job .
2617	Run a job .
2618	Validate the circuit .
2619	Validate the initial unitary .
2620	Initialize the unitary .
2621	Get the unitary matrix .
2622	Run a job .
2623	Validate qubits .
2624	Check if an object is a bit .
2625	Run the transpiler .
2626	Check if this interval overlaps with the given interval .
2627	Shift the interval by time .
2628	Shift the timeslot by time .
2629	Get the start time of one or more channels .
2630	Get the stop time of a channel .
2631	Return True if the timeslot collection is mergeable with this one .
2632	Returns a copy of this collection with the given timeslots merged together .
2633	Shift the timeslots by time .
2634	Report to github .
2635	Process the data .
2636	Displays the state of the paulivec visualization .
2637	Add a rotation gate to the circuit .
2638	Add a CSWAP gate .
2639	Initialize the backend property .
2640	Create the program graph .
2641	Select the next pending program edge .
2642	Select the best remaining circuit .
2643	Select the best remaining hardware qubit .
2644	Run the transpiler .
2645	Return a list of instructions .
2646	Inverse the gate .
2647	Apply q - if condition .
2648	Apply a classical if condition .
2649	Check if the matrix is unitary .
2650	Return the conjugate of the tensor .
2651	Transpose operator .
2652	Power operator .
2653	Returns the shape of the tensor .
2654	Convert an instruction to an Operator .
2655	Implementation of the swap mapper layer .
2656	Separate a bitstring into substrings .
2657	Format level 0 memory .
2658	Format level 1 memory .
2659	Format level 2 memory .
2660	Format a dict of counts .
2661	Format a statevector .
2662	Format a unitary matrix .
2663	Decorator that ensures the job is submitted .
2664	Submit the job .
2665	Return the status of the job .
2666	Returns True if this interval includes lo_freq .
2667	Plot a bloch multivector .
2668	Get the list of qubits in the user lo configuration .
2669	Return default measurement frequencies .
2670	Run the decomposition .
2671	Plot the state of the qsphere .
2672	Choose a number of k .
2673	Return the lexicographical index of a list .
2674	Plot the state of the pauli operators .
2675	Return a list of unique hardware backends .
2676	Get the op of the node
2677	Return a constant pulse .
2678	Create a zero pulse .
2679	Create a square pulse .
2680	Create a sawtooth pulse .
2681	Create a new triangle pulse .
2682	Create a new cos pulse .
2683	Create a sinusoidal pulse .
2684	Return a gaussian sample .
2685	Return a gaussian derivative pulse .
2686	Return a gaussian square pulse .
2687	Return the distance to the real axis .
2688	Pretty print the qreg node .
2689	Return a backend instance .
2690	Rename a register .
2691	Remove all named operations .
2692	Add a QuantumRegister to the circuit .
2693	Add a ClassicalRegister to the DAG .
2694	Add a wire to the graph .
2695	Verify that a condition exists .
2696	Get the bits in a condition .
2697	Add an operation node to the graph .
2698	Apply an operation back to the circuit .
2699	Check that all edges have the same reg .
2700	Validate the wire map .
2701	Map a condition to the wire map .
2702	Extend the binary quadratic model with the given graph .
2703	Composes the circuit back into the wire map .
2704	Check the list of wires .
2705	Given a node return the pred and succ maps .
2706	Compute the full predecessor and successor maps .
2707	The topological nodes of the graph .
2708	Iterate over the edges of the graph .
2709	Return a list of nodes that have op type op .
2710	Return a list of gate nodes .
2711	Return a list of named nodes .
2712	Returns a list of two - qubit gates .
2713	Return the predecessors of a node .
2714	Get predecessors of a node .
2715	Return the ancestors of a node .
2716	Return all successors of a node .
2717	Remove an op node from the circuit .
2718	Remove all nodes that are ancestors of node .
2719	Remove all descendants of a node .
2720	Remove all nodes that are not ancestors of node .
2721	Remove all nodes that are descendants of node .
2722	Return a list of all layers in this circuit .
2723	Return a list of nodes in the DAG .
2724	Returns a generator over all layers in the multigraph .
2725	Collect a list of gates from this circuit .
2726	Returns the nodes that are connected to the given wire .
2727	Count the number of operations .
2728	Return a summary of the tensor statistics .
2729	Construct a TomographyBasis object from a basis set .
2730	Pauli measurement gates .
2731	Set the tomographic basis .
2732	Process a tomography set .
2733	Create tomographic circuits .
2734	Generate data for tomography .
2735	Calculate the marginal counts for a set of qubits .
2736	r Fit a tomography data set .
2737	Fit the least square fit to the data .
2738	Projector function .
2739	Perform a TOMO linear inversion .
2740	r Wizard function .
2741	Calculate wigner data .
2742	Measure a circuit .
2743	Check the status of a job .
2744	Monitor the status of a job .
2745	Return the angle in radians of the unitary quaternion .
2746	Simplify a rotation matrix .
2747	Run the enlarge operation .
2748	Generate a tabular output for qubits .
2749	Displays the job history .
2750	Plots the job history .
2751	Draw the waveform .
2752	Add a Cu3 gate .
2753	Build a bell circuit .
2754	Transpile a list of circuits .
2755	Transpile a circuit .
2756	Execute a set of experiments .
2757	Return the drive channel .
2758	The first control channel in this qubit .
2759	Return the first measurement channel in this qubit .
2760	Return the first acquire channel in the queue .
2761	Computes the input state of the system .
2762	Assemble a set of experiments .
2763	Unset qiskit logger .
2764	Plot the state of the given rho .
2765	Process a fidelity operator .
2766	Input data .
2767	Pop a lexer from the stack .
2768	Push the lexer onto the stack .
2769	Run the circuit .
2770	Returns the bound method for the given instruction .
2771	Convert a acquire instruction .
2772	Convert a frame change .
2773	Convert a persistent value .
2774	Convert a drive instruction .
2775	Convert a snapshot instruction .
2776	Update pulse annotations .
2777	Decorate a continuous pulse sampler function .
2778	Filter a list of backends .
2779	Resolve a backend name .
2780	Convert a DAG to a QuantumCircuit .
2781	Make a dictionary of observables .
2782	Update the current symtab .
2783	Verify that a bit is declared .
2784	Verify a list of expressions .
2785	Verify that an object is a gate .
2786	Verify that an object is a register
2787	Verify that the object is a bitlist or an idlist .
2788	Find the column in the input string .
2789	Parse debug flag .
2790	Parse QASM data .
2791	Parse the given data .
2792	Parse QASM file .
2793	Add a Crz gate .
2794	Return the basis state of a bitstring .
2795	Project a state onto a state matrix .
2796	Return the purity of a state
2797	Run the commutator .
2798	Display a backend .
2799	Update backend information .
2800	Generate the jobs pending progress bar .
2801	Run the algorithm .
2802	Get a backend by name .
2803	Bipartite shape .
2804	Given a list of bit labels return a generator yielding the register names and the number of registers .
2805	Truncates a float .
2806	Return a LaTeX document .
2807	Get the depth of the image .
2808	Get the beamer page .
2809	Load schema from file .
2810	Get a JSON schema validator .
2811	Load schemas and validators .
2812	Validate a JSON dict against a schema .
2813	Format the causes of an error .
2814	Draw the majority .
2815	Unmajority operator .
2816	Generate a LaTeX source for a circuit .
2817	Draw a circuit using matplotlib .
2818	Generate a random unitary operator .
2819	Generate a random density matrix .
2820	Generate a random Gaussians matrix .
2821	Generate a random density matrix .
2822	Generate a random density matrix .
2823	Return a list of all custom unitary calls .
2824	Power operator .
2825	Compose a tensor product with another tensor product .
2826	Convert an instruction to a superoperator .
2827	Run the barrier .
2828	Convert a list of circuits into a qobj .
2829	Unroll all 3q or more gates .
2830	Run the decomposition .
2831	Define the gate .
2832	Check that value is of expected type .
2833	Check type of value .
2834	Set the tolerance .
2835	Setter for rtol .
2836	Reshape input and output dimensions .
2837	Get the input dimensions .
2838	Get the output dimensions .
2839	Return a copy of the dataset .
2840	Power operation .
2841	Automatically set the dimensions .
2842	Implementation of einsum .
2843	Custom deserialization method .
2844	Serialize a value to a Python object .
2845	Check if value is expected type .
2846	r Compute the fidelity of two states .
2847	Compute the SVD of a matrix .
2848	Return the inverse of the snapshot .
2849	Set the label .
2850	Return True if this vector is unitary .
2851	Convert to operator .
2852	Convert the channel to an instruction .
2853	Initialize a new QuantumChannel class .
2854	Sort enum for model .
2855	Patch datetime . strftime and datetime . strftimetz .
2856	Get a dictionary of locale data .
2857	Get all available locales .
2858	Check if tokens are valid .
2859	Split a string into a list of tokens .
2860	Parse a date string .
2861	Parse a time string .
2862	Check if the given date_string is applicable to the given settings .
2863	Translate a date string .
2864	Parse a date string using a list of date formats .
2865	Get the ammo generator .
2866	Convert a java exception to a net code .
2867	Convert exception to HTTP status code .
2868	Read configuration from file .
2869	Compose the phantom config .
2870	Get information about all streams .
2871	Compose the stepper configuration .
2872	Log stdout and stderr .
2873	Expand a time string .
2874	Read configuration options .
2875	Publish stepper information .
2876	Get the stpd filename .
2877	Read cached stepper info .
2878	Write stepper options to file .
2879	Make the stpd - file .
2880	Create a new pipeline .
2881	Return the rps at time t .
2882	Execute a shell command .
2883	Decode the monitoring data .
2884	Make the points for a label .
2885	Publish a key - value pair .
2886	Count the number of codes that match a regex .
2887	Stop the pool .
2888	Feed data from the stpd file .
2889	Initialize logging .
2890	Add user options .
2891	Configure the core .
2892	Graceful shutdown .
2893	Collect data from the queue .
2894	Notify listeners of the aggregated data .
2895	Get a marker by type .
2896	Parse a duration string .
2897	Start the agent .
2898	Start the agent .
2899	Discover JMeter UDP port .
2900	Add JMeter components .
2901	Terminate the process .
2902	Read data from tank
2903	Create a criterion from a string .
2904	Parse a monitoring config file .
2905	Create the agent startup config file .
2906	Check disk space
2907	Check memory usage .
2908	Get terminal size
2909	Get right line .
2910	Truncate a line of text .
2911	Render the left panel
2912	Render the screen .
2913	Add info widget .
2914	Fill a rectangle .
2915	Return the length of the line .
2916	Create a new load plan .
2917	Get the level string .
2918	Add a widget to the screen .
2919	Make a request to the writer .
2920	Load plugins .
2921	Returns the first plugin of type plugin_class .
2922	Returns a list of plugins of type plugin_class .
2923	Collect a file .
2924	Add an artifact file .
2925	Create a temporary file .
2926	Load config files .
2927	Flush config to file .
2928	Get all options in a section .
2929	Find all sections with the given prefix .
2930	Decode stat data .
2931	Get information about the phantom .
2932	Prepare the agent .
2933	Poll for agent data .
2934	Send collected data to all listeners .
2935	Detect what configuration to use .
2936	Handle data items .
2937	Decodes the agent data .
2938	Subscribe to channels .
2939	Run the client .
2940	Close websocket connection .
2941	Make one request .
2942	Submit an order .
2943	Get a single order .
2944	Get the position of a symbol .
2945	List assets .
2946	Get an asset by symbol .
2947	Create a joining execution plan .
2948	Check a dict parameter .
2949	Get a dict parameter .
2950	Construct an event logger .
2951	Construct a JSON event logger .
2952	Load configuration from file .
2953	Get the configuration for a given repository .
2954	Format a configuration dictionary for GraphQL .
2955	Get a pipeline by name .
2956	Returns a list of all pipelines .
2957	Get the next event from the queue .
2958	Execute a pipeline through a queue .
2959	Wait for all processes to exit .
2960	Create a Field instance .
2961	Build the execution plan .
2962	Build a pipeline .
2963	Build a sub - pipeline .
2964	Return the solid with the given name .
2965	Construct publish comands .
2966	Release a new version .
2967	Create a passthrough context definition .
2968	Define a schema for a selector .
2969	Create a schema definition for a selector .
2970	Print a block of text .
2971	Download a file from S3 .
2972	Upload a file to S3 .
2973	Context manager for user code errors .
2974	Create a directory .
2975	Context manager for user code .
2976	Create a context free log .
2977	Returns True if any of the steps succeeded .
2978	True if all steps have been skipped .
2979	Returns a dictionary of transformed values .
2980	Get the transformed value of the step .
2981	Return the failure data for this step .
2982	A configuration dictionary with typed fields .
2983	Check if config value is a valid dataset name .
2984	Check if config value is a valid table name .
2985	Execute a core transform .
2986	Create a Dagster type from an existing type .
2987	Decorator for resource functions .
2988	Create a new event .
2989	Coalesce execution plan s topological steps .
2990	Get connection parameters .
2991	Get a new connection .
2992	Create a new cursor .
2993	Close the connection to the database .
2994	Make a model from a dict .
2995	Convert a list to a list of models .
2996	Return a formfield for this field .
2997	Convert a value to a model instance .
2998	Apply the core filters to the queryset .
2999	Compute uniform NFPs .
3000	Compute the real NFPs .
3001	Compute the best set of partitions .
3002	Compute optimal number of partitions .
3003	Calculate C1 and C2 .
3004	Initialize the slots .
3005	Return the byte size of the hash .
3006	Serialize this MinHash to a buffer .
3007	Deserialize a LeanMinHash object from a buffer .
3008	Update the hash values .
3009	Merges two MinHash objects .
3010	Union two MinHash objects .
3011	Index entries .
3012	Query the database .
3013	Compute the minimum hash of a vector .
3014	Remove a key from the dictionary .
3015	Update the hash .
3016	Count the number of samples .
3017	Merge this HyperLogLog with another HyperLogLog .
3018	Clear the register .
3019	Compute apk score .
3020	Compute the average average of the k most probable values .
3021	Sorts the hashtables .
3022	Query the database .
3023	Close all open channels .
3024	Returns an ordered list storage .
3025	Returns an unordered set storage .
3026	Get user data from user object
3027	Mark social login as CONNECT .
3028	Select text from a list .
3029	Parse a scoped selector .
3030	Parse a statement .
3031	Parse a value .
3032	Advance one line .
3033	Parse a configurable reference .
3034	Augments an exception with an augmented message .
3035	Convert operative config string to markdown format .
3036	Create a new session .
3037	Ensure a function is wrappable .
3038	Decorates a function or class .
3039	Format a value .
3040	Clear the configuration .
3041	Bind a parameter to a binding key .
3042	Return the value of a query parameter .
3043	Check whether a function or class might have a parameter .
3044	Get a cached argument spec for a function .
3045	Returns the names of the positional parameters of the function fn .
3046	Get all positional parameters for a function .
3047	Get the default values for a function .
3048	Context manager for creating a new config scope .
3049	Decorator to make a function configurable .
3050	Return the operative configuration string .
3051	Parse config file .
3052	Register a file reader .
3053	Parse config file .
3054	Parse config files and bindings .
3055	Parse a string value .
3056	Finalize the configuration .
3057	Iterate over a nested value .
3058	Iterate through config values yielding ConfigurableReference instances .
3059	Define a constant .
3060	Create enum constants .
3061	Return a list of selectors that match the partial selector .
3062	Get all matches for a partial selector .
3063	Return the minimal selector .
3064	Convert a sp search query to a string .
3065	Parse the Retry - After header .
3066	Validate property value .
3067	Describes the resource as a property .
3068	Set the value .
3069	Return the thing at the given index .
3070	Initialize the object .
3071	Set default headers .
3072	Ensure that the host header is present .
3073	Handles GET requests .
3074	Called when a websocket message is received .
3075	Handle POST requests .
3076	Delete a thing .
3077	Start the server .
3078	Return the action description as a dictionary .
3079	Start the action .
3080	Finish the task .
3081	Return the event description as a dictionary .
3082	Get IP address .
3083	Return a list of IP addresses .
3084	Set the value of the field .
3085	Notify of an external update .
3086	Return a dict representation of the thing .
3087	Set the href prefix .
3088	Return a dictionary of property descriptions .
3089	Returns a list of action descriptions .
3090	Get event descriptions .
3091	Add a property .
3092	Remove a property .
3093	Get a property value .
3094	Returns a dictionary of all properties .
3095	Set a property value .
3096	Get a specific action .
3097	Add an event .
3098	Add an available event .
3099	Perform an action .
3100	Remove an action .
3101	Add an available action .
3102	Remove a subscriber .
3103	Add an event subscriber .
3104	Remove an event subscriber .
3105	Notify about a property change
3106	Send an action to all subscribers .
3107	Notify all subscribers of an event .
3108	Annotate the model with the given annotations .
3109	Update the model .
3110	Bulk insert the given rows .
3111	Insert a new record .
3112	Insert a new record into the database .
3113	Build and return an insert query .
3114	Check if a field is magical .
3115	Get the fields to insert or update .
3116	Send signals when a model is saved .
3117	Send a signal when a model is deleted .
3118	Create is not None expression .
3119	Return a new HStoreValue object with resolved values .
3120	Return a SQL representation of the HStore .
3121	Return a copy of this instance with relabeling applied .
3122	Add join conditions to the query .
3123	Check if a field is a HStoreField .
3124	Insert or update a list of objects .
3125	Create a required HSTORE constraint .
3126	Rename a hstore constraint .
3127	Drop a required hstore constraint .
3128	Returns the name of a required constraint .
3129	Returns the SQL statement to create the index .
3130	Create a custom command .
3131	Get the database backend class .
3132	Prepare the database .
3133	Convert a value to a string .
3134	Form the returning part of the query
3135	Return a list of SQL queries .
3136	Rewrite an INSERT or UPDATE query .
3137	Rewrite an INSERT or UPDATE query .
3138	Rewrite an ON CONFLICT DO NOTHING query .
3139	Build the conflict target for the query .
3140	Return the model field with the given name .
3141	Format a field name .
3142	Format the value of a field .
3143	Create a unique constraint on a hstore field .
3144	Rename a unique constraint .
3145	Drop unique constraint .
3146	Generate a unique constraint name .
3147	Iterate through the field s uniqueness keys .
3148	Add a condition to this query .
3149	Override as_sql to add extra conditions .
3150	95 conf level .
3151	Calculate the variance between two pooled samples .
3152	Compute the t - score between two samples .
3153	Check if two samples are significant .
3154	Topological sort .
3155	Generate n - qens .
3156	Play the game .
3157	Select the best child .
3158	Draw a random playout .
3159	Filter a list of benchmarks .
3160	Expand a benchmark name .
3161	Generate a string table .
3162	Initialize benchmarks .
3163	Returns the domain of the knot vector .
3164	Fetch items from the channel .
3165	Parse raw posts .
3166	Get a specific user
3167	Fetch all items of a given category .
3168	Fetch items from the RSS feed .
3169	Setup command parser .
3170	Fetch items from the database .
3171	Get a list of bugs .
3172	Get comments for a given bug .
3173	Retrieve bug history .
3174	Retrieve attachment data for a given bug .
3175	Get the notes for an issue .
3176	Fetch merge requests .
3177	Get merge notes .
3178	Get merge versions .
3179	List merge requests .
3180	Merge this merge .
3181	Get merge versions .
3182	Merge a version .
3183	Get the notes for an item .
3184	List the emojis for an item .
3185	Get a single note s emoji .
3186	Calculate time to reset .
3187	Fetch items from GitLab .
3188	Initialize the rate limit .
3189	Setup command parser .
3190	Fetch all messages for a given category .
3191	Return the metadata id for the given item .
3192	Get number of members of a conversation .
3193	Get channel information .
3194	Retrieve information about a specific user .
3195	Setup command parser .
3196	Return the timestamp at which the metadata was updated .
3197	Parse a buglist from a CSV file .
3198	Parse bug details .
3199	Parse bug activity .
3200	Logout the user .
3201	Return XML metadata .
3202	Return a list of bugs from a given date .
3203	Get a list of bugs .
3204	Get activity for a bug .
3205	Fetch events from the database .
3206	Fetch events for this group .
3207	Get events from a group .
3208	Get comments for an event .
3209	Get the rsvps for an event .
3210	Fetch a question from the server .
3211	Fetch comments for a question
3212	Build the question object .
3213	Get API questions .
3214	Get HTML question .
3215	Get comments .
3216	Parse a question container .
3217	Parse the answer info container of a given HTML question .
3218	Parse the number of pages in an HTML question .
3219	Parse user info .
3220	Fetches items from gerrit .
3221	Parse raw reviews .
3222	Fetch reviews from Gerrit .
3223	Get the server version .
3224	Get the reviews for the last item .
3225	Retrieve the next group item .
3226	Execute a command .
3227	Execute a command from the archive .
3228	Execute a command from the remote server .
3229	Setup command parser .
3230	Fetch issue data .
3231	Fetch issue attachments .
3232	Fetch issue messages .
3233	Fetch activities for an issue .
3234	Fetch user data .
3235	Get information about a user .
3236	Get the raw text of an issue .
3237	Get raw items from an issue collection .
3238	Get the project url .
3239	Fetch items from a path .
3240	Get groupsio subscriptions
3241	Find the group id
3242	Make a GET request .
3243	Setup command parser .
3244	Generate a unique UUID .
3245	Fetch items from a backend .
3246	Fetch items from archive .
3247	Find all backends in the given package .
3248	Fetch items from the backend .
3249	Fetch items from archive .
3250	Filter classified data .
3251	Parse command line arguments .
3252	Set authentication arguments .
3253	Sets the arguments for the archive command
3254	Set the output arguments
3255	Run the job .
3256	Initialize the archive manager .
3257	Return the datetime of when the item was updated .
3258	Parse a mbox file .
3259	Fetch and parse messages from the given mailing list .
3260	Copy a mbox to a temporary path .
3261	Validate a message .
3262	Convert a casedict to a dict .
3263	Get a message .
3264	Fetch a set of commits .
3265	Fetch items from the repository .
3266	Parse a git log file .
3267	Called before the command is run
3268	Setup the command parser .
3269	Parse the stream .
3270	Clone a git repository .
3271	Return the number of objects in the repository .
3272	Check if the repo is detached .
3273	Update the repository .
3274	Returns a list of commits from the repository .
3275	Return a generator of lines from git rev - list .
3276	Get the log for this repository .
3277	Show the contents of the repository .
3278	Fetch the pack .
3279	Read commits from pack file .
3280	Update a list of refs
3281	Return a list of refs for this repository .
3282	Update a git ref
3283	Execute a git command .
3284	Read the stderr of the subprocess .
3285	Execute git command .
3286	Fetch tweets .
3287	Fetch tweets from a category .
3288	Return a generator of tweets .
3289	Setup command parser .
3290	Fetch all items of a given category .
3291	Fetch data from the API .
3292	Parse the results of a Google Search query .
3293	Get the hits for one or more keywords .
3294	Return the timestamp at which the metadata was updated .
3295	Return the metadata category for the given item .
3296	Fetch pull requests .
3297	Fetch repo info .
3298	Get reactions for an issue .
3299	Get the reactions for the given comment .
3300	Get list of issue assignees
3301	Get the list of requested reviewers .
3302	Returns a list of hashes of all commits for the given PR number .
3303	Get the reactions for a pull review comment .
3304	Get user information .
3305	Get the reactions for an issue .
3306	Get all issues .
3307	Get all pull requests for this repository .
3308	Return the repository name .
3309	Pull requested reviewers for a pull request .
3310	Get all commits for a pull request .
3311	Pull review comment reactions .
3312	Get information about a user .
3313	Get the orgs of a user .
3314	Get the number of requests that can be made to the token .
3315	Get the remaining API points .
3316	Choose the best API token .
3317	Check if tokens need to be checked .
3318	Update the current rate limit .
3319	Initialize metadata .
3320	Store data in the archive .
3321	Retrieve an entry from the archive .
3322	Create an archive .
3323	Generate a hashcode for the given parameters .
3324	Verify archive integrity .
3325	Load metadata from database .
3326	Count the number of rows in a table .
3327	Create the archive .
3328	Remove an archive .
3329	Search for archives .
3330	Search for archives .
3331	Search for all files in the directory .
3332	Check if a file is compressed .
3333	Generate a range of months .
3334	Convert a message to a dictionary .
3335	Remove invalid XML characters .
3336	Convert an XML string to a dictionary .
3337	Return a generator of issues from raw_json .
3338	Get issues .
3339	Get information about an issue .
3340	Get a specific user
3341	Make a request to Redmine .
3342	Fetch data from the API .
3343	Fetch data from repository
3344	Get a specific repository .
3345	Map custom fields .
3346	Filter custom fields .
3347	Parse issues from raw page .
3348	Returns a generator of issues .
3349	Get issues for a given date .
3350	Get comments for an issue .
3351	Get all fields .
3352	Fetch all items of a given category .
3353	Get all jobs .
3354	Get builds for a job .
3355	Parse questions from raw page .
3356	Get a list of questions .
3357	Setup command parser .
3358	Fetch items from MediaWiki .
3359	Get the max date from a list of reviews .
3360	Fetch pages from reviews API
3361	Get all pages .
3362	Get recent changes .
3363	Fetch messages from the server .
3364	Parse raw_json and yield messages .
3365	Filter a message by a list of chats .
3366	Send an UPDATES request .
3367	Fetches articles from the server .
3368	Add offset to metadata .
3369	Parse an email article .
3370	Internal fetch method .
3371	Fetch an article .
3372	Fetch data from remote server .
3373	Fetch data from the archive .
3374	Create HTTP session .
3375	Setup rate limit handler .
3376	Sleep for rate limit .
3377	Update the rate limit .
3378	Parse a Supybot log file .
3379	Retrieve archives from supybot .
3380	List all supybot archives .
3381	Parse the stream .
3382	Parse a supybot timestamp line .
3383	Parse a supybot message .
3384	Fetch the topics for a given category .
3385	Parse the topics page .
3386	Get a topic .
3387	Post a post .
3388	Fetch items from the queue .
3389	Parse a list of tasks .
3390	Parse users from raw json .
3391	Return a generator of the most recent tasks .
3392	Get the most recent transactions .
3393	Get a list of users .
3394	Get a list of phids .
3395	Call Conduit API .
3396	Return the metadata identifier for an item .
3397	Parse contents summary .
3398	Returns a generator that yields the contents of the file
3399	Get historical content .
3400	Parse the measurement result .
3401	Returns the URL for the GetCapabilities request .
3402	Read capabilities from a URL .
3403	Reads a string from the stream .
3404	Parse the result element .
3405	Build the URL .
3406	Get the elements of a complex type .
3407	Construct a schema from a list of elements .
3408	Get the URL for a DescribeFeatureType request .
3409	complex input with reference
3410	Get a list of movies .
3411	Get a list of TV shows .
3412	Retrieve movies .
3413	Retrieve information about the device .
3414	Get the list of alternative titles .
3415	Gets the credits for the current user .
3416	Gets the external_ids of the project .
3417	Gets the keywords of the project .
3418	Gets the recommendations for the current user .
3419	Gets the release dates for the current user .
3420	Gets all releases .
3421	Gets the translations for the current user .
3422	Gets the most similar movies .
3423	Gets the reviews for the current user .
3424	Gets the changes for this object .
3425	Get a list of upcoming jobs .
3426	Get the currently playing music .
3427	Retrieve a list of popular images .
3428	Gets the top rated items .
3429	Gets the list of available account states .
3430	Set the rating of the user .
3431	Gets the movie credits for the current user .
3432	Gets the tv credits for the current user .
3433	Retrieve credit information .
3434	Get tv data .
3435	Retrieve information about the device .
3436	List movies .
3437	Retrieve information about this session .
3438	Get the movies currently being watched by this session .
3439	Create a new token .
3440	Token validation with login .
3441	Create a new session .
3442	Create a new guest session .
3443	Gets rated movies .
3444	Gets the status of the item .
3445	Create a new list .
3446	Remove an item from the queue .
3447	Clear all items from the list .
3448	Gets the content ratings for the current user .
3449	Get the most similar images .
3450	Gets the on_the_air field of the current object .
3451	Get series information .
3452	Get the credits for a series .
3453	Get the list of external ids for this series .
3454	Get series information .
3455	Get the credits for a series .
3456	Get a list of the external ids of the series .
3457	Set the attributes of the object from the response .
3458	Get a single movie .
3459	Retrieve a collection of items .
3460	Returns a single tv .
3461	Retrieve person information .
3462	Get company information .
3463	Retrieve a single keyword .
3464	Retrieve a list of items from the server .
3465	Normalize a string .
3466	Given a list of n - grams return the number of n - grams .
3467	Return the set of n - grams in a reference string .
3468	Inverse of erfcc .
3469	Align two texts .
3470	Get all descriptors in a module .
3471	Register a JSON descriptor .
3472	Register a new device .
3473	Echo a string to the terminal .
3474	Return True if desc is a descriptor class .
3475	Convert to json .
3476	Get the 3D coordinate of this descriptor .
3477	Returns the surface area of the atomic i .
3478	The surface area of the atomic system .
3479	Construct a Structure object from a molecule .
3480	Create a descriptor from a JSON object .
3481	Fill missing values .
3482	Return a new Molecule object with only the missing values .
3483	Return a tuple of keys and values .
3484	Return a dictionary representation of the object .
3485	The name of the property .
3486	Log a function call .
3487	Synchronized decorator .
3488	Print a progress message .
3489	Prints a message to stdout .
3490	Fail the program .
3491	Get a temporary file name .
3492	Set a temporary file .
3493	Remove temporary files .
3494	Return a fixed version of the path .
3495	Returns a list of parameters for the given method .
3496	Merges parameters from self . opt into kargs .
3497	Add extra client options .
3498	Terminate the queue .
3499	Add a task .
3500	Join all workers .
3501	Report progress .
3502	Read S3 keys from environment variables .
3503	read S3 keys from commandline
3504	Read S3 keys from config file .
3505	Initialize S3 keys .
3506	Connect to S3 .
3507	List all buckets .
3508	Walk a directory recursively .
3509	Return a list of all files in basedir
3510	Expand a list of sources .
3511	Upload a single file to S3 .
3512	Put multiple files at once .
3513	Create a bucket .
3514	Update the privilege of an object
3515	Print the contents of a list of files .
3516	Download a single file .
3517	Get files from source to target .
3518	Copy a single file or directory .
3519	Copy files from source to target .
3520	Delete files from S3 .
3521	Return a list of relative paths to dir .
3522	Sync files from source to target .
3523	Calculate the hash of a file .
3524	Get the md5 hash of the file .
3525	Create a directory .
3526	Check if the remote key matches the local key
3527	Return True if path matches filter_path .
3528	Walk a directory .
3529	Check if object should be included in result .
3530	Get file permission
3531	Lookup an object in S3 .
3532	Read a file chunk .
3533	Upload a file to S3 .
3534	Verify that the downloaded file size is correct .
3535	Write chunk to file .
3536	Copy source to target .
3537	Run a command .
3538	Validate arguments .
3539	Pretty print a list of objects .
3540	List buckets .
3541	Create bucket .
3542	Upload files to S3 .
3543	Get files from S3 .
3544	Handles the cat subcommand
3545	Dsync files .
3546	Copy files from source to target .
3547	Copy files from source to target
3548	Delete a file from S3 .
3549	du size command
3550	Total size handler
3551	Match date .
3552	Match time .
3553	Match delta value .
3554	Check that value is a dict .
3555	Discover gateways .
3556	Listen to messages .
3557	Get data from the hub .
3558	Push data to callbacks
3559	Get the key .
3560	Report an exception to Rollbar .
3561	Register the pyramid includeme hook .
3562	Ensure log handler exists .
3563	Get the current request object .
3564	Initialize a Rollbar instance .
3565	Decorator to wrap a lambda function .
3566	Report a message to Rollbar .
3567	Search items .
3568	Create the agent log file .
3569	Build the person data from the request .
3570	Add Lambda context data .
3571	Add request data to data dictionary .
3572	Check to see if we should include any frame locals .
3573	Build request data .
3574	Build server data .
3575	Build the payload .
3576	Run the reactor .
3577	Composes a Hangul character .
3578	Decomposes a hangul letter .
3579	Checks if a string is a Hangul letter .
3580	Add josa to a word .
3581	Check if node is inside except .
3582	Check if node is inside lambda .
3583	Get all elements of a node .
3584	Check if a node is clobbering in except .
3585	Check if node is a super node .
3586	Check if a node is an error .
3587	Check if node is a default argument .
3588	Check if the given node is a function decorator .
3589	Check if node is an ancestor of frame .
3590	Return the parent of node .
3591	Decorator to store the check messages .
3592	Given a format string return a list of field names .
3593	Get an argument from a call node .
3594	Check if a node is inheriting from a standard exception .
3595	Check if an exception is of the expected type .
3596	Check if a function is decorated with a property .
3597	Return True if func is decorated with any of qnames .
3598	Find a try except wrapper node .
3599	Check if the given node is from a fallback block .
3600	Get the exception handlers for the given node .
3601	Check if a node ignores an exception .
3602	Check if a class is abstract .
3603	Safely infer a node .
3604	Return the inferred type of a node .
3605	Check if a function is decorated with singledispatch .
3606	Check if the node is marked with a postponed evaluation .
3607	Return a list of qualified names from a module name .
3608	Get the module name from an import node .
3609	Return a string representation of the tree definitions .
3610	Write a graph file .
3611	Check for imports .
3612	Check for imports .
3613	Check the position of the import
3614	Record an import .
3615	Check imports order .
3616	Check a relative import .
3617	Add imported module .
3618	Check for deprecated modules .
3619	Check that a module is preferred .
3620	Report the external dependencies .
3621	Filter the dependencies graph .
3622	Get default options .
3623	Insert default options .
3624	Returns True if the node should be shown .
3625	Get the callbacks for a node .
3626	Visit a node .
3627	Check that all messages have the same checker part .
3628	Check function call .
3629	Check for datetime . time
3630	Check the mode keyword argument .
3631	Handle a message .
3632	Display the messages .
3633	Get the title for a node .
3634	Set default options .
3635	Check if the node should be shown .
3636	Add a class to the class diagram .
3637	Get all ancestors of node .
3638	Get all the instances associated with the given klass node .
3639	Extract the classes from the given node .
3640	Leave a project node .
3641	Add import from node to package diagram .
3642	Create a class diagram .
3643	Get diagram definitions .
3644	Check if an owner should be ignored .
3645	Find similar names .
3646	Return True if the given node has no member .
3647	Check if node has parent of type node_type .
3648	Check if a variable is used as a variadic .
3649	Check if a variable is used as a variadic .
3650	Visit an attribute node .
3651	visit a Assign node by returning a fresh instance of it
3652	Check for uninferable calls .
3653	Handle unary operations .
3654	Yield interfaces implemented by node .
3655	Build a project from a list of files .
3656	Visit a package node .
3657	Set a unique identifier for the function .
3658	Visit a AssignName node .
3659	Handle assignment attribute type .
3660	Register imported modules .
3661	Visit a ImportFrom node by returning a fresh instance of it .
3662	Determine if a module is a standard module .
3663	Handle imported modules .
3664	Get ANSI code .
3665	Colorize a message .
3666	Register reporters .
3667	Handle a message .
3668	Display the layout .
3669	Handle a message .
3670	Open a graph .
3671	Write a node .
3672	Write a directed edge .
3673	Check for new format .
3674	Process a non - raw string token .
3675	Visit a section .
3676	Handle evaluation section .
3677	visit a table
3678	Writes a default table .
3679	Add a renamed message .
3680	Register messages from a checker .
3681	Register a message .
3682	Check if a message has the given symbol .
3683	Raises an InvalidMessageError if the two symbols are the same .
3684	Raises InvalidMessageError if msgid and other_msgid conflict .
3685	Returns a list of message definitions .
3686	Get the display string for a message .
3687	Print a help message
3688	List all messages .
3689	Initialize PyLinter extensions .
3690	Return the number of available CPUs .
3691	Report messages stats .
3692	Fix import path .
3693	Load plugin modules .
3694	Load plugin configuration .
3695	Set an option .
3696	Register a checker .
3697	Disable all reporters .
3698	Enable and disable Python 3 porting mode .
3699	Return a list of all registered checkers .
3700	Return a list of checker names .
3701	Prepare needed checkers .
3702	Expand a list of modules .
3703	Set the current module .
3704	Check an astroid module .
3705	Report the evaluation .
3706	Print a help message .
3707	Print full documentation .
3708	List messages .
3709	List checker groups .
3710	Normalizes text .
3711	Get the module name and frame id of a function .
3712	Safely decode a line .
3713	Check if a base name is in a blacklist .
3714	Register all plugins in directory .
3715	Return a comment from a string .
3716	Format an option value .
3717	Format a section .
3718	Format ini options .
3719	Insert a child node at the given index .
3720	Append a child node to this node .
3721	Return the parents of this node .
3722	Format the stream .
3723	Get the content of a table .
3724	Compute the content of this node .
3725	Collect all block lines for the given module node .
3726	Handle an ignored message .
3727	Register a report .
3728	Create report sections .
3729	Add stats .
3730	Get the name of the setters property .
3731	Get setters property .
3732	Check if a function returns something .
3733	Return a list of possible exc types .
3734	Process a module .
3735	Process a module .
3736	Process comments .
3737	Return True if stmt is from a future import .
3738	Check if statement is in for - else branch .
3739	Return the overridden method .
3740	Get the extra info for the unpacking node .
3741	Detect global scope .
3742	Check if a variable is assigned locally .
3743	Mark a node as consumed .
3744	Handle global assignments .
3745	Ignore class scope .
3746	Check if there is a homonym in the upper function scope .
3747	Check for unpacking .
3748	Check class definitions .
3749	Get all packages in a directory .
3750	Install pylint .
3751	Run the installation .
3752	Report similarities between two stats .
3753	Main function .
3754	Append a stream to the file .
3755	Compute a list of sims .
3756	Display a list of sims .
3757	Find common linesets .
3758	Iterate over all simulated linesets .
3759	Iterate over the stripped lines .
3760	Create a dictionary mapping line numbers to lists of line numbers .
3761	Check whether a definition is equivalent to a call .
3762	Check if two nodes have the same attribute .
3763	Check if original and overridden have different default values .
3764	Return True if original and overridden have different parameters .
3765	Safely infer a call result .
3766	Mark a node as accessed .
3767	visit a ClassDef node by returning a fresh instance of it
3768	Check for inconsistent mro .
3769	Check for proper inheritance .
3770	visit a FunctionDef node by returning a fresh instance of it
3771	Check for useless super calls .
3772	Handle function calls .
3773	Check if the node has slots .
3774	Visit a name node .
3775	Check the accessed members of the node .
3776	Check for abstract base classes .
3777	Check the signature of a method .
3778	Check if node is a method parameter .
3779	Check if body is a raise statement .
3780	Check for bad context .
3781	visit a FunctionDef node by returning a fresh instance of it
3782	Display the reports .
3783	Check if node is a typing namedtuple .
3784	Check if node is an enum class .
3785	Check if a class is a dataclass .
3786	Open the linter .
3787	A class definition node .
3788	Check if the node is a class definition .
3789	Handle If nodes .
3790	Check whether the condition is true .
3791	Check that the docstring is correct .
3792	Return a string representation of the namedtuple .
3793	Check if token at index is a trailing comma .
3794	Check if node is an actual if node .
3795	Check if we can simplify the if statement .
3796	Check stop iteration inside generator .
3797	Check if an exception inherits from StopIteration .
3798	Check for infinite iterator calls .
3799	Check for nested blocks .
3800	Return a dictionary of objects which are not duplicated .
3801	Check for type merging .
3802	Check for chained comparisons .
3803	Checks if a boolean expression is an and or ternary
3804	Check for inconsistent return statements .
3805	Check if the given node is a return statement .
3806	Visitor for For loops .
3807	Check if Graphviz is available .
3808	Run Diadefs .
3809	Write packages in diagram .
3810	Write the classes in the diagram .
3811	Set the printer .
3812	Set the printer .
3813	Return whether this package may be emitted .
3814	Format the help message .
3815	Get environment variables .
3816	Run pylint .
3817	Run pylint in a subprocess .
3818	Returns a list of all cycles in path .
3819	Return the source code for this block .
3820	Generate the graph .
3821	Format a section .
3822	Register a managed message .
3823	Disable a message .
3824	Enable a managed message .
3825	Get the symbol of a message .
3826	Check if a message is enabled .
3827	Add a message .
3828	Print full documentation .
3829	Print checker documentation .
3830	Get the indent length of a line .
3831	Given a list of bar positions and a bad position determine how to fix the indentation .
3832	Indent the token at the given position .
3833	Handle the start of a line .
3834	Return a tuple of valid indentations .
3835	Return a hanging indent .
3836	Return a _ContinuedIndent object if the token is inside a bracket .
3837	Push a token onto the token stack .
3838	Add a new line .
3839	Check for keyword parentheses .
3840	Check for valid type annotations .
3841	Check for equals spacing .
3842	Check that the next token is not a space .
3843	Visit a default statement .
3844	Check for multiple statements .
3845	Check the lines .
3846	Check indentation level .
3847	Check if the given node is in the iterator context .
3848	Check if a node is a conditional import .
3849	Add a message if the node is a builtin .
3850	Make sure all instances inherit from std_ex .
3851	Attribute inference .
3852	Visitor for ExceptHandler nodes .
3853	Visitor for raise nodes .
3854	Try to find a pylintrc file in the current directory .
3855	Validate value according to optdict .
3856	Expand the default value of an option .
3857	Match a long option .
3858	Register an options provider .
3859	Set a provider option .
3860	Set a global option .
3861	Generate configuration file .
3862	Load config file .
3863	Load command line configuration .
3864	Add a help section .
3865	Return the help text for this program .
3866	Load default options .
3867	Return the attribute name of an option .
3868	Return the definition of an option .
3869	Yield options grouped by section .
3870	Check if a function is a method call .
3871	Check if a node is a complex format string .
3872	Visit a module node .
3873	Add logging names for imported modules .
3874	Add logging names .
3875	visit a Call node by returning a fresh instance of it
3876	Check format string .
3877	Check if node is in a loop .
3878	Get the break loop node .
3879	Check if loop exits early .
3880	Return a tuple of property classes and names .
3881	Determine the function name type .
3882	Generate a nicely formatted report on type stats .
3883	Check if a function is redefined by a decorator .
3884	Return True if call is a one - arg call .
3885	Check for starred nodes .
3886	Check for nonlocal and global variables .
3887	visit a Call node by returning a fresh instance of it
3888	Check for useless loops .
3889	Check for in loop .
3890	Open the linter .
3891	Handle string expressions .
3892	Visitor for Lambda AST node .
3893	Fail if the test is a tuple .
3894	Check for duplicate keys .
3895	Check for unreachable statements .
3896	Check if we are not in a finally block .
3897	Check that the sequence is reversed .
3898	Check the name of an assignment .
3899	Check if a name is valid .
3900	Check the docstring for the given node .
3901	Check for literal comparison .
3902	Add a sub - graph .
3903	Parse a sub - graph .
3904	Visit a module node .
3905	Add a checker .
3906	Walk an AST node .
3907	Add a relationship between two objects .
3908	Get a relationship by type .
3909	Return a list of instance attributes .
3910	Return a list of all methods declared in the given node .
3911	Add an object to the diagram .
3912	Return a list of class names .
3913	A list of all classes in the module .
3914	Return the class with the given name .
3915	Return a list of modules .
3916	Return the module with the given name .
3917	Get a module by name .
3918	Add from_module to node s depend list .
3919	Delete the grant .
3920	Get the query for the model .
3921	Get a user by username and password .
3922	Get an access token .
3923	Set a token .
3924	Set a grant .
3925	Get a client .
3926	Prepare a request .
3927	Initialize the extension .
3928	Create a remote application .
3929	Make a request to the API .
3930	Authorize to the server .
3931	Handle an OAuth1 response .
3932	Handle OAuth2 response .
3933	Handle an authorized response .
3934	Marks a function as authorized .
3935	Hash a token .
3936	Create a client with the given token .
3937	Create an OAuth client .
3938	Temporarily set the insecure transport flag .
3939	Confirm authorization request .
3940	Decorator to create a request token response .
3941	Get client secret .
3942	Get request token secret .
3943	Get the access token secret .
3944	Get default realms .
3945	Get realms from request token .
3946	Get redirect uri from request token .
3947	Get the RSA key .
3948	Validate client key .
3949	Validate a request token .
3950	Validate an access token .
3951	Validate timestamp and nonce .
3952	Validate redirect_uri .
3953	Validate realms .
3954	Validate verifier .
3955	Verify request token .
3956	Verify realms .
3957	Save access token .
3958	Save request token .
3959	Save a verifier .
3960	Return the error URI for the provider .
3961	Confirm an authorization request .
3962	Verify a request .
3963	Extract client credentials from a request .
3964	Check if client authentication is required .
3965	Authenticate client .
3966	Authenticate a client id .
3967	Get the scope of the refreshed token .
3968	Confirm scopes for a refresh token .
3969	Get the default redirect uri .
3970	Get the default scopes .
3971	Invalidate an authorization code .
3972	Save an authorization code .
3973	Save a bearer token .
3974	Validate a bearer token .
3975	Validate client id .
3976	Validate code .
3977	Validate grant type .
3978	Validate a refresh token .
3979	Validate response type .
3980	Validate the scopes for a client .
3981	Validate a user .
3982	Revoke a token .
3983	Update the default request data .
3984	Convert all keys in a dictionary to strings .
3985	Change weibo header
3986	Register to an OAuth application .
3987	Create a new remote application .
3988	Extract parameters from the request .
3989	Convert text to bytes .
3990	Decode a base64 string .
3991	Create a response .
3992	Return a list of cached OAuth clients .
3993	Add a remote application .
3994	Add a remote application .
3995	Check for an exception .
3996	Check for success .
3997	Check the load_privatekey callback .
3998	Check if the load_privatekey callback is incorrect .
3999	Check if the load_privatekey callback is wrong type .
4000	Check for revoked certificates .
4001	Check for duplicate certificates .
4002	Create a certificate request .
4003	Create a X . 509 certificate .
4004	Decorator to make a function requires a flag .
4005	Load SSL verification locations .
4006	Set the password callback .
4007	Use a certificate chain file .
4008	Use a certificate file .
4009	Use a certificate .
4010	Add an extra chain certificate .
4011	Use a private key file .
4012	Use a private key .
4013	Load a client CA file .
4014	Sets the depth of the verification chain .
4015	Load a DH from a file .
4016	Set the cipher list .
4017	Set the client CA list .
4018	Adds a certificate authority to the context .
4019	Set the server name callback .
4020	Sets the use of SSRTP profiles .
4021	Set the next protocol select callback .
4022	Set the list of alpn protocols .
4023	Set the ALPN select callback .
4024	Set the OCSP callback .
4025	Set the OCSP server callback .
4026	Set an OCSP client callback .
4027	Set the SSL context .
4028	Get the server name .
4029	Set the host name for the TSL extension .
4030	Receive data from the socket .
4031	Receive data into a buffer .
4032	Read data from the socket .
4033	Renegotiates the connection .
4034	Shut down the SSL connection .
4035	Return a list of available cipher suites .
4036	Return a list of client CA names .
4037	Set the shutdown state .
4038	Get random bytes from the server .
4039	Return a random client random number .
4040	Return the master key .
4041	Export a keying material .
4042	Get the current session .
4043	Get the current cipher name .
4044	Get the current cipher bits .
4045	Get the current cipher version .
4046	Get the protocol version name .
4047	Get the next protocol negotiated .
4048	Set the list of alpn protocols .
4049	Get the protocol negotiated by the server .
4050	Create a new BIO buffer .
4051	Convert a BIO to a string .
4052	Set an ASN . 1 time value .
4053	Convert a string timestamp to an ASN1_TIME .
4054	Get an elliptic curve by name .
4055	Dump a public key in PEM or ASN1 format .
4056	Load a public key .
4057	Sign data with a key .
4058	Verify a signature on a message .
4059	Dump a Certificate Revocation List .
4060	Return a cryptography key .
4061	Generate a key .
4062	Check the key .
4063	Load all elliptic curves from lib .
4064	Load the elliptic curves .
4065	Convert this curve into an EC key object .
4066	DER encoding of the certificate .
4067	Return a list of components for this certificate .
4068	Return the object s short name .
4069	Get the data for this extension .
4070	Return a cryptography CSR object .
4071	Set the public key .
4072	Get the public key .
4073	Get the subject name .
4074	Add one or more extensions to the request .
4075	Return a list of X509Extensions .
4076	Verify a PKey .
4077	Return the certificate as a cryptography . x509 . Certificate object .
4078	Set the version of the certificate .
4079	Get the public key .
4080	Set the public key .
4081	Sign a key .
4082	Get signature algorithm .
4083	Return the digest of the given name .
4084	Set the serial number of the certificate .
4085	Get the serial number of the certificate .
4086	Adjust the time at which the certificate will expire .
4087	Adjust the time at which the certificate is not modified .
4088	Check if the token has expired .
4089	Get the issuer name .
4090	Set the issuer of the certificate .
4091	Get the subject name .
4092	Set the subject name .
4093	Add multiple extensions to the certificate .
4094	Get the extension at the given index .
4095	Add a certificate to the store .
4096	Add a CRL to the store .
4097	Set the time at which the certificate was issued .
4098	Initialize the store context .
4099	Return an exception from the store context .
4100	Verify the certificate .
4101	Set the serial number .
4102	Get the serial number .
4103	Set the reason for this CRL .
4104	Return the reason of the CRL .
4105	Set the date at which the certificate was revoked .
4106	Return the certificate revocation list as a cryptography object .
4107	Get all revoked certificates .
4108	Get the issuer of the CRL .
4109	Sign the CRL .
4110	Export a certificate to the CRL .
4111	Return the type name of the object .
4112	Set the CA certificates .
4113	Export the certificate to a file .
4114	Sign a key .
4115	Verify a key .
4116	Encode the SPKI as a base64 string .
4117	Get the public key .
4118	Set the SSH public key .
4119	Raise an exception from the error queue .
4120	Convert a unicode object to bytes .
4121	Return a function that prints tokens .
4122	Get service metadata .
4123	Return a generator of all issues .
4124	Get a list of annotations for a card .
4125	Get all boards
4126	Get a list of board lists .
4127	Get a list s cards .
4128	Get comments for a card .
4129	Build the API url .
4130	Make a GET request to github .
4131	Convert a field to a dictionary .
4132	Get issues by query .
4133	Get all pull requests for a given tag .
4134	Aggregate remote issues .
4135	Get config value or default .
4136	Get the list of templates to use .
4137	Validate the service configuration .
4138	Check if an issue should be included .
4139	Make a table .
4140	Execute an oracle command .
4141	Overrides ConfigParser . getint
4142	Pull issues from taskwarrior .
4143	Get data from url .
4144	Get a collection of values .
4145	Given a list of keys and a list of issue keys find the uuid of the first matching task .
4146	Merge fields from left to right .
4147	Given a list of targets return a dictionary of UDA config overrides .
4148	Parse a sprint string .
4149	Get credentials .
4150	Compute the ROUGE scores for a list of sequences .
4151	Calculate p - values
4152	Corrected p - values .
4153	Z - Score a matrix .
4154	Plot a heatmap .
4155	Adjust spines .
4156	Prepare the argument parser .
4157	Add a prerank subcommand to subparsers .
4158	Adds a sub - command parser to subparsers to reproduce GSEA results .
4159	Adds a sub - command parser for the enrichr operation .
4160	Compute the enrichment score .
4161	Compute the ranking metric tensor .
4162	Compute a ranking metric .
4163	Compute the p - value of a GSEA .
4164	Compute the GSEA significance .
4165	Returns a pandas DataFrame with the names and descriptions of the marts .
4166	Returns a pandas . DataFrame of all datasets in the database .
4167	Get the attributes of the dataset .
4168	Get filters for a dataset .
4169	Query BioMart .
4170	Run GSEA .
4171	Single Sample GSEA .
4172	Run the pre - ranking algorithm .
4173	Run a GSEA Replot .
4174	Set the number of cores .
4175	Load a set of gene sets from a file .
4176	Returns a list of library names .
4177	Download and generate Enrichr library gene sets .
4178	Compute heatmat .
4179	Save results to file .
4180	Load gene expression data .
4181	Run the analysis .
4182	Run GSEA .
4183	Run a single sample permuation .
4184	Run ssgsea for gct expression matrix
4185	Save results on samples to a csv file .
4186	Run GSEA .
4187	Run Enrichr .
4188	Parse user defined gene sets .
4189	Parse gene list .
4190	Send the gene list to the server .
4191	Check the genes returned by Enrichr .
4192	Get background genes .
4193	Run Enrichr .
4194	Apply a cube filter .
4195	Add a sphere filter .
4196	Create a torus filter
4197	Draw a plane with horizontal edges .
4198	Draw a cube of hires .
4199	Get the color values for a given color name .
4200	Check if a variable is a list .
4201	Make a list from a variable .
4202	Write a filter script .
4203	Generate an LS3 Loop XML filter
4204	Merge Close Vertices .
4205	Create a filter to close holes .
4206	Write a filter to split vertexes incident on non manifold faces .
4207	Write a filter for snap mismatched borders .
4208	Translates a value in a script .
4209	Rotate a script .
4210	Scale a script .
4211	Function for cylindrical coordinates .
4212	Wraps a script around a cylinder .
4213	Create a bend script .
4214	Converts a deformation into a curve .
4215	Convert a vertex color to texture
4216	Writes a filter to the script
4217	Uniform mesh resampling .
4218	Return the Poisson Surface Reconstruction XML .
4219	Perform voronoi analysis .
4220	Select all faces .
4221	Set the quality of the vertices .
4222	Add a conditional face selection filter
4223	Add a vertex selection filter to a script .
4224	Cylindrical Hilbert curve .
4225	Run spherical verticies .
4226	Join multiple layers together .
4227	Rename a filter .
4228	Change the current layer .
4229	Duplicate a filter script .
4230	Delete lower layer .
4231	Handle an error .
4232	Begin a filter script .
4233	Add a new layer .
4234	Delete a layer .
4235	Save the script to a file .
4236	Run the script .
4237	Main function .
4238	Hausdorff distance filter
4239	Generate a Poisson - disk filter .
4240	Filter a mesh element .
4241	Create a filter for clustered verticies .
4242	Apply a flat plane filter .
4243	Generate a parametrization filter
4244	Voronoi parametrization .
4245	Measure Topological Measures .
4246	Parse the topology log .
4247	Parse Hausdorff log file .
4248	Generate a function filter .
4249	Voronoi vertex coloring .
4250	Generates a RAINbow script .
4251	Return a string representation of the atan2 function .
4252	Returns the cross product of two vectors .
4253	Multiply a vector by a scalar .
4254	Define a new vertex attribute .
4255	Flip faces .
4256	Generate a list of point sets .
4257	Generate a Taubin filter .
4258	Apply a depth - smooth filter .
4259	Takes a file name and returns a list of vertices and line segments .
4260	Measure the topology .
4261	Measure all geometries .
4262	Measure dimension .
4263	Lowercase a filename extension .
4264	Patch the request class .
4265	Return the configuration for a given upload set .
4266	Configure uploads .
4267	Get the configuration for this set .
4268	Returns the URL for the uploaded file .
4269	Get the path to a file .
4270	Check if an extension is allowed .
4271	Resolves conflicts between two files .
4272	Get the version of vprof .
4273	Remove duplicate objects .
4274	Get the difference between two lists of objects .
4275	Format object count .
4276	Trace memory usage .
4277	Return the list of code events .
4278	Return the number of object overhead .
4279	Compute memory overhead .
4280	Profile the package .
4281	Profile the module .
4282	Profile function .
4283	Run the profiler .
4284	Return a list of module names in a package .
4285	Run a function in a separate process .
4286	Get the type of a run object .
4287	Initialize the module .
4288	Initialize package name .
4289	Initialize the profile function .
4290	Replace sys arguments .
4291	Sample from the stack .
4292	Insert a stack into the call tree .
4293	Calculate the sample count for a node .
4294	Format the tree .
4295	Return the call tree .
4296	Profile package .
4297	Profile module .
4298	Profile function .
4299	Transform stats into a list of tuples .
4300	Create a profile package .
4301	Create a profile module .
4302	Profile function .
4303	Initialize the database .
4304	Show the guestbook .
4305	Add a new entry to the database .
4306	Handle HTTP requests .
4307	Start HTTP server .
4308	Handle the root directory .
4309	Handle other files .
4310	Handle GET requests .
4311	Handle a POST request .
4312	Send a response .
4313	Check if module_path is a standard library directory .
4314	Record a line .
4315	Yields all lines that are not standard library .
4316	Update the heatmap .
4317	Skip lines in source code .
4318	Returns a dict containing information about the package .
4319	Format a heatmap file .
4320	Load the profile module .
4321	Profile function .
4322	Run profilers .
4323	Run a function .
4324	Predict class probabilities for X .
4325	Predict log probabilities for X .
4326	Fit the model .
4327	Count the number of items in the vocabulary .
4328	Sort the features in the vocabulary .
4329	Limit a set of features .
4330	Fit the model to the data Z .
4331	Transform a matrix .
4332	Return a scikit - learned version of this scaler .
4333	Fit the model to the data Z .
4334	Wrap predict for Spark .
4335	Fit the model .
4336	Fit the model .
4337	Fit the model to the data Z .
4338	Returns the score of the last step .
4339	Fit the model .
4340	Compute the score of an estimator .
4341	Fit the k - means clustering .
4342	Predict for X .
4343	Predict for X .
4344	Check whether rdd is of expected dtype .
4345	Create vocabulary
4346	Fit the model .
4347	Fit the model to the data .
4348	Apply the transformation to the data .
4349	Iterate over a collection of blocks .
4350	Block an iterator into blocks of dtypes .
4351	Block a RDD .
4352	Apply a function to each element of this RDD .
4353	The shape of this RDD .
4354	Convert this RDD to a numpy array .
4355	Apply a function to each of the columns .
4356	Return the value of a stat bit .
4357	Return True if path is a root write .
4358	Check the configuration file
4359	Read configuration from file .
4360	Run a command as a shell .
4361	Execute a command .
4362	Execute a command over ssh .
4363	Validate the data .
4364	Return headers as a dict .
4365	Get the body of the response .
4366	Get the URL of the HomeAssistant .
4367	Get Webhook URL .
4368	Convert packet source to text .
4369	Print discovered packets .
4370	Discover devices .
4371	Execute the device .
4372	Send a confirmation message to the device .
4373	Called when a push is received .
4374	Execute a device .
4375	Run the plugin .
4376	Convert a Transaction to a Transaction object .
4377	Find the ledger file
4378	Install and run tests .
4379	Get long description from README . md .
4380	Load a precalculated text measurer from a JSON file .
4381	Return the default precalculated widths .
4382	Render a badge .
4383	Generate a list of supported Unicode characters .
4384	Given a list of characters and a list of encodings generate the encoded characters .
4385	Calculate character to length mapping .
4386	Write JSON to f .
4387	Convolve a 2D image with a gaussian kernel .
4388	Get a 1D Gaussian kernel .
4389	Convert an image to grayscale .
4390	Main function for pyssim .
4391	Return the value of the SSIM .
4392	Compute the SSIM between two images .
4393	Destroy the object .
4394	Set the code version .
4395	Get the status of the node .
4396	Print the status of the device .
4397	Return the node of a connection .
4398	Try to bind to the server .
4399	Called when a new incoming connection is received .
4400	Handle incoming messages .
4401	Callback for the utility .
4402	Checks if the given node should be connected .
4403	Connect to a node only once .
4404	Called when a connection is established .
4405	Called when an outgoing message is received .
4406	Called when a connection is disconnected .
4407	Add a node .
4408	Drop a node from the pool .
4409	Send a message to a node .
4410	Destroys the connection .
4411	Add an item to the queue .
4412	Add an item to the heap .
4413	Get an item from the heap .
4414	Try to acquire the lock .
4415	Checks if a lock is acquired .
4416	Release a lock .
4417	Decorator to check a function .
4418	Decorator for views that require a token .
4419	Set the hosts for the connection .
4420	Create one or more indexes .
4421	Migrate indexes .
4422	Strip metadata from a report .
4423	Save aggregate reports to Kafka .
4424	Extract an XML report from a file or string .
4425	Parse an aggregate report file .
4426	Convert a list of Foursic reports into a CSV file .
4427	Parse a report file .
4428	Get server capabilities .
4429	Save results to output directory .
4430	Create a zip file from results .
4431	Sends the results to the email .
4432	Save aggregate reports to Splunk
4433	Save forensic reports to Splunk .
4434	Decode base64 data .
4435	Get the base domain for a given domain .
4436	Get the reverse DNS for an IP address .
4437	Convert human timestamp to datetime object .
4438	Downloads the GeoLite2 Country database
4439	Get information about an IP address .
4440	Convert an Outlook MSG file .
4441	Convert string to list .
4442	Parse a report file .
4443	Drain the connection .
4444	Publish a message .
4445	Publish a message .
4446	Publish a message .
4447	Subscribe to a subject asynchronously .
4448	Unsubscribe from a given ssid .
4449	Flush the connection .
4450	Select a server from the pool .
4451	Process an error message .
4452	Process an operation error .
4453	Connect to the server .
4454	Process a pong .
4455	Process a message .
4456	Process connection info .
4457	Process connection init .
4458	Flush all pending data .
4459	Main read loop .
4460	Perform a co - activation .
4461	Decode a set of images .
4462	Load features from an array .
4463	Load features from images .
4464	Calculate Pearson correlation .
4465	Return the dot product of the feature images .
4466	Perform feature selection .
4467	Get studies by regions .
4468	Get the order of features in the dataset .
4469	Classify a dataset by regions .
4470	Classify data .
4471	Fit the classifier .
4472	Set class weight .
4473	Fit a cross validation .
4474	Fit the classifier to a dataset .
4475	Average the average of a set of regions .
4476	Get random voxels .
4477	Returns a list of top words .
4478	Pearson correlation coefficient .
4479	Find the fdr of a set of voxels .
4480	Load activations from file .
4481	Create image table .
4482	Get a list of studies .
4483	Add features to the feature table .
4484	Returns a list of feature names .
4485	Get counts of features above threshold .
4486	Load a dataset from file .
4487	Save feature table to file .
4488	Get image data .
4489	Get feature data .
4490	Returns a list of ordered feature names .
4491	Return a list of feature ids above threshold .
4492	Search for features in the table .
4493	Get ids by expression .
4494	Convert DataFrame to CSR format .
4495	Mark a function as deprecated .
4496	Transform a Fourier transform .
4497	Convert from cartesian to matrix .
4498	Apply a transformation .
4499	Mask an image .
4500	Get the mask of the image .
4501	Load images from files .
4502	Save an image to a file .
4503	Set the logging level .
4504	Expand an address .
4505	Return a list of normalized tokens .
4506	Parse an address .
4507	Given a set of labels and a set of values return a set of unique hashes .
4508	Convert a dict to a namedtuple .
4509	Get ticker price .
4510	Get a dataframe of prices .
4511	Get bulk news .
4512	Make a request .
4513	Get bearer token .
4514	Make a request to the API .
4515	Get a list of tracks from a Spotify album .
4516	Get a single artist .
4517	Get the albums of an artist .
4518	Get top tracks for an artist .
4519	Get a list of related artists .
4520	Get artists .
4521	Get a single category .
4522	List playlists for a category .
4523	Get a list of categories .
4524	Get a list of playlists .
4525	New releases .
4526	Get recommendations .
4527	The following artists or users the user is following .
4528	Get the albums of the artist .
4529	Get all albums .
4530	Get the total number of albums in the artist .
4531	Return a list of artists related to this artist .
4532	Get the currently playing item .
4533	Get the current player .
4534	Get available devices .
4535	Get recently played tracks .
4536	Replace multiple tracks in a playlist .
4537	Reorder a playlist s tracks .
4538	Create a new playlist .
4539	Get a list of playlists .
4540	Get a list of tracks for this album .
4541	Get all tracks .
4542	Returns the OAuth2 URL for the given parameters .
4543	Get a single album .
4544	Get an artist .
4545	Get a single track .
4546	Get a user .
4547	Get albums .
4548	Get artists .
4549	Perform a search .
4550	Convert a string to an ID .
4551	Raises an exception if the object does not have the specified attribute .
4552	Create an instance from a client .
4553	Generate OAuth2 URL .
4554	Return a dictionary of client attributes .
4555	Returns the query parameters for this request .
4556	Build the playlist .
4557	Get all tracks in the playlist .
4558	Resume playback .
4559	Transfer a player .
4560	Retrieve a new instance of the class from its href attribute .
4561	Get the status of the current test .
4562	Convert or shorten month .
4563	Update code urls .
4564	Check if the current version is greater than the older one .
4565	Determine if the current branch is a development version .
4566	Check if we need to deprecate anything .
4567	Backup the data .
4568	Restore the backup content .
4569	Check if the line is to be ignored .
4570	Process the options .
4571	Extract the base of the given element .
4572	Format the decoded data .
4573	Get the HTTP status code .
4574	Get the HTTP status code .
4575	Check if the given domain is valid .
4576	Check if the given domain is a subdomain .
4577	Checks the syntax of an IP address .
4578	Check if the given IP address is a valid IP range .
4579	Check if the given URL is valid .
4580	Load the configuration file .
4581	Stays safe .
4582	Checks if the passed string is a valid URL and downloads it .
4583	Check if the current url_file is a URL and if so download it .
4584	Print the header .
4585	This function is called when a file is selected .
4586	Sets the domain to test .
4587	Test a URL .
4588	Colorize the logo .
4589	Format the domain .
4590	Extract the domain from the given file .
4591	Returns a list of files in the database .
4592	Get the URL of the file .
4593	Switch a variable .
4594	Get the expiration date .
4595	Parse the status file .
4596	Get the structure file .
4597	Create a directory .
4598	Delete uneeded directories .
4599	Sets the path to the config file .
4600	Load the configuration file .
4601	Installs the production configuration .
4602	Install the iana configuration file .
4603	Installs the psl configuration file .
4604	Installs the directory structure file .
4605	Merge config values from upstream config .
4606	Load the configuration file .
4607	Split a version into its digits and non - digit parts .
4608	Check the local and upstream versions .
4609	Check if the current version is the cloned version .
4610	Handle non - existent index .
4611	Returns the path to the analytic host file directory .
4612	Return the path of the unified file .
4613	Return the status file .
4614	Check if file should be produced .
4615	Parse the public suffix line .
4616	Load the database .
4617	Replace special characters in a string .
4618	Hierarchical search .
4619	Load the database .
4620	Get the referer for the given extension .
4621	Extracts the list of extensions from the iana website .
4622	Update the database .
4623	Mines the link .
4624	Retrieve the mining information .
4625	Backup the mining information .
4626	Add a file to the database .
4627	Remove the file from the database .
4628	Return the list of mined files .
4629	Process the data .
4630	Get the content of a file .
4631	Write content to file .
4632	Write a record to the log .
4633	Set the expiration date .
4634	Called when a referer is not found .
4635	Write the before header informations .
4636	Construct the header .
4637	Print the header .
4638	Constructs the data to print .
4639	Get the size from the header .
4640	Colorize the data .
4641	Print the content of the file .
4642	Return the data to print .
4643	Save the file we are working with .
4644	Calculate the time difference between two times .
4645	Format the execution time .
4646	Returns a list of files to delete .
4647	Return a list of databases to delete .
4648	Delete everything in the database .
4649	Hash the content of the file .
4650	Hash the data .
4651	Get the hash .
4652	Execute the command .
4653	Remove a key from the main dictionnary .
4654	Rename a key .
4655	Merges two dictionaries .
4656	Save the main dictionnary to a json file .
4657	Writes the configuration to a yaml file .
4658	Fix the path .
4659	Write data to the file .
4660	Read the file .
4661	Return a sorted list of strings .
4662	Merges the contents of two lists .
4663	Return a list of items that do not match the regex .
4664	Match the regex against the data .
4665	Replace all occurences of self . regex with self . replace_with .
4666	Count the number of tests .
4667	Calculate the actual status .
4668	Log the progress .
4669	Check if the given url is valid .
4670	Check if a domain is valid .
4671	Check if the domain is a valid subdomain .
4672	Get the status .
4673	Reformat the historical formating error file .
4674	Retrieve the database .
4675	Backup the database .
4676	Get the current time .
4677	Return the content of the database .
4678	Check if the database subsystem is present .
4679	Retrieve the whois database .
4680	Backup the database .
4681	Check if we are in the database .
4682	Check if the current time is older than the expected time .
4683	Get the expiration date from the database .
4684	Add the element to the database .
4685	Set permissions for travis .
4686	Run travis .
4687	This method is called by PyFunceble .
4688	Connect to a whois server .
4689	Get the HTTP status code .
4690	Get the referer from the database .
4691	Get the current object .
4692	Return a list of standard library paths .
4693	Return a list of standard package names .
4694	Yield line numbers of unused imports .
4695	Extract the module name from an unused import .
4696	Yield line numbers of star imports .
4697	Parse star import usage messages .
4698	Yield line numbers of unused variables .
4699	Find duplicate key line numbers .
4700	Create a dictionary from a list of messages .
4701	Check source code .
4702	Extract package name from line .
4703	Return True if line is a multiline import .
4704	Check if a line is a multiline statement .
4705	Filter from import statements .
4706	Break up import statements .
4707	Filter source code .
4708	Return a dictionary mapping line numbers to messages .
4709	Filter out undefined names .
4710	Filter out duplicate lines .
4711	Check if a dict entry has the given key .
4712	Check if value is a literal or name .
4713	Generate line numbers for useless pass tokens .
4714	Filter lines that contain useless pass .
4715	Get the indentation of a line .
4716	Get line ending .
4717	Filter the source code to remove useless imports .
4718	Split a comma separated string .
4719	Check if a file is a Python file .
4720	Check if a file should be excluded .
4721	Find files in a list of filenames .
4722	Main function for autoflake .
4723	Reads the payload from the input stream .
4724	Write the object to the output stream .
4725	Write the CancelRequestPayload to the output stream .
4726	Reads a CancelResponsePayload from the input stream .
4727	Create a new Name .
4728	Read the digest from istream .
4729	Write the digest to ostream .
4730	Create a Digest object .
4731	Read application specific information from the stream .
4732	Write the application specific information .
4733	Create an application specific information .
4734	Reads the DerivationParameters from the input stream .
4735	Write this DerivationParameters to an output stream .
4736	Reads the payload from the input stream .
4737	Write this GetRequestPayload to an output stream .
4738	Reads a GetResponsePayload from the input stream .
4739	Write the GetResponsePayload to the output stream .
4740	Reads the payload from the input stream .
4741	Write this message to the output stream .
4742	Reads the payload from the input stream .
4743	Process a request .
4744	Build an error response .
4745	Process a template attribute .
4746	Retrieves attributes from a managed object .
4747	Retrieves an attribute from a managed object .
4748	Sets attributes on a managed object .
4749	Sets an attribute on a managed object .
4750	Determines if the given policy applies to the given object .
4751	Write this DecryptRequestPayload to an output stream .
4752	Create a secret .
4753	Set a setting .
4754	Load settings from a file .
4755	Process a bind parameter .
4756	Process the result value .
4757	Read a long integer from the stream .
4758	Write a long integer to the stream .
4759	Validate the value .
4760	Read a BigInteger from the given input stream .
4761	Write the value to ostream .
4762	Validate the value .
4763	Validate the enumeration .
4764	Read a boolean value from the stream .
4765	Write the boolean value to the stream .
4766	Write the Boolean to the stream .
4767	Validate that the value is a boolean .
4768	Read an Interval from a stream .
4769	Validate the interval .
4770	Return the key wrapping data .
4771	Set the key wrapping data .
4772	Validate the key .
4773	Validate the secret data .
4774	Validate the opaque data .
4775	Convert an attribute name to a tag .
4776	Convert an attribute tag to its name .
4777	Get the bit mask from a list of enumerations .
4778	Get enumerations from a bit mask .
4779	Check if a potential_mask is a bit mask .
4780	Reads a CreateKeyPairRequestPayload from the input buffer .
4781	Write this template attribute to an output buffer .
4782	Reads the CreateKeyPairResponsePayload from the input buffer .
4783	Write the CreateKeyPair response payload to a byte array .
4784	Reads the attribute list request payload .
4785	Write the GetAttributeListRequest payload to the output buffer .
4786	Reads the GetAttributeList payload from the input buffer .
4787	Write the GetAttributeList response payload .
4788	Return a list of all JSON files in directory p .
4789	Scan policy files .
4790	Start the operation policy file monitor .
4791	Get certificate from connection .
4792	Get the extended key usage from a certificate .
4793	Get common names from certificate .
4794	Get the client identity from a certificate .
4795	Read CreateRequestPayload from input_buffer .
4796	Write the Create request payload .
4797	Reads the Create response payload from the input buffer .
4798	Writes the Create response payload to the output buffer .
4799	Convert an object to a key .
4800	Reads the payload from the input stream .
4801	Reads a DeriveKeyRequestPayload from the input buffer .
4802	Write the DeriveKey request payload to the output buffer .
4803	Check if an attribute is supported by this rule .
4804	Checks if an attribute is deprecated .
4805	Check if an attribute applies to an object type .
4806	Check if an attribute is multivalued .
4807	Get value from configuration file .
4808	Reads a CheckResponsePayload from the input stream .
4809	Write the CheckResponsePayload to the output stream .
4810	Reads an AttributeReference from the input buffer .
4811	Write this attribute reference to the output buffer .
4812	Read attributes from an input stream .
4813	Write the attributes to the output stream .
4814	Reads a nonce from the input stream .
4815	Write the Nonce struct to the output stream .
4816	Reads a UsernamePasswordCredential from the input stream .
4817	Write the credential to the output stream .
4818	Reads a device credential from the input stream .
4819	Write this device to an output stream .
4820	Reads a credential from the input stream .
4821	Writes the credential to the output stream .
4822	Reads a MAC signature key information from the input stream .
4823	Write this MAC signature key to an output stream .
4824	Reads a KeyWrappingData structure from the input stream .
4825	Writes the data to the output stream .
4826	Reads the key wrapping specification from the input stream .
4827	Write this key wrapping specification to an output stream .
4828	Read the extension information from the stream .
4829	Write the extension information .
4830	Create a new ExtensionInformation object .
4831	Read a RevocationReason from a stream .
4832	Write the RevocationReason to the stream .
4833	Validate the revocation codes .
4834	Reads an ObjectDefaults object from the input buffer .
4835	Write the ObjectDefaults object to the output buffer .
4836	Reads the object defaults from the input buffer .
4837	Write this DefaultsInformation object to an output buffer .
4838	Reads the parameters from the input buffer .
4839	Writes the parameters to the output buffer .
4840	Reads a ProfileInformation object from the input buffer .
4841	Write this ProfileInformation object to an output buffer .
4842	Write this ValidationInformation object to a byte array .
4843	Reads a CapabilityInformation object from the input buffer .
4844	Write the capability information to the output buffer .
4845	Stop the server .
4846	Start the connection service .
4847	Reads the payload from the input buffer .
4848	Write this object to a byte array .
4849	Reads a LocateResponsePayload from the input buffer .
4850	Writes the payload to the output buffer .
4851	Creates a symmetric key .
4852	Create an asymmetric key pair .
4853	Generate a message authentication code .
4854	Encrypts the given plain text using the given encryption key .
4855	Encrypt a plain text using a symmetric key .
4856	Asymmetric encryption .
4857	Decrypts a message using an asymmetric key .
4858	Generate an RSA key pair .
4859	Derive a key .
4860	Create a RSA private key .
4861	Verifies the signature .
4862	Reads a SignResponsePayload from the input stream .
4863	Write the payload to the output stream .
4864	Reads the payload from the input stream .
4865	Converts a ProtocolVersion enum value to a KMIP Version enum value .
4866	Reads the protocol version from the input stream .
4867	Write the protocol version to the output stream .
4868	Reads an authentication token from the input stream .
4869	Write the authentication struct to the output stream .
4870	Reads the payload from the input stream .
4871	Reads a certificate from the input stream .
4872	Write the certificate to the stream .
4873	Authenticate to the SLUGS server .
4874	Reads the payload from the input stream .
4875	Write the ArchiveResponsePayload to the output stream .
4876	Start the session .
4877	Reads a RekeyResponsePayload from the input stream .
4878	Checks if the given conformance clause is supported by the given authentication suite .
4879	Derives a key .
4880	Get attributes .
4881	Get a list of attributes for a given user .
4882	Perform a query .
4883	Signs data .
4884	Open the client connection .
4885	Closes the connection .
4886	Create a new key .
4887	Creates a key pair .
4888	Registers a managed object .
4889	Rekey a device .
4890	Derive a key .
4891	Locate managed objects .
4892	Checks the status of the specified user .
4893	Get a managed object .
4894	Get the list of attributes for a managed object .
4895	Activate a managed object .
4896	Revoke a managed object .
4897	Perform a MAC operation .
4898	Build a CryptographicParameters object from a dictionary .
4899	Build an EncryptionKeyInformation object from a dictionary .
4900	Build the MAC signature key information .
4901	Build a KeyWrappingSpecification from a dictionary .
4902	Build common attributes .
4903	Build a name attribute .
4904	Reads a query request payload .
4905	Write the query request payload to the output buffer .
4906	Writes the object to the output buffer .
4907	Reads a GetAttributesResponsePayload from the input buffer .
4908	Write the GetAttributesResponse payload to the output_buffer .
4909	Get a single entry point .
4910	Get a group by name .
4911	Get all entries in a group .
4912	Load the object .
4913	Parse an entry point string .
4914	Serve the live server .
4915	Generate project files .
4916	Generate controller file .
4917	Generate action code .
4918	Generate a form .
4919	Generate model .
4920	Generate a macro .
4921	Create a directory .
4922	Rewrite src_file and copy it to dst_file .
4923	Return the time since the given date .
4924	Check if URL is valid .
4925	Encode a value to a URL safe string .
4926	Decode a string using a secret key .
4927	Wrap a function to return a JSON response .
4928	Return an absolute URL for the given endpoint .
4929	Load configuration .
4930	Sign in a user
4931	Get the currently logged in user .
4932	Create the Flask application .
4933	Register jinja loader .
4934	Register blueprint routes .
4935	Register error handler .
4936	Register hooks .
4937	Write a DataFrame to a CSV file .
4938	Read a dataframe from a CSV file .
4939	Serializes the given data frame into the given writer .
4940	Deserializes a data frame from the given reader .
4941	Update this table from a DataFrame .
4942	Update from raw data .
4943	Returns the URL of the contents of the file .
4944	Adds a new entry to this table from a DataFrame .
4945	Adds a new file from raw data .
4946	Open the intermediate dataset .
4947	Read the contents of this node as binary .
4948	Read the contents of this intermediate dataset as text .
4949	Convert to a DataFrame .
4950	Get an intermediate dataset .
4951	Get all experiments in a workspace .
4952	Get datasets for a workspace .
4953	Get a dataset .
4954	Publish a function or a workspace .
4955	Publish a service .
4956	Decorator to annotate a function with annotations .
4957	Decorator to annotate a function s return type .
4958	Decorator to attach an attachment .
4959	Find all globals in a code object .
4960	Return a copy of the pen .
4961	Lookup a color .
4962	Draw the barcode .
4963	r Computes a cubic Bernstein extrema .
4964	Internal cubic Bbernstein equation .
4965	Build choices list .
4966	Returns a function that returns a list of options .
4967	Decorator to register a function as the items processor .
4968	Combines a list of Sitetree objects into a single tree .
4969	Initialize the cache .
4970	Empty the cache .
4971	Get an entry from the cache .
4972	Update an entry s value .
4973	Set an entry in the cache .
4974	Initialize the cache .
4975	Resolve a tree alias .
4976	Return whether the current app is an admin .
4977	Calculate the item depth .
4978	Return the currently selected tree item .
4979	Returns the URL for the given sitetree item .
4980	Initialize the site tree .
4981	Get current page attribute .
4982	Get the current item s ancestor level .
4983	Return the menu for the given tree .
4984	Check if user can access item
4985	Return a list of breadcrumbs .
4986	Return the tree for the given alias .
4987	Render the children of the given item .
4988	Return the children of the given item .
4989	Updates the has_children property of the tree item .
4990	Filter out hidden items .
4991	Get the parent item of the given item .
4992	Add a new item to the tree
4993	Resolve a variable .
4994	Parse a sitetree tree .
4995	Sitetree children .
4996	Sitetree Breadcrumbs tag .
4997	Parse a sitetree menu tag .
4998	Render a template and return the result .
4999	Parse a tag .
5000	Get model url name .
5001	Reregister the tree admin .
5002	Handles redirections .
5003	Redirect to another item .
5004	Redirect to the new item .
5005	Redirect to previous page .
5006	Override the default get_form method .
5007	Get the model tree .
5008	Move an item .
5009	Save model instance .
5010	Return a list of urls to redirect to .
5011	Dump a view to the browser .
5012	Create a tree object
5013	Create a tree item .
5014	Import app s sitetree module .
5015	Get model class from settings entry .
5016	Create a Config object from a mapping .
5017	Load configuration from a Python file .
5018	Load configuration from a TOML file .
5019	Create a Config instance from an object .
5020	Create Zipkin attrs for a span .
5021	Create HTTP headers for a new span .
5022	Get the current trace context .
5023	Start logging .
5024	Stop the transport .
5025	Update the binary annotations for this span .
5026	Add a binary annotation to the span .
5027	Override the span name .
5028	Create an endpoint .
5029	Copy an endpoint with a new service name .
5030	Build a _V1Span from this span .
5031	Encode a list of spans into a string .
5032	Create a protobuf Span from a protobuf Span .
5033	Convert a hex id to bytes .
5034	Get protobuf kind .
5035	Convert an endpoint to a Zipkin Endpoint .
5036	Convert annotations to protobuf .
5037	Create a Zipkin annotation .
5038	Create a binary annotation .
5039	Create an endpoint .
5040	Copy an endpoint with a new service name .
5041	Build a list of annotations .
5042	Build a list of binary annotations .
5043	Create a new span .
5044	Convert a thrift span to bytes .
5045	Encode a list of binary thrift objects .
5046	Detect the span version and encoding of a message .
5047	Convert spans from one encoding to another .
5048	Deprecated . Use push instead .
5049	Encodes a span into a thrift span .
5050	Create json endpoint .
5051	Encodes a Span into a protobuf .
5052	Decodes a list of spans .
5053	Convert a thrift endpoint to an Endpoint object .
5054	Decode thrift annotations .
5055	Convert from thrift binary annotations .
5056	Decodes a thrift span into a Span object .
5057	Convert a trace ID to a string .
5058	Convert an unsigned long to lower hex .
5059	Writes a 16 - bit unsigned integer to the data stream .
5060	Adjust the day if the month is greater than the max month .
5061	Set the transaction code .
5062	Set the iph_id for a tag .
5063	Set the tnr for a tag .
5064	Parse tag data .
5065	Parse a file or file - like object .
5066	Join lines of a string .
5067	Return the response body as json or text .
5068	Check if we have exceeded our quota .
5069	Perform an HTTP request .
5070	Get bot information .
5071	Get a list of bots .
5072	Read a single term .
5073	Write a message to the socket .
5074	Close file handles .
5075	Decode a string according to the protocol version .
5076	Encode a term .
5077	Add a source address .
5078	Send all pending messages .
5079	Sets the remote service hello callback .
5080	Stop the server .
5081	Clear all local services .
5082	Search for services .
5083	Create a SOAP message .
5084	Set up logging .
5085	Return the tagged item manager .
5086	Return a list of all child fields of a model .
5087	Return a list of all parental many - to - many fields of a model .
5088	Save the model to the database .
5089	Create a model instance from serialized data .
5090	Validate each form s unique fields .
5091	Returns True if any form has changed .
5092	Return an address with a valid checksum .
5093	Generate a checksum for this address .
5094	Parse command line arguments .
5095	Create the argument parser .
5096	Prompt for a seed .
5097	Validate signature fragments .
5098	Get a private key .
5099	Get the key for the given address .
5100	Create a key iterator .
5101	Create a sponge .
5102	Absorb a sequence of trits into the state .
5103	Squeeze a set of trits .
5104	Transform the state to a new state .
5105	Get digests .
5106	Get a list of private keys .
5107	Prepare a multisig transfer .
5108	Add trits from left to right .
5109	Convert an integer into a list of trits .
5110	Add two trits .
5111	Full add trits .
5112	Output seed .
5113	Find transactions .
5114	Get the inputs .
5115	Get new addresses .
5116	Get all transfers .
5117	Promote a transaction .
5118	Replay a bundle .
5119	Send a transfer .
5120	Send a list of trytes to the device .
5121	Resolve a URI to an adapter .
5122	Send a request .
5123	Log a message .
5124	Send an HTTP request .
5125	Interpret the response .
5126	Seed response for given command .
5127	Add a digest to the address .
5128	Get the multisig address .
5129	Generate addresses from the seed .
5130	Construct an address from a Digest object .
5131	Generate an address from a key iterator .
5132	Find transactions in the database .
5133	Iterate over all addresses that are used in a transaction .
5134	Get bundles from a list of transaction hashes .
5135	Check if the codec is supported .
5136	Get codec info .
5137	Encode a byte string into a binary string .
5138	Decodes a byte string .
5139	Find addresses .
5140	Add a new route .
5141	Create a Transaction object from a tryte string .
5142	Return this transaction as a JSON - compatible dictionary .
5143	Get the trytes for the signature validation .
5144	Update the is_confirmed of all transactions .
5145	Get the signature message fragments .
5146	Return a list of tryte strings .
5147	Return a list of transactions grouped by address .
5148	Discover all commands in a package .
5149	Execute the request .
5150	Apply a filter to a value .
5151	Get the URL for a job .
5152	Return all errors .
5153	Check if the bundle is valid .
5154	Create the validator .
5155	Get the signature errors for a bundle .
5156	Get the error message for a group signature .
5157	Traverse a bundle .
5158	Start IPython REPL .
5159	Generate a random seed .
5160	Get the digest of the key .
5161	Sign a bundle of input transactions .
5162	Pretty print the object .
5163	Absorb a sequence of trits into the buffer .
5164	Squeeze a set of trits .
5165	Add context to the exception .
5166	Security level .
5167	Increment the legacy tag .
5168	Return the tag of this ProposedTransaction .
5169	Add a transaction to the bundle .
5170	Finalize the bundle .
5171	Sign all inputs .
5172	Sign the input at the given index .
5173	Create input transactions .
5174	Convert value to standard unit .
5175	Decompress a G1 compressed point .
5176	Return prime field inverse of a .
5177	Create an instance from a JSON file .
5178	Find word groups .
5179	Find the synonym for a word .
5180	Expand abbreviations .
5181	Split text into a list of words .
5182	Return a list of category names .
5183	Generate a random colour .
5184	Plot the component .
5185	Create a LEGEND object from a name .
5186	Load a builtin timescale by name .
5187	Randomize a set of components .
5188	Create a new instance from an image file .
5189	Load a Legend from a CSV file .
5190	Return a CSV representation of the legend .
5191	Returns the maximum width of the table .
5192	Get a component decoration .
5193	Get an attribute from a class .
5194	Get the component of a given colour .
5195	Plot the data .
5196	Create a component from a text .
5197	Return the component summary .
5198	Deprecated . Please use Component instead .
5199	Process a single row .
5200	Parse canstrat output .
5201	Returns True if all positions are within tolerance .
5202	Return a list of unique values .
5203	Create intervals from tops .
5204	Clean longitudinal data .
5205	Read a PETREL file .
5206	Build a list of intervals .
5207	Load data from a CSV file .
5208	Create an instance from an image file .
5209	Extract components from a log .
5210	Create a LAS instance from a string .
5211	Load data from Canstrat format .
5212	Return a copy of this striplog .
5213	Write the table to a CSV file .
5214	Write the Lithology table to a LaTeX file .
5215	Plot the legend .
5216	Get the data for a given field .
5217	Extract data from a basis set .
5218	Find the first occurrence of a search term .
5219	Find all incongruities .
5220	Find all incongruities .
5221	Prune a strip .
5222	An anneal strip .
5223	Fill this interval with components .
5224	Union two striplogs .
5225	Intersect two striplogs .
5226	Merge overlapping pieces .
5227	Plot a histogram .
5228	Invert the striplog .
5229	Crop the striplog to the given extent .
5230	Return the quality of a set of tests .
5231	Convert hex color to name .
5232	Read a log - likelihood from an image file .
5233	Override get_field to handle missing values .
5234	Get all jobs .
5235	Parse a job .
5236	Update a token .
5237	Get allocation information .
5238	Fail a deployment .
5239	Pause a deployment .
5240	Checks the health of a deployment allocation .
5241	Drain a node .
5242	Drain a node .
5243	Mark a node as eligible .
5244	List files .
5245	Get the contents of a file .
5246	Stat a file
5247	Join an agent .
5248	Update servers .
5249	Force a node to leave .
5250	Get all nodes .
5251	Get evaluations .
5252	Get namespaces .
5253	Register a job .
5254	Plan a job .
5255	Dispatch a job .
5256	Revert a job .
5257	Revert a stable job .
5258	Deregister a job .
5259	Get raft configuration .
5260	Delete a peer from Raft .
5261	Get all deployments .
5262	Get a random value .
5263	Get a random mutation .
5264	Returns a string representation of the attack .
5265	Perform fuzzing .
5266	Return a safe unicode string .
5267	Run the server .
5268	Stop the server .
5269	Serve a custom HTML file .
5270	Serve the fuzzed data .
5271	Perform fuzzing on an object .
5272	Spawns a PJF process .
5273	Get the output of the process .
5274	Finish the read process .
5275	Closes the PJF executor .
5276	Start the fuzzer .
5277	Execute the fuzzing method .
5278	Encode a function as JSON .
5279	Build a random string .
5280	Return a string representation of the grammar .
5281	Return a string representation of the query .
5282	Build a random value .
5283	Build an Opt instance .
5284	Return the definition of the reference
5285	Build a random STAR .
5286	Shutdown the PJF process .
5287	Run and monitor .
5288	Start the monitor .
5289	Return a random float between a and b .
5290	Add a definition to a category .
5291	Add a definition to a category group .
5292	Generate a set of rules .
5293	Perform fuzzing of the element .
5294	Return the fuzzed version of the object .
5295	Return the fuzzed version of the JSON .
5296	Decorate a function to mutate an object .
5297	Signal handler .
5298	Quit the current process .
5299	Pause the current process
5300	Resume a paused command
5301	Stop the running process .
5302	Restart process .
5303	Return a list of Skype events .
5304	Set the mood of the user .
5305	Set the avatar for this user .
5306	Get metadata for a URL .
5307	Retrieve a contact .
5308	Get a user from Skype .
5309	Get list of bots .
5310	Get a bot by id .
5311	Search for skype users .
5312	Get all invite requests .
5313	Create an instance from raw data .
5314	Merge other object into self .
5315	Merge an object into the cache .
5316	Make a synchronous call to the API .
5317	Read the token file
5318	Write token file .
5319	Verify a token
5320	Refresh Skype token .
5321	Get Skype User Id
5322	Get Skype registration token .
5323	Get all endpoint presence docs .
5324	Check if a user exists .
5325	Authenticates a token
5326	Authenticate to Skype .
5327	Configures this endpoint .
5328	Ping to Skype .
5329	Get recent chats .
5330	Get a chat .
5331	Create a new thread .
5332	Convert a user URL to an ID .
5333	Convert a chat URL to a chat ID .
5334	Exhaust a generator .
5335	Convert text to unicode .
5336	Detect the format of the text .
5337	Parse the given text with the given handler .
5338	Return the metadata as a dictionary .
5339	Load a YAML file .
5340	Export metadata to YAML .
5341	Export metadata to JSON .
5342	Match the string against the pattern .
5343	Return a list of items .
5344	Return a list of sub - lists .
5345	Convert pattern to newstart .
5346	Return a list of arguments .
5347	Return a list of lists matching pattern .
5348	Plant a trie .
5349	Build a pattern from a trie .
5350	Check the index .
5351	Insert string at index .
5352	Return the atomic partition of a character .
5353	Returns a list of subspans of the given type .
5354	Shrink the list of spans .
5355	Insert a new element into the list .
5356	Return the current nesting level .
5357	Return the shadow of the string .
5358	Return the shadow of the external link .
5359	Map type to spans .
5360	Pretty print the object .
5361	Return a list of Parameter instances .
5362	Parser functions .
5363	Return a list of Template instances .
5364	List of WikiLink s .
5365	Return a list of all comments .
5366	Return a list of all external links .
5367	Return a list of sections .
5368	Return a list of all tables .
5369	Return a list of lists .
5370	Return a list of all tags .
5371	Return all sub - spans of type _type .
5372	Return a list of the ancestors of this parser .
5373	Return the first ancestor .
5374	Returns the mode of a list .
5375	Get an argument from a list of arguments .
5376	Return the name of the template .
5377	Remove the first argument from the list .
5378	Remove any duplicate arguments .
5379	Set an argument .
5380	Get an argument .
5381	Check if this command has an argument with the given name and value .
5382	Delete an argument .
5383	Convert a CRS code to a string .
5384	Find an Ellipsoid by name .
5385	Load a CRS from a URL .
5386	Load a GeoJSON file .
5387	Create a CRS object from an EPSG code .
5388	Create a CRS object from an ESRI code .
5389	Create a CRS object from a SR code .
5390	Try to auto - detect the crs from the text .
5391	Write the record to out .
5392	Read VLR record from data stream .
5393	Parse geo tiff keys from vlr list .
5394	Parse geotiff keys .
5395	Get the signedness of an extra dimension .
5396	Get the id for an extra dimension type .
5397	Create a point record from another point record .
5398	Copy fields from another record .
5399	Append zeros if value is too small .
5400	Returns a frozenset of all dimensions names .
5401	Create a numpy array of zeros .
5402	Read points from a stream .
5403	Decompress a compressed buffer .
5404	The x - dimension of the data .
5405	The y - axis of the data .
5406	Return the z - dimension of the matrix .
5407	Add an extra dimension .
5408	Write the point record to out_stream .
5409	Write data to a file .
5410	Write the image to a file .
5411	Build the dtypes for the point formats .
5412	Build a dictionary of unpacked point formats dtypes .
5413	Convert numpy dtype to point format .
5414	Returns the minimum file format version for a given point format ID .
5415	Returns True if the file format is compatible with the given version .
5416	Return a list of vlrs of type vlr_type .
5417	Extract vlrs of type vlr_type .
5418	Read VLR list from data stream .
5419	Check if all files have the same point format id .
5420	Check if all las files have the same dtype .
5421	Raise PylasError if the file signature is not correct .
5422	Read header from stream .
5423	Read a list of VLRs .
5424	Read the points .
5425	Read compressed points data .
5426	Read internal waveform packet .
5427	Read evlrs list .
5428	Log a warning if the stream is not at the expected position .
5429	Open a LAS file .
5430	Read a las file .
5431	Create LasData object from header .
5432	Create a las data object .
5433	Convert a source LAS record into a PackedPointRecord .
5434	Merge las files .
5435	Write las file and read again .
5436	Return a datetime . date object .
5437	Set the date of the event .
5438	Return x y z min values .
5439	Set the minimum values .
5440	Maximum x y z values .
5441	Set max values .
5442	Return the x y z scales .
5443	A numpy array containing the x y and z offsets .
5444	Returns the version of the file .
5445	Convert a header to a new version .
5446	Unpack a source array with a mask .
5447	Pack a sub - field mask into an array .
5448	Returns a list of lost dimensions .
5449	Returns a dictionary of sub - dimensions .
5450	Get the number of extra bytes required by the image .
5451	Returns True if there is a waveform packet .
5452	Demo of satel_integra library .
5453	Calculate the CRC of a command .
5454	Print hex data .
5455	Verify response and strip checksum .
5456	Return a list of set bits .
5457	Generate query .
5458	Demonstrate how to connect to Satello .
5459	Connect to the server .
5460	Start monitoring .
5461	Send a disarm command .
5462	Clear the alarm .
5463	Set an output .
5464	Keep the connection alive .
5465	Monitor the status of the device .
5466	Close the connection .
5467	Purge the database .
5468	Guess the type of the file .
5469	Get the file id for the given path .
5470	Get a notebook .
5471	Create a notebook model from a record .
5472	Get a directory .
5473	Convert a list of file records to models .
5474	Create directory model from DB record .
5475	Create a file model from a database record .
5476	Save a notebook .
5477	Save a file .
5478	Rename a file or directory .
5479	Delete a file or directory .
5480	Ensure a user exists in the database .
5481	Purge a user from the database .
5482	Create a directory .
5483	Check if a table is in a directory .
5484	Delete a directory .
5485	Check if directory exists .
5486	List files in directory .
5487	List directories in a directory .
5488	Return a where clause for files .
5489	Select files .
5490	Return default file fields .
5491	Get a file from the database .
5492	Get a file .
5493	Get file id .
5494	Check if a file exists .
5495	Rename a directory .
5496	Save a file .
5497	Generate notebooks .
5498	Purge all remote checkpoints for a user .
5499	Generate a list of checkpoints .
5500	Generate notebooks .
5501	Reencrypt a row .
5502	Re - encrypt user content .
5503	Derive a single fernet key .
5504	Derive fallback fernet keys .
5505	Return a CryptoFactory for a single password .
5506	Memoize a single arg function .
5507	Get the name of a column .
5508	Given a list of fields and a row return a dict without content .
5509	Convert a row to a dict with content .
5510	Create a new notebook checkpoint .
5511	Create a new file checkpoint .
5512	Delete a checkpoint .
5513	Get the content of a checkpoint .
5514	Return a list of checkpoints at the given path .
5515	Rename all checkpoints .
5516	Delete all checkpoints at path .
5517	Purge remote checkpoints .
5518	Resolve a path to a manager .
5519	Apply prefix to model .
5520	Decorator for dispatching a method on a manager .
5521	Decorator for dispatching a path kwarg .
5522	A decorator that dispatches an old path to a new path .
5523	Called when a directory is changed .
5524	Get a directory .
5525	Normalize API path .
5526	Split a path into a directory name and file name .
5527	Return a base64 encoded representation of a notebook .
5528	Reads a notebook from a base64 encoded string .
5529	Decodes a base64 - encoded string into a byte string .
5530	Decode a base64 - encoded file .
5531	Return a list of directories in a path .
5532	Wrap a function to handle PathOutsideRoot exceptions .
5533	Create a new user .
5534	Separate directories and files .
5535	Walk a directory tree .
5536	Walk a directory and yield all files .
5537	Yield all files with content
5538	Re - encrypt all users .
5539	Re - encrypt a single user .
5540	Un - encrypt all users .
5541	Unencrypt a single user .
5542	Generate a temporary alembic . ini file .
5543	Upgrade alembic database .
5544	Sanitize the block .
5545	Queue an instance .
5546	Load the instances for the given ids .
5547	Insert an instance .
5548	Load the data from the database .
5549	Validate data .
5550	Admin view .
5551	Return the JSON representation of the object .
5552	Hide any fields that are not authenticated .
5553	Exclude fields from the result .
5554	Get the published version of the article .
5555	Returns a queryset of the publishable objects .
5556	Returns a queryset of published items .
5557	Return True if this is a null boolean field .
5558	Validate a widget .
5559	Validate a zone .
5560	Check if id is a valid UUID .
5561	Get permissions for this user .
5562	Modify group permissions .
5563	Validate an author .
5564	Save the zone .
5565	Get the data for this field .
5566	Prepare the data for the field .
5567	Render the template .
5568	Get the settings for this Integration .
5569	Callback endpoint for the integration .
5570	Get integration settings .
5571	Update the integration settings .
5572	Signup a user .
5573	Create a maptag .
5574	Render a zone .
5575	Save featured image .
5576	Save a subsection to the database .
5577	Get image extension .
5578	Returns the URL of the medium .
5579	Save the image .
5580	Save a thumbnail image .
5581	Return a connection object .
5582	Get a BandwidthLimitedStream .
5583	Read amount of bytes .
5584	Consumes amt from the queue .
5585	Schedules consumption for a token .
5586	Process a scheduled consumption .
5587	Returns the projected rate at the given time .
5588	Record the current consumption rate .
5589	Download a file from S3 .
5590	Poll for the result of a transfer .
5591	Returns a list of callbacks for the given callback type .
5592	Return a filtered version of a dictionary .
5593	Decrement the counter .
5594	Finalize the timer .
5595	Check if a file is a special device .
5596	Acquire a tag .
5597	Release the lock .
5598	Adjust the chunk size based on the file size .
5599	Queue a file - like IO task .
5600	Get an IOWriteTask .
5601	Get download output manager class .
5602	Main function for downloading .
5603	Main function .
5604	Request a write from the queue .
5605	Check if a file object is seekable .
5606	Upload a file to a bucket .
5607	Download a file from S3 .
5608	Copy a file or directory .
5609	Delete a key from a bucket .
5610	Shutdown the server .
5611	Cancel all transfers .
5612	Wait for all transfer coordinators to complete .
5613	Read data from a file object .
5614	Wrap data in a file - like object .
5615	Get the upload input manager class .
5616	Set the exception for this transfer .
5617	Set the result of the future .
5618	Set the exception .
5619	Return the final result or raise an exception .
5620	Cancel the task .
5621	Submit a task to an executor .
5622	Add a done callback .
5623	Add a failure cleanup function .
5624	Mark the task as done .
5625	Submit a task to the executor .
5626	Add a done callback to the future .
5627	Upload a file to S3 .
5628	Download a file from S3 .
5629	Iterate over the decorators of a step function .
5630	Extract the step from a decorator .
5631	Refactor a single step .
5632	Iterate over the decorators of the step function .
5633	Get the step from the decorator .
5634	Refactor a step .
5635	Select a Python parser .
5636	List teams .
5637	Create a new team member .
5638	Update a team membership .
5639	Delete a membership .
5640	Get the current category fact .
5641	Send a message to the bot .
5642	List room members .
5643	Delete a membership .
5644	Validate a base url .
5645	Check if a string is a web url .
5646	Open a local file .
5647	Check that an object is of a certain type .
5648	Create a dictionary from a list of dictionaries .
5649	Check response code .
5650	Convert a JSON string into a dictionary .
5651	Convert a string to a datetime object .
5652	List rooms .
5653	Create a new room .
5654	Update a room .
5655	Delete a room .
5656	List license objects .
5657	Get created date .
5658	Get the access token from environment variables .
5659	Create a new webhook .
5660	Updates a webhook .
5661	Delete a webhook .
5662	Ensure next - URL is valid .
5663	Setter for wait_on_rate_limit property .
5664	Update request headers .
5665	Convert a URL to an absolute URL .
5666	Make a request to the API endpoint .
5667	Send a GET request .
5668	Get a list of pages .
5669	Get items from a URL .
5670	Send a PUT request .
5671	Send a DELETE request .
5672	Create a new login session .
5673	Fetches a list of messages .
5674	Create a new person .
5675	Delete a message .
5676	Create a new person .
5677	Get a single person .
5678	Update a person .
5679	Delete a person .
5680	Return a person object .
5681	List roles .
5682	List teams .
5683	Create a new team .
5684	Update a team .
5685	Delete a team .
5686	List events .
5687	Serialize the data .
5688	Get an access token .
5689	Get the last activity datetime .
5690	Post events from Webex Teams .
5691	Get the ngrok public URL .
5692	Delete a webhook by name
5693	Create a webhook .
5694	Main function .
5695	Console command line interface .
5696	Read telegram data .
5697	Read telegram data from device .
5698	Create a DSMR protocol .
5699	Create a DSMR reader .
5700	Create a TCP connection to a DSMR server .
5701	Handle incoming data .
5702	Called when the connection is lost .
5703	Process a telegram .
5704	Parse telegram data .
5705	Get the version of the package .
5706	Ensure python version is valid .
5707	Find packages in top directory .
5708	Create a command class .
5709	Create a command class for a function .
5710	Run a command .
5711	Ensure that a list of targets exists .
5712	Wraps a list of commands into a command class .
5713	Create a file handler class .
5714	Construct the data files spec .
5715	Get package data .
5716	Compile a glob pattern .
5717	Split a path into parts .
5718	Translate glob pattern .
5719	Join translated parts .
5720	Translate a glob pattern to a regular expression .
5721	Truncate a table .
5722	Write a table to the database .
5723	Write the indexes for a table .
5724	Write triggers to the database .
5725	Write the constraints to the database .
5726	Write contents of table to file .
5727	Process a single row .
5728	Write the table s indexes .
5729	Write the constraints for a table .
5730	Write the triggers to the file .
5731	Get the number of items in the queue .
5732	Enqueue data to the queue .
5733	Start the scheduler .
5734	Build the extra predicate .
5735	SimpleJSON datetime serializer
5736	Reconnect to MySQL .
5737	Execute a SELECT query .
5738	Get a connection to the database .
5739	Run the benchmark .
5740	Connect to the aggregator .
5741	Look up an error code by number .
5742	Returns the number of connections in the pool .
5743	Handle connection failure .
5744	Create a simple expression
5745	Create an UPDATE statement
5746	Connect to the database .
5747	Connect to the database .
5748	Destroy the database .
5749	Start a new step .
5750	Stop a step .
5751	Load the start and stop times from the raw steps .
5752	Disconnect from the API .
5753	Attempt to reconnect .
5754	Connect to the websocket .
5755	Handle incoming messages .
5756	Stop all timers .
5757	Send a ping to the API .
5758	Check for a Pong .
5759	Send data to the API .
5760	Unpause the client .
5761	Handle system messages .
5762	Handle info messages .
5763	Internal error handler
5764	Data handler .
5765	Resubscribe to channels .
5766	Handle auth data .
5767	Handle configuration data .
5768	Update timestamps for a channel .
5769	Reset the connection .
5770	Retrieve candles for a given pair .
5771	Configure the bitfinex config .
5772	Subscribe to a ticker .
5773	Unsubscribe from a ticker .
5774	Subscribe to an order book .
5775	Unsubscribe from an order book
5776	Subscribe to raw order book .
5777	Unsubscribe from raw order book .
5778	Subscribe to trades .
5779	Unsubscribe from trades .
5780	Subscribe to candles .
5781	Unsubscribe from candles .
5782	Authenticate with API .
5783	Cancel an order .
5784	Called when a command is received .
5785	Called when a device command is received .
5786	Called when pahoMessage is received .
5787	Create a Device Type .
5788	Publish an event .
5789	Update a device .
5790	Find client statuses .
5791	List custom bundles .
5792	Create a custom bundle .
5793	Update a schema
5794	Disconnect from IBM Watson IoT Platform .
5795	Called when the client is connected .
5796	Subscribe to device events .
5797	Subscribe to device status .
5798	Subscribe to device commands .
5799	Publish a command to a device .
5800	Called when an unsupported message is received .
5801	Called when a device event is received .
5802	Called when a device status is received .
5803	Called when the client is listening .
5804	Get last event .
5805	Get all events for a device .
5806	Make an API call .
5807	Initiate a request .
5808	Get the status of a request .
5809	Close the index .
5810	Count the number of intersection points of a set of coordinates .
5811	Get the nearest neighbors of a set of coordinates .
5812	Get the bounds of the index .
5813	Delete data from the index .
5814	Create an index from a stream .
5815	Loads a byte array .
5816	Delete an object .
5817	Check the return code of a function .
5818	Load the application .
5819	Initialize Flask - Common extension .
5820	Serve the application .
5821	Convert to native value .
5822	Crop an image on a centerpoint .
5823	Process an image .
5824	Process an image .
5825	Process an image .
5826	Open file if necessary .
5827	Process the placeholder image .
5828	Update the poi field .
5829	Update the ppoi dimension field .
5830	Override save_form_data to set the ppoi attribute .
5831	Returns the default form field for the admin .
5832	Convert an object to a string .
5833	Autodiscovers all installed apps .
5834	Unregister a SizedImage subclass .
5835	Unregister a filter .
5836	Return the URL for this image .
5837	Build filters and sizers .
5838	Get the root folder for this image field .
5839	Returns the path to the directory where the image is located .
5840	Returns the path to the folder where the image field is located .
5841	Delete matching files from storage .
5842	Preprocess an image .
5843	Preprocess GIF .
5844	Preprocess JPEG image .
5845	Retrieve image from storage .
5846	Save an image file .
5847	Return the ppoi as a string .
5848	Create resized image .
5849	Render a clearable file input .
5850	Build the context for the template widget .
5851	Build a copy of base_attrs .
5852	Get the path to a resized image .
5853	Given a path to an image return the path to the filtered file .
5854	Validate a list of sizes .
5855	Get url from image key .
5856	Return the Rendition Key Set for a key .
5857	Format an instruction .
5858	Format a function body .
5859	Decode a byte string into an iterable of instructions .
5860	Decode a module .
5861	Mark a function as deprecated .
5862	Connect to the server .
5863	Close the connection .
5864	Read the result from the server .
5865	Handle incoming requests .
5866	Parse an AGI result line .
5867	Check AGI status code .
5868	Reset the state of all instances .
5869	Return a list of instances .
5870	Get metadata for a package .
5871	Get the primary keys of a model .
5872	Deserialize a value to a related model .
5873	Get an existing instance .
5874	Get declared fields .
5875	Load data from the database .
5876	Split data into kwargs and association attributes .
5877	Garbage collector .
5878	Create a new database snapshot .
5879	List available snapshots .
5880	Restore a snapshot .
5881	Remove a snapshot .
5882	Rename a snapshot .
5883	Replace a snapshot .
5884	Shuffle the indexes .
5885	Textacy cleaner .
5886	Apply a function to a list of data in parallel .
5887	Process text constructor .
5888	Process text .
5889	Process text in parallel .
5890	Generate the document length stats .
5891	Returns a Pandas DataFrame with counts for each word in the corpus .
5892	Map a parameter type to its main type .
5893	Parse a dictionary of interfaces .
5894	Return the inverse bidict .
5895	Update with rollback .
5896	Return a copy of this bidict .
5897	Return a copy of this Bidict .
5898	Returns True if other is equal to self .
5899	Return an inverted version of arg .
5900	Clear the queue .
5901	Move a node to the end of the tree .
5902	Write text to a temporary file .
5903	Search for contacts .
5904	Merge command line arguments .
5905	Load address books .
5906	Prepare search queries .
5907	Create a new contact
5908	Add birthdays to a list of contacts .
5909	Return a list of matching phone numbers .
5910	List contacts .
5911	Modify a vCard contact .
5912	Remove contact from address book .
5913	Executes the source command .
5914	Handles the merge subcommand .
5915	Handles the copy or move subcommand
5916	Get action by alias .
5917	Convert a boolean config value .
5918	Create a new contact .
5919	Create an object from a file .
5920	Create a new contact from user input .
5921	Create a new contact from an existing one .
5922	Get the names part of the vCard .
5923	Add a list of categories .
5924	Parse type value .
5925	Convert a list to a string .
5926	Convert a string to a date .
5927	Compare two UIDs .
5928	Search all contacts
5929	Search contacts by name .
5930	Search for contacts by UID .
5931	Search the address book .
5932	Get a dictionary of short UIDs .
5933	Get the short uid for the given uid .
5934	Yields all vCard files in the path .
5935	Load a vCard file .
5936	Return the Abook with the given name .
5937	Available architectures .
5938	Available architectures .
5939	Get the argument spec for a function .
5940	Dispatch a parser .
5941	Prompt user for input .
5942	Encode the given value to the output file .
5943	Guess action type from kwargs .
5944	Add commands to a parser .
5945	Decorator to change the name of a function .
5946	Decorator to add positional arguments to a function .
5947	Prompt the user for confirmation .
5948	Replace the current query .
5949	Like filter .
5950	Get the cached result of the query .
5951	Return the first entity in the collection .
5952	Delete entities from the database .
5953	Called when an entity is deleted
5954	Emulate redis s prefix .
5955	Estimate the lua code for an index .
5956	Perform a zset search .
5957	Return the number of elements in the set .
5958	Connect to the database .
5959	Convert a value to a list of strings .
5960	Refresh all the indices for a model .
5961	Clean old index .
5962	Add an object to the database .
5963	Return the value for the given key .
5964	Write lua data to redis .
5965	Save changes to the database .
5966	Delete the object .
5967	Retrieve models from the database .
5968	Register a reduce function .
5969	Open a semaphore .
5970	Return the number of available CPUs .
5971	Send a result to the result queue .
5972	Process a worker .
5973	Add a work item to the call queue .
5974	Ensure the executor is running .
5975	Wrap non - picklable objects .
5976	Start the server .
5977	Duplicate a file descriptor .
5978	Get a reusable executor .
5979	Wait for the jobs to complete .
5980	Get preparation data .
5981	Prepare process data .
5982	Close all open fds .
5983	Terminate a process without using psutil .
5984	Recursively terminate a process .
5985	Get the exitcodes of the terminated workers .
5986	Format the exit codes .
5987	Main function .
5988	Ensure the semaphore tracker is running .
5989	Event processor .
5990	Disassemble Python code .
5991	Interact with the terminal .
5992	Split a string into a list of arguments .
5993	Get the stack trace of a function .
5994	Run a list of hooks .
5995	Forget about the current thread .
5996	Get an integer from a string .
5997	Get an integer .
5998	Process commands .
5999	Queue the start file for execution .
6000	Find the next token in a string .
6001	Print error message .
6002	Read a line from the terminal .
6003	Close the connection .
6004	Disassemble a code object .
6005	Disassemble bytes .
6006	Count the number of frames in a given frame .
6007	Get the name of the CALL_FUNCTION instruction .
6008	Print the stack trace of a Process object .
6009	Look up a subcommand by prefix .
6010	Display short help for a subcommand .
6011	Add a subcommand .
6012	Run a subcommand .
6013	Start debugging .
6014	Show a category of commands .
6015	handle line number information
6016	Find the first frame that is not traced .
6017	Map thread names to thread ids .
6018	Get an integer .
6019	Get a boolean value .
6020	Set a boolean variable .
6021	Run a set int command .
6022	Run show_bool .
6023	Run show int .
6024	Show the value of the variable .
6025	Return True if this is a def statement .
6026	Return True if this is a class definition .
6027	Interrupt the current thread .
6028	Set default background color .
6029	Check if the color is dark .
6030	Get the signature of a frame .
6031	Return a list of all expressions
6032	Display a frame .
6033	Return a string representation of the command .
6034	Read a message from the socket .
6035	Display debug information .
6036	Raise an error if a subcommand is not defined .
6037	Run the thread .
6038	Pretty print a simple array .
6039	Look up a signal name by number .
6040	Lookup a signal by name .
6041	Return the canonical name of a signal .
6042	Set a handler for a signal .
6043	Check and adjust sighandlers .
6044	Show information about a signal
6045	Handle a signal .
6046	Handle a print signal .
6047	Handle a signal .
6048	Convert a filename to a module name .
6049	Search for a file in a list of directories .
6050	Search for a file in a directory .
6051	Return a list of all python files .
6052	Write a message to the output .
6053	Run the program .
6054	Columnize a list of commands .
6055	Post - mortem .
6056	Close the connection .
6057	Write a message to the socket .
6058	Complete an identifier .
6059	Add a string to the command queue .
6060	Add frames to ignore .
6061	Return the canonical name of a file .
6062	Return the filename of the file .
6063	Check if the tracer is started .
6064	Check if we should stop .
6065	Set the next frame .
6066	Print stack trace .
6067	Run the debugger .
6068	Check function name .
6069	Delete a breakpoint .
6070	Delete a breakpoint .
6071	Disable all breakpoints .
6072	Disable a breakpoint by number .
6073	Delete all breakpoints between filename and lineno .
6074	Open an input file .
6075	Read a line from the terminal .
6076	Ask the user for confirmation .
6077	r \ n
6078	r \ d
6079	Convert a query to a future .
6080	Restore the original login .
6081	Load a module .
6082	Iterate over the documents in the project record .
6083	Main function for the CLI .
6084	Transcode a JSON file to a stream .
6085	Open JSON or CSV file .
6086	Convert dates to datetime objects .
6087	Convert a date string to a timestamp .
6088	Detect file encoding .
6089	Stream json lines from file .
6090	Transcode a file to UTF - 8 .
6091	Open a CSV file .
6092	Read a CSV file .
6093	Main entry point for the script .
6094	Connect to Luminoso .
6095	Save a token to disk .
6096	Make a request to the Luminoso API .
6097	Perform a DELETE request .
6098	Wait for a build to finish .
6099	Get the root URL for a given URL .
6100	Save token to file .
6101	Make a request to the Luminoso API .
6102	Make a POST request .
6103	Change path .
6104	Get the default account .
6105	Get the documentation for this project .
6106	Wait for a job to finish .
6107	Perform a GET request .
6108	Print result as CSV .
6109	Read parameters from input file .
6110	Simplifies a document .
6111	Create a project .
6112	Create a project from a JSON file .
6113	Main function for the script .
6114	Upload a stream of documents to a project .
6115	Upload a file .
6116	Main entry point for the script .
6117	Create an instance from a username and password .
6118	Login page .
6119	Post login page .
6120	Get data .
6121	Fetch data from the database .
6122	Load the View class from the dotted view name .
6123	Initialize the view .
6124	Handle GET requests .
6125	Handle incoming messages
6126	Update the menus
6127	Return the default handlers for this site .
6128	Called when the client is listening
6129	Called when a dom is modified
6130	Create the widget .
6131	Initialize the widget .
6132	Destroy this component .
6133	Add a child to this component .
6134	Called when a child is removed
6135	Return all child widgets .
6136	Set an attribute .
6137	Update a proxy attribute
6138	Notify about a modified change
6139	XPath query .
6140	Prepares the object .
6141	Initialize the widget .
6142	Set the source for this component .
6143	Handle mode changes .
6144	Called when a block changes
6145	Update the children of this block .
6146	Read the contents of a file .
6147	Print an error message and exit .
6148	Error parsing command line
6149	Get a product by name .
6150	Create a new session .
6151	Reset the store .
6152	Search for stores .
6153	Set the delivery system .
6154	Get the store s menu .
6155	Add an item to the basket .
6156	Add a pizza to the basket .
6157	Add side to basket
6158	Remove an item from the basket .
6159	Set payment method .
6160	Process payment .
6161	Make a GET request .
6162	Perform a POST request .
6163	Call the API .
6164	Append an item to the menu .
6165	Add an exit item .
6166	Draws the menu .
6167	Process user input .
6168	Select the currently selected option .
6169	Parse old menu data .
6170	Return the top limit rows in a DataFrame .
6171	Apply aggregation function to each row of a dataframe .
6172	Convert string to datetime
6173	Convert a datetime to a string
6174	Change the date format of a column .
6175	Cast a column to a type .
6176	Rank a DataFrame .
6177	Waterfall a dataframe .
6178	Perform a basic math operation .
6179	Round the values of a column .
6180	Absolute values in a DataFrame .
6181	Pivot a dataframe .
6182	Pivot a dataframe by a group .
6183	Group a DataFrame by multiple columns .
6184	Calculate cumulative sum of a column .
6185	Add a missing row to a dataframe .
6186	Catches exceptions and logs them .
6187	Log a message to a logger .
6188	Log execution time .
6189	Log the shapes of a function .
6190	Rename a DataFrame .
6191	Compute the cumulative sum of a dataframe .
6192	Combine columns by aggregation .
6193	Get parameter value from function call .
6194	Remove old entries from the cache directory .
6195	Roll up a dataframe down to a list of levels .
6196	Get the maximum value of a column .
6197	Select rows with the minimum value .
6198	Fill missing values in a DataFrame .
6199	Add an offset to a date object .
6200	Add nb_months months to dateobj .
6201	Add nb_years years to dateobj .
6202	Parse a date string .
6203	Filter a dataframe by date .
6204	Percentile a column of a DataFrame .
6205	Ada family core .
6206	Get updates for the optimizer .
6207	Get training parameters .
6208	Run the optimization .
6209	First glimpse sensor .
6210	Prepare the network .
6211	Compute the cost of a tensor .
6212	Apply a function to the train and validation sets .
6213	Vectorize the target .
6214	Report training and validation sets .
6215	Train the model .
6216	Sample from the input .
6217	Compute alignments .
6218	Compute the context vector .
6219	Concatenate variables .
6220	Pad the training and validation sets .
6221	RMSprop core .
6222	Report time .
6223	Run the optimizer on the data .
6224	Invoke the monitor .
6225	Build the loop variables .
6226	Scan a step .
6227	Core computation of momentum .
6228	Create a if - else branch .
6229	Skip a number of batches .
6230	Load parameters from file .
6231	Train the model .
6232	Run the training step .
6233	Run valid step .
6234	Report a score map .
6235	Get the current data set .
6236	Apply a function to the tensor .
6237	Report the usage statistics .
6238	Create a tensor of the given type .
6239	Create a list of neural variables from a dataset .
6240	Return a shared value .
6241	Stack encoders .
6242	Stack decoders .
6243	Encodes x .
6244	Decodes the input x .
6245	Create a 2D Gaussian kernel .
6246	Register a layer .
6247	Monitor the outputs of the layers .
6248	Return all parameters .
6249	Setup input and test variables .
6250	Compute the output of this expression .
6251	Save parameters to file .
6252	Load parameters from a file .
6253	Report network statistics .
6254	Register parameters .
6255	Register new updates .
6256	Register new training updates .
6257	Register monitors .
6258	Calculate the L2 norm of a list of tensors .
6259	Dump elt_to_pickle into file_obj .
6260	Load a file - like object .
6261	Load parameters from a file .
6262	Create request elements .
6263	Decode a user state .
6264	Parse credentials data .
6265	Filter request elements .
6266	Login to a provider .
6267	Normalizes a dictionary .
6268	Convert a list of items to a dictionary .
6269	Parse a query string .
6270	Resolve provider class .
6271	Create a cookie .
6272	Save the session data .
6273	Get data from cookie .
6274	Return the deserialized data .
6275	Generate a signature for the given parts .
6276	Serialize a value .
6277	Check if the token is valid .
6278	Returns True if the session has expired for seconds .
6279	Return a string representation of the credentials .
6280	Check if content is a binary string .
6281	The content of the response .
6282	Create request elements .
6283	Get user information from Bitbucket .
6284	Decorator for FlaskAuthomatic s login method .
6285	Login to the OpenID provider .
6286	Return session key .
6287	Set a session variable .
6288	Generate a CSRF token .
6289	Log a message .
6290	Return True if status is in category .
6291	Split a url into base and params .
6292	Decorator to enable cross - origin requests .
6293	Set CORS headers .
6294	Return a dict of keyword arguments for an app instance .
6295	Return a string representation of an object .
6296	Ensure inst is iterable .
6297	Return True if a is close to b .
6298	Mark a function as deprecated .
6299	Deserialize audio segment .
6300	Load an audio segment from a file .
6301	Create an AudioSegment from a NumPy array .
6302	Execute a sox command .
6303	Filter out silence .
6304	Compute the FFT of this TimeSeries .
6305	Generate frames from raw data .
6306	Normalizes the SPL of the audio segment by averaging the average .
6307	Reduce a list of audio segments to one .
6308	Resample the audio file .
6309	Serialize to a string .
6310	Compute the spectrogram of this TimeSeries .
6311	Choose a front id from a set of candidates .
6312	Get the offset front id after the onset sample idx .
6313	Get the offset front id after a given onset front .
6314	Match onset_front_id to onset_fronts .
6315	Given a list of onset_fronts and a list of offset_fronts return a list of consecutive and overlapping fronts .
6316	Update the segmentation mask .
6317	Return the id of the front of a list .
6318	Given a list of onset_fronts return a list of onset_ids .
6319	Given a list of onset_fronts and a list of onset_ids return the corresponding offsets .
6320	Remove overlaps between segments .
6321	Remove fronts that are too small .
6322	Break any poorly matched fronts .
6323	Merge adjacent segments .
6324	Separate a set of masks .
6325	Downsample a two - dimensional mask .
6326	Perform ASA task .
6327	Bandpass filter .
6328	Lowpass filter .
6329	Convert a list of lists to tf inputs .
6330	Expand and standardize a dataset .
6331	Compare two lists ignoring order .
6332	Group audit records by their relevance .
6333	Load the confusion matrices from an audit file .
6334	Convert a list of lists to tf inputs .
6335	Update self . pip_config_locations .
6336	Autodetect requirements files .
6337	Resolve all streams .
6338	Resolve a stream property .
6339	Resolve a predicate to a list of streams .
6340	Handle errors .
6341	Push a sample to the stream .
6342	Push data to the channel .
6343	Get information about the stream .
6344	Open a stream .
6345	Perform time correction .
6346	Get a child element .
6347	Get the next sibling of this element .
6348	Get the previous sibling of this element .
6349	Set the name of the Layer .
6350	Set the value of the LED matrix .
6351	Append a new child .
6352	Create a new child element with the given name .
6353	Append a copy of an existing element .
6354	Prepend a new element to this list .
6355	Remove a child .
6356	Return the results of the resolver .
6357	List all pairs of words .
6358	Autocomplete n - grams .
6359	Compute the n - grams in a token .
6360	Iterate through a pipe .
6361	Perform an unordered map operation .
6362	Make a fuzzy word .
6363	Do a fuzzy query .
6364	Do a fuzzy index .
6365	Extend results extrapoling relations .
6366	Display help for commands .
6367	\ x1b [ 1mNAME \ x1b [ 0m DBINFO
6368	\ x1b [ 1mNAME \ x1b [ 0m DBKEY
6369	Do a geohash .
6370	List housenumbers .
6371	Index a document .
6372	\ x1b [ 1mNAME \ x1b [ 0m beSTSCORE
6373	str - distance between two strings
6374	Send a request .
6375	Map a list of requests .
6376	Construct a Bits object from an array .
6377	Reinterptets a HArray to a bit vector .
6378	Convert a slice to a slice object .
6379	Search directory for files matching pattern .
6380	Return True if all elements of iterable are in sigOrVal .
6381	Static ForEach generator .
6382	Concatenate howMany signals .
6383	Return the ceil of x .
6384	Checks if a number is a power 2 number .
6385	Add a case statement .
6386	Add a default statement .
6387	Register an interface .
6388	Called before the simulation starts .
6389	Log a change .
6390	Process a HWProcess .
6391	Return a list of agent processes .
6392	Get the associatedClk .
6393	Yield distinct elements from iterable .
6394	Group a collection by a function .
6395	Flatten an iterable .
6396	Merge nested if statements .
6397	Remove unconnected signals .
6398	Check if a process is too simple .
6399	Try to merge two processes .
6400	Given a list of Process instances return a list of Process instances .
6401	Called when a write request is received .
6402	Convert a Unit toRtl .
6403	Return the name for a process and its outputs .
6404	Cut off drivers of a given signal .
6405	Create a signal .
6406	Synthesize this component .
6407	Get the max id for a stm .
6408	Returns the maximum stm id for a given process .
6409	Write data to the interface .
6410	Change interface direction .
6411	Load declarations .
6412	Returns a list of signals for this interface .
6413	Returns the physical name of this port .
6414	Get the bit length of the array .
6415	Returns the sensitivity of an operation .
6416	Evaluate an operator .
6417	Convert bits to another type .
6418	Convert a signature to a hStructT .
6419	Return the number of full words between start and end .
6420	Return a generator yielding tuples of the actual word index and a list of word parts .
6421	Pretty print interface .
6422	Generate frames from a TransTmpl .
6423	Iterate over the words in this bitstring .
6424	Pack data into a list of values .
6425	Clean meta data for all stms .
6426	Given a list of statements and a list of outputs return a set of statements that enclose the outputs .
6427	Walks the list of signals and collects all possible sensitivity values .
6428	Returns the context of this statement .
6429	Called when this statement is reduced .
6430	Merge two Statements .
6431	Check if two lists are mergable .
6432	Merge two lists of statements .
6433	Merge two lists of statements .
6434	Try to reduce a list of statements .
6435	Called when a parent event is dependent .
6436	Set the parent statement .
6437	Register a list of SMARTS statements .
6438	Destroy this statement .
6439	Create a new register .
6440	Create a new signature container .
6441	Clean the subunit .
6442	Walk the fields of a Union or HUnion .
6443	Unpack data into a HStruct
6444	Return a copy of this operator with the given signed value .
6445	Add a sensitivity to a process .
6446	Evaluate a set of conditions .
6447	Connects a device to another device .
6448	Return a function that returns a new value .
6449	Create an updater function for an array .
6450	Create a vector from a value .
6451	Registers the given process .
6452	Evaluate a parameter .
6453	Set the value of this parameter .
6454	Construct a HStruct from an interface map .
6455	This method is called at the end of the simulation .
6456	Get the index of the source .
6457	Convert a Python value to a Value object .
6458	Auto - casts sigOrVal to type toType .
6459	Cast this value to the given type .
6460	Walk the parameters of an interface .
6461	Return a list of connected physical interfaces .
6462	Pack an interface .
6463	Hardcode a rom into a process .
6464	Convert to RTL .
6465	Register an interface .
6466	Try to reduce the value of a signal .
6467	Try to reduce a bitwise OR .
6468	Get the base name scope .
6469	Decide whether to serialize the object .
6470	Returns the type definition for the given type .
6471	Serialize an If container .
6472	Get base condition .
6473	Return a SimBitsT instance .
6474	Get the constant name for a value .
6475	Cut off drivers of this signal .
6476	Load from an array .
6477	Load from a HStruct .
6478	Load from an HType .
6479	Get the number of items in this array .
6480	Walk the tree starting from this node .
6481	Fix the sign of a number .
6482	Merge this container with other container .
6483	Return the indent for the given indent number .
6484	Raise an IntfLvlConfErr if a property is already present .
6485	Register a parameter .
6486	Update parameters from otherObj .
6487	Register a new unit .
6488	Register an interface .
6489	Register an array .
6490	Return the single driver .
6491	Static evaluation of the expression .
6492	Create a new operator with the given operands .
6493	Return a copy of the context with new indent .
6494	Try to connect to an interface .
6495	Propagate the clk of the object .
6496	Propagate clk and rst channels .
6497	Propagate the clk and rst channels .
6498	Propagate reStructuredText units .
6499	Propagate RST units .
6500	Iterate over the bits of a signal .
6501	Return a tuple of a boolean indicating whether the object should be serialized .
6502	This function serializes the given object only once .
6503	Return a tuple of whether or not the parent unit is the same as the current unit .
6504	Get the object name .
6505	Make an association .
6506	Prepare a unit for simulation .
6507	Convert a SimUnit to a SimModel .
6508	Reconnect a synthesized unit to a model .
6509	Generate a VCD for a simulated unit .
6510	Initialize write callbacks .
6511	Connect this port to the given signal .
6512	Register a new incoming signal .
6513	Connects this driver to the network .
6514	Get the international signature .
6515	Check if process is dependent on sig .
6516	Add a process to the queue .
6517	Add the given process to the list of processes to run .
6518	Schedule a comb update done event .
6519	Schedule the values to be applied .
6520	Returns a function that can be used to resolve conflicts .
6521	Run all comb processes .
6522	Runs all processes in the sequence .
6523	Apply values to all signals .
6524	Read a value from a Signature .
6525	Write value to signal .
6526	Add a process to the simulation .
6527	Simulate a unit .
6528	Create a function that applies a function to every operand before processing .
6529	Convert ternary operators to if statements .
6530	Process a single HW process .
6531	Calculate the hamming distance between two hashes .
6532	Calculate the average hash of an image .
6533	Calculate the distance between two images .
6534	Setup Vizio platform .
6535	Update the state .
6536	Mute the volume .
6537	Increment the volume level .
6538	Volume down .
6539	Set the volume level .
6540	Reset the board .
6541	Return the piece at the given square .
6542	Remove piece at square .
6543	Set piece at square .
6544	Check if a move is suicide or check by dropping a pawn .
6545	True if the king was suicide .
6546	Checks if the game is over .
6547	Checks if the game is a checkmate .
6548	Checks if the repetition is a fourfold repetition .
6549	Pop a move off the stack .
6550	Return a string representation of the board .
6551	Push a usi to the queue .
6552	Calculate the Zobrist hash .
6553	Get the piece s symbol .
6554	Create a color from a symbol .
6555	Return the usi for this piece .
6556	Create a piece from usi string .
6557	Return a generator of parsed commits .
6558	Parse a git commit .
6559	Load a configuration from the CLI .
6560	Execute from command line with config .
6561	Add an argument to an argument parser .
6562	Load configuration from file .
6563	Generate a YAML representation of the class .
6564	Generate a markdown representation of the class .
6565	Cast the value to the correct type .
6566	Return a list of dates between the given dates .
6567	Parse date from string
6568	Load currency data from file .
6569	Set missing rates to None .
6570	Compute the missing rates for a given currency .
6571	Get the rate for a given date .
6572	Convert amount from one currency to another .
6573	Group an iterable into n elements .
6574	Animate frames .
6575	Read a single record .
6576	Write a single record .
6577	Map words to memory .
6578	Return the DAF file comment area .
6579	Add an array to the file .
6580	Close the DAF .
6581	Given a tdb and a tdb2 return a list of positions .
6582	Close the file .
6583	Load the PCK data .
6584	Compute the coefficients from tdb and tdb2 .
6585	Handle call nodes .
6586	Handle binary operations .
6587	Visit a Dict node .
6588	Check for joined strings .
6589	Visits a keyword .
6590	Visit an except handler node .
6591	Detect the logging level of the given node .
6592	Get except handler name .
6593	Get id attribute .
6594	Return True if node is a bare exception .
6595	Check exc_info keywords .
6596	Delete a file from the database .
6597	Add the display attribute to the file widget .
6598	Return the rendered PDF content .
6599	Render to a response .
6600	Return a quoted version of a string .
6601	Configure MongoDB options .
6602	Convert string to underscore .
6603	Ensure all indexes are created .
6604	Parse a CSV file .
6605	Load file content .
6606	Parse a line into a PriceModel object .
6607	Translates the input symbol to the output symbol .
6608	Load all symbol maps .
6609	Get session .
6610	Add a price .
6611	Import prices from CSV file .
6612	Show the latest price .
6613	List prices .
6614	Download prices .
6615	Remove old price entries .
6616	Get the default session .
6617	Add a new symbol map .
6618	List all symbol maps .
6619	Get symbol map by symbol .
6620	Read lines from a CSV file .
6621	Map entity to price model .
6622	Map a model to a price entity .
6623	Read configuration file .
6624	Get config template path .
6625	Create user config file .
6626	Get the path to the config file .
6627	Get the contents of the config file .
6628	Set a configuration option .
6629	Get a configuration option .
6630	Save configuration to file .
6631	Parse a symbol .
6632	Add a price to the invoice .
6633	Add a price entity to the database .
6634	Download and save the price .
6635	Returns the current session
6636	Get all prices .
6637	Get prices from the price repository .
6638	Prune all prices .
6639	Delete all prices for symbol .
6640	Download price for symbol from agent .
6641	Get all securities .
6642	Return a partial function .
6643	Update child calls .
6644	Recursively descend the tree .
6645	Decorator to remove all child nodes from a function .
6646	Verify that the student and solution parts have the same length .
6647	Check whether there is exactly one AST node with the given code .
6648	Check if the student code contains text .
6649	Test whether a package has an import .
6650	Check if student output contains text .
6651	Check whether a function call has a printout .
6652	Assert that there is no error .
6653	Check if an option has been selected .
6654	Check a function .
6655	Get the result from a process .
6656	Overrides the solution AST .
6657	Check whether an instance is in the solution process .
6658	Return all defined items .
6659	Convert the state to a child state .
6660	Get the result of a parser .
6661	Test whether state has a context loop .
6662	Check if a state has a context variable .
6663	Check a part .
6664	Check if a part is in question .
6665	Check the arguments .
6666	Check a function call .
6667	Get the true anomaly .
6668	Initialize the application .
6669	Initialize LDAP settings .
6670	Add a new LDAP server .
6671	De - contextualise a connection .
6672	Teardown the request context .
6673	Authenticate a user .
6674	Authenticate a user via direct bind .
6675	Bind to LDAP and perform an LDAP search .
6676	Get groups for a specific user .
6677	Get user info .
6678	Get information about a user .
6679	Get an LDAP object .
6680	Return a connection to the LDAP server .
6681	Make a connection to the database .
6682	Create a connection to the LDAP server .
6683	Destroy a connection .
6684	Search for objects in the collection .
6685	Search for labels .
6686	Search a collection .
6687	Search for jobs in a collection .
6688	Speak the client .
6689	Announce the user .
6690	Update secrets .
6691	Update headers .
6692	Check if the client requires secrets .
6693	Download a file .
6694	Stream data to a file .
6695	Update token in headers
6696	Get or create a folder .
6697	Read a response from the server .
6698	Get the bucket .
6699	Update self . secrets .
6700	Initializes the client .
6701	Load secrets .
6702	Get the most recent logs .
6703	List all logs in the bucket .
6704	Create an endpoint folder .
6705	Initialize transfer client .
6706	Search all containers
6707	Show backend status .
6708	Add a variable to the registry .
6709	Remove a variable from the registry
6710	Activate a backend
6711	Delete a backend .
6712	Update the base image .
6713	Create a basic auth header .
6714	Generate a signature .
6715	Generate a header signature .
6716	Make a DELETE request .
6717	Make a HEAD request .
6718	Paginate a GET request .
6719	Verify that SSL certificate is available .
6720	Remove an image from the registry .
6721	Get the version information from version . py .
6722	Get install requirements .
6723	Get the singularity version .
6724	Check if a software is installed .
6725	Get the installation directory .
6726	Get the path to the thumbnail file .
6727	Run a command .
6728	Get metadata for an image file .
6729	Update the secrets .
6730	Print the results of the build .
6731	Kill all registered commands .
6732	List logs for a container .
6733	Return a list of all available collections .
6734	Update the credentials .
6735	Update secrets .
6736	Get SREGISTRY client .
6737	Run IPython .
6738	Get manifests for a repository .
6739	Get the manifest for a repository .
6740	Get the download cache directory .
6741	Extract Docker container environment variables .
6742	Update the base setting .
6743	Update private token .
6744	Get the metadata for the job .
6745	Get client settings .
6746	Get and update a setting .
6747	Update a setting .
6748	Generate a signature for a request .
6749	List available builders .
6750	Load templates by name .
6751	Get the IP address of an instance .
6752	Run a build .
6753	List all containers in the bucket .
6754	List all containers in GCS .
6755	List Schemas .
6756	Share images .
6757	Initialize the database .
6758	Get build template .
6759	Search endpoints .
6760	List all endpoints
6761	List files at an endpoint .
6762	Share an image .
6763	Read client secrets .
6764	Get services .
6765	Delete an object .
6766	Delete an object .
6767	Destroy an instance .
6768	Get all subparsers for a given parser .
6769	Generate a random phrase .
6770	Get a temporary directory .
6771	Extract a tar archive .
6772	Extract a tar archive .
6773	Get the hash of a file .
6774	Read a file .
6775	Read a JSON file .
6776	Clean up a list of files .
6777	Push an image to S3 .
6778	Get or create a collection .
6779	Get a collection by name .
6780	Get a container .
6781	List all images
6782	Inspect a container .
6783	Rename a container .
6784	Move an image to a new location .
6785	Remove an RMI image
6786	Add an image to the registry .
6787	Push an image to a registry .
6788	Parse a recipe header .
6789	Find a single recipe file .
6790	Create a build package .
6791	Run a build .
6792	Update blob metadata .
6793	Format a container name .
6794	Check if we should use color .
6795	Emit an error .
6796	Write message to stream .
6797	Print a table .
6798	Push an image
6799	Get a template by name .
6800	Get the manifest for an image
6801	Get build template .
6802	Update secrets .
6803	Return a string representation of a class .
6804	Context manager for S3 errors .
6805	Create a temporary file .
6806	Get a gravatar url for a user .
6807	Generate a Gravatar URL .
6808	Check if the given email address has a gravatar .
6809	Get gravatar profile url .
6810	Generate chimera blocks .
6811	Given a set of blocks return a Chimera graph .
6812	Enumerate resonance SMILES .
6813	Returns a list of ResonanceMolSupplier objects .
6814	Normalize a molecule .
6815	Apply a transform to a molecule .
6816	Canonicalizes a molecule .
6817	Validate a smiles string .
6818	Disconnect a molecule .
6819	Standardize a smiles string .
6820	Enumerate tautomers from smiles .
6821	Canonicalize a Tautomer SMILES string .
6822	Standardizes a molecule .
6823	Return the tautomer parent of a molecule .
6824	Return the parent fragment of a molecule .
6825	Remove stereochemistry from a molecule .
6826	Return isotope parent of molecule .
6827	Charge a parent molecule .
6828	Get the super parent of a molecule .
6829	Command line interface for molvs
6830	Remove fragments from a molecule .
6831	Choose the largest fragment .
6832	Integrate IVP .
6833	Get GitHub stats .
6834	Get the members of the organization .
6835	Get the teams of the organization .
6836	Get repos .
6837	Get the total number of contributors for a repo .
6838	Get number of open pull requests and number of closed pull requests .
6839	Get all issues in a repository .
6840	Get the readme for a repo .
6841	Get license for repo .
6842	Get all commits for a repository .
6843	Write a json file for a given organization .
6844	Write totals to a file .
6845	Write languages to file .
6846	Check if directory exists .
6847	Remove a file from the database .
6848	Return a list of github organizations
6849	Create an enterprise session .
6850	Check API limits .
6851	Connect to GitHub .
6852	Query repositories .
6853	Get organization .
6854	Write stargazers to a file .
6855	Create a project object from a gitlab repository .
6856	Create a project object from a DOE code record .
6857	Return a license object .
6858	Get traffic .
6859	Get releases .
6860	Get referrers .
6861	Get data from API
6862	Write a json file from a dictionary
6863	Write data to file .
6864	Check data redundancy .
6865	Write data to file .
6866	Write referrers to file .
6867	Process DOE CODE json file .
6868	Process a DOE Code URL .
6869	Process a JSON file .
6870	Login to GitHub .
6871	Get the list of members of the organization .
6872	Write this user to a file .
6873	Connect to a stashy server .
6874	Connect to gitlab .
6875	Query repos .
6876	Return the SLOC of a git repo .
6877	Compute the llabor hours .
6878	Remove None values from a dictionary .
6879	Read a GQL file .
6880	Query GitHub via GQL file .
6881	Submit a git query
6882	Waits for a reset to happen .
6883	Sleeps a number of seconds .
6884	Load data from file .
6885	Save data to file .
6886	Create a connection to TFS .
6887	Create a project analysis client .
6888	Create a TFS Core Client .
6889	Create a TFS Git client .
6890	Create TFS Git Client .
6891	Get Git Repositories for a project .
6892	Get Tfvc Branches for a project .
6893	Get the number of commits for the current year .
6894	Calculate total commits .
6895	Write stats to file .
6896	Configure backends .
6897	Get metrics for thing .
6898	Record timing information .
6899	Context manager for timing a stat .
6900	Decorator for timer functions .
6901	Generate a tag .
6902	Record timing information .
6903	Record a histogram event .
6904	Roll up metrics .
6905	Create an order clause for enum fields .
6906	Convert a database value to an enum value .
6907	Convert a value to a python value .
6908	Make sure the value is of the correct type .
6909	Resolve a path .
6910	Given a list of usls and a list of allowed terms return a dictionary of usls to usls .
6911	Returns the mean of the accumulated values .
6912	Increment the counter by value .
6913	Return the mean rate .
6914	Mark the given value .
6915	Send a metric .
6916	Serialize a metric .
6917	Format a metric string .
6918	Send a single metric .
6919	Get an option from a section .
6920	Ensure data is JSON - safe .
6921	Get or set a setting .
6922	Given a list of ledger codes return a dict mapping the ledger code to its corresponding guid .
6923	Get all available divisions .
6924	Map exact to foreign invoice numbers .
6925	Solve the SAT problem .
6926	Define a view .
6927	Define a form view .
6928	Define a method view .
6929	Register the API view .
6930	Create a generic API view .
6931	Registers the decorated function as a model view set .
6932	Create a stream from a file descriptor .
6933	Read from the file descriptor .
6934	Close the connection .
6935	Called when the connection is lost .
6936	Register a watch request .
6937	Unwatch a watch alias .
6938	Setup a watch for a given path .
6939	Setup the inotify client .
6940	Read an event from the stream .
6941	Touch this message .
6942	Update the short and long intervals .
6943	Update the timer interval .
6944	Close all connections .
6945	Check if the connection is starved .
6946	Connect to nsqd .
6947	Query the lookupd endpoint .
6948	Set the maximum number of in - flight connections .
6949	Log a warning message when a message is gone .
6950	Register a callback for a specific event .
6951	Remove a listener .
6952	Trigger a named event .
6953	Publish a message to a topic .
6954	Set the feature transform .
6955	Returns the prediction of the model .
6956	Return the theta for a given value .
6957	Parse the log file .
6958	Cleans up temporary files .
6959	Merge default adapters .
6960	Run trimmomatic .
6961	Read a depth file .
6962	Run coverage analysis .
6963	Set template path
6964	Set main channel names .
6965	Get user channel information .
6966	Render a template .
6967	Return the template as a string .
6968	Set the input and output channels .
6969	Add a sink to the main fork list .
6970	Sets the channel to fork into .
6971	Update directive attributes .
6972	Set compiler channels .
6973	Set the raw inputs .
6974	Set the secondary inputs .
6975	Set extra inputs for the process .
6976	Parse a coverage header string .
6977	Parse an assembly file .
6978	Get the content of a sequence as a dict .
6979	Filter contigs using filters .
6980	Get the length of the assembly .
6981	Write the assembly to a file .
6982	Write the assembly report to a file .
6983	Remove inner forks .
6984	Inner fork sanity checks .
6985	Runs sanity checks on a pipeline string .
6986	Parse a pipeline string .
6987	Given a fork process and a list of pipeline list return the source lane .
6988	Parse a lane string .
6989	Establish a linear connection .
6990	Fork a connection between two processes .
6991	Adds unique identifiers to the pipeline string .
6992	Remove unique identifiers from pipeline links .
6993	Check that the required files exist .
6994	Return a dict mapping header names to positions .
6995	Convert a string in seconds to hours minutes seconds .
6996	Convert a string to a float .
6997	Extracts the pipeline processes from the log file .
6998	Clear inspect information .
6999	Update barrier status .
7000	Retrieve log from path .
7001	Assess resource warnings .
7002	Update process stats .
7003	Parse the log file .
7004	Update the inspection .
7005	Display the overview screen .
7006	Move up or down .
7007	Move right or left .
7008	Get last n lines of log file .
7009	Read static configuration files .
7010	Load a . treeDag . json file .
7011	Get the hash of the current run .
7012	Returns the path to the nextflow command file .
7013	Split assembly into smaller sequences .
7014	Main function for the pipeline .
7015	Brew the pipeline .
7016	Return a Brew recipe class .
7017	List all available recipes .
7018	Validate a pipeline string .
7019	Builds the upstream pipeline .
7020	Builds the downstream pipeline .
7021	Define a pipeline string .
7022	Run auto pipeline .
7023	Get a string representation of a component .
7024	Write report to file .
7025	Main function .
7026	Fix contig names in assembly file .
7027	Clean up temporary FASTQ files .
7028	Parse a list of files .
7029	Parse a log file .
7030	Iterate over entries in the database .
7031	Get the contig id from a string .
7032	Get plot data .
7033	Write report data to json file .
7034	Main function for assembly .
7035	Parse an assembly file .
7036	Get summary statistics for each contig
7037	Get the labels for the window .
7038	Calculate gc property .
7039	Calculate GC proportion for a sliding window .
7040	Run Skesa .
7041	Write JSON report .
7042	Get the index of the first unbiased position .
7043	Trim a range of nucleotides .
7044	Get the optimal trim positions .
7045	Get summary information from file .
7046	Check the health of a summary file .
7047	Parse bowtie log
7048	Parse a process name .
7049	Add a dependency process to the pipeline .
7050	Search the tree backwards from the given template .
7051	Build the header
7052	Build the footer
7053	Set the channels for all processes .
7054	Set the init process .
7055	Set secondary channels .
7056	Set the status channels .
7057	Get a string representation of the resources .
7058	Get a string representation of a container .
7059	Returns a string representation of the parameters .
7060	Returns a string with the merged parameters .
7061	Get manifest string .
7062	Set resources and containers configurations .
7063	Write a DAG to a file .
7064	Render the pipeline .
7065	Write the project configuration to disk .
7066	Export parameters to stdout .
7067	Export directives to stdout .
7068	Fetches the docker tags
7069	Build the nextflow .
7070	Set kmer range .
7071	Main function for spades .
7072	Get the id of the report .
7073	Update the trace watch .
7074	Update the log watch .
7075	Send a live report .
7076	Initiate report live update .
7077	Close connection to the server .
7078	Convert a fastq file to a tab file .
7079	Main function for FastQC .
7080	send mash output to output file
7081	Main function for mash .
7082	Write version information to . versions file
7083	Main function for mash .
7084	Print a colored message .
7085	Parser for the procs dict
7086	Process collector .
7087	Guess the compression type of a file .
7088	Get the range of a qual string .
7089	Return a list of valid encodings in a range .
7090	Parse the coverage table .
7091	Filter assembly file .
7092	Filter BAM file using samtools view .
7093	Evaluate the minimum assembly coverage .
7094	Get the size of the assembly file .
7095	Run assembly mapping .
7096	Convert camel case to snake case .
7097	Collect the process map .
7098	Process a newick file .
7099	Quickhull algorithm .
7100	Map self . data to self . W
7101	Apply a median filter .
7102	Compute Gaussian Krnl .
7103	Compute Squared Root Mean Square Error .
7104	Compute the covariance matrix .
7105	Apply a gaussian filter .
7106	Compute the network concentration .
7107	Circular shift a matrix .
7108	Create an embedded space .
7109	Plot formatting .
7110	Plot a list of boundaries .
7111	Plot labels .
7112	Plot one track .
7113	Plot a tree .
7114	Get the segments of a feature .
7115	Convert a list of features into a list of 2D - FMC frames .
7116	Compute the similarity between two features .
7117	Fit the model to the data .
7118	Partial fitting .
7119	Read references from an audio file .
7120	Find Sandbox estimations .
7121	Save estimations to a file .
7122	Return a list of all boundary algorithms .
7123	Get the configuration for a feature .
7124	Get all audio files in the dataset .
7125	Read hierarchical annotations from a jams file .
7126	Get duration from features file
7127	Write a mirex file .
7128	Get the path to the dataset file .
7129	Align a musical segment with a song .
7130	Estimate the beats of the audio .
7131	Read the beat annotations from a JAMS file .
7132	Compute beat sync features .
7133	Read features from file
7134	Write the features to disk .
7135	Return a list of all parameter names .
7136	Compute framesync times .
7137	Returns a list of the times at which the feature was computed .
7138	Get the audio features .
7139	Select features from the features registry .
7140	Preprocessing function .
7141	Postprocess the data .
7142	Main entry point for MSAF .
7143	Print results .
7144	Compute the results of a GT analysis .
7145	Compute information gain .
7146	Process a track file .
7147	Get results file name .
7148	Process data from a file .
7149	Add a config variable .
7150	Compute all features for a given audio file .
7151	Process a single dataset .
7152	Compute the gaussian cost .
7153	Lognormalizes a frequency matrix .
7154	Normalizes a DataFrame .
7155	Normalize data .
7156	Get the number of time frames .
7157	Remove empty segments .
7158	Sonify a set of clicks .
7159	Synchronizes labels .
7160	Process a segmentation level .
7161	Align end hierarchies .
7162	Compute distance to node idx .
7163	Estimate K - Means using the K - Means method .
7164	Clustered data .
7165	Run k - means algorithm .
7166	Compute the BIC of the model .
7167	Return the magnitude of X .
7168	Convert json file to bounds
7169	Convert json file to bounds .
7170	Convert json file to labels
7171	Read a json file containing beats .
7172	Compute 2D FFT for 2D data .
7173	Compute the labels .
7174	Filter activation matrix .
7175	Get boundaries module .
7176	Get labels module .
7177	Run hierarchical segmentation .
7178	Segment the audio file using the specified algorithms .
7179	Run the segmentation algorithms .
7180	Process a single track .
7181	Process audio file .
7182	Update the beta matrix .
7183	Main function .
7184	Start a coroutine function .
7185	Return the sum of init + update .
7186	Set a new translation task .
7187	Split an iterable into words .
7188	Read source code from inputstream .
7189	A decorator to wrap a HTTP interface .
7190	Translates a phrase from source to target .
7191	Get the translation table for a given language .
7192	Print the translation table .
7193	Remove nodes from the network .
7194	Write a network to a Pandas HDF5 file .
7195	Create a Network object from a Pandas HDF5 file .
7196	Set a variable .
7197	Aggregate accessibility variables .
7198	Get node ids .
7199	Plot the data .
7200	Set the pois for the given category .
7201	Find the nearest pois in the network .
7202	Get low connectivity nodes .
7203	Process a node .
7204	Make an OSM query .
7205	Build a node query
7206	Query OSM for nodes .
7207	Check if value is a regular expression .
7208	Compare the value with the expectation .
7209	Decorate a method to trigger a fluent proxy .
7210	Compare a value to a given expression .
7211	Trigger methods on an instance .
7212	Match a request against all registered matchers .
7213	Get a matcher by name .
7214	Initialize a matcher .
7215	Set the request body .
7216	Sets the response body as JSON .
7217	Set the value of a key .
7218	Append functions to target .
7219	Trigger a request .
7220	Sets the request URL .
7221	Sets request headers .
7222	Matches header names .
7223	Matches headers .
7224	Set the Content - Type header .
7225	Add query parameters .
7226	Sets the request body .
7227	Sets the JSON request body .
7228	Sets the request XML .
7229	Read a file from disk .
7230	Set the status of the object .
7231	Set the error .
7232	Reply to the request .
7233	Match incoming request against registered mock matchers .
7234	Activate an asynchronous function .
7235	Set the mock engine .
7236	Enable networking .
7237	Create a new HTTP mock expectation .
7238	Remove a mock .
7239	Activate mock engine .
7240	Disable the mock engine .
7241	Check if we should use networking .
7242	Match a request against all registered mock definitions .
7243	Return a shallow copy of this request .
7244	Activate the engine .
7245	Context manager to temporarily use a temporal engine .
7246	Add an interceptor .
7247	Remove an interceptor by name .
7248	Get a setting .
7249	Convert the DecryptedCol to SQL
7250	Set the original attribute on the model instance .
7251	Get a placeholder for a value .
7252	Get a column by alias .
7253	Returns a placeholder for the encryption key .
7254	Hunt for repeated YAML keys .
7255	Base regression .
7256	Return the inverse of the covariance matrix .
7257	Recurse through the tree .
7258	Calculate averages for all nonterminals .
7259	Propagate averages .
7260	Explained variance .
7261	Compute a regression curve .
7262	Find the best root of the tree .
7263	Set the timepoints for the integration .
7264	Calculate the branch count at each point .
7265	Calculate the cost of the merger .
7266	Attach the merger cost to all clades .
7267	Optimize the coalescent time scale .
7268	Convert profile to sequence .
7269	Normalize a profile .
7270	Set the GTR value .
7271	Set GTR model .
7272	Set the sequence length .
7273	Assign sequences to terminal nodes .
7274	Prepare the tree .
7275	Prepares the tree .
7276	Calculate the distance to the root of the tree .
7277	Infer the ancestral sequences of the tree .
7278	Get the branch mutation matrix for a node .
7279	Return the expanded sequence of a node .
7280	Create the Fitch profiiles
7281	Return the fitch state at pos .
7282	Intersect a list of arrays .
7283	Get the ancestral sequence of a given position .
7284	The ancestral likelihood of the tree .
7285	Return the branch length for a given node .
7286	Run the branch length optimization .
7287	Run the branch length optimization .
7288	Returns the optimal branch length for the given node .
7289	Optimize sequences and branch lengths .
7290	Get the reconstructed alignment
7291	Compute the Q matrix .
7292	r Create a custom GTR instance .
7293	Return the standard model .
7294	Check the diagonal of the GTR rate matrix .
7295	Given a sequence pair and a multiplier return the log probability of the sequence pair at the given t .
7296	Compute optimal t for a sequence pair .
7297	Returns the optimal time t for the given sequence pair .
7298	Compute the probability of a t - profile .
7299	Evolve a profile onto a tensor .
7300	Compute the log - likelihood of a sequence .
7301	Set branch length mode .
7302	Filter the tree using the clock model .
7303	Plot the root to tip .
7304	Resolve multiple polytomies .
7305	Print the tree log - likelihood .
7306	Add a coalescent model .
7307	Find the best root of the tree
7308	Assure that a tree is present .
7309	Create a GTR model .
7310	Read a VCF file if it exists .
7311	Run ancestral reconstruction .
7312	Calculate the FWHM for a given distribution .
7313	Create a delta function .
7314	Multiply a list of distributions .
7315	Assign dates to clades .
7316	Setup tree regression .
7317	Make a maximum likelihood tree .
7318	Compute the timetree likelihood .
7319	Convert dates to human readable dates .
7320	Calculate the date uncertainty due to rate variation .
7321	Get the maximum posterior of a node .
7322	Find the minimum of an interpolation object .
7323	Compute the median of an interpolation object .
7324	Return a numeric date .
7325	Create a classifier from a regression model .
7326	Return a connection to the guacd server .
7327	Close the connection .
7328	Receive an instruction .
7329	Send data .
7330	Send an instruction .
7331	Establishes a Handshake .
7332	Convert unicode string to utf - 8 .
7333	Load an instruction .
7334	Encodes an argument into a string .
7335	Encode the instruction .
7336	Return the URL for this resource .
7337	Return the URL for this instance .
7338	Return the URL for this resource .
7339	Download the object .
7340	Retrieve the parent job .
7341	Ask for user credentials .
7342	Login to Solvebio .
7343	Display the currently logged in user .
7344	Print the user details .
7345	Filter the queryset .
7346	Apply a range filter to the query .
7347	Filter genomic positions .
7348	Get a list of facets .
7349	Process filters .
7350	Return the next page .
7351	Execute a query .
7352	Migrate this dataset to another dataset .
7353	Main function .
7354	Download all files from a vault folder
7355	Construct an instance from a dict .
7356	Logout the user .
7357	Make a request to the API .
7358	Return the child object for this task .
7359	Cancel the task .
7360	Parse SnpEff ANN information .
7361	Convert a row to a dictionary .
7362	Get credentials from netrc file .
7363	Save the configuration to a file .
7364	Format a value .
7365	Normalize tabular data .
7366	Build a row from a list of cells .
7367	Build a single line .
7368	Given a row and a list of column alignments return a string representing the alignment .
7369	Format a table .
7370	Migrate this dataset to another dataset .
7371	Validate a full path .
7372	Upload a file to a vault .
7373	Validate a full path .
7374	Validate the API host url .
7375	Add a path to the manifest .
7376	Annotate records .
7377	Evaluate the expression .
7378	Set the format name .
7379	Register a new output format .
7380	Format the output .
7381	Table formatter .
7382	Get the user configuration directory .
7383	Get system configuration directories .
7384	Read the default config file .
7385	Read all config files .
7386	Returns the path to the user config file .
7387	Return a list of system configuration files .
7388	Returns a list of additional files for this file .
7389	Write the default config file .
7390	Read config files .
7391	Truncate a string to a maximum length .
7392	Replace characters in a string .
7393	Call commands in sequence .
7394	Apply options to a command .
7395	Apply an option to a command .
7396	Initialize options .
7397	Run pep8radius .
7398	Run the clean docs command .
7399	Truncates a string .
7400	Format a list of rows .
7401	Format a row .
7402	Create a table from data .
7403	Generate a table from data .
7404	Render a template file .
7405	Returns True if type is a number .
7406	Checks if the given type is a boolean .
7407	Return True if type is a binary type .
7408	Generate a key .
7409	Generate a keypair .
7410	Find all objects in the pool .
7411	Insert image into QR code .
7412	Export a panel .
7413	Return the first day of the given weekday .
7414	Repeat the event .
7415	Repeat the event in reverse .
7416	Bibweekly calculation .
7417	Handle a single chunk event .
7418	Export all the variants in the database .
7419	Return a list of lines to export verified variants .
7420	Export a list of MT variants to a text file .
7421	Add or update a user role .
7422	Retrieve a list of variants for a particular case .
7423	Retrieve a single variant .
7424	Retrieve a single variant from the store .
7425	Verify a variant .
7426	Export data for a case .
7427	Return a list of variants for a given institute .
7428	Handles the acmg request
7429	View a single evaluation .
7430	Get the classification for a given criterion .
7431	Upload a panel .
7432	Download verified excel files .
7433	Given a list of HGNC IDs return a dictionary mapping HGNC IDs to their corresponding aliases .
7434	Add incomplete penetrance information .
7435	Link genes .
7436	Send request to MME server .
7437	Get list of connected nodes .
7438	Get cytoband coordinates for a chromosome and position .
7439	Get the subcategory for a particular category .
7440	Get the length of a segment .
7441	Get the end position .
7442	Parse the coordinates of a variant .
7443	Check coordinates .
7444	Create a new panel .
7445	Update a panel .
7446	Export a panel .
7447	Edit a gene .
7448	Save delivery report .
7449	Retrieve phenotype terms from store .
7450	List all whitelisted users
7451	Build a phenotype object .
7452	Retrieve information about a gene .
7453	Given a gene query return a list of JSON terms .
7454	List all institutes .
7455	List transcripts .
7456	Display all events on a given day .
7457	Retrieve a list of variants for a particular case .
7458	Retrieve variants for a particular str
7459	Retrieve a single str variant .
7460	Add a variant to a store .
7461	Parse a single variant .
7462	Return header for exporting variants .
7463	Get variant information .
7464	Get predictions for a set of genes .
7465	Create a variant case .
7466	Find the bai file .
7467	Retrieve observations from the database .
7468	Parse a gene object .
7469	Return a string representation of a transcript .
7470	Return the end position of a variant object .
7471	Returns the frequency of the variant .
7472	Generate human readable links for clinsig objects .
7473	Return a link to the thousandg variant .
7474	Return the URL of the cosmic mutation .
7475	Generate a beacon URL .
7476	Return the URL for a GA4GH variant .
7477	Return a human readable version of the spidex .
7478	Return a list of expected inheritance models .
7479	Return a list of callers for a given variant object .
7480	Retrieve a list of variants for a given case .
7481	Export CLINVAR data .
7482	Get a single clinvar submission .
7483	Retrieve the ACMG data for a particular variant .
7484	Submit a new classification for a variant .
7485	Return an evaluation object
7486	Upload HGNC symbols .
7487	Create a verified excel file .
7488	Export all genes to . bed format
7489	Parse a CLINSIG record .
7490	Parse a list of compounds .
7491	Export all genes .
7492	Build an Individual object .
7493	Load variants .
7494	Get a single case .
7495	List scout collections .
7496	Load an institute .
7497	Update an institute .
7498	Get file handle .
7499	Get the current network .
7500	Get the next and prev neighbors of a given network .
7501	Check year range .
7502	Check a weekday .
7503	Parse case data .
7504	Add peddy information .
7505	Parse a Pedigree sample .
7506	Parse a list of samples .
7507	Parse a case .
7508	Parse a ped file .
7509	Build an evaluation object .
7510	Export mitochondrial variants for a case .
7511	Check if a set of terms are pathogenic .
7512	Return True if the terms are likely pathogenic .
7513	Return True if terms are likely to be Benign .
7514	Takes a list of acmg terms and returns a dictionary with the results .
7515	Add gene information to the variant object
7516	Retrieve variants from the database .
7517	Retrieve variants from Sanger .
7518	Get a single variant
7519	Retrieve gene variants .
7520	Return a list of variants that are verified .
7521	Get the list of causatives in a case .
7522	Check if there are causative variants in the variant collection .
7523	Iterate over the causatives of a variant
7524	Delete old variants .
7525	Returns a list of variants that overlap the given variant .
7526	Get all variants that have been evaluated in some way for a case .
7527	Retrieve a VCF file for a given region .
7528	Retrieve sample variants .
7529	Establish a connection to a MongoDB instance .
7530	Given a list of variant ids and a dict of form fields return a list of lists of dicts .
7531	Get the header for a list of clinvar submissions .
7532	Return a list of csv lines for a list of clinvar submissions .
7533	Load transcripts from scout .
7534	Load a panel
7535	Build an Exon object .
7536	Delete a panel
7537	Delete all indexes
7538	Delete a user
7539	Delete scout genes .
7540	Delete all exons .
7541	Delete a case .
7542	View individuals .
7543	Parse matches from MatchMaker .
7544	Show case details .
7545	Load a user by email .
7546	Handle login request .
7547	Build an institute object .
7548	Delete an event .
7549	Create a new event .
7550	Return events for a given institute and case .
7551	Get all events for a given user .
7552	Add a phenotype to a case .
7553	Remove a HPO term from a case .
7554	Create a comment .
7555	Parse the genotypes for a variant .
7556	Check if coordinates are valid .
7557	Get a list of terms .
7558	Export transcripts .
7559	Load all exons
7560	Load a region .
7561	Return a queryset of all events in a given month .
7562	Return all live events .
7563	Parse the requirements . txt file .
7564	Return gene with the given HGNC ID .
7565	Update a gene panel
7566	Create a new gene panel
7567	Export a panel .
7568	Return information about an archive .
7569	Migrate case data .
7570	Migrate a case
7571	Research a case
7572	Load HGNC genes .
7573	List HPO terms .
7574	Create a Flask application .
7575	Configure extensions .
7576	Register blueprints .
7577	Configure coverage .
7578	List aliases for a symbol
7579	Build a panel .
7580	Export verified variants for an institute .
7581	Export variants .
7582	Get a VCF entry from a variant object .
7583	Serve MongoDB .
7584	Generate a md5 hash of a list of arguments .
7585	Connect to the database .
7586	Set up the database .
7587	Run scout index .
7588	Setup the scout database .
7589	Setup a demo database
7590	Setup database connection
7591	List institutes .
7592	Parse genetic models info .
7593	List available panels .
7594	Add an institute to the database .
7595	Update an institute .
7596	Fetch an institute .
7597	Return True if date is a valid date .
7598	Get a datetime object from a date string .
7599	List HPO genes .
7600	Parse a rank score entry .
7601	Add a user to an institute .
7602	Check connection .
7603	Initialize the application .
7604	Load a delivery report from the database .
7605	Add a user to the database .
7606	Run pileup .
7607	Load exons .
7608	Update compounds for a case
7609	Add gene links .
7610	Show information about a gene .
7611	Parse HGNC line .
7612	Parse hgnc genes .
7613	Get an open clinvar submission .
7614	Update a clinvar submission .
7615	Get the clinvar_subm_id for a submission .
7616	Add new variants and case data to clinvar submission .
7617	Update the status of a clinvar submission .
7618	Retrieve all clinvar submissions .
7619	Delete clinvar object .
7620	Convert a case to a dict of CLIN variables .
7621	Parse HPO Obo output .
7622	Show all genes .
7623	Return a list of genes .
7624	List genes .
7625	Check if panels exist in database .
7626	Load clinical SNV variants from database .
7627	Load a case from the database .
7628	Decorator to render a template .
7629	Check if user has access to institute
7630	Return a list of user institutes .
7631	Get the HGNC ID for a gene .
7632	Update a panel .
7633	Load all disease terms
7634	Load the disease terms .
7635	Parse the frequencies for a variant .
7636	Parse the frequency of a variant .
7637	Parse the frequencies of the variant .
7638	List users .
7639	Build a HGNC gene
7640	Load a panel from a parsed panel .
7641	Load the omim panel .
7642	Compare two mim panels .
7643	Update the version of the Mim database entries .
7644	Add a panel to the database .
7645	Get a panel by id
7646	Delete a panel .
7647	Fetch a gene panel from the database .
7648	Get gene panels .
7649	Build gene to panels dict .
7650	Update a panel .
7651	Add a pending action to a panel .
7652	Apply pending changes to the panel .
7653	Return a set of all clinical symbols .
7654	List cases .
7655	Send an email using smtplib .
7656	Load all indexes .
7657	Update indexes .
7658	Drop all indexes .
7659	Build a mongo query for a variant .
7660	Build a mongo query .
7661	build clinsig query
7662	Add coordinates to the query
7663	Add gene - related parameters to the query .
7664	Drops whole database .
7665	Parse a panel file .
7666	Build clnsig object .
7667	Load a bulk of gene objects into the database .
7668	Load transcript bulk .
7669	Load multiple exon objects into the database .
7670	Retrieve a gene from the database .
7671	Get the HGNC ID for a given HGNC symbol .
7672	Retrieve genes for a given HGNC symbol .
7673	Return all genes in the database
7674	Get the number of genes in the database .
7675	Drop the gene collection .
7676	Drop the transcripts collection .
7677	Drop the exons collection .
7678	Fetches all ensembl transcripts
7679	Build a dictionary of HGNC symbols to gene objects .
7680	Get gene by alias .
7681	Fetches all genes by alias
7682	Fetches all ensembl genes
7683	Return the HGNC symbol for a given HGNC symbol .
7684	Add hgnc_id to each gene .
7685	Get all coding intervals .
7686	Update omim gene panel
7687	Return a list of cases .
7688	Get a single case .
7689	Get matches from MME server .
7690	Matchmaker request handler
7691	Delete a case from MME .
7692	Render a case report .
7693	Generate a case report .
7694	Diagnose a case .
7695	Add a phenotype to a case .
7696	Handle phenotypes actions .
7697	Create or delete an event .
7698	Change case status .
7699	Assign a case to an institute .
7700	List HPO terms .
7701	Mark a variant as validation .
7702	Mark a variant as solved .
7703	Get the delivery report for a case .
7704	Share a case .
7705	Rerun a case .
7706	Open research page .
7707	Convert a vcf to cytosure .
7708	Download a multiqc case .
7709	Retrieve cases from the database .
7710	Return the content for a case report .
7711	Return the contents of the coverage report .
7712	Return list of clinvar submissions .
7713	Export all MT excel files .
7714	Update case synopsis .
7715	Query phenomizer for diseases .
7716	Convert a VCF to cytosure format .
7717	Retrieve a single case from the store .
7718	Return a list of variants with sanger unevaluated .
7719	Add a user to Matchmaker
7720	Delete multiple patients .
7721	Get matches from MatchMaker .
7722	Match a case against a list of patients .
7723	Update the omim gene panel
7724	Parse a variant calling information .
7725	Build a transcript
7726	Load an institute into the database .
7727	Parse the cadd of a variant .
7728	Create a case .
7729	Update a single variant .
7730	Update variant rank for all variants
7731	Update variant compounds .
7732	Update compounds of all variants .
7733	Update compounds in MongoDB .
7734	Update case compounds .
7735	Load a variant from the database .
7736	Upsert a variant in the database .
7737	Load variants bulk .
7738	Assign a user to a case .
7739	Share a case .
7740	Diagnose a case .
7741	Mark a case as checked .
7742	Order verification event .
7743	Get all sanger ordered variants .
7744	Validate a single variant .
7745	Mark a variant as solved .
7746	Update the dismiss variant .
7747	Update the ACMG for a variant .
7748	Parse a set of identifiers .
7749	Parse a simple ID .
7750	Parse a document id .
7751	Convert a panel of genes .
7752	Get a variant id from a variant object .
7753	Get the number of cases in the database .
7754	Update dynamic gene list .
7755	Fetch a case .
7756	Delete case .
7757	Add a case to the database .
7758	Replace a case .
7759	Update a case id .
7760	Submit an evaluation .
7761	Get evaluations for a given variant
7762	Parse Ensembl transcripts .
7763	Parse Ensembl gene request .
7764	Parse Ensembl transcript request .
7765	Parse an ensembl line .
7766	Parse ensembl genes from a file .
7767	Parse ensembl exons .
7768	Parse an ensembl request .
7769	Initialize a logger .
7770	Parse an OMIM line .
7771	Parse OMIM morbid lines .
7772	Given a list of genomic omim numbers return the set of phenotypes associated with those omim numbers .
7773	Generate Morphologically mapped genes .
7774	Convert a string to a number .
7775	Format a month .
7776	Format a day .
7777	Format a month name .
7778	helper for popover
7779	Get panel information .
7780	Parse gene information .
7781	Parse a list of gene lines .
7782	Parse gene panel .
7783	List diseases .
7784	Update HPO terms .
7785	Return the list of users .
7786	Parse gerp phast and phylop conservation .
7787	Parse a single conservation .
7788	Get general case information .
7789	Get all cases in the database .
7790	Render a context to a JSON response .
7791	Get the year and month .
7792	Check for cancelled events .
7793	Fetch a hpo term .
7794	Search HPO terms .
7795	Get a disease term .
7796	Get all disease terms .
7797	Load a disease term into the database .
7798	Generate a list of genes from a list of terms .
7799	Read data from an HDF5 file .
7800	Setup frequency axis .
7801	Setup time axis .
7802	Read a filterbank from a file .
7803	Compute the last time at which the data was read .
7804	Blank a DC bin .
7805	Print header information .
7806	Calculate the extent of the plot .
7807	Plot waterfall .
7808	Plot time series .
7809	Write the filterbank to a file .
7810	Calibrate bandpass to N1 .
7811	Convert data to coarse channels .
7812	Apply Mueller to data arrays
7813	Calculate differential gain and phase from noise diode measurements .
7814	Calculate the fracpols of a string .
7815	Write waterfall and cross - pols .
7816	Find the closest value in xarr to val .
7817	Rebin a matrix .
7818	Unpack data according to nbit .
7819	Get the difference between noise diode and waterfall .
7820	Plot stokes diode .
7821	Plot calibrated diode .
7822	Plot the ON - OFF and OFF coarse spectra .
7823	Open a file .
7824	Setup selection range .
7825	Calculate the number of bytes required to store the data .
7826	Calculate the selection shape .
7827	Sets up channel indices .
7828	Calculate the start and stop frequencies for this channel .
7829	Populate the timestamps from the header .
7830	Populate freqs .
7831	Calculate the number of coarse channels .
7832	Calculate the number of blobs .
7833	Check if selection is heavy .
7834	Read data .
7835	Read all data from file .
7836	Read a row from the file .
7837	Read data from the container .
7838	Update header .
7839	Print information about the file
7840	Write a file to disk .
7841	Writes the container to an HDF5 file .
7842	Write the filterbank to an hdf5 file .
7843	Get the number of blobs in the chunk .
7844	Detect the chunk dimensions .
7845	Grab data .
7846	Command line tool for creating spectra from GuppiRaw files .
7847	Read the first header .
7848	Find the number of data blocks .
7849	Print statistics .
7850	Plot histogram .
7851	Generate filterbank header .
7852	Find the size of the header
7853	NAME matchfils . py
7854	Command line tool for creating HDF5 Raw files .
7855	Fold calibrated data .
7856	Integrate a waterfall .
7857	Calculate calfluxes .
7858	Get the center frequency of a channel .
7859	Calculate the ratio of ON and OFF spectra .
7860	Calculate diode spectrum .
7861	Calculate thermal conductivity .
7862	Find folded spectra of the target source with the noise diode ON and OFF .
7863	Get the length of the header .
7864	Check if file is a filterbank file .
7865	Fix the header of a file .
7866	Generate the header for a SIGPROC file .
7867	Convert a string to a sigproc angle .
7868	Calculate the number of channels in a file .
7869	Return a dict representation of the traceback .
7870	Create a subparser for a record type .
7871	Create a parser for zonefiles .
7872	Remove comments from text .
7873	Add a default name to the text .
7874	Parse a single line .
7875	Parse zone file text .
7876	Parse zone file .
7877	Quote a field .
7878	Parse Avro schema string .
7879	Write a list of classes to a Python package .
7880	Return the class source for the given schema .
7881	Disable automatic register .
7882	Convert a record to json compatible .
7883	Load a record from a dictionary .
7884	Load a json record .
7885	Add a schema to the registry .
7886	Returns the schema for the given record name .
7887	Return a dictionary representation of the variable .
7888	Mixin a class .
7889	Create a record from a class .
7890	Get the JSON schema for a record .
7891	Get the root schema for a record .
7892	Read lines from input_stream .
7893	Write multiple outputs to a stream .
7894	Push a value onto the front of a dictionary .
7895	Get a search query string .
7896	Perform a raw filter .
7897	Return a list of all entities with the given attributes .
7898	Get entity from href .
7899	Given a quote return the other quote .
7900	Escape a string .
7901	Return the elementary rotation matrix .
7902	Construct a covariance matrix .
7903	Calculate the average sky coverage error .
7904	Calculate the parallax error .
7905	Returns the magnitude error of a Gaussian distribution .
7906	r Return the magnitude error of a G signal .
7907	Make a plot of the magnetic discharge .
7908	Returns the average number of transit numbers for a given beta value .
7909	Return the angular distance between two points .
7910	Transform cartesian coordinates .
7911	Transform from sky coordinates to spherical coordinates .
7912	Transform a covariance matrix .
7913	Returns the error scaling factor for the given observable and beta .
7914	Make a plot .
7915	Make plot .
7916	Returns a function that returns True or False .
7917	Decorator for helpful failure messages .
7918	Unquote a string .
7919	Apply a function to each item in the collection .
7920	Exclude elements from this RDD .
7921	Return a new collection with only the elements which satisfy a truth test .
7922	Apply a function to each item and return a new collection .
7923	Return a new Collection object with elements from this collection which do not satisfy a truth test .
7924	Zip together the arguments and return a new Collection .
7925	Wrapper around operator . methodcaller .
7926	Return the path to the serach directory .
7927	Iterate over a group of characters .
7928	Return a list of all possible register options .
7929	Return an event string .
7930	Build a minimal list of scheduled runs .
7931	Report results .
7932	Report results .
7933	Print the results to the given file .
7934	Clean up code .
7935	Round a number to the next base .
7936	Given a list of indices return a list of blocks of size block_size .
7937	Calculate cache access .
7938	Calculate cycles for each cache level .
7939	Run the analysis .
7940	Run IACA analysis .
7941	Strip comments and whitespace from a list of asm lines .
7942	Remove unreferenced labels .
7943	Select the best block .
7944	Prompt the user to select a pointer increment .
7945	Display a user selected block .
7946	Insert start and end markers .
7947	Perform ICAC instrumentation .
7948	Main function .
7949	Simulate the model .
7950	Generate a number generator .
7951	Get the last modification time of a directory .
7952	Check arguments .
7953	Main function .
7954	Merge two or more pickle files .
7955	Return a sympy . Symbol representing a positive integer .
7956	Transform a multidimensional array declaration .
7957	Transform a multidimensional array to one dimensional array .
7958	Find all nodes of type node_type in ast .
7959	Force a function to return an iterable .
7960	Check that all variables have the same datatype .
7961	Set a constant .
7962	Return the constant values of the given expression .
7963	Return a dictionary of variable sizes .
7964	Calculate relative offset .
7965	Remove duplicate accesses .
7966	Get the total length of the loop .
7967	Get the loop stack .
7968	Return a list of free symbols .
7969	Compile a dictionary of sympy accesses .
7970	Compiles a dictionary of relative distances .
7971	Convert global iterator to indices .
7972	Return the global iterator .
7973	Convert a list of indices to a global iterator .
7974	Returns the maximum global iteration .
7975	Print kernel information .
7976	Print information about the variables .
7977	Print constants info .
7978	Print the kernel code .
7979	Convert AST to sympy symbol .
7980	Get the indices of the subscripts of an array .
7981	Get the base name of a reference .
7982	Get the index type of the loop .
7983	Build constant declarations .
7984	Get all array declarations .
7985	Return a list of For loops .
7986	Build the array declarations from kernel ast .
7987	Find the outermost loop .
7988	Build the array initializations .
7989	Build dummy calls .
7990	Build a kernel function declaration .
7991	Build a list of scalar declarations .
7992	Get kernel code .
7993	Build a kernel call .
7994	Get the main code for this kernel .
7995	Perform ICAA analysis .
7996	Build an executable file .
7997	Convert a string to a sympy expression .
7998	Get a unique identifier for the file .
7999	Get the last modification time of the file .
8000	Return a CacheSimulator object for the given cores .
8001	Get the bandwidth for this benchmark .
8002	Get compiler and flags .
8003	Parse a perfctr event .
8004	Enforce no overlap .
8005	Get the path to the header file .
8006	Align an iteration with the cl boundary .
8007	Return a list of loads .
8008	Return the number of hits for each cache level .
8009	Get the number of misses in the cache .
8010	Get the number of stores .
8011	Get the number of evicts .
8012	Get infos about the cache .
8013	Context manager to temporarily set environment variables .
8014	Configure the argument group .
8015	Print the results .
8016	Parse the README . md file .
8017	Schedule a retry .
8018	Build a purchase item .
8019	Record a purchase
8020	Get course content
8021	Get course content from ecommerce .
8022	Update unenrolled list
8023	Send a course refund notification .
8024	Send an offer assignment notification email
8025	Get logger configuration .
8026	Retry the order .
8027	Fulfill an order .
8028	Get Sailthru client .
8029	Get a value from the cache .
8030	Set a cache item .
8031	Get a configuration setting .
8032	Get the filename of the overrides file .
8033	Get a value by version .
8034	Get version of energy plus installed .
8035	Return a dictionary of file references .
8036	Populate from json data
8037	Returns a list of all external files .
8038	Set default values for all tables .
8039	Prepare field descriptors for extensible mode .
8040	Get the name of the extended field .
8041	Returns a dictionary of the short references for each file .
8042	Get the value of a column .
8043	Update the value in the inert .
8044	Update record .
8045	Set default values for all fields .
8046	Add fields to the record .
8047	Remove and return the value at index .
8048	Insert value at index .
8049	Delete the record .
8050	Register a record hook .
8051	Register a link .
8052	Create a regular expression for the given line .
8053	Return the remaining duration in seconds .
8054	Serialize the event .
8055	Make an HTTP request .
8056	Get a list of available services .
8057	Try to create directory .
8058	Configure a service .
8059	Register a new CA .
8060	Set recording state .
8061	Update the status of an event .
8062	Update agent state .
8063	Return the location of the configuration file .
8064	Update the configuration .
8065	Check the connection to the Opencast server .
8066	Initialize the logger .
8067	Home page .
8068	Serve an image .
8069	Run multiple modules .
8070	Parse an ical file .
8071	Get the schedule for the agent .
8072	Main control loop .
8073	Main control loop .
8074	Make an error response .
8075	Make a data response .
8076	Get the current internal state .
8077	List upcoming events .
8078	Get an event by uid
8079	Delete an event .
8080	Modify an event
8081	Parse configuration properties .
8082	Ingest event .
8083	Start capturing an event .
8084	Render the template to a fragment .
8085	Return a list of all resources in the container .
8086	Return a dictionary representation of the resource .
8087	Create a fragment from a dict .
8088	Add content to the response .
8089	Add a resource .
8090	Add a resource url .
8091	Initialize the js function .
8092	Convert a list of resources to HTML .
8093	Convert a resource to HTML .
8094	Handles GET requests .
8095	Render a fragment as a standalone response .
8096	Render a fragment to a standalone HTML document .
8097	Calculate the FDR for a set of values .
8098	Convert values to one dimensional array .
8099	Lookup values from an error table .
8100	Perform a single chromatogram hypothesis computation .
8101	Generate a final error table from a DataFrame .
8102	Extract summary statistics from a DataFrame .
8103	Compute error statistics .
8104	Find the cutoff value for a given threshold .
8105	Score XGBoost .
8106	Infer peptides from the input file .
8107	Infer peptides from input file .
8108	Infer proteins from a protein file .
8109	Subsample an input file to a new file .
8110	Reduce input file to output file .
8111	Backpropagate input file to output file .
8112	Filter sqmass files .
8113	Get a single group by id .
8114	Create a new group .
8115	Delete a group .
8116	Get a list of groups members .
8117	Update the members of a group .
8118	Get the number of effective members in a group .
8119	Check if a user is an effective member of a group .
8120	Modify sphinx conf file .
8121	Create a dataset .
8122	Decrypt contents of a file .
8123	Get the stdin .
8124	Get stdout .
8125	Get stderr .
8126	Get debug output .
8127	Context manager to temporarily open stdin .
8128	Return a context manager for the subprocess stdout .
8129	Context manager to temporarily open stderr .
8130	Context manager for debugging .
8131	Empty account .
8132	Empty a container .
8133	Decorate a command to write to a file .
8134	Decorate a message with stderr .
8135	Log an error message .
8136	Print the help text .
8137	Print usage information .
8138	Print version information .
8139	Make a request .
8140	Create a new account .
8141	Delete an account
8142	PUT a container .
8143	HEAD an object .
8144	Get an object from a container .
8145	Put an object in a container .
8146	POST an object to a container .
8147	Resolve an option .
8148	Return a copy of this context .
8149	Write headers to file .
8150	Show authentication information .
8151	Generate a temporary URL .
8152	Quote a value .
8153	Fordo a container .
8154	Get client .
8155	AES - CBC encryption .
8156	Decrypt data from stdin using AES256CBC .
8157	Upload a directory structure
8158	Put an account .
8159	Put a container .
8160	Get the manifest body .
8161	Create a new container .
8162	Retrieve a tempurl .
8163	Display a trans id .
8164	Print help for a given command .
8165	Check if buffer is empty .
8166	Encrypt an AES key .
8167	Get repo status .
8168	Get a single pull request .
8169	Get list of pull requests .
8170	Publish the slider items .
8171	Return a list of slider items ordered by position .
8172	Render a list of slider items .
8173	Acquire the reader lock .
8174	Release all readers .
8175	Acquire the writer lock .
8176	Add a task to the registry .
8177	Remove a task from the registry .
8178	Get a task .
8179	Return a list of all tasks .
8180	Return the configuration as a dictionary .
8181	Create a TaskConfig object from a dictionary .
8182	Execute a perceval job .
8183	Initializes the archive manager .
8184	Run the job .
8185	Executes the fetch operation .
8186	Create an index .
8187	Create mapping .
8188	Encode a JSON object into bytes .
8189	Write items to writer .
8190	Add a task to the scheduler .
8191	Remove a task from the scheduler .
8192	Get all queued items .
8193	Validate task arguments .
8194	Parse archive arguments .
8195	Perform a job .
8196	Schedule a job task .
8197	Cancel a job task .
8198	Run the listener .
8199	Listen to incoming messages .
8200	Schedules the scheduler .
8201	Schedule a task .
8202	Cancel a task .
8203	Handle a successful job .
8204	Handle a failed job .
8205	Build job arguments for a task .
8206	Get a secret .
8207	Register the view .
8208	Decorator to register a view .
8209	Override the default reverse_action method .
8210	Get the view name .
8211	Get the version number .
8212	Resolve a key .
8213	Get an engine from a scheme .
8214	Parse a database path .
8215	Get database configuration from url .
8216	Parse a database url .
8217	Create a new user .
8218	Return a list of users .
8219	Create a new password .
8220	Add the detail view name to the field .
8221	Parse a boolean value .
8222	Parse an integer .
8223	Return the parser for the given type .
8224	Get Django settings .
8225	Create a ModelDict from a model .
8226	Encode a string using base64 .
8227	Create a new field .
8228	Create a validator from a dictionary .
8229	Cartesian product of parameters .
8230	Find unique points in a list of explored parameters .
8231	Change the logging settings .
8232	Decorator to configure simple logging .
8233	Try to create directories for filename .
8234	Get a list of strings .
8235	Rename a log file .
8236	Set the logger .
8237	Extract replacements from a trajectory .
8238	Show progress .
8239	Check and replace parser arguments .
8240	Convert a parser to a StringIO object .
8241	Find multiproc options .
8242	Find the multiproc dictionary .
8243	Check log configuration .
8244	Handle config parsing .
8245	Recursively handle nested dictionaries .
8246	Create logging handlers and tools .
8247	Finalize all the tools .
8248	Start logging to stdout .
8249	Write a string to the stream .
8250	Compare two results .
8251	Compare two parameters .
8252	Manually run a function .
8253	Marks a function or property as deprecated .
8254	Mutually exclusive decorator .
8255	Marks a function as deprecated .
8256	Retry a function n times .
8257	Add a prefix to class names .
8258	Add the parameters we need for our network .
8259	Run the network .
8260	Compute the Euler Scheme of a trajectory .
8261	Add parameters to the trajectory
8262	Compute lorenz diffusion coefficient .
8263	Create a storage service .
8264	Create a storage service .
8265	Add parameters to a Trimesh object .
8266	Compute the difference between two values .
8267	Compact an HDF5 file .
8268	Check if parameters are explored in a group .
8269	Build model eqs .
8270	Pre - build the model .
8271	Build the model .
8272	Build the model .
8273	Pre - build the network .
8274	Build the network .
8275	Add Brian2 parameters .
8276	Compute the fano factor .
8277	Compute the mean Fano factor for a set of neurons .
8278	Compute mean fano factor over all exc neurons
8279	Add a subrun to the network .
8280	Add monitors to the network .
8281	Create a folder to store plots .
8282	Plot the result .
8283	Print spike raster plot .
8284	Analyse a single subrun .
8285	Get the batch number
8286	Explore a batch .
8287	Get the |NNTreeNodeVars| object for this node .
8288	Returns the node function .
8289	Rename the name .
8290	Set the branch and run branch details .
8291	Convert a node to a message type .
8292	Remove a subtree .
8293	Delete a node .
8294	Remove a node or leaf .
8295	Remove a node along a branch .
8296	Translate a shortcut name .
8297	Add prefix to split names .
8298	Determine the type of a node .
8299	Generic add operation .
8300	Add a node to the tree .
8301	Create a link .
8302	Check if names are valid .
8303	Create an instance of a group .
8304	Create a parameter or a result instance .
8305	Set the details of a tree node .
8306	Iterate over all nodes in the tree .
8307	Make a child iterator .
8308	Internal recursive traversal function .
8309	Very fast search .
8310	Search a node for a key .
8311	Backwards search from start_node to split_name .
8312	Get the KIDS of this node .
8313	Add a group from storage .
8314	Add a leaf from storage .
8315	Return a list of directory names .
8316	Return a debug representation of the container .
8317	Get the parent of this node .
8318	Add a group .
8319	Add a link .
8320	Remove a link .
8321	Add a leaf node .
8322	Remove a child from this node .
8323	Remove a child from the group .
8324	Returns True if the trajectory contains item .
8325	Get a value from the file .
8326	Get children .
8327	Get the groups .
8328	Get all leaves .
8329	Get links .
8330	Store a child of this trajectory .
8331	Store this trajectory .
8332	Load a child trajectory .
8333	Load this trajectory .
8334	Add a parameter group .
8335	Add a parameter to the network .
8336	Add a result group .
8337	Add a result .
8338	Add a derived parameter group .
8339	Add a derived parameter .
8340	Add a config group .
8341	Add a config .
8342	Evaluate one max individual .
8343	Add git commit variables .
8344	Create a git commit .
8345	Flatten a nested dictionary .
8346	Nest a nested dictionary .
8347	Prints a progress bar .
8348	Get the argspec of a function .
8349	Given a function and a dictionary of keyword arguments return a dictionary of matching keyword arguments .
8350	Format a timestamp .
8351	Connect to a TCP port .
8352	Attempt to race directories .
8353	Reset internal state .
8354	Get the remaining time in seconds .
8355	Return a copy of the dict .
8356	Remove an annotation .
8357	Return a string representation of the annotation .
8358	Make an ordinary result .
8359	Make a shared result .
8360	Create shared data .
8361	Request data for this trajectory .
8362	Get the data node .
8363	Check if item is a supported type .
8364	Create shared data .
8365	Safely manipulate a multiprocess trajectory .
8366	Lock a client .
8367	Send a shutdown signal .
8368	Close the socket .
8369	Start the client .
8370	Send a REQ and wait for a response .
8371	Acquire lock .
8372	Listen for messages .
8373	Put data into the queue .
8374	Detect the forked process .
8375	Handle data messages .
8376	Receives messages and processes them .
8377	Receive data from the queue .
8378	Receive data from socket .
8379	Store data in the storage .
8380	Store a bunch of stuff .
8381	Store references to trajectories .
8382	Decorator to parse config data .
8383	Collect options from a section .
8384	Collect configuration parameters .
8385	Interpret config file .
8386	Add parameters to trajectory .
8387	Convert rule number to binary rule .
8388	Make a random initial state .
8389	Plot a pattern .
8390	Cellular automaton .
8391	Main function of the experiment .
8392	Process a signal update .
8393	Get the overview group .
8394	Load a single node .
8395	Store a bunch of stuff .
8396	Load multiple items from an iterable .
8397	Check HDF5 properties .
8398	Store multiple messages at once .
8399	Closes the HDF5 file .
8400	Extract file information .
8401	Backup a trajectory .
8402	Read a row from a trj table .
8403	Prepare trajectory for merging .
8404	Load the meta data for a trajectory .
8405	Load a sub - branch .
8406	Check the version of the trajectory .
8407	Fill the run table .
8408	Load exploration information for a trajectory .
8409	Store the explorations of a trajectory .
8410	Create the overview tables for the given list of tables .
8411	Store a trajectory .
8412	Store a sub - branch .
8413	Create a leaf trajectory .
8414	Load all nodes in a trajectory .
8415	Store trajectory nodes in hdf5 file .
8416	This method is called when a table entry is added to the storage .
8417	Get or create a table .
8418	Get node by name .
8419	Set all attributes to recall natives .
8420	Recall native data type
8421	Add or modify a row .
8422	Insert all values into a row .
8423	Extract insert dict from HDF5 table .
8424	Cut a string to a maximum length .
8425	Create or get a group .
8426	Helper function for all_create_or_get_group .
8427	Store the annotations of an item
8428	Load annotations from node attributes .
8429	Store a trajectory group
8430	Load a trajectory group .
8431	Load all annotations and comments for a given trajectory node .
8432	Extract missing flags .
8433	Add a summary to the prm metadata .
8434	Add meta info to the PGM .
8435	Store data from a dictionary .
8436	Store a parameter .
8437	Write data into a shared array .
8438	Write a shared table .
8439	Write a dictionary to a HDF5 table .
8440	Write data to a pandas DataFrame .
8441	Write data into other arrays .
8442	Write data into an array .
8443	Delete a link .
8444	Delete a parameter or a result .
8445	Write data into a pytable .
8446	Create a pytables description
8447	Get a table column .
8448	Get the length of the longest string .
8449	Recursive function to load a PLIST into a dictionary .
8450	Read a dictionary of lists .
8451	Read shared data .
8452	Read data from a table .
8453	Read a single array .
8454	Load a trajectory .
8455	Make a set name .
8456	Set properties .
8457	Add dynamic imports .
8458	Set the crun parameter .
8459	Iterate through the trajectory .
8460	Shrink the trajectory .
8461	Sets a default parameter .
8462	Presets a parameter .
8463	Prepares the experiment .
8464	Get a value from all runs .
8465	Check if a run is completed .
8466	Remove explored parameters from disk .
8467	Copies a node to the trajectory
8468	Explore the trajectory .
8469	Update run information .
8470	Add information about a single run .
8471	Lock all parameters .
8472	Lock all derived parameters .
8473	Finalizes the run .
8474	Load the skeleton .
8475	Load data from a file .
8476	Backup the trajectory .
8477	Create a list of all the reverse wildcards .
8478	Merge multiple trajectories .
8479	Merge a single trajectory with another trajectory .
8480	Rename a full name .
8481	Merge derived parameters from another trajectory .
8482	Merges potential links from another trajectory into this one .
8483	Merges config from other trajectory
8484	Merge two trajectories .
8485	Merge results from two trajectories .
8486	Migrate trajectory to new name .
8487	Store this trajectory in the storage .
8488	Restore default parameters .
8489	Set explored parameters to the given index .
8490	Make a single run .
8491	Return a list of run names .
8492	Get the run information .
8493	Find the indices of the parameters that match the predicate .
8494	Start a run .
8495	Finalize the run .
8496	Set the start time .
8497	Set the finish time of the current run .
8498	Construct an instance of a class .
8499	Return a copy of a parameter dictionary .
8500	Finalize the run .
8501	Get the current configuration .
8502	Get the results as a dictionary .
8503	Store items from an iterator .
8504	Load items from disk .
8505	Remove items from the network .
8506	Delete links from the network .
8507	Remove all children .
8508	Delete items from the trajectory .
8509	Pool a single run .
8510	wrapper for _frozen_pool_single_run
8511	Configure the pool .
8512	Configure frozen pool .
8513	Process a single run .
8514	Configures frozen SCOOP .
8515	Run a single run of scoop .
8516	Configure the logging system .
8517	Configure niceness .
8518	Handle SIGINT during a single run .
8519	Run a single run .
8520	Wrap the handling function .
8521	Load a class from a full class string .
8522	Create a class dynamically .
8523	Get the length of the range .
8524	Return a string representation of the current value .
8525	Check whether two values are equal .
8526	Get the range of the array .
8527	Explore this parameter .
8528	Explore the given iterable .
8529	Perform data sanity checks .
8530	Store the current state of the object .
8531	Load data from disk .
8532	Load an array parameter .
8533	Check if two values are equal .
8534	Check if data is a supported matrix .
8535	Serializes a sparse matrix into a list of lists .
8536	Build a tuple of names .
8537	Reconstruct a matrix from a list of data .
8538	Load parameters from a dictionary .
8539	Store the current state of the object .
8540	Load data from disk .
8541	Translate key .
8542	Return a string representation of the value
8543	Convert to dict .
8544	Set positional values .
8545	Get data from result .
8546	Set a single result .
8547	Returns True if item is a supported SparseParameter .
8548	Return a dictionary representation of the parameter .
8549	Load parameters from a dictionary .
8550	Set a single result .
8551	Store the results in a dictionary .
8552	Load data from a dictionary .
8553	Merge all files in a folder
8554	Upload a file
8555	Download a file .
8556	Create a session .
8557	Merge trajectories .
8558	Start the jobs .
8559	Multiply two reals
8560	Run the Euler integration .
8561	Process the results of the neuron postprocessor .
8562	Add parameters to the simulation .
8563	Add exploration of I and tau_ref
8564	Execute the network pre - run .
8565	Execute a single network run .
8566	Extract subruns from trajectory .
8567	Execute the network run .
8568	Add parameters to the network .
8569	Pre - run the network .
8570	Run the network .
8571	Run the network .
8572	Make a filename from a Trajectory object .
8573	Return the next element .
8574	Merge all trajectories in a folder .
8575	Handle Ctrl + C .
8576	Read configuration from file .
8577	Request PIN from Ecobee .
8578	Request token from Ecobee .
8579	Refresh access token .
8580	Get thermostat data from Ecobee .
8581	Write the credentials to a file .
8582	Set the thermostat mode .
8583	set fan minimum on time
8584	Set hold temperature .
8585	Set climate hold
8586	Delete a vacation
8587	Resumes a program .
8588	Send a message .
8589	Set the humidity level .
8590	Generate a delay to enter in SELECTING mode .
8591	Generate a resend timeout .
8592	Generate a timeout request for renewing a lease .
8593	Generate renewing time .
8594	Return a dict representation of the state .
8595	Reset device attributes .
8596	Get the timeout for a given state and function .
8597	Set the timeout for a function .
8598	Send a DISCOVER packet .
8599	Select an offer .
8600	Send a request .
8601	Set the timers for the client .
8602	Process a received ack packet .
8603	Process a received NAK packet .
8604	Initialize state .
8605	Set the state to bound .
8606	Set the state to RENEWING .
8607	Set the state to REBINDING .
8608	End the transaction .
8609	Raise an error .
8610	Wait for response to select .
8611	This method is called when a request has timed out .
8612	This method is called when a request has timed out .
8613	This method is called when a request has timed out .
8614	Receive an offer .
8615	Receive an ACK .
8616	Receive NACK .
8617	Handle an ACK packet .
8618	Receive a NACK .
8619	Handle incoming ACK packets .
8620	Handle incoming NACK packets .
8621	Called when the lease is renewed .
8622	Set a query parameter .
8623	Add a name - value pair to this query .
8624	Return a new QuerySet with the given name and value removed .
8625	Get supervisor status .
8626	Create output dictionary .
8627	Main function .
8628	Validate a message .
8629	Read Tdms file .
8630	Add deformation to the data .
8631	Convert tdms file to fcs file .
8632	Check if the given directory is equal to the current directory .
8633	Create a patch .
8634	Delete the next patch .
8635	Delete a patch .
8636	Check if file is in patch
8637	Backup a file
8638	Add a file to the database .
8639	Run the Quilt command .
8640	Create the directory .
8641	Copy this directory to a new location .
8642	Link this file to another file .
8643	Copy this file to a new location .
8644	Get the directory of the file .
8645	Backup a file .
8646	Refresh a patch .
8647	Unapply a patch .
8648	Unapply the top patch .
8649	Unapply all applied patches .
8650	Apply a patch .
8651	Apply the next patch .
8652	Apply all patches .
8653	Read the series file .
8654	Save the series to a file .
8655	Add a patch .
8656	Insert a list of patches .
8657	Add a list of patches .
8658	Remove a patch .
8659	Return the patches after the given patch .
8660	Return the patches before the given patch .
8661	Return the patches until the given patch .
8662	Replace old_patch with new_patch .
8663	Create the version file .
8664	Check the version of the database .
8665	Add this command to the given parser .
8666	Add this option to the given parser .
8667	Add a new parser to subparsers .
8668	Set subparsers arguments .
8669	Add subparsers to the given parser .
8670	Check if file is in patch
8671	Check if file is in next patches
8672	Revert a file .
8673	Import a patch .
8674	Import a list of patches .
8675	Add a way
8676	Return all node ids that are not present in the graph .
8677	Add a node to the graph .
8678	Build a route from a relation .
8679	Create a route name for a relation .
8680	Get the ID of a relation .
8681	Extract public transport relations .
8682	Add a relation .
8683	Create dummy data .
8684	Patch agencies .
8685	Create a dummy trip for a given trip .
8686	Write the zip file .
8687	Write unzipped files to destination .
8688	Build an Agency object .
8689	Extract stops .
8690	Build a list of Shape objects for a relation .
8691	Return a list of supported versions .
8692	Send an APDU to the device .
8693	Authenticate a list of devices .
8694	Register a new client .
8695	Authenticate with U2F .
8696	Register one or more U2F devices .
8697	Convert unicode data to str .
8698	Wraps a function or method .
8699	Wraps a class .
8700	Check if the filepath matches one of the blame patterns .
8701	Convert an email address to a domain name .
8702	Return the entry that matches the given entry .
8703	Convert markdown to reST .
8704	Serve Flawless web server .
8705	Record an error .
8706	Get image from url
8707	Load an image from a string .
8708	Decorator to validate a function .
8709	Check if the image is big enough .
8710	Raise ImageSizeError if width is too big .
8711	Raise ImageSizeError if height is too big .
8712	Parse a category .
8713	Parse the value of a field .
8714	Get all the items in the file .
8715	Save an error .
8716	Parse the source and save the data .
8717	Parse an item .
8718	Get the instance from the database .
8719	Save an item .
8720	Download a file .
8721	Load the source file .
8722	Get the items from the CSV file .
8723	Sets the allow network access setting .
8724	Run the docker command runner .
8725	Add files to the container .
8726	Add a file to the working directory and rename it .
8727	Get all enrollments for a given course .
8728	Returns the list of enrollments for a given course .
8729	Get all enrollments for a section .
8730	Returns the list of enrollments for a particular section .
8731	Get enrollments for a given regid .
8732	Enroll a user in a course .
8733	Get all the roles in an account .
8734	Get a list of roles by SIS id .
8735	Get the effective course roles in an account .
8736	Get a single role .
8737	Get a role by sis_id .
8738	Get a single course .
8739	Get a single course by SIS id
8740	Get all courses in an account .
8741	Get a list of courses in an sis account
8742	Get a list of courses published in an account .
8743	Fetches a list of courses published by a given sis_account_id
8744	Get a list of courses for a given regid .
8745	Create a new course .
8746	Update SIS id .
8747	Call get activity by account .
8748	Get the grade for a term in an account .
8749	Call get statistics API .
8750	Returns the activity for the given sis_course_id .
8751	Returns the list of assignments for this course .
8752	Returns the student summaries by SIS course id .
8753	Returns the activity for a given sis user .
8754	Returns the student messaging for a given sis user .
8755	Get external tools in an account .
8756	Get external tools in a course .
8757	Create an external tool .
8758	Update an external tool .
8759	Delete an external tool .
8760	Check that all required parameters are set .
8761	Get a single user .
8762	Get a list of users for a given course .
8763	Returns a list of users for a given sis_course_id
8764	Create a new user .
8765	Get a list of logins for a user .
8766	Update a user login .
8767	Return the URL of the next page .
8768	Get data from url
8769	Get a paged resource .
8770	Get a resource .
8771	Send a PUT request to the API .
8772	Send a POST request to the API .
8773	Delete a resource .
8774	Get all admins for an account .
8775	Create an admin .
8776	Create an admin by SIS id .
8777	Delete an admin .
8778	Delete an admin by SIS id .
8779	Create a new grading standard for a course .
8780	Get a specific section .
8781	Get a single section by SIS ID .
8782	Get all sections in a course .
8783	Get a list of sections in a given course .
8784	Get a list of sections with students in a course .
8785	Get a list of sections with students in a course .
8786	Create a section .
8787	Update a section .
8788	Get quizzes .
8789	Get a single account .
8790	Get a list of sub accounts .
8791	Update an account .
8792	Update SIS ID .
8793	Get the authentication settings for an account .
8794	Update the authentication settings for an account .
8795	Get a term by SIS ID
8796	Import a CSV file .
8797	Import a directory .
8798	Get import status .
8799	Build the zip archive .
8800	Get all assignments for a given course .
8801	Update an assignment .
8802	Get a list of available reports .
8803	Get a list of reports by type .
8804	Create a report .
8805	Create a course provisioning report .
8806	Create a new course SIS export report
8807	Create a new unused courses report
8808	Get report data .
8809	Get the status of a report .
8810	Delete a report .
8811	Move detections in a label .
8812	Flip detections .
8813	Get a dict from an object .
8814	Get the config to use .
8815	Returns the empty value of the field .
8816	Parse arguments and keyword arguments .
8817	Create metrics .
8818	Setup logging .
8819	Configure the collector registry .
8820	Create metrics .
8821	Get a metric .
8822	Handle the home page .
8823	Handle metrics .
8824	Query Wolfram Alpha API .
8825	Fix HTTP message types and getters .
8826	Query Wolfram Alpha API .
8827	Return a list of information about the model .
8828	Return a generator of all results .
8829	Encodes the given data .
8830	Make a request to the API .
8831	Make a GET request .
8832	Delete a URL .
8833	Make a PUT request .
8834	Make a POST request .
8835	Process a query .
8836	Group sentences by length .
8837	Disambiguates a PDF file .
8838	Disambiguate a query .
8839	Segment text .
8840	Get a language .
8841	Fetch a concept .
8842	Fit the model .
8843	Score a set of features using the given scoring function .
8844	Fit a MDR grid to a set of features .
8845	Fit the model and predict the predictions .
8846	Score a set of features .
8847	Fit the model to a set of features and targets .
8848	Transform the features .
8849	Compute the MDR score .
8850	Run MDR prediction .
8851	Generate n - way models .
8852	Plot a grid of MDRs .
8853	Get the configuration from the application .
8854	Get a configuration value .
8855	Create a vector from an iterable .
8856	Create a vector from a sequence of members .
8857	Evaluate a file .
8858	Compile and execute a stream .
8859	Compile and execute a string .
8860	Bootstrap a repl module .
8861	Run code .
8862	Create a multi function .
8863	Add a method to a map .
8864	Add a method to the MultiFunction .
8865	Get a method by key .
8866	Remove a method from a map .
8867	Remove a method .
8868	Return True if v is a macro .
8869	Get line and column from a Lisp form .
8870	Wrap a parse function to add loc information .
8871	Raise an exception if the node is not a recur .
8872	Assert that the given node is a tail statement .
8873	Resolve a bare symbol .
8874	Resolve a symbol .
8875	Parse an AST .
8876	Whether to warn on shadowed variable names .
8877	Add a new symbol to the symbol table .
8878	Map a function to a string representation .
8879	Return a string representation of a sequence .
8880	Like lrepr .
8881	Fallback for lrepr .
8882	Fix missing location information .
8883	Compile and execute a ReaderForm .
8884	Compiles the given module using the given optimizer .
8885	Compile a module .
8886	Compile bytecode .
8887	Create a sequence from an iterable .
8888	Munge a string .
8889	Remove unwanted characters from a string .
8890	Returns a new Fraction instance with the given numerator and denominator .
8891	Get a logger handler .
8892	Create a new Map from a dictionary .
8893	Partition a collection by n elements .
8894	Wrap a function to add line and column information .
8895	Read a namespaced name .
8896	Read a collection .
8897	Read a list .
8898	Read a vector .
8899	Read a set from the stream .
8900	Read a map literal .
8901	Read a string .
8902	Read a symbol from the stream .
8903	Read a keyword .
8904	Read object metadata .
8905	Read function definition .
8906	Read a quoted string .
8907	Expand a syntax quote .
8908	Process a quoted form .
8909	Read a quoted form .
8910	Read unquoted text .
8911	Read a deref statement .
8912	Read a single character .
8913	Read a regular expression .
8914	Read a reader macro .
8915	Read the next comment .
8916	Read the next token .
8917	Read expressions from a stream .
8918	Read a string .
8919	Read a file .
8920	Update the current location .
8921	Go back one level .
8922	Read the next token .
8923	Return a bytecode representation of the bytecode .
8924	Get the bytecode from the cache .
8925	Create a cache file from a source file .
8926	Hook imports .
8927	Find a potential Basilisp module .
8928	Execute a cached module .
8929	Compile a Basilisp module .
8930	Execute a module .
8931	Create a new symbol .
8932	Return a list of keywords that start with text .
8933	Get or create a keyword map .
8934	Get a keyword .
8935	Chain a list of generated PyAST nodes together .
8936	Load an attribute .
8937	A simple generator for AST nodes .
8938	Iterate over a collection of AST nodes .
8939	Add location information to the AST .
8940	Wrap a function to add location information .
8941	Decorate a function to add location information .
8942	Return whether the variable is dynamic .
8943	Check whether a variable is redefable .
8944	Convert an expression into an ast . Expr .
8945	Expressionize a function body .
8946	Check if we should warn on redef .
8947	Convert a Do AST node into a Python AST .
8948	Return function name .
8949	Convert function arguments to Python AST .
8950	Convert a single - arity function to a Python AST .
8951	Convert a multi - arity function .
8952	Converts a function call to a Python AST .
8953	Convert a if statement to a Python AST .
8954	Convert a If node to an astroid . If node .
8955	Convert an Invoke node into an astroid . Call node .
8956	Convert a quote to a Python AST .
8957	Convert a Recur node into an AST .
8958	Convert a Recur to a Python AST .
8959	Convert a SetBang node to a Python AST .
8960	Convert a throw statement to an astroid . Throw node .
8961	Convert a Try node to an AST .
8962	Convert a local symbol to an ast node .
8963	Convert a variable name to an ast node .
8964	Convert a VAR node to a py ast object .
8965	Convert a HostField to an ast . Attribute .
8966	Converts a maybe class to a py ast node .
8967	Converts a MaybeHostForm AST node into a PyAst node .
8968	Convert a const value to a Python AST .
8969	Convert a collection literal to Python AST .
8970	Generate a Python AST from a Lisp AST node .
8971	Iterate over module imports .
8972	Return an ast . ImportFrom node .
8973	Create a namespace variable .
8974	Create a set from an iterable .
8975	Create a set from a sequence of members .
8976	Visit a ExceptHandler AST node .
8977	Visitor for Expr AST node .
8978	Visitor for FunctionDef AST node .
8979	Visitor for While AST node .
8980	Visitor for Try AST node .
8981	Create a new module .
8982	Return the first element of o .
8983	Return the rest of o .
8984	Return the nth rest of a collection .
8985	Return the nth item of a sequence .
8986	Return the union of o and seq .
8987	Convert an object to a sequence .
8988	Concatenate sequences .
8989	Associates a value with a key .
8990	Return the conj of coll and xs .
8991	Returns a partial function .
8992	Dereference an object .
8993	Check whether two values are equal .
8994	Divide two numbers .
8995	Sort a collection .
8996	Return True if k is contained in coll .
8997	Get a value from a dictionary .
8998	Convert an object to LISP syntax .
8999	Convert an object to a Python object .
9000	Return a string representation of an object .
9001	Collect arguments from a tuple .
9002	Trampoline a function .
9003	Add attributes to a function .
9004	Decorate a function with meta information .
9005	Mark a function as a basilisp function .
9006	Resolve an alias .
9007	Resolve a variable .
9008	Add a generated python variable .
9009	Bootstraps a dynamic variable .
9010	Intern a variable .
9011	Intern a variable in a namespace .
9012	Find a variable in a namespace .
9013	Find a variable in a namespace .
9014	Find the variable with the given qualified name .
9015	Add a default import .
9016	Add an alias .
9017	Intern a symbol .
9018	Intern a symbol .
9019	Find a variable by symbol .
9020	Add an import .
9021	Return the module that imports sym .
9022	Add a reference to a symbol .
9023	Return a reference to a symbol .
9024	Refers all symbols in other_ns_interns to those in refers .
9025	Refers this namespace to another namespace .
9026	Get or create a namespace .
9027	Get or create a namespace .
9028	Returns the namespace with the given name .
9029	Remove a namespace .
9030	Returns a function that returns True if the text starts with text .
9031	Returns all possible aliases for the given prefix .
9032	Completes imports and aliases .
9033	Returns a list of interned names .
9034	Returns all possible completions for the given value .
9035	Completes the given text .
9036	Return the final positional arguments .
9037	Convert an iterable to a list .
9038	List constructor .
9039	Change the style of a scalar .
9040	Decrypt a JWT token .
9041	Encrypts a JSON object
9042	Delete an item from the cache .
9043	Return a tuple of selector comparison and argument .
9044	Close the file .
9045	Parse a fiql string into an expression .
9046	Dump ndb model to file .
9047	Object hook handler .
9048	Decode a date from a string .
9049	Decode a JSON value .
9050	Default JSON encoder .
9051	Validate release version
9052	Generate the changelog .
9053	Strongly connected components of a graph .
9054	Robust topological sort .
9055	Set the parent expression
9056	Return the parent expression .
9057	Add an operator to the expression .
9058	Add an element to the fragment .
9059	Create an AND expression .
9060	Create an or expression .
9061	Log a function .
9062	Parse a received message .
9063	Convert a list of tuples into a dictionary .
9064	Check a list of messages for a specific command .
9065	Prepare the send message .
9066	Flush all incomming messages .
9067	Enable a slide .
9068	Save a template to a file .
9069	Load a template .
9070	Get information about the device .
9071	Increment a file .
9072	Locate the package . json file .
9073	Parse package . json .
9074	Handle API errors .
9075	Validate the response from yourls .
9076	Homogenize two waves .
9077	Interpolate the indep vector .
9078	Get the indep vector of two waveforms .
9079	Verify waveforms are compatible .
9080	Load the systemjs manifest
9081	Create a namedtuple containing the parameters of a module .
9082	Run a trace .
9083	Shorten a URL .
9084	Expand a short url
9085	Get short url stats .
9086	Get stats from the database .
9087	Get database statistics .
9088	Execute a shell command .
9089	Echo a command to the terminal .
9090	Log a message .
9091	Cache the result of a method .
9092	Split an iterable into chunks of size chunksize .
9093	Decorator for chunk processing .
9094	Flatten an iterable .
9095	Interrupt the current process .
9096	Print a table .
9097	Create a dummy class .
9098	Return an instance from a human readable string .
9099	YoURLS API client .
9100	Trace a waveform module .
9101	Print dependency links .
9102	Make a common entry .
9103	Make a multi - entry plist .
9104	Convert a string of comparison operators into a string of words .
9105	Chunk noise data .
9106	Convert a frequency vector and data matrix into a numpy array .
9107	Write touchstone data .
9108	Bound a waveform to a given interval .
9109	Build the units to be used for the given operation .
9110	Return a copy of the wave with a new dep_name .
9111	Calculate the running area of the graph .
9112	Validate indep_min and indep_max .
9113	Calculate the arccosine of a wave .
9114	Compute the arccosh of a wave .
9115	Compute the arcsine of a wave .
9116	Calculate the arctanh of a wave .
9117	Average a waveform .
9118	Convert wave to dB .
9119	r Derivative of a waveform .
9120	Compute the imaginary part of a waveform .
9121	Compute the absolute magnitude of a waveform .
9122	Apply FFT to wave .
9123	Compute the Fourier transform of a signal .
9124	Return the number of points in a wave .
9125	Inverse of ifft .
9126	Compute the absolute value of a wavefunction .
9127	Ifft wave .
9128	Inverse of ifft .
9129	Create an integral waveform .
9130	Group delays .
9131	Logarithm of the input wave .
9132	Naverage a waveform .
9133	Compute the integral of a waveform .
9134	Return the maximum value of a waveform .
9135	Return the minimum value of a waveform .
9136	Phase a waveform .
9137	Round a wave to a number of decimals .
9138	Calculate the square root of a wave .
9139	Sub - waveform waveform .
9140	Convert a complex waveform into a real waveform .
9141	Convert wave to float .
9142	Convert a wave to an integer .
9143	Return the value of a wave s independent variable .
9144	Return a list of packages to serve .
9145	Get short description from long description .
9146	Build an expression from a list of tokens .
9147	Find the next rdelim .
9148	Get a list of functions from a string .
9149	Pair remaining delimiters .
9150	Parse an expression .
9151	Remove consecutive delimiters from expression .
9152	Split a string into a list of joints .
9153	Convert number to engineering notation .
9154	Convert a number to a scientific notation .
9155	Return a string representation of a number .
9156	Convert a string to a float .
9157	Return the fractional part of a number .
9158	Convert a string to a float .
9159	Convert a Peng number to an EngPower object .
9160	Return the power of a suffix .
9161	Remove extra delimiters from an expression .
9162	Convert a number to a scientific notation .
9163	Convert a number to a scientific tuple .
9164	Find the sourcemap comment for a file .
9165	Returns True if the extension needs to be added .
9166	Run the bundle command
9167	Run trace - deps on app .
9168	Return True if the hashes of the dependencies are the same .
9169	Format a hexdump .
9170	Parse a docstring .
9171	Return a list of valid identifiers .
9172	Attempt to import an object from a module .
9173	Split a line into parts .
9174	Check if we need to initialize the context
9175	Handle builtin help
9176	Find a function in a context .
9177	Return a list of all defined functions .
9178	Check if arg is a flag .
9179	Process arguments .
9180	Extract a value from the remaining arguments .
9181	Invoke a function .
9182	Invoke one line of code .
9183	Invoke a string .
9184	Parse a parameter declaration .
9185	Parse a return line .
9186	Classify a section .
9187	Classify a line .
9188	Join a list of lines into paragraphs .
9189	Wrap the maindoc and format the output .
9190	Convert a value to a type .
9191	Convert a binary value to the given type .
9192	Get the size of a type
9193	Format a value to a type .
9194	Validate a type .
9195	Check if a type is known .
9196	Split a typename into a base type and a list of subtypes .
9197	Instantiate a complex type .
9198	Get a type by name .
9199	Returns True if the given type has the given format .
9200	Inject a type into the registry .
9201	Load types from a module .
9202	Returns True if the spec is filled .
9203	Add a new parameter .
9204	Set the return value of the function .
9205	Custom return value .
9206	Match a short - name full parameter name .
9207	Get the type of a parameter .
9208	Returns the signature of the function .
9209	Format a return value .
9210	Convert a positional argument .
9211	Check the specification of a function .
9212	Convert an argument to a type .
9213	Format error message .
9214	Return a dictionary representation of the exception .
9215	Check and execute a function .
9216	Parse a list of valid validators .
9217	Find all objects in a container .
9218	Get the name and context from a module .
9219	Get the help text for a function .
9220	Decorator to add a parameter to a function .
9221	Registers a function as a return type .
9222	Register a function as a return type .
9223	Mark a class as context .
9224	Decorator to annotate a function .
9225	Mark a function as annotated .
9226	Get the short description of a function .
9227	Load cron module .
9228	Install cron jobs .
9229	Print the crontab .
9230	Uninstall cron breadcrumb .
9231	Create a handler for the given uri .
9232	Load project configs from directory .
9233	Save projects config
9234	Define a singleton property .
9235	Get all projects that depend on this project .
9236	Post - process a function .
9237	Initialize the project .
9238	Set the value of a key .
9239	Set an attribute .
9240	Create an instance from an iterable .
9241	Set the value of a state .
9242	Set multiple values in a state .
9243	Return a modifier function that can be applied to a state .
9244	Collect a number of arguments into a tuple .
9245	Raise an exception if the function is not implemented .
9246	Apply f to pure .
9247	View the current fold .
9248	Return a list of Folds .
9249	Apply a function over the set .
9250	Set the value of a Setter .
9251	Iterate over an iterable .
9252	Return the kind of the object .
9253	Main function .
9254	Return a copy of this vector that is a step towards other .
9255	Handle input .
9256	Move robots towards the player .
9257	End the game .
9258	Enter move .
9259	Play the game .
9260	Make a move .
9261	The winner of the scenario .
9262	Yields all possible wins .
9263	Process a single item .
9264	Open a new spider
9265	Upload a chunk to S3 .
9266	Returns a file - like object .
9267	This interface is used to get the current state of an account .
9268	Get the current state of an asset .
9269	Get the block with the given hash .
9270	Get the hash of the block at block_index .
9271	Get the system fee for a block .
9272	Get the state of the contract with the given script hash .
9273	Get raw transaction .
9274	Get the value of a storage key .
9275	This interface is used to get the output of a transaction .
9276	Invoke a contract .
9277	Invoke a function .
9278	Invoke a script .
9279	Send a raw transaction .
9280	Validate an address .
9281	Call a JSON - RPC method .
9282	Check if a string is a valid hash256 value .
9283	Check if a string is a valid hash160
9284	Encodes a list of parameters into a list of dictionaries .
9285	Decode an invocation result .
9286	Decorator to specify the first keyword only argument .
9287	Apply a transformation to a datetime with a timezone .
9288	Apply the query to a timezone .
9289	Render and save to file .
9290	Render the barcode .
9291	Calculate checksum .
9292	Render code .
9293	Connect to the KVS server .
9294	Main entry point for the CLI .
9295	Download a file from S3 .
9296	Upload a file to S3 .
9297	Downsync a S3 bucket .
9298	Diff S3 configuration .
9299	Parse an environment variable value .
9300	Set basic auth credentials .
9301	Set API key .
9302	Get json content from folder .
9303	Get all available schemas .
9304	Return the schema as a dict .
9305	Return a jsonschema . RefResolver for the current schema .
9306	Validate an object against the schema .
9307	Return a list of valid examples .
9308	Return a list of invalid examples .
9309	Get the auth url for the user .
9310	Process url and return auth code .
9311	Get auth token .
9312	Get user id .
9313	List files in a folder .
9314	Create a folder .
9315	Add a comment to an object .
9316	Decode an object .
9317	Set drop target .
9318	Start a drag operation
9319	Set default TTL .
9320	Inspect an object .
9321	Return a shell object .
9322	Make sure the font name is correct .
9323	Load a page .
9324	Get a parameter from a tag .
9325	Send a message to the user .
9326	Create a custom tool tip window
9327	mouse down event handler
9328	Move the mouse cursor .
9329	resize event handler
9330	key press event handler
9331	Delete selected objects
9332	Duplicate selected objects
9333	Refresh the image .
9334	Calculate best position .
9335	Retrieves the data for the given item .
9336	Sets the data for the given item .
9337	Search for a wxdata .
9338	Delete an item from the clipboard .
9339	Delete all items .
9340	Clear all columns .
9341	Sets the selection of the item
9342	Get string selection
9343	Set client data .
9344	Append a string to the container .
9345	Return a string representation of an object .
9346	Get a GUI object
9347	Create a copy of this object .
9348	Add a child to the sizer
9349	set parent widget
9350	Draws the tile background
9351	Background erase event handler
9352	paint event handler
9353	Find modules in a directory .
9354	Return a list of column headings .
9355	Resets the view .
9356	Update the values of the grid table .
9357	Update column attributes .
9358	Sorts a column .
9359	clear the grid
9360	Create a combobox
9361	Begins editing .
9362	Ends editing this cell
9363	Returns True if the key is accepted False otherwise .
9364	Starting key event handler
9365	Register a type handler .
9366	Enables this item .
9367	Checks if the menu item is enabled .
9368	Enables all menus .
9369	Check if the menu is enabled .
9370	Removes a menu from the system .
9371	Submit the form .
9372	Set the object s attributes .
9373	Convert HTML tables to plain text .
9374	Get the documenter class for an object .
9375	Mangles a signature .
9376	Import a module by name .
9377	Create an object link role .
9378	Display an alert message .
9379	Prompt user to enter text .
9380	Select a font
9381	Open a color dialog .
9382	Open a directory dialog .
9383	Open a dialog to search for words .
9384	Sets whether the item has children .
9385	Set the icon .
9386	Show the window .
9387	Parse a resource file .
9388	save rsrc to file
9389	Build a window from a dict .
9390	Build a component from a resource specification .
9391	Connect a component to a controller .
9392	Convert property name to python property name .
9393	Set clipboard data
9394	Find a docstring in a module .
9395	Load an application .
9396	Inspect an object .
9397	Activate a child item
9398	update the name of the object
9399	show context menu
9400	Return a representation of the image .
9401	Define an expression filter .
9402	Add a node filter .
9403	Assert that the path resolves to the current document .
9404	Assert that there is no current path .
9405	Assert that the current path exists .
9406	Assert that the path does not exist .
9407	Select a single option .
9408	Apply the filter .
9409	Get a webdriver object .
9410	Return the XPath representation of the expression .
9411	Check if the node matches the filters
9412	Switch to a frame .
9413	Accept an alert .
9414	Accept a modal dialog .
9415	Display a confirm dialog .
9416	Accept a prompt .
9417	Dismiss a prompt .
9418	Save the page to a file .
9419	Save a screenshot .
9420	Raise server error .
9421	Check if this filter matches the given value .
9422	Check if a field is checked .
9423	Check if element has no checked field .
9424	Check if a field is unchecked .
9425	Check if element has no unchecked field .
9426	Assert a text query .
9427	Assert that the query results in no text .
9428	Assert that the title matches the expected title .
9429	Assert that the title does not exist .
9430	Assert that the page has the given title .
9431	Assert that the page has no title .
9432	Find all matching elements .
9433	Find the first item in the collection .
9434	Get the inner content of a node .
9435	Get the inner text of a node .
9436	Normalize a URL .
9437	Create a setter decorator .
9438	Synchronization decorator .
9439	Check if the error should be caught .
9440	Compare the number of results returned by the query .
9441	Cache at least size results .
9442	Checks if the given options are not None .
9443	Create a failure message
9444	Check if the given count matches the given options .
9445	Normalize text .
9446	Normalize whitespace .
9447	Convert text to a regular expression .
9448	Check if the actual path matches the expected path .
9449	Resize the window .
9450	Start the server .
9451	Sets the getter function for this property .
9452	Setter for instance method .
9453	Sets the class method .
9454	Get full traceback .
9455	Get object source .
9456	Get the logger for an instance .
9457	Setter for logger .
9458	Call the API .
9459	List of channels .
9460	List all users .
9461	Make a message .
9462	Translate user and channel names .
9463	Send a slack message
9464	Read a channel .
9465	Run the client .
9466	Run the client .
9467	Diff two dictionaries .
9468	Colorize a message .
9469	Called when a task is started .
9470	Called when a task is successful .
9471	Print stats from v2 playbook .
9472	Called when a task is skipped .
9473	Convert a prefix to an addrmask .
9474	Check if value is empty .
9475	Add a model .
9476	Return a dictionary of all values in the container .
9477	Load a dictionary .
9478	Convert to a dictionary .
9479	Parse config file .
9480	Parse the state of the device .
9481	Translate a configuration file .
9482	Load all Jinja2 filters
9483	Find yang file .
9484	Convert a model to a dictionary .
9485	Return the differences between f and s .
9486	Perform an HTTP POST request .
9487	Returns the Authorization Code URL .
9488	Get access token .
9489	Extract query parameters from a URL .
9490	Dequery a URL .
9491	Build a URL from a base URL .
9492	Handle an exception .
9493	Create a response object .
9494	Make a redirect error response .
9495	Make a JSON response .
9496	Get authorization code .
9497	Refresh a refresh token .
9498	Get access token .
9499	Get an authorization code from a URI .
9500	Get token from POST data .
9501	Get the authorization header .
9502	Open the i2c bus .
9503	Read a single byte from the bus .
9504	Read number of bytes from address .
9505	Read a single byte from the bus .
9506	Write bytes to the bus .
9507	Write a byte to the bus .
9508	Write an I2C block of data to the bus .
9509	Return the cdn url for this asset .
9510	Create a copy of the file .
9511	Create a local copy of a file .
9512	Create a remote copy of a file .
9513	Construct a file from a dict .
9514	Upload a file .
9515	Upload a file from a URL .
9516	Upload file from url .
9517	Returns a list of cdn urls for all files in the group .
9518	Construct a group from a group info dict .
9519	Create a new group .
9520	Base opration method .
9521	Iterate over all the UUIDs in the sequence .
9522	Handles the list subcommand
9523	Print a progress bar .
9524	Make an uploading request .
9525	Get the status of Home Mode .
9526	Get a list of available cameras .
9527	Get camera information .
9528	Get a snapshot of a camera .
9529	Disable a camera .
9530	Get the motion setting for a camera .
9531	Save a camera parameter .
9532	Update the motion settings .
9533	Check if li is the last li .
9534	Iterate through a single list node .
9535	Get the value of the ilvl element .
9536	Get the vMerge element .
9537	Get the span of the grid .
9538	Get the td at the given index .
9539	Return True if style is False .
9540	r Check if a string is a bold style .
9541	\ Returns if the element is italic .
9542	r Check if the element is underlined .
9543	Return True if p is a title .
9544	Get text run content data .
9545	Get relationship info .
9546	Get the document data .
9547	Get ordered list type .
9548	Build a list .
9549	Build a tr element .
9550	Build a table element .
9551	Get the content of a T tag .
9552	Strip a tag from the tree .
9553	Find a dataset by url .
9554	Load MNIST dataset .
9555	Load cifar10 data .
9556	Plot multiple images at once .
9557	Plot the layers .
9558	Plot the filters .
9559	Generate batches of data .
9560	Encode a list of characters .
9561	Generate batches of examples .
9562	Predict a sequence of sequences .
9563	Add weights to the filter .
9564	Encodes x .
9565	Decodes a tensor .
9566	Find the output of a layer .
9567	Compute autoencoder score .
9568	Predict label for x .
9569	Predict the predicted value of the last layer .
9570	Predict logit for x .
9571	Compute the score of the model .
9572	Create a batch of features and labels .
9573	Generate random batches of data .
9574	Load a network from a file .
9575	Generate a random matrix .
9576	Generate a random vector .
9577	Find all outputs that match a pattern .
9578	Given a list of layers and a list of patterns return a list of matching parameters .
9579	Create regularizers from keyword arguments .
9580	Returns a list of variables .
9581	Compute the accuracy .
9582	Perform a scan .
9583	Build an Activation .
9584	Reservoir function .
9585	Set the loss .
9586	Iteratively train a dataset .
9587	Train the model .
9588	Return a hash of the graph .
9589	Build the computation graph .
9590	List of input layers .
9591	Returns a list of variables in the model .
9592	Find the layer with the given param .
9593	Run the feed forward computation .
9594	Predict the output of the last layer .
9595	Compute the score of the model .
9596	Save the model to a file .
9597	Load a model from a pickle file .
9598	Calculate the loss .
9599	Return a list of updates in the graph .
9600	The size of the output layer .
9601	Connect inputs to outputs .
9602	Bind to the graph .
9603	Resolve input shapes .
9604	Resolve output shapes .
9605	Log the current state of the layer .
9606	Log the number of parameters .
9607	Format a string .
9608	Resolve the shape of a layer .
9609	Find a parameter by name .
9610	Add a bias to the model .
9611	Return a dict representation of the form .
9612	r Compute the loggabor energy .
9613	Loggabor image .
9614	Add a tier .
9615	Remove a tier by name .
9616	Get a tier by name .
9617	Convert to ELAN .
9618	Add a point to the tier .
9619	Add an interval .
9620	Remove an interval .
9621	Remove a point from the tier .
9622	Returns an iterator over the intervals in the file .
9623	Return a list of all intervals in the tree .
9624	Indent an element .
9625	Add an annotation to a tier .
9626	Add a new entry to the controlled vocabulary .
9627	Add a description to a controlled vocabulary .
9628	Add an external reference .
9629	Add a language .
9630	Add a lexicon reference .
9631	Add a linguistic type .
9632	Add a linked media descriptor .
9633	Add a locale .
9634	Add a secondary linked file descriptor .
9635	Add a tier .
9636	Remove all slots from timeslots .
9637	Extract the annotations from this EAF .
9638	Generate an annotation id .
9639	Generate a unique timestamp .
9640	Returns a list of child tiers for the given id_tier
9641	Get the full time interval .
9642	Get the annotation data after time .
9643	Get annotation data before time .
9644	Returns a list of tier ids for a given lingual type .
9645	Merge multiple tiers .
9646	Remove all annotations from a tier .
9647	Remove a description from a controlled vocabulary .
9648	Remove a license .
9649	Remove linked files .
9650	Remove a property .
9651	Remove a reference annotation .
9652	Remove secondary linked files .
9653	Remove a tier .
9654	Remove tiers from the simulation .
9655	Rename a tier .
9656	Shift the annotations by time .
9657	Entry point for the algorithm .
9658	Writes the storage to stderr .
9659	Get base level of text .
9660	Get embedding levels .
9661	Return a list of embedding levels .
9662	Calculate the runs for a given level .
9663	Resolve weak types .
9664	Resolve neutral types .
9665	Reverse a contiguous sequence .
9666	Reorders resolved levels .
9667	Process the current file .
9668	Convert a list of lines into a list of strings .
9669	Add an attribute to an object .
9670	Qt command line interface .
9671	Maintain backwards compatibility .
9672	Show the current window .
9673	Discover the current GUI .
9674	Deregister host .
9675	Add an entry to the filemenu .
9676	Context manager to temporarily change the current selection .
9677	Context manager to temporarily change the current time .
9678	Show a message box with no GUI .
9679	Load types .
9680	Get cumulative data .
9681	Get the values for a single axis .
9682	Draw a constant line .
9683	Load transform parameters .
9684	Reverse a mapping .
9685	Generate a range of floats .
9686	Add data to the list .
9687	Add filter definitions .
9688	Add data to the configuration .
9689	Burn the chart .
9690	Calculate left margin .
9691	Calculate right margin .
9692	Calculate top margin .
9693	Add a popup .
9694	Calculate bottom margin .
9695	Draw the graph .
9696	Make the datapoint text .
9697	Draw x - axis labels .
9698	Draw y - axis labels .
9699	Draw x - axis guidelines .
9700	Draw y - axis guidelines .
9701	Draw the graph title .
9702	Render inline styles .
9703	Create SVG element .
9704	Return a list of all stylesheet resources .
9705	Run a bot .
9706	Send data to the socket .
9707	Connect to the server .
9708	Respond to a PRIVMSG command .
9709	Dispatch patterns .
9710	Create a new nick .
9711	Handle a PING command .
9712	Called when the client is listening .
9713	Enter event loop .
9714	Register with the boss .
9715	Main task runner .
9716	Require the bot to be a boss .
9717	Command patterns .
9718	Called when a user has successfully registered .
9719	Execute a task .
9720	Add a nick to the queue .
9721	Send validation email .
9722	Send password reset notification .
9723	Validate password strength .
9724	Verify a token .
9725	Delete the user .
9726	Only allow POST requests .
9727	Get a thread pool executor .
9728	Return a docker client .
9729	Return tls_cert and tls_key
9730	Return the service name .
9731	Call a docker method .
9732	Call a docker method .
9733	Poll Docker for tasks .
9734	Stop the Docker service .
9735	Filter queryset .
9736	Update a user s password .
9737	Update a user s password .
9738	Validate an email address .
9739	Create a new token .
9740	Delete a token .
9741	Check that the user is logged in and that the email is the same as the user s email .
9742	Send confirmation email .
9743	Update the expiration date of the object .
9744	Return the context for a password reset email notification .
9745	Send email notification .
9746	Handle password reset email notification .
9747	Handle email validation .
9748	Authenticate a user with a token .
9749	Check if the token has expired .
9750	Show a notebook .
9751	Process hv plots .
9752	Returns a CustomJS callback for the given change and p_name .
9753	Returns the widget with the given name .
9754	Render an object as a Bokeh plot .
9755	Create a TextInput widget .
9756	Return a list of named objects .
9757	Get the owner of a method .
9758	Assigns user and password from HTTP Auth credentials .
9759	Ping the server .
9760	Get information about the device .
9761	Get cluster health .
9762	Convert bytes to readable format .
9763	Return total CPU load .
9764	Memory size in bytes .
9765	Get the number of transactions in the network .
9766	Get a list of all volumes
9767	Get a specific volume
9768	Returns the total volume size in bytes .
9769	Returns percentage of used volume .
9770	Returns the average disk temperature for a given volume .
9771	Get the maximum volume disk temperature .
9772	Get a disk .
9773	Login to the API .
9774	Request a url
9775	Execute a GET request .
9776	Update the internal services .
9777	Returns SynoUtilization object
9778	Returns a SynoStorage object
9779	Create a context for a request .
9780	Get the tenant token .
9781	Build the attributes of the widget .
9782	Sets the list of apps to use .
9783	Returns a copy of the current settings with the specified apps removed .
9784	Get the global settings .
9785	Handle GET requests .
9786	Get a value from the config file .
9787	Change a value in the config file
9788	Migrate config file .
9789	Start the web server .
9790	Wait for the server to respond .
9791	Get new access information .
9792	Check if token is present .
9793	Set access credentials .
9794	Refresh OAuth2 token .
9795	Create a DynamoDB manifest table .
9796	Split path into bucket and prefix .
9797	Check if a bucket is Glacier .
9798	Extract the run id from a key .
9799	Clean a dictionary .
9800	Add run_id to manifest .
9801	Check if run_id is in manifest .
9802	Extract schema information from URI .
9803	Fix the schema name .
9804	Parse context data .
9805	Parse an unstructured event .
9806	Transform event line into JSON .
9807	Convert event to JSON .
9808	Get the template used in the response .
9809	Print the context .
9810	Print the list of variables in the context .
9811	Pretty - format a SQL query .
9812	Pretty print a Django context object .
9813	Pretty print a dictionary summary .
9814	Style text .
9815	Format an object .
9816	Format an object .
9817	Get a token from a string .
9818	Get a list of latex nodes from a string .
9819	Convert latex content to text .
9820	Set the tex input directory .
9821	Read an input file .
9822	Convert a latex string to text .
9823	Convert a string to a unicode string .
9824	Unescape a string .
9825	Get organisation information .
9826	Get a list of boards .
9827	Get a list of members .
9828	Update an organisation .
9829	Removes a member from the group .
9830	Add a member to a group .
9831	Add a new member to the group .
9832	Get a list of resources .
9833	Add a new card .
9834	Get label information .
9835	Returns a list of items .
9836	Update a label
9837	Update a label .
9838	Get the authorisation URL .
9839	Get card information .
9840	Get a single board .
9841	Get a list of resources .
9842	Get a list of checklists .
9843	Add a comment .
9844	Add an attachment to your account .
9845	Add a new checklist .
9846	Add a label to the dataset .
9847	Add a label from a class .
9848	Add a member to the group .
9849	Get information about the members of the group .
9850	Get a list of cards .
9851	Get all organisations
9852	Create a new board .
9853	Decorator to dispatch a method .
9854	Returns information about the board .
9855	Get a list of lists .
9856	Get all labels
9857	Get a single card .
9858	Get a list of checklists .
9859	Get a single organisation
9860	Update a board .
9861	Add a new list .
9862	Add a new label .
9863	Get checklist information .
9864	Get a single card .
9865	Returns a list of ChecklistItem objects for this Checklist .
9866	Update a checklist .
9867	Add a new item to this collection .
9868	Remove a check item .
9869	Update a checklist item name .
9870	Update the state of the checklist .
9871	Add an authorisation token to the query parameters .
9872	Check for errors .
9873	Build a Trello URL .
9874	Fetch a JSON object from the server .
9875	Create an organisation .
9876	Create a new board .
9877	Create a label .
9878	Create a new list .
9879	Create a new card .
9880	Create a new checklist .
9881	Create a new member .
9882	Get an organisation .
9883	Get a board .
9884	Get a list .
9885	Get a card .
9886	Get a checklist .
9887	Get a single member
9888	Extract domain from URL .
9889	Convert text to markuples .
9890	Convert text to raw text .
9891	Convert text to raw text pairs .
9892	Set a user s password
9893	Split text with locations .
9894	Mark a regex as should be split .
9895	Mark the beginning and end of a regex as should be split .
9896	Main function .
9897	Create the AES cipher .
9898	Get cipher mode .
9899	Return the priority of the algorithm .
9900	Check the scheme .
9901	Called when a publish message is received .
9902	Make a unique id .
9903	Connect to the broker .
9904	Handle a CONNACK packet .
9905	Encode a string .
9906	Decode a string .
9907	Encode a 16 - bit integer to a byte array .
9908	Encode a length value .
9909	Decode length .
9910	Encode the packet header .
9911	Encode the packet .
9912	Decode a packet .
9913	Encodes the session into a string .
9914	Decode packet .
9915	Decode a packet .
9916	Encode the message .
9917	Encodes the message .
9918	Decode a single packet .
9919	Encodes the message header .
9920	Encode the message .
9921	Decode packet .
9922	Decode a packet .
9923	Get the URL for the API call .
9924	Make a request to the API .
9925	Refresh the list of blocks .
9926	Format the data .
9927	Fit data and return transformed data .
9928	Fit k - means clustering .
9929	Fit MeanShift to data .
9930	Fit the classifier .
9931	Predict clusters from data .
9932	Map clusters .
9933	Sort clusters according to their contents .
9934	Get a date from a datetime string .
9935	Get the total number of points in a dictionary .
9936	Get the total time span of a dictionary .
9937	Display a unit picker .
9938	Return a pretty representation of a string .
9939	Convert analyte string to name mass
9940	Convert analyte string to mass name .
9941	Collate data from a directory .
9942	Enumerates a boolean array .
9943	Convert a list of tuples into a boolean array .
9944	Smooth an array .
9945	Fast gradient computation .
9946	Find minima in x y .
9947	Cluster data using meanshift .
9948	Cluster data using KMeans .
9949	Cluster data using DBSCAN .
9950	Get all defined SRMs .
9951	Read the configuration file .
9952	Read latools . cfg file
9953	Print all configuration files .
9954	Copy the SRM file to a new location .
9955	Create a config file .
9956	Change the default configuration .
9957	Exclude downholes .
9958	Defragment a boolean array .
9959	Despike the signal .
9960	Plot the autorange plot .
9961	Create a list of numpy arrays with the number of traces .
9962	Calculate ratio of analytes .
9963	Calibrate the model .
9964	Sample stats from analytes .
9965	Return a dictionary of ablation times .
9966	Filter analyte with threshold
9967	Filter a single analyte with a threshold .
9968	Calculate correlation .
9969	Calculate correlation filter .
9970	Add a new filter
9971	Get the parameters of the filter .
9972	Plot histograms .
9973	Compute summary statistics .
9974	Load reference data .
9975	Looks up the type for the given type and G .
9976	Get atomic weight .
9977	Calculate the atomic mass from a molecule .
9978	Generate a namedtuple containing keyword arguments .
9979	An annihilate operation .
9980	Deduplicates a stack .
9981	Calculate gaussian weighted stats .
9982	Gaussian distribution .
9983	Compute the stderr of an array .
9984	Return a list of samples .
9985	Despike the data .
9986	Calculate the weighted mean of the background .
9987	Calculate a 1D interpolation of the background .
9988	Perform background subtraction .
9989	Calculate ratios for each stage .
9990	Make a subset of the analysis .
9991	Filter a set of samples using a percentile threshold .
9992	Fit a classifier .
9993	Apply classifier .
9994	Filter correlations .
9995	Apply a filter to a set of samples .
9996	Apply a filter to a set of samples .
9997	Return the filter status .
9998	Apply a defragment filter .
9999	Filter the N removed samples .
10000	Plot a histogram of gradients .
10001	Plot a gradient crossplot .
10002	Plot a series of histograms .
10003	Create plots of analyses .
10004	Plot the gradient of the analysis .
10005	Filter a set of samples .
10006	Sample stats .
10007	Get statistics for all samples .
10008	Export a minimal reproduction dataset .
10009	Export traces to a file .
10010	Save the analysis log .
10011	Export minimal reproduction dataset .
10012	Split a file using a regular expression .
10013	Apply f to z and then fold the result .
10014	Plot PCA components .
10015	Return the bayes scale of s .
10016	Return the median of a signal .
10017	Despike a signal .
10018	Despike a signal .
10019	Add a component .
10020	Remove a set or index .
10021	Clear all data .
10022	Remove unused components .
10023	Return the key that matches the fuzzkey .
10024	Make a boolean array from a key .
10025	Grab an individual filter .
10026	Return a string representation of the components .
10027	Log a function call .
10028	Write a log file .
10029	Read a log file .
10030	Wrap a function with timeout .
10031	Get information .
10032	Send a message .
10033	Parse a file - like object .
10034	Return a link to a notebook URL .
10035	Return the thumbnail div for this snippet .
10036	Return the code div for this snippet .
10037	Code example .
10038	Return the URL of the image .
10039	Get the output file name .
10040	Process a notebook file .
10041	Create a Python file with nb .
10042	Return the data download header .
10043	Create a thumbnail image .
10044	Get the description from the header .
10045	Resize an image
10046	Save image to thumb directory
10047	Copy the thumbnail figure
10048	Get url for nbfile
10049	Given a field name and a list of db table fields return a list of language codes .
10050	Return the default value for a field .
10051	Process a thumbnail file .
10052	Pre - save the file .
10053	Refresh the cache of thumbnails .
10054	Get all thumbnails .
10055	Create a thumbnail .
10056	Delete a thumbnail .
10057	Create a thumbnail .
10058	Get a thumbnail .
10059	Delete a thumbnail .
10060	Receive a message .
10061	Subscribe to a number of events .
10062	Return a set of accepted delivered and error states .
10063	Register a provider .
10064	Send a message .
10065	Create a receiver blueprint .
10066	Return the receiver blueprints .
10067	Receive a message .
10068	Called when a status is received .
10069	Decorate a function to return a JSON response .
10070	Forward an object .
10071	Sign a web3 transaction .
10072	Estimate the gas of a transaction .
10073	Estimate transaction gas .
10074	Write to the output buffer .
10075	Read a line from the serial port .
10076	Send a message .
10077	Return the message as a string .
10078	Check if the message has bad headers .
10079	Attach an attachment .
10080	Register multiple services .
10081	Create a Config object from a module .
10082	Register a set of resources .
10083	Return the value of key or raise ValueError .
10084	Handles exceptions raised by resources .
10085	Setup the data manager .
10086	Return the number of non - zero bands in a given wavelength .
10087	Calculate the cauchy equation .
10088	Initialize the authentication process .
10089	Login to the backend .
10090	Get domains .
10091	Get all elements .
10092	Patch an object .
10093	Delete an endpoint .
10094	Check if two paths are on the same volume .
10095	Create a directory .
10096	Initialize the logger .
10097	Raise an error .
10098	Claim a set of VCF readers .
10099	Create a new column header based on the MuTect metaheader .
10100	Claim a set of VCFs .
10101	Initialize population stats .
10102	Claim a set of unclaimed file readers .
10103	Split data into lines .
10104	Return the prefix line terminator for the given data .
10105	Return suffix line terminator .
10106	Seek to the next line .
10107	Seek to the previous line .
10108	Return the last lines of the file .
10109	Read the head of the file .
10110	Read lines from the file .
10111	Claim VCFs from file_readers .
10112	Parse a VCF record .
10113	Create a dictionary of sample tag values .
10114	Return a set of tags for this VCF record .
10115	Joins the info field .
10116	Return the format field to use for the field name .
10117	Returns the field name for a given sample .
10118	Return a string representation of the VCF .
10119	Add a sample tag value .
10120	Add or replace a filter .
10121	Return a list of available categories .
10122	Returns a subclass of _ProductsForm .
10123	Create a staff products form .
10124	Add a product error
10125	Memoize a function .
10126	Form factory for model fields .
10127	List of items pending or purchased .
10128	Send an email .
10129	Iterator over OSM stream .
10130	Parse an OSM file .
10131	Iterate over Osm notes .
10132	Returns True if the condition passes the filter .
10133	Check if the filter passes .
10134	Returns the quantity remaining for the given user .
10135	Filter the queryset to only include products that are in the user s cart .
10136	Filter the queryset to only include products that have been paid or active .
10137	Pre - filter the queryset .
10138	Filter proposals by user .
10139	Pre - filter conditions .
10140	Decorator for methods that modify the cart .
10141	Return a cart for the given user .
10142	Automatically extend the reservation duration .
10143	Apply a voucher to the cart .
10144	Validate the cart .
10145	Fixes any errors in the cart .
10146	Recalculate discounts .
10147	Add a discount to a product .
10148	Create a report view .
10149	Return an iterator over the rows of the table .
10150	Get the form for this view .
10151	Render the data .
10152	List all reports .
10153	List items sold .
10154	Return a summary of all sales made .
10155	Return all payments .
10156	List of credit note refunds .
10157	List product status .
10158	Display a summary of the discounts .
10159	Return a list of line items for a given product .
10160	Returns a list of invoices paid for the given products .
10161	View credit notes .
10162	List invoices .
10163	List attendees .
10164	Show the number of paid corporations .
10165	Create a manifest for a product .
10166	Return a list of items that are missing categories .
10167	Return the number of credit notes available for this invoice .
10168	Return whether the user has sold out and unregistered .
10169	Guided registration page .
10170	Edit a profile .
10171	Handle profile requests .
10172	List all products in a category .
10173	Handles the products form .
10174	Handles a voucher request .
10175	Checkout an invoice .
10176	Redirect to the invoice with the given access code .
10177	Show an invoice .
10178	Perform a manual payment .
10179	Refund an invoice .
10180	Apply a credit note to an invoice .
10181	Amends the registration form .
10182	Extend a user s reservation .
10183	Returns a list of Email objects .
10184	List badges .
10185	Render a badge .
10186	Returns a list of available discounts for the given user and products .
10187	Annotate the queryset with past uses .
10188	Return a list of products available to the user .
10189	Apply this credit note to an invoice .
10190	Calculate the cancellation fee .
10191	Generate a random access code .
10192	Lazy evaluation decorator .
10193	Get an object from its name .
10194	Return an invoice for the given cart .
10195	Create a manual invoice .
10196	Generate line items from a cart .
10197	Apply credit notes to the invoice .
10198	Check if the user can view the invoice .
10199	Refresh invoice data .
10200	Validate that the invoice is allowed to pay .
10201	Update invoice status .
10202	Mark invoice as paid .
10203	Check if invoice matches cart .
10204	Update the validity of the invoice .
10205	Marks the invoice as void .
10206	Refund the invoice .
10207	Send an email for an invoice .
10208	Update the entity with the given data .
10209	Flatten a single field .
10210	Print downloads
10211	Download a file from the processor .
10212	Get project data .
10213	Get processor objects .
10214	Print processor inputs .
10215	Run data .
10216	Upload a file to a processor .
10217	Upload a file .
10218	Download data from API .
10219	Return all subclasses of c .
10220	Get repo and project .
10221	Get variants with suggested changes .
10222	Get variant phenotypes with suggested changes .
10223	Search variants by coordinates .
10224	Bulk search variants by coordinates .
10225	Update this element .
10226	Uniqify a sequence .
10227	Authenticate to Asana .
10228	Prompt the user to select a value from a list .
10229	Get the data for an issue .
10230	Move data from one namespace to another .
10231	Get saved task data .
10232	Get an Asana task .
10233	Save version to file .
10234	Apply value to key .
10235	Wraps a function to handle retries .
10236	Flush the queue .
10237	Create a task .
10238	Format a list of task numbers with links .
10239	Create a missing task .
10240	Return a list of data types for this project .
10241	Log Ekm Meter Debug Messages
10242	Initialize serial port .
10243	Sets the polling values .
10244	Combines A and B .
10245	Render JSON reads since timestamp .
10246	Set the context
10247	Calculate PPF .
10248	Set maximum demand period
10249	Set the meter password .
10250	Unpack data into a struct
10251	Convert raw data from raw bytes to MeterData .
10252	Render a serial block
10253	Check CRC of a meter .
10254	Split an Ekm date into a named tuple .
10255	Get the months buffer .
10256	Set legal CT ratio
10257	Assign a schedule to the simulation .
10258	Assign a schedule to a season .
10259	Set the season schedules
10260	Assign a holiday date .
10261	Read schedules from device .
10262	Extract a schedule from the file .
10263	Read month tariffs .
10264	Extract the tariff for a month .
10265	Read Holiday Dates
10266	Extract the holiday date from the settings .
10267	Reads the settings .
10268	Write a command message .
10269	Send a password request to the device .
10270	Update all observers .
10271	Initialize LCD lookup .
10272	Send a request .
10273	Request A .
10274	Make a request to the meter .
10275	Make A and B fields .
10276	Calculate the power factor fields .
10277	Set the LCD display list
10278	Set the relay duration .
10279	Send termination string to serial port .
10280	This method is used to set the input ratio of a pulse .
10281	Set the zero resettable KWH .
10282	Set the LCD password .
10283	Iterate over fields .
10284	Iterate over a schema .
10285	Generate paragraphs .
10286	Generate random text .
10287	Print timing statistics .
10288	Colorize text .
10289	Show the given text .
10290	Return a summary of the result .
10291	Parse command line arguments .
10292	Setup ivoire .
10293	Run the example .
10294	Run the runner .
10295	Transform a describe node .
10296	Transform a describe body .
10297	Transform an example node .
10298	Transform the body of an example body .
10299	Return a function that takes only the self argument .
10300	Register path hook .
10301	Convert source code to python code .
10302	Apply arguments parser .
10303	Load a module by name .
10304	Load a module from a path .
10305	Discover all files in a directory .
10306	Return a checker function for a given location .
10307	Return a function that receives a file path and a receiver .
10308	Add a file to the config .
10309	Remove a file from a place .
10310	Send a RESTART message .
10311	Call function with results .
10312	Get a process monitor .
10313	Create a procmon service .
10314	Refresh session information .
10315	Remove expired nodes .
10316	Remove a node from the cluster .
10317	Get the last time a node was updated .
10318	Get all nodes .
10319	Refresh the session .
10320	Increment the value of the times_modified key .
10321	Dereference this node .
10322	Return a list of values separated by delimiter .
10323	Check if a path is bad .
10324	Merge two status objects .
10325	Check if a token exists .
10326	Get a value from a token .
10327	Return a constant expression .
10328	Splat a function .
10329	Unsplat a function .
10330	Run a process .
10331	Create a timer service .
10332	Completely parse a reader .
10333	Parse a literal .
10334	Return an optional parser .
10335	Repetition parser .
10336	Represents a parser as a repeated parser .
10337	Repetition 1 separator parser .
10338	Repeated separator parser .
10339	Check the state tree .
10340	Close the connection .
10341	Check if the state is valid .
10342	Add a heart service to the master .
10343	Wrap a service in a multi service .
10344	Freeze a graph from a checkpoint .
10345	Freeze the model .
10346	Save graph only .
10347	Save graph only from checkpoint .
10348	Save weights from checkpoint .
10349	Restore from checkpoint .
10350	Parse the given token .
10351	Render the tag .
10352	Validate tag arguments .
10353	Return the context data for this tag .
10354	Parse a template tag .
10355	Returns the context data for this field .
10356	Convert caffe to tensorflow session .
10357	Freeze a graph .
10358	Save graph only .
10359	Make a list of rows from a sequence .
10360	Group an iterable into n - sized chunks .
10361	Yield every other item from iterable .
10362	Remove duplicates from an iterable .
10363	Return the first element of iterable .
10364	Takewhile an iterable until the predicate returns True .
10365	Partition items into bins .
10366	Return an iterable from an item .
10367	Suppress exceptions .
10368	Returns a list of all duplicates in a list of iterables .
10369	Assert an iterable is ordered .
10370	Swap before and after items on miss .
10371	Partition a dictionary by a key .
10372	Get the first n queues .
10373	Reset the iterator .
10374	Parse as variable .
10375	Decorator to register a template tag .
10376	Get a descendant keychain .
10377	Fetch the sqlite master table .
10378	Iterate over an object .
10379	Parse a selector and return the result .
10380	Parse a selector .
10381	Parse a selector production .
10382	Return the parents of lhs and rhs .
10383	Return the ancestors of lhs and rhs .
10384	Return the siblings of lhs and rhs .
10385	Parse nth - child production .
10386	Return a list of nodes matching the given validators .
10387	Send ICMP ping .
10388	Make a request and return the response body .
10389	Expire the cache .
10390	Set the value of a key .
10391	Get the value of a key .
10392	Return True if k is in the cache .
10393	Checks the chain for validity .
10394	Create a NistBeaconValue object from a JSON string .
10395	Create a NistBeaconValue object from XML .
10396	Minify the response content .
10397	Get the contents of the log file .
10398	Get all rows .
10399	Validate token .
10400	Return a cryptography engine .
10401	Validate token using supported algorithms .
10402	Create a new token .
10403	Returns a counter between a and b .
10404	Calculate a counter between two numbers .
10405	Calculate the average duration .
10406	Setup the outputs from the config .
10407	Setup sources .
10408	Send an event .
10409	Start watching for source changes .
10410	Parse a format string .
10411	Parse a log line .
10412	Validate the expiration date of a form .
10413	Validate the message field .
10414	Verify the access request token .
10415	Return the device name .
10416	Log a warning message .
10417	Connect receivers .
10418	Create a secret link .
10419	Send an email notification that the user has accepted the access request .
10420	Send confirmation notifications .
10421	Send email confirmation email .
10422	Send a reject notification .
10423	Send email notification .
10424	Create a new link .
10425	Validate a token .
10426	Revoke the link .
10427	Create a new request .
10428	Get a request by its receiver .
10429	Confirm the request .
10430	Accept the request .
10431	Reject the request .
10432	Create a secret link .
10433	Generate a SHA512 hash .
10434	Verify a message hash against a signature .
10435	Check if a record has been embargoed .
10436	Access request handler .
10437	Confirm email address .
10438	Return an instance of SSHCommandClientEndpoint .
10439	Reverse a column .
10440	Return the selected option .
10441	Return the items of the query .
10442	Get the version of the package .
10443	Set file version .
10444	Initialize SSH parameters .
10445	Start timer .
10446	Tick the event loop .
10447	List secret links .
10448	Create the client .
10449	Stop the connection .
10450	Empty the queue .
10451	Add events to the queue .
10452	Create a new client .
10453	Create Elasticsearch client
10454	Encode an Event protobuf .
10455	Encode a list of events into a protobuf message .
10456	Decodes a protobuf message .
10457	Send one or more events .
10458	Generate file previews .
10459	Retrieve file previews .
10460	Send a dict to r_q
10461	Main message loop .
10462	Returns True if the timer should be logged .
10463	Respond to a challenge .
10464	Abort the SASL authentication process .
10465	Perform SASL mapping .
10466	Admin footer tag .
10467	Build payment parameters .
10468	Build the payment parameters for registering a credit card .
10469	Pay with an alias .
10470	Get the version string .
10471	Constructs the widget .
10472	Post - construction hook .
10473	Configure shortcuts .
10474	Called when an item is activated .
10475	Called when the user selects an item .
10476	Navigates to the specified item .
10477	Finalizes the options .
10478	Run pyside - rcc .
10479	Run clean command .
10480	Fetch all children of this node .
10481	Refetch all children .
10482	Returns the icon for the item at the given index .
10483	Call a command .
10484	Get the maximum file descriptor .
10485	Close a file descriptor .
10486	Close all open fds .
10487	Redirect stream to target .
10488	Set widget attributes .
10489	Import a module .
10490	Import project modules .
10491	Include a template .
10492	Get a gravatar url for an object .
10493	Get a gravatar image .
10494	Check if path is a valid filesystem location .
10495	Check if the url is a valid s3 location .
10496	Get the absolute path of a template file .
10497	List objects in S3 .
10498	Build the json for the workflow .
10499	Execute the request .
10500	Archive a folder .
10501	Create a directory recursively .
10502	List the files in the archive .
10503	Restore a folder
10504	Create a new API client .
10505	List files in a path .
10506	Download a file .
10507	Check if a path exists .
10508	Get the parent entity .
10509	Create a folder .
10510	Uploads a file to the storage .
10511	Delete a file or folder .
10512	Validate the storage path .
10513	Create a new client .
10514	Create a new entity .
10515	Get entity details .
10516	Set the metadata for an entity .
10517	Get metadata for an entity .
10518	Update metadata for an entity .
10519	Delete metadata for an entity .
10520	List all projects .
10521	Get project details .
10522	Create a new project .
10523	Delete a project .
10524	Create a new folder .
10525	Get details about a folder .
10526	Delete a folder .
10527	Upload a file content .
10528	Copy file content .
10529	Download file content .
10530	Get the signed URL for a file .
10531	Emit a record to the database .
10532	Returns a copy of this request with the specified service and version .
10533	Return a new request with headers added .
10534	Return a new instance with the given parameters .
10535	Add a throw clause to the query
10536	Return a list of field names to display .
10537	Adds a function to the map job .
10538	Run GenotypeGVCFs on a set of gVCF files .
10539	Run Oncotator on a single vcf .
10540	Sort the list .
10541	Return a list of timestamps as datetime objects .
10542	Load export data from folder .
10543	Shift the time series by t .
10544	Return the sum of all values in the table .
10545	Run the rfxcom command .
10546	Create a new user
10547	Parse VN results .
10548	Parse release results .
10549	Parse the production staff results .
10550	Parse character results .
10551	Parse tag results .
10552	Parse user results .
10553	Write multiple files to a tarball .
10554	Forall a list of file paths .
10555	Copy a file to the output directory .
10556	Create spark parameters .
10557	Return a list of docker parameters .
10558	Refresh the metadata .
10559	Run MuTect .
10560	Create the file .
10561	Return a list of streams .
10562	Export the device to a directory .
10563	Search VNDB .
10564	Parse search results .
10565	Add a stream to the query .
10566	Reset the API key .
10567	List all users
10568	Run BWA index for a given reference .
10569	Connect to the database .
10570	Add a stream to the database .
10571	Add a stream to the database .
10572	Insert a datapoint into the cache .
10573	Synchronize the database .
10574	Start syncing .
10575	Stop synchronization .
10576	Download a URL .
10577	Upload a file to S3
10578	List all labels in ontology .
10579	Print the hierarchy of ontologies .
10580	Get mean insert size .
10581	Get the current container ID .
10582	Run star indexing .
10583	Create a new file .
10584	Export the stream to a directory .
10585	Return a Device object for this path .
10586	Get the labels of an ontology
10587	Get the hierarchy of an ontology
10588	Run the Toil wrapper .
10589	Populates an argument parser with config data .
10590	Get the empty config file .
10591	Get the path to the mounted volume .
10592	Add an option to an argument parser .
10593	Create the argument parser .
10594	Create the pipeline command .
10595	Set the connection s authentication .
10596	Handle server response
10597	Ping the server .
10598	Create a new resource .
10599	Update a file .
10600	Perform a DELETE request .
10601	Subscribe to a stream .
10602	Create a new user .
10603	Return a list of devices
10604	Run cutadapt .
10605	Run samtools faidx on the reference
10606	Run samtools index
10607	Mark duplication with sambamba .
10608	Run samblaster on a SAM file .
10609	Use picardtools to mark duplicate reads .
10610	Run picard sort on bam file .
10611	Run BaseRecalibrator .
10612	Run kallisto .
10613	Run rsem on a bam file .
10614	Get affinity for each user .
10615	Send a command to the server .
10616	Subscribe to a stream .
10617	Connect to the websocket .
10618	Reconnect to the websocket .
10619	Resubscribes to all streams
10620	Called when the websocket connection is established .
10621	Called when the websocket closes .
10622	Called when a connection error occurs
10623	Called when a websocket message is received
10624	Ensure websocket ping
10625	Select variants using GATK
10626	Runs GATK Variant Filtration on the input vcf file .
10627	GATK variant recalibration .
10628	Apply variant recalibration .
10629	Combine variants using GATK CombineVariants .
10630	Run quickcheck on a bam file .
10631	Load handlers from a dictionary .
10632	Write configuration to file .
10633	Get the configuration .
10634	Get a term from ontology
10635	Search the ontology .
10636	Suggest an ontology .
10637	Iterate over the descendants of an ontology .
10638	Iterate over the descendants of an ontology .
10639	Iterate over the labels in the ontology .
10640	Iterate over terms in the ontology .
10641	Run fastqc .
10642	Add a stream to the query
10643	Create the application .
10644	Start Spark master container .
10645	Start the worker .
10646	Start the datanode
10647	Stop the worker .
10648	Check the status of the container .
10649	Base tokenizer .
10650	Lookup a zone by name .
10651	Fetch configuration for a zone .
10652	Merge configuration chunks .
10653	Validate a changeset .
10654	Return a list of members with the best fitness score .
10655	Returns the fitness score of the group .
10656	Average cost function value .
10657	Return the median cost function value .
10658	Returns a dictionary of parameters .
10659	Return the members of the group .
10660	Add a new parameter .
10661	Generate a new generation .
10662	Normalizes keys .
10663	Get environment variables .
10664	Wraps a callable so that it throws an exception .
10665	Transform a list of hits into a list of packages .
10666	Transform the result of a query .
10667	Convert an HTML document to XHTML .
10668	Convert an xhtml document to HTML .
10669	Convert a document to a string .
10670	Open a document in a browser .
10671	Drop this node from the tree .
10672	Drop this tag .
10673	Get element by id .
10674	Evaluate a CSS selector expression .
10675	Iterate over all log handlers .
10676	Get counts from environment variables .
10677	Check if we are in a single class
10678	Check if a module is a single module
10679	Validate request parameters .
10680	Ensure that the id parameter is a string .
10681	Decode a file system path .
10682	Escape an iterable of arguments .
10683	Return the codec name for the given encoding .
10684	Detect the encoding of the file .
10685	Returns the remote address of the given forwarded for .
10686	Convert an amount to a Decimal .
10687	Parse data from a string .
10688	Parse an XML file .
10689	Convert a BeautifulSoup tree into a list of elements .
10690	Get the current traceback .
10691	Return a string representation of the exception .
10692	Render a summary .
10693	Generate a plaintext traceback .
10694	Return a list of AnnotatedLines .
10695	Render the source table .
10696	Given an egg_info string and a search_name and a link return the package name and version .
10697	Get the locations of the index URLs .
10698	Find all versions of a project .
10699	Find a requirement .
10700	Sort a list of links .
10701	Get the content type of a URL .
10702	Return a generator of Link objects .
10703	Return whether this link is verifiable .
10704	Find data files for a package .
10705	Exclude files from package data .
10706	Parse a requirements file .
10707	Join lines from an iterator .
10708	Ignore comments .
10709	Compile a marker .
10710	Visit the node .
10711	visit a Attribute node by returning a fresh instance of it
10712	Coerce a string to a number .
10713	Copy the current request context .
10714	Push this context onto the stack .
10715	Pop an app context off the stack .
10716	Return a copy of this instance .
10717	Match the request against the url adapter .
10718	Push the current request context onto the stack .
10719	Make a relative path .
10720	Check if a distribution is editable .
10721	Add a url value preprocessor function .
10722	Add a function to the app s url_default_functions list .
10723	Register an error handler .
10724	Stream data from a generator .
10725	Make a response .
10726	Returns the URL for the given endpoint .
10727	Join a directory and a filename .
10728	Get the root path of an import .
10729	Returns a FileSystemLoader for the jinja template folder .
10730	Print completion script .
10731	Determine the cookie domain to use .
10732	Generate a cache key for a link .
10733	Check if a package is purelib .
10734	Yields the paths of the uninstalled packages .
10735	Check that the wheel is compatible with the given version .
10736	Build a single wheel .
10737	Iterate over the symbols of a code object .
10738	Decorator to ensure fresh rates are available .
10739	Add egg - info files .
10740	Write the delete marker file .
10741	Check if we are running in a virtualenv .
10742	Get user name .
10743	Create a distutils scheme .
10744	Parse Cache - Control headers .
10745	Check if the request has already been cached .
10746	Cache the response .
10747	Update the zipimporter cache .
10748	Load setuptools template file .
10749	Install site . py .
10750	Save paths to file .
10751	Convert a value to another type .
10752	Add a list of filters .
10753	Configure the handler .
10754	Add handlers to a logger .
10755	Common logger configuration .
10756	Execute a file .
10757	Temporarily override the temporary directory .
10758	Get URL and revision .
10759	Get an attribute from an object .
10760	Generate code from source code .
10761	Compile Jinja2 templates .
10762	Get the default cache location .
10763	Find eggs in a zip file .
10764	Find distributions on a path .
10765	Declare a package as a namespace .
10766	Return the mro of cls .
10767	Find the adapter for ob in registry .
10768	Ensure a directory exists .
10769	Iterate over all entry points in a given group .
10770	Return True if this package can be added to dist .
10771	Return the best match for req .
10772	Evaluate a marker .
10773	Evaluate text using markerlib .
10774	Format a log record .
10775	Format a number as a currency .
10776	Parse a number pattern .
10777	Get a decimal quantum .
10778	Get the decimal precision of a number .
10779	Return the scientific notation elements .
10780	Return the total number of seconds since the epoch .
10781	Parse a list of requirements .
10782	Return a patched class .
10783	Check that value is a valid requirement string .
10784	Fetch the build egg .
10785	Roll dice .
10786	Convert an object to a Price class .
10787	Price field .
10788	Validate the request .
10789	Get a method .
10790	Apply method to args .
10791	Return the blueprint module .
10792	Return the blueprint name .
10793	Attach a class to request . files .
10794	Make an abstract dist .
10795	Add a requirement .
10796	Walk through all requirements and call handler for each .
10797	Check whether to skip installation .
10798	Return a list of requirements to install .
10799	Return a list of all namespace packages .
10800	Encodes an object to JSON .
10801	Tokenize a document with an annotation .
10802	Merge two HTML tags .
10803	Copy annotations from src to dest .
10804	Compress a list of tokens .
10805	Serialize a list of tokens into HTML .
10806	Expand a list of tokens .
10807	Locate unbalanced end tags .
10808	Given a list of chunks return a list of tokens .
10809	Flatten an HTML element .
10810	Split text into words .
10811	Return start tag .
10812	Return the end of a tag .
10813	Serialize an HTML fragment .
10814	Fix up ins and del tags .
10815	Extract a constant from code .
10816	Returns the URL of the cache .
10817	Autolink an element .
10818	Kill conditional comments .
10819	Create a document from a string .
10820	Ensure that the return value from the API is valid .
10821	Get a TreeWalker for the given tree type .
10822	Export the repository to the given location .
10823	Get the revision number for the given location .
10824	Decorator to mark a function as a setup method .
10825	The name of the module .
10826	Whether to propagate exceptions .
10827	Find the path to the instance variable .
10828	Update the template context .
10829	Handle HTTP exceptions .
10830	Trap HTTP exceptions .
10831	Handle an exception .
10832	Raises the routing exception .
10833	Full dispatch request .
10834	Make a default OPTIONS response .
10835	Create the URL adapter .
10836	Inject default values for an endpoint .
10837	Yield unique values from iterable .
10838	Handle package requirements .
10839	Convert a Requirement object to a requirements . txt string .
10840	Convert a pkginfo file to metadata .
10841	Return an iterator over all modules in this directory .
10842	Returns a generator that yields TestCase classes .
10843	Return a list of all method names .
10844	Find the basename of a file .
10845	Check if path is a module path .
10846	Return a list of directories and files in basedir .
10847	Return a list of absolute paths to modules .
10848	Dump default arguments .
10849	Load default arguments .
10850	Set multiple keys .
10851	Increment the value of a key .
10852	Serialize an object .
10853	Build a dictionary of editable options .
10854	Populate self . link .
10855	Ensure the source directory exists .
10856	Remove temporary source directory .
10857	Returns a distribution object .
10858	Get the data from the stream .
10859	Get WSGI headers .
10860	Convert an IRI to a URI .
10861	Get the user cache directory .
10862	Get the user data directory .
10863	Return the path to the user s log directory .
10864	Return the path to the user config directory .
10865	Return a list of configuration directories for a given application .
10866	Iterate over all module files .
10867	Restart with a reloader .
10868	Convert a string to text .
10869	Return the path to the CA bundle .
10870	Parse an HTML document .
10871	Parse an HTML document .
10872	Parse an HTML fragment .
10873	Return a list of all transmissions for word .
10874	Convert arguments to tokens .
10875	Bind to the server .
10876	Print the report .
10877	Load bytecode from file .
10878	Return a stylesheet parameter dictionary .
10879	Run a command .
10880	Get the implementation version .
10881	Return a list of distributions for the given location .
10882	Find external links .
10883	Open a local file .
10884	Process a URL .
10885	Return a list of paths that have been removed .
10886	Return a set of directories in sys . path .
10887	Add a package .
10888	Add a directory to the system .
10889	Check if user site is enabled .
10890	Add user - site - packages .
10891	Set quit signal .
10892	Alias mbcs .
10893	Set sys . setdefaultencoding .
10894	Force global eggs after local site packages .
10895	Fix sys . path by adding __classpath__ and __pyclasspath__ .
10896	Wrapper around subprocess . Popen .
10897	Check if pyrex is installed .
10898	Convert . pyx files to . c .
10899	Debug the application .
10900	Return a file resource .
10901	Return the user agent string .
10902	Check if name is a URL .
10903	Unpack a file url .
10904	Download an http url .
10905	Check if a file is already downloaded .
10906	Registers a currency action .
10907	Register an exchange .
10908	Decode the response data .
10909	Default template context processor .
10910	Render a template .
10911	Render a template .
10912	Render a template string .
10913	Parse a version string .
10914	Check if a variable is declared .
10915	Name node .
10916	visit a Include node by returning a fresh instance of it
10917	visit a FromImport node by returning a fresh instance of it
10918	Create a wheelfile from a directory .
10919	Atomize a function .
10920	Service factory .
10921	URL encode a string .
10922	Return a list of wheels that match a requirement .
10923	Populate a requirement set .
10924	Export the package to the given location .
10925	Lookup an ASIN .
10926	Iterate over pages .
10927	Return the first ancestor of this node .
10928	Children of this browse node .
10929	Safely get an element .
10930	Safely get element text .
10931	Get a date from an element .
10932	Get price and currency .
10933	List Price .
10934	Send the request to the cache .
10935	Build the response .
10936	Make an attribute getter function .
10937	Titleize a string .
10938	Sort a list .
10939	Group values by an attribute .
10940	Perform a map operation .
10941	Create a logger .
10942	Constant time comparison .
10943	Verify a signature .
10944	Derive a key from the secret key .
10945	Get the signature for the given value .
10946	Signs a value .
10947	Verify a signature .
10948	Unsign a signed value .
10949	Sign a value .
10950	Validate a signed value .
10951	Serialize an object to a string .
10952	Server error response .
10953	Find all packages matching the given criteria .
10954	Yield packages that require parents .
10955	Yield all directories in base_path .
10956	Prepare a cached response .
10957	Unsign a wheel file .
10958	Unpack a wheel file .
10959	Install wheel scripts .
10960	Organize the graph .
10961	Redraw the canvas .
10962	Get a node by ID .
10963	Called when a directed connection is changed .
10964	Called when an edge occurs .
10965	Called when a component is changed .
10966	Handles a left click event .
10967	Called when the diagram canvas is changed .
10968	Clear the diagram canvas .
10969	Called when a domain model is changed .
10970	Map the domain model
10971	Removes all contained elements from the model .
10972	Map an element
10973	Set node attributes .
10974	Parse xdot data .
10975	Process font .
10976	Process an ellipse token .
10977	Process a polygon .
10978	Process a polyline .
10979	Process text .
10980	Process IMAGE tokens
10981	Render a GridFS file .
10982	Save object to dot file .
10983	Load the dot file .
10984	Check if a point is inside this region .
10985	Draw the bounds .
10986	Opens the new dot graph wizard
10987	Connect to the database .
10988	Parse the dot code .
10989	Create a new graph
10990	Open file dialog .
10991	Save the model to file .
10992	Save model to file .
10993	Configure the graph .
10994	Configure nodes .
10995	Configure edges .
10996	About a dodot
10997	Add a node .
10998	Add an edge .
10999	Add a sub - graph .
11000	Add a cluster .
11001	Request the selected graph
11002	Options dialog .
11003	Configure dot code .
11004	Exit Godot .
11005	Move a list of components to the origin .
11006	Save to a file like object .
11007	Load data from a file - like object .
11008	Save the packet to a file .
11009	Load object from file .
11010	Create an alias property .
11011	Parse a text file .
11012	Return a list of start words .
11013	Add a chain .
11014	Remove a chain .
11015	Build a chain .
11016	Generate sentence .
11017	Create a new graph .
11018	Add a node to the graph .
11019	Delete a node
11020	Get a node by ID .
11021	Delete an edge from the graph .
11022	Add an edge to the graph .
11023	Add a subgraph to the graph .
11024	Called when a program is changed .
11025	Set the nodes of the graph .
11026	Parse a dot file .
11027	Parse a dot file .
11028	Build the top level graph .
11029	Build the graph .
11030	Get the time units and multiplier for a given number of seconds .
11031	Format a duration in seconds .
11032	Called when a new path is selected
11033	Create the UI for this editor .
11034	Split a sequence into n subsequences .
11035	Split an iterable into windows .
11036	Entry point for godot .
11037	Get the children of an object .
11038	Append a child to an object .
11039	Insert a child into an object .
11040	Delete a child from an object .
11041	This method is called when children are replaced .
11042	This method is called when children are changed .
11043	Get the label for an object .
11044	Set the label of an object .
11045	When the label is changed .
11046	Initialize the widget .
11047	Update the editor .
11048	Add listeners .
11049	Called when a node is replaced .
11050	Called when a node changes .
11051	Add nodes to the graph .
11052	Called when an edge is replaced .
11053	Handle an edge change .
11054	Add edges to the graph .
11055	Parse an xdot directive .
11056	Handle drawing events .
11057	Create a node from a row .
11058	Create a godot . edge . Edge from a table editor row .
11059	Prepare database connection .
11060	Parse a drawing directive .
11061	Parse a label directive .
11062	Called when a drawing is changed
11063	Called when component position changes .
11064	Called when component position changes .
11065	Handle right - down events .
11066	Display a list of available styles .
11067	Draw the main layer .
11068	Check if a point is inside this polygon .
11069	Draw main layer .
11070	Handle an event .
11071	Run the thread .
11072	Get full page url .
11073	Render the previous and next links .
11074	Render the seo links .
11075	Returns True if candidate matches pattern .
11076	Select a specific content type .
11077	Rewrite a URL .
11078	Remove URL authentication .
11079	Create a URL identifier .
11080	Normalizes a host string .
11081	Discover all modules in a directory .
11082	Discover all modules in a directory .
11083	Return a list of all modules in a module .
11084	List all classes in a module .
11085	List all classes in a module .
11086	Ensure a directory exists .
11087	Put a text blob into this blob .
11088	Luhn check a card number .
11089	Get the current git revision .
11090	Load a module .
11091	Add a path .
11092	Find a module by name .
11093	Split a line into two lines .
11094	Remove namespace declarations .
11095	Check that the package version is consistent .
11096	Create an instance from a yaml file .
11097	Merge a dictionary of actions .
11098	Execute all the actions .
11099	Create an instance from a yaml file .
11100	Add details to the log .
11101	Emit a record .
11102	Add image_rendition to context .
11103	Log an account attempt .
11104	Add URL to queue .
11105	Start the workers .
11106	Set the value of a key .
11107	Get the value of a key .
11108	Get the contents of a key .
11109	Get the index for a key .
11110	Delete a key .
11111	Plot a heatmap .
11112	Add a number of months .
11113	Add a number of months to a date .
11114	Checks if the current date is a Christmas period .
11115	Use a music service .
11116	Use a storage service .
11117	Load data from CSV file .
11118	Return a list of lists of lists .
11119	Write data to json file .
11120	Filter by a label .
11121	Average the values of a labelled column .
11122	Feature importance report .
11123	Restore data from session .
11124	Merge two dictionaries recursively .
11125	Decorator to mark a dispatch function as a multi - dispatch .
11126	Decorator to mark a function as a method .
11127	Find all registered blocks .
11128	Verify that the block is valid .
11129	Register a block .
11130	Unregister a block type .
11131	Convert a file to MP3 .
11132	Check if the desired version is reasonable .
11133	Handle SSL redirect .
11134	Initialize celery task .
11135	Queue an email .
11136	Parse Accept header value .
11137	Parse a Cache - Control header value .
11138	Parse a content type string .
11139	Parse a forwarded header value .
11140	Parse a comma separated list .
11141	Parse a list of parameters .
11142	Resize an image to fit the width of the image .
11143	Add a value .
11144	Download a file .
11145	Connect to Google Music .
11146	Upload a file .
11147	Connect to the music folder .
11148	Write sky parameters to txt file
11149	Update self . sky_file .
11150	Read an AHPI from a file .
11151	Scale a_phi by a_parameter
11152	Read the pure water absorption from a file .
11153	Read pure water scattering from file .
11154	Read iop from file
11155	Write iop to file .
11156	Build b .
11157	Build total absorption .
11158	Build the total attenuation C .
11159	Build all b and c from IOPs .
11160	Set the parameters for a batch operation .
11161	Read a parameter file into a dictionary .
11162	Convert a string variable to a list of floats .
11163	Read a PR report .
11164	Set a signal handler .
11165	Called when a signal is received .
11166	Default signal handler .
11167	Pause a running signal handler .
11168	Handle an abort signal .
11169	Handle a status signal .
11170	Unregisters an event from the specified list .
11171	Fetch metric data .
11172	Fetch a metric in a sorted order .
11173	Collect n elements from iterable .
11174	Pretty print an item .
11175	Pretty print an iterable .
11176	Parse the signature of a function .
11177	Initialize the signature from a partial instance .
11178	Return a copy of the argv .
11179	Ignore certain metainf files .
11180	Return a key for a file name .
11181	Decode a VLQ - encoded integer .
11182	Read a table .
11183	Parse the user data header .
11184	Convert seconds to duration string .
11185	Print details about the game .
11186	Get the data from the user .
11187	Search file result .
11188	Write the batch to file .
11189	Data processing method .
11190	Display the graphic connection .
11191	Print graphic information .
11192	Display error message .
11193	Hides the error message .
11194	Run planarrad
11195	Cancel planarrad .
11196	Quit planarrad .
11197	Save the figure .
11198	Opens the log file .
11199	Open documentation .
11200	Prerequisite actions .
11201	Click event handler
11202	Mouse move event handler
11203	Display the graphic target .
11204	Given a genesis block and a private key return a LockSet that can be used to sign the block .
11205	Sign this message .
11206	Hash the message .
11207	Check if the job is valid .
11208	Issue funds .
11209	Get the last lock .
11210	Returns the last blockproposal for this block .
11211	Return the last valid lockset .
11212	Get the current timeout .
11213	Called when a proposal is received .
11214	Generate a list of private keys .
11215	Delay a packet .
11216	Send a packet to the given sender .
11217	Create a NAC proxy for the given address .
11218	Convert an address to a native contract class .
11219	Register a native contract .
11220	Update the filter .
11221	Called when a remote transaction is received .
11222	Convert from VGG to RGB .
11223	Convert image to VGG .
11224	Get the f layer .
11225	Get layer output .
11226	Get a list of features .
11227	Create a new key file .
11228	Finish the bulk load job .
11229	Load data from a file .
11230	Add items to the load .
11231	Release the target table .
11232	Returns a list of table names .
11233	Fix compile flags .
11234	Find the Teradata home directory .
11235	Get a value from the config .
11236	Set the value of a key .
11237	Table command .
11238	Execute a command .
11239	Get a setting value .
11240	Write default configuration file .
11241	Set the columns to be filtered .
11242	Write the Teradata object to an archive file .
11243	Get the settings as a string .
11244	Convert a string to a float .
11245	Parse a string of gains .
11246	Parse a string of device settings .
11247	Wrap a string using textwrap .
11248	Detect SDR devices .
11249	Set the center frequency .
11250	Return the result of the PSD calculation .
11251	Wait for a result .
11252	Update the PSD .
11253	Read data from file .
11254	Write data to file .
11255	Submit a task to the pool .
11256	Return the number of repeats for a given number of bins .
11257	Calculate a frequency plan .
11258	Create a buffer .
11259	Setup the stream .
11260	Stop the stream .
11261	Tune the stream to the given frequency .
11262	Sweep the signal .
11263	Set the slave address .
11264	Run CMake .
11265	Filter datetimes by number .
11266	Mask a datetime object .
11267	Mask a date to a specific weekday .
11268	Return a set of datetimes to keep .
11269	Given a list of datetimes return a list of datetimes that should be deleted .
11270	Return a set of dates to keep .
11271	Return a list of dates to delete .
11272	Get the SPI control byte .
11273	Read a single bit .
11274	Write a single bit .
11275	Get the bit number for a given bit pattern .
11276	Watch a port for interrupts .
11277	Handle events .
11278	Bring GPIO interrupt into userspace .
11279	Set the interrupt edge .
11280	Wait until a file exists .
11281	Register a pin function .
11282	Deregister a pin .
11283	Enable interrupts on GPIO pins .
11284	Send bytes to the SPI .
11285	Render the accordion .
11286	Returns True if the form has any errors .
11287	Render the link to the form .
11288	Extract package version .
11289	Add pack to form kwargs .
11290	Check the status of the response .
11291	Make a GET request .
11292	Get download link .
11293	Get an upload link .
11294	Upload a file .
11295	Upload a remote file .
11296	Get remote upload status .
11297	List files in a folder .
11298	Get running conversions .
11299	Calculate humidity .
11300	Calculate dewpoint .
11301	Publish the message .
11302	Get the CRC for the given data .
11303	Verify checksum of data .
11304	Unpack a STORM date into a string .
11305	Determine whether to use rev B archive .
11306	Wake up the weather station .
11307	Send a command to the weather station .
11308	Send DMPAFT command .
11309	Get the newest archive record .
11310	Parse the loop fields .
11311	Update weather data .
11312	Initialize logging .
11313	Return a list of pub services .
11314	Get wind speed .
11315	Set parameters for PWS .
11316	Set arguments .
11317	Publish to file .
11318	Decorator to indicate that the user is interested in a request .
11319	Initialize the extension .
11320	Returns True if all requirements are fulfilled .
11321	Push override onto the stack .
11322	Remove and return the current override context .
11323	Temporarily override the current value .
11324	Push additional context onto the stack .
11325	Pop an additional context from the stack .
11326	Add an additional element to the list .
11327	Unduplicates field names .
11328	Interpret stats .
11329	Extract params from query .
11330	Run a query .
11331	Returns a pandas . DataFrame containing the data .
11332	Returns a NetworkX graph .
11333	Plot a pie chart .
11334	Plot the data .
11335	Plot a bar chart .
11336	Export the result to a CSV file .
11337	Check if a user has permission .
11338	Add is_rendered and widget to context .
11339	Return a list of sorted widgets .
11340	Returns a list of widgets that need updating .
11341	Register a dashboard widget .
11342	Unregister a widget class .
11343	Get the last update of the widget .
11344	Get a setting by name .
11345	Save a setting .
11346	Check if we should update .
11347	Construct an array from an array .
11348	Construct a new array filled with ones .
11349	Concatenates two arrays .
11350	Check whether arguments are valid .
11351	Validate and format axes .
11352	Wrap a function in a BoltArraySpark .
11353	Align this array with the given axes .
11354	Convert to a Spark DataFrame .
11355	Return a tordd array .
11356	Stack the elements of this RDD .
11357	Apply a function to each element of this RDD .
11358	Return a chunk of this RDD .
11359	Apply a function to each element of this array .
11360	Apply a function to each element of this RDD .
11361	Get the plan for this array .
11362	Remove padding .
11363	Get the number of chunks .
11364	Return a list of slices .
11365	Return a mask for the given indices .
11366	Repartition this RDD by npartitions .
11367	Stack the elements of this RDD .
11368	Align the array along the specified axis .
11369	Return the first element of the RDD .
11370	Return statistics for this RDD .
11371	Return the mean along a given axis .
11372	Compute the variance along an axis .
11373	Return the standard deviation along an axis .
11374	Return the sum along a given axis .
11375	Return the maximum along an axis .
11376	Compute the minimum along an axis .
11377	Return a chunk of this RDD .
11378	Swap two sets of keys .
11379	Transpose the array .
11380	Swap two axes .
11381	Reshape this array .
11382	Reshape the key and value arrays .
11383	Return a squeezed version of the array .
11384	Convert each RDD in this RDD to a new dtype .
11385	Clip the elements of this RDD .
11386	Convert to array .
11387	Convert an argument to a tuple .
11388	Pack a list of arguments into a tuple .
11389	Raise ValueError if shape is not valid .
11390	Return True if a and b are all close .
11391	Listify a list of integers .
11392	Slicify a slice .
11393	Check if new and old represent the same key .
11394	Check if a key is reshapeable .
11395	Concatenate a list of arrays .
11396	Expand the dimensions of an array .
11397	Zip the RDD with an index .
11398	Decorator to wrap a function .
11399	Lookup constructor .
11400	Reshape this array .
11401	Transpose the array .
11402	Reshape this RDD .
11403	Transpose the array .
11404	Return a new array filled with ones .
11405	Return a new array filled with zeros .
11406	Concatenate multiple arrays .
11407	Compute the discrete likelihood .
11408	r Compute the most likely alpha .
11409	Returns the logarithm of the MLE of a discrete distribution .
11410	Returns the most likely alpha for the given data .
11411	Returns the best alpha value for each sample .
11412	Plot PPF .
11413	Calculate the lognormal distribution
11414	Sanitize turbo tags and attributes .
11415	Configure Yandex Analytics .
11416	Given a list of tags return a list of tuples .
11417	Return the MD5 hash of the key .
11418	Return the SHA256 hash of the key .
11419	Return the SHA512 hash of the key .
11420	Convert bytes to a long .
11421	Decode a base64 - encoded key .
11422	Parse options .
11423	Process an SSH key .
11424	Process the SSH DSS key .
11425	Process an ECDSA key .
11426	Process an ed25519 key .
11427	Parse the key data .
11428	Perform a single step .
11429	Step one import operation .
11430	List of mechanisms .
11431	Store the current credentials .
11432	Main function .
11433	Initialize setuptools .
11434	Context manager for creating audio file .
11435	Include h5bp . css .
11436	Generate a link to the normalize . css file .
11437	Django favourite fontawesome .
11438	Render a modernizr page .
11439	Include the jquery . js file .
11440	Include jQuery UI in the page .
11441	Template tag to render jQuery DataTables .
11442	Include jQuery . dataTables stylesheet .
11443	Include jquery . dataTables_themeroller . min . css
11444	Template tag to render a jQuery formset .
11445	jQuery Scroll To To JavaScript
11446	JQuery Smooth Scroll .
11447	Template tag that renders the twbs bootstrap css .
11448	Google Analytics for the frontend
11449	Render the textarea .
11450	Yields hashes for the given user and purpose .
11451	Calculate expiry time .
11452	Get a user token .
11453	Serialize a User instance .
11454	Deserialize profile data .
11455	Update a user .
11456	Auth failed .
11457	Validate a user token .
11458	Check if request is secure .
11459	Get a user s username
11460	Create a new user .
11461	Logs in a user
11462	Logs out a logged in user
11463	Login to the server .
11464	Login with a password .
11465	Login with a resume token .
11466	Change user password .
11467	Forgot password .
11468	Reset a user s password .
11469	Merge two dictionaries recursively .
11470	Read file content .
11471	Get the AleaIdField for an object or model .
11472	Given a list of object_ids return a dictionary of object_pk - > object_id .
11473	Given a model and a meteor_id return the corresponding object id .
11474	Given a model and a list of meteor ids return a mapping of meteor ids to object ids .
11475	Get an object by id .
11476	Set the default forwards for an operation .
11477	Set the default reverse for the operation .
11478	Truncate tables .
11479	Truncate database forwards .
11480	Truncate the database .
11481	Initialize meteor options .
11482	Add Build and Package options .
11483	Run meteor build .
11484	Convert a path to a directory .
11485	Seed the random number generator .
11486	Return the state of the cell .
11487	Generate a random string .
11488	Decorator for API endpoints .
11489	Iterate over all API endpoints .
11490	Clears the API path map cache .
11491	Pretty print a value .
11492	Validate kwargs .
11493	Called when the connection is opened .
11494	Called when the connection is closed .
11495	Process incoming message .
11496	Generate frames from an EJSON message .
11497	Process a DDP message .
11498	Dispatch message to handler
11499	Receive a connection .
11500	Receive a ping message .
11501	Subscribe to a channel .
11502	Unsubscribes from messages .
11503	Receive a method .
11504	Return info about websocket connection .
11505	Serve the application .
11506	Main entry point for the script .
11507	Print msg .
11508	Stop all threads .
11509	Run the postgres greenlet .
11510	Connect to PostgreSQL .
11511	Poll for NOTIFYs .
11512	Greenify the terminal .
11513	Generate a random meteor id .
11514	Auto - discover API modules .
11515	Return the error as a dict .
11516	Get an object from the cache .
11517	Emit a record .
11518	Create a negotiator middleware .
11519	Add a route context to the application .
11520	Add a resource object to the blueprint .
11521	Run the application .
11522	Send a message .
11523	Send multiple APNs messages .
11524	Get a list of all active APNs inactive ids .
11525	Send a GCM message .
11526	Send a message to a list of registration ids .
11527	Send a JSON request to GCMPush .
11528	Send the request .
11529	Get a model class from a module location .
11530	Fast forward selection algorithm .
11531	Search Giphy .
11532	Translate a term to a phrase .
11533	Get trending gifs .
11534	Get a GIF .
11535	GIPHY screensaver wrapper .
11536	Upload a file to Giphy .
11537	Convert to int if necessary .
11538	Fetch data from the API .
11539	Translate a term or phrase into a GIF .
11540	Get trending images .
11541	Fetch a GIF .
11542	Upload a file to Giphy .
11543	Generate an extension element for the given access control
11544	Authenticate to YoutuBE .
11545	Upload a video .
11546	Check the status of a video .
11547	Update a video .
11548	Delete a video .
11549	Check video availability .
11550	Upload a video .
11551	Show a list of videos .
11552	Directly upload a video .
11553	Upload a video .
11554	Return a successful upload .
11555	Remove a video .
11556	Get the entry for this video .
11557	Save the video .
11558	Delete the video .
11559	Update metadata .
11560	Updates a metadata field .
11561	Update this item .
11562	Parse a string and return a list of AST nodes .
11563	Dump a list of trees .
11564	Load a YAML file .
11565	Read from a file .
11566	Parse a string into a Node object .
11567	Create a new node .
11568	Return a newick representation of the node .
11569	Return ASCII art .
11570	Get the node with the given label .
11571	Prune the tree .
11572	Resolve polytomies .
11573	Remove all internal names .
11574	Remove leaf names .
11575	Decorator to require a user to be authenticated .
11576	Takes a json string and disposes of it .
11577	Require a setting to be present .
11578	Get the last argument .
11579	Get a list of values for a parameter .
11580	Wrap a callback in an asynchronous function .
11581	Get a cookie from the cookie monster .
11582	Clear a cookie .
11583	Redirect the user to the specified callback URI .
11584	Get an authenticated user .
11585	Generate OAuth request parameters .
11586	Redirect the user to the authorize endpoint .
11587	Make a request to the Facebook API .
11588	Get an authenticated user .
11589	Concatenate a url with a list of arguments .
11590	Parse a header line .
11591	Add a header to the response .
11592	Get a list of headers .
11593	Parse a single line .
11594	Parse headers .
11595	Normalizes a header name .
11596	Return a unicode string representation of the given value .
11597	Convert bytes to unicode .
11598	Convert a value to a string .
11599	Recursively convert an object to unicode .
11600	Make sure the plugin is unique .
11601	Iterate over all subclasses of cls .
11602	Select a policy based on origin .
11603	Return the number of occupied points .
11604	Write a gro file .
11605	Write a PDB file .
11606	Return a list of molecule numbers .
11607	Resize PBC for lipids .
11608	Write a rudimentary topology file .
11609	Iterate through a resource file .
11610	Log a user message .
11611	Send a message to multiple users .
11612	Get messages for a user .
11613	Process the response .
11614	Check config file .
11615	Verify a profile name .
11616	Retrieve data from config .
11617	Retrieve password from config file .
11618	Update config data .
11619	Update config password .
11620	Create a new config profile .
11621	Display required items .
11622	Get data from user .
11623	Get auth information from user .
11624	Configure a profile .
11625	Write data to a profile .
11626	Write authentication information .
11627	Add attachments to the message
11628	Send the message .
11629	Send a message .
11630	Factory function for creating messages .
11631	Create a credential property .
11632	Validate a property .
11633	Validate input .
11634	Custom validation for Twilio .
11635	Validate SlackPost .
11636	Validate whatsapp .
11637	Coroutine to send messages .
11638	Add a message to the queue .
11639	Get body from file .
11640	Remove unwanted keyword arguments .
11641	Send a message .
11642	Get chat id from username
11643	Send the message .
11644	Send the message .
11645	Get SMTP server address .
11646	Generate email message .
11647	Add headers to the message .
11648	Add the message body .
11649	Add attachments to the message .
11650	Get a connection to the SMTP server .
11651	Returns an SMTP_SSL instance .
11652	Get a TLS session .
11653	Send the email .
11654	Save the file .
11655	Unload the image .
11656	Get a region of the image .
11657	Return True if this key is valid False otherwise .
11658	Remove all elements .
11659	Write the tag to a bytes object .
11660	Read data from file .
11661	Delete the file .
11662	Resize the file .
11663	Insert a chunk into the IFF file .
11664	Save the ID3 frame to a file .
11665	Delete a file .
11666	Parse a file .
11667	Process a normal line .
11668	Add a block of lines .
11669	Draw a string .
11670	Parse an ISO 8601 time string .
11671	Turn a list of words into an HTML line .
11672	Make an HTML word .
11673	Make an HTML paragraph from a list of words .
11674	Make HTML code .
11675	Turn a list of items into an HTML string .
11676	Save the metadata to a file .
11677	Update the parents of a file .
11678	Run the game .
11679	Register a mapping .
11680	Get a controller from the registry .
11681	Register a freeform key .
11682	Returns an HMAC - SHA256 signature of a string .
11683	Returns a dict of headers for the request .
11684	Send a request to the API .
11685	Send a GET request .
11686	Send a post request .
11687	Send a DELETE request .
11688	Create an APEValue object from a string .
11689	Send a request to the server .
11690	A generator function that yields HostedZone instances .
11691	List hosted zones .
11692	Create a hosted zone .
11693	List resource record sets by zone id .
11694	Change resource record sets .
11695	Draw an image .
11696	Draw an image region .
11697	Get the size of the packet header .
11698	Replace old_pages with new_pages .
11699	Find the last page of the stream .
11700	Set a section .
11701	Add markup .
11702	Process content .
11703	Return the first markup with the given tag name .
11704	Create a hosted zone .
11705	Lock a file .
11706	Insert size bytes into file at offset .
11707	Delete size bytes from file .
11708	Convert bytes to UTF - 8
11709	Add a change .
11710	Parse a change info element .
11711	Measure a string .
11712	Check if this object has been modified .
11713	Delete this resource record set .
11714	Save this resource record set .
11715	Parse an ID3v1 tag .
11716	Make ID3v1 format .
11717	Read size bytes from the file .
11718	Remove all keys with the given key .
11719	Called when a frame is loaded .
11720	Update common frames .
11721	Update to v24 .
11722	Unload the sound .
11723	Play the sound .
11724	Set the audio loop points .
11725	Return a list of glyphs and values .
11726	Filter a list of glyph names .
11727	Dump an encoding to a file .
11728	Dump an array .
11729	Main function .
11730	Check if a file exists .
11731	Create a list of files from a list of paths .
11732	Parse a HostedZone XML element .
11733	Parse the e - delegation set .
11734	Write a list of blocks .
11735	Group blocks by padding .
11736	Delete the VCF file .
11737	Save the file to disk .
11738	Parse a RRset alias .
11739	Parse a list of resource record values .
11740	Parse a single RRSet .
11741	Delete this HostedZone .
11742	Add a record to this resource .
11743	Create a new A resource record .
11744	Create an AAAA resource record .
11745	Create a cname record .
11746	Create an MX resource record .
11747	Create a new NS resource record .
11748	Create a PTR resource record .
11749	Create a new SPF resource record .
11750	Create a SRV resource record .
11751	Create a TXT resource record .
11752	Register a new TXXX key .
11753	Get the initial values for a change .
11754	Write a Change element .
11755	Write a ChangeResourceRecordSetsRequest .
11756	Initialize the logs .
11757	Return the item with the given alias .
11758	Freeze a dictionary .
11759	Join HTML attributes .
11760	Initialize the application .
11761	Initialize the bars .
11762	Bind a bar to the chart .
11763	Return a dictionary of arguments .
11764	Returns the URL for the resource .
11765	Check if the current url is the same as the request url .
11766	Validate a metric class .
11767	Get a statistic by name .
11768	Calculate statistics .
11769	Auto - discover all installed apps .
11770	Return a CSV dump of a metric .
11771	Handle the request .
11772	Get a list of values from a GET variable .
11773	Get a GET parameter as a boolean .
11774	Get next colour .
11775	Returns a dictionary of parameters for a Gecko chart
11776	Returns a tuple with the number and the previous statistic .
11777	Returns a tuple of the latest count for the given UIDs .
11778	Generate a geckoboard line chart .
11779	Return the latest geckometer .
11780	Returns a list of tuples with the latest count for each metric .
11781	Returns a list of all active stats .
11782	Register gadget .
11783	Get the context data .
11784	Print a message and exit .
11785	Decorator to validate a function s parameters .
11786	Print long input .
11787	List input .
11788	Prompts the user for an output file name .
11789	Get the schedule for a given year .
11790	Returns the winner of the game .
11791	Return the season of the date .
11792	Return the starters of the game .
11793	Surface of the game .
11794	Return the coin toss .
11795	Get weather information .
11796	Information about the reftrack
11797	Get the schedule for the game .
11798	Return the standings of the game .
11799	Get the team stats table
11800	Get roy voting data .
11801	Returns the linescore of the team .
11802	Return the season of the date .
11803	Get stats for all players .
11804	Change working directory .
11805	Cache the results of a function .
11806	Get the key for a class instance .
11807	Memoize a function .
11808	Get the age of the person .
11809	Get stats table .
11810	Get stats per game .
11811	Return a table of stats .
11812	Get stats per minute .
11813	Return the per - 100 stats .
11814	Return a table of advanced stats .
11815	Return a table of statistics about the shooting .
11816	Retrieve stats from the Advanced PBundle .
11817	Get basic game logs .
11818	Get session data .
11819	Expand details in a DataFrame .
11820	Add team and opp columns .
11821	Create features for each team .
11822	Initial win prob .
11823	Return a pandas DataFrame of passing playoffs .
11824	Simple year award .
11825	Name of the team .
11826	Get box scores for a given year .
11827	Get information about a particular keyword in a year .
11828	Return a list of coach IDs for the given year .
11829	Get the schedule for a given year .
11830	Return the Offensive Coordinator for the given year .
11831	Return the href of the defensive coordinator .
11832	Return the Stadium id for the given year .
11833	Get the offensive scheme for a given year .
11834	Returns the defensive alignment for the given year .
11835	Get the off splits for a given year .
11836	Get the HTML content of a URL .
11837	Flatten a TD element .
11838	Convert a relative url to an id .
11839	Convert keyword arguments to a query string .
11840	Read from an HDF5 file .
11841	Return a direct put .
11842	Get a read lock .
11843	Close the connection .
11844	Get a batch from the dataset .
11845	Get the remainder of a path .
11846	Get a queue of examples .
11847	Get data from a path .
11848	Parse a file - like object .
11849	Dump objects to a file .
11850	Read a varint .
11851	Read an object group .
11852	Close the file descriptor .
11853	Write pb2 objects to the file .
11854	Flush the output buffer .
11855	Get the game directory .
11856	Input text with keyboard emulation .
11857	Make a fake movie .
11858	Evaluate traits .
11859	Wait until condition is true .
11860	Waits until all traits are present .
11861	Add an exception to ignore .
11862	Get main volume .
11863	Get the main source .
11864	Send a message .
11865	Get the status of the device .
11866	Power off the device .
11867	Power on .
11868	Set the volume .
11869	Select a source .
11870	Deobfuscates a key from a request .
11871	Calculate the CRC for the given plaintext .
11872	Obfuscate a value .
11873	Check for missing songs
11874	Get a list of all links .
11875	check if song name is correct
11876	Parse a song .
11877	return google url
11878	Parse download url from google .
11879	Parse a song name and website .
11880	Download an HTML page .
11881	Download a file using requests
11882	Download a file using wget
11883	Find station codes by city name .
11884	Get location observation .
11885	Parse an observation response .
11886	Get the observation for a given station .
11887	Return a list of search paths .
11888	Return a list of available compilers .
11889	The mimetype of the file .
11890	Return the mimetype of the compiler result .
11891	Return the compiler format extension .
11892	Register a processor for a given mimetype .
11893	Unregister a processor for a mimetype .
11894	A list of paths to search for .
11895	Register default settings .
11896	Import QtCore .
11897	Returns a netnode . Netnode object for the current settings .
11898	Add a plugin name .
11899	Remove a plugin name from netnode
11900	Import settings from config file .
11901	Export settings to config file .
11902	Return a DirectoryIDASettings instance .
11903	Iterate over all keys in the database .
11904	Simple error handler .
11905	Get a DynamoDB table .
11906	List DynamoDB tables .
11907	Fetch the items for a given category .
11908	Return the metadata id for the given item .
11909	Return the updated timestamp of the item .
11910	Fetch the owner team
11911	Fetch the owner user for a crate .
11912	Fetch the versions of a crate .
11913	Fetch crate version downloads
11914	Fetch crate data .
11915	Get the summary of the category .
11916	Get all crates .
11917	Get a single crate .
11918	Get a specific crate attribute .
11919	Fetch a page of items .
11920	Fetch items from the server .
11921	Fetch questions from Kitsune API .
11922	Get questions .
11923	Fetch events from the database .
11924	Return the updated date of the item .
11925	Returns the category of the item .
11926	Get items from ReMo .
11927	Return a list of all buffered requests .
11928	Return the priority of the request .
11929	Close the context .
11930	Submit a list of blocks .
11931	Cancel a block .
11932	Cancel all submitted blocks .
11933	Get a list of events .
11934	Fetch all events of a given category .
11935	Get all cells spreadsheet data
11936	Parse the feed .
11937	Return a list of export formats for the given pid type .
11938	Return permission factory .
11939	Create the blueprint .
11940	Create a URL rule .
11941	Create a record view .
11942	Default view method .
11943	Export a record .
11944	Time callable .
11945	Close the socket .
11946	Remove a client .
11947	Increment a metric .
11948	Send a timing metric .
11949	Record a timing measurement .
11950	Send a gauge metric .
11951	Send a gauge delta request .
11952	Set a metric .
11953	Send a request to the server .
11954	Create a batch client .
11955	Return a unit client .
11956	Send all pending batches .
11957	Create a permission checker for the given record .
11958	Create a batch client .
11959	Flush all batches .
11960	Return a unit client .
11961	Create a new user .
11962	Interpret a value as an OpenMath object .
11963	Convert a term using OpenMath .
11964	Convert an object to a Python object .
11965	Convert an object to OpenMath .
11966	Register a converter to the conversion registry .
11967	Register a conversion function to a symbol .
11968	Initialize the application .
11969	Yield valid choices .
11970	Split keyword arguments into model fields and fields_agrs .
11971	Register a field type .
11972	Create a value from an object .
11973	Returns a tuple of form data and files .
11974	Decorator for fields that require a random value .
11975	Decorator for field choices attribute .
11976	Return a string representation of a decimal field .
11977	Return the data for an email field .
11978	Generate a random date .
11979	Generate data for a datetime field .
11980	Returns the data for a float field .
11981	Return the data for an integer field .
11982	Generate a random time .
11983	Generate a random choice of choices .
11984	Generate choices for multiple choice field .
11985	Returns a random item from the queryset .
11986	Encode a Python object into a byte string .
11987	publish package
11988	Tag a version .
11989	Marks a field as blank .
11990	Load a global variable .
11991	Build an instance from a state dict .
11992	Create a list expression .
11993	Create a tuple expression .
11994	Decode bytes to bytes .
11995	Encodes the given data .
11996	Convert value to fixed precision .
11997	Format a number .
11998	Convert a number to money .
11999	Load numpy data .
12000	Pack data from an array .
12001	Add a workspace .
12002	Remove a workspace .
12003	List all workspaces
12004	Get a websocket by name .
12005	Check if a repository exists
12006	Sync repositories
12007	Clone a repository .
12008	Check if ndio is available .
12009	Return the voxels of an array .
12010	Create a matrix from a list of voxels .
12011	Print a workspace .
12012	Print update information .
12013	Set console handler .
12014	Execute a shell command .
12015	Load a PNG file .
12016	Save numpy data to PNG file .
12017	Save a collection of numpy arrays .
12018	Print a workspace .
12019	Print repository status .
12020	Get the size of the cube dimension .
12021	Post a cutout without chunking .
12022	Load image from file .
12023	Save numpy data to a PNG file .
12024	Load a multi - layer TIF file .
12025	Write configuration to file .
12026	Clone a URL to this branch .
12027	Get the version of yoda .
12028	Mix name and greeting .
12029	Option decorator .
12030	Reserve IDs for a channel .
12031	Merge ids .
12032	Propagate data to channel .
12033	List all projects in a dataset .
12034	Get a dataset by name .
12035	List all datasets .
12036	Parse arguments .
12037	Show a workspace
12038	Show a workspace .
12039	Show all workspaces
12040	Returns the URL for the given endpoint .
12041	Guess the format from a file extension .
12042	Open image file .
12043	Convert from one format to another .
12044	Build a graph .
12045	Compute the invariants for a graph file .
12046	Convert a graph from one format to another .
12047	Convert a list of ramons to a dictionary .
12048	Return ramon type .
12049	Delete a channel .
12050	Add a dataset .
12051	Return a JSON representation of the dataset .
12052	Create a dictionary representation of the dataset .
12053	Create a channel dictionary .
12054	Return a dict representation of a project .
12055	Identify image dimensions .
12056	Put data to ndio
12057	Find a path in a workspace .
12058	Get all public tokens .
12059	Get project information .
12060	Set metadata .
12061	Get a URL .
12062	Make a POST request to a url .
12063	Delete a URL .
12064	Load data from an hdf5 file .
12065	Save an array to an HDF5 file .
12066	Infer gaps in a tree .
12067	Return a new NvimIO object with recovered data .
12068	Installs the jinja translations .
12069	Perform a thunk in exclusive mode .
12070	Return the percent of the data .
12071	Get statistics from the cache server .
12072	Get the cache slab information .
12073	Return a dictionary of context data .
12074	Show the status of the memcache server .
12075	Dashboard view .
12076	Return statistics about the memcache server .
12077	Slabs .
12078	Convert bytes to human readable size .
12079	Find a config from a list of children .
12080	Add a directory to the environment .
12081	Applies an applicator to the config file .
12082	Absolute path of the file .
12083	Return the contents of the file .
12084	Write data to file .
12085	Configure logging .
12086	Create the file .
12087	Applies the given applicator to the path .
12088	The absolute path of the file .
12089	Remove the directory .
12090	Prepare all children .
12091	Clean up all children .
12092	Returns the path to the given path .
12093	List all files in the directory .
12094	Write data to a file .
12095	Read the contents of a file .
12096	Add a file to the file list .
12097	Save the configuration to disk .
12098	Load configuration from file .
12099	Cleans up the file .
12100	Load all plugins in directory .
12101	Update a dictionary recursively .
12102	Create a child config node .
12103	Resolve a key path to a list of nodes .
12104	Get the value of the field .
12105	Update the configuration .
12106	Load configuration from file .
12107	Apply config values to a string .
12108	Build callback url .
12109	Process input .
12110	Send socket output .
12111	Send an RPC call request .
12112	Read input from socket .
12113	Write socket output .
12114	Mark a function as not reentrant .
12115	Get remote settle modes .
12116	Configure the node .
12117	The address of the source .
12118	Target address of the link .
12119	Called when the session is closed .
12120	Create a new sender .
12121	Request a sender link .
12122	Create a new receiver .
12123	Request a receiver link .
12124	Called when a link is destroyed .
12125	Request that the session be closed .
12126	Process an endpoint event .
12127	Add a begin mark to the Markdown file .
12128	Close receiver remote connection .
12129	Called when the receiver link is closed .
12130	Get host and port from server address .
12131	Connect to a socket .
12132	Create a server socket .
12133	Return the list of connections that need processing .
12134	Decorator to make a connection not reentrant .
12135	Process the SASL connection .
12136	Get the next output data .
12137	Create a new sender .
12138	Reject a sender link .
12139	Create a new receiver .
12140	Log connection failure .
12141	Connection is active .
12142	Called when the connection is closed .
12143	Handle protocol errors .
12144	Decorate a twilio endpoint .
12145	Get color string .
12146	Return a dictionary of all fonts in the search path .
12147	Set the compression option .
12148	Add a new object .
12149	Write a stream to the output buffer .
12150	Put a stream .
12151	Add a page to the document .
12152	Set color scheme .
12153	Set the default font
12154	Add a page to the document .
12155	Set font size .
12156	Add text .
12157	Add a newline .
12158	Add a pie chart .
12159	Output pages .
12160	Return a list of pages that have changed .
12161	Output the fonts .
12162	Output all images
12163	Output the image .
12164	Transform matrix .
12165	Get the absolute position of a point .
12166	Set font style .
12167	Rotate a point .
12168	Set information about the object .
12169	Set display mode .
12170	Closes the document .
12171	Put the PDF header .
12172	Put all pages .
12173	Put a resource dictionary .
12174	Put information about the object .
12175	Put the catalog into the database .
12176	Write the trailer .
12177	Floyd s algorithm .
12178	Naive iterator .
12179	Gosper a sequence of sequences .
12180	Breadth first search .
12181	Check if the test length is within the bounds of the dataset
12182	Returns True if the test length is greater than or equal to the ymax
12183	Returns True if the x coordinate is greater than or equal to test_ordinate .
12184	Test whether y coordinate is greater than test_ordinate .
12185	Return a copy of the cursor .
12186	Increment the x - axis .
12187	Add y - coordinate .
12188	Draws the table .
12189	Create a new tag .
12190	List all tags .
12191	Get a label by name .
12192	Update a label
12193	Delete a tag
12194	Create a tag .
12195	List all actions .
12196	Get a list of tags for a given label .
12197	Create a new hook .
12198	List hooks .
12199	Update a hook .
12200	Create an alert .
12201	Get alerts .
12202	Update Alert
12203	Setup sphinx extension .
12204	Return the path to the themes directory .
12205	Send a POST request to the API .
12206	List all hosts
12207	Get a log set .
12208	Find attacker slider .
12209	Return the duration in seconds .
12210	Update the model .
12211	Compute the transit matrix .
12212	Binning .
12213	Free memory .
12214	Receive data from socket .
12215	Read lines from the socket .
12216	Return a generator of bytes .
12217	Return the status of the connection .
12218	Generate info .
12219	Return an info message .
12220	Send a command to the server .
12221	Return a list of capabilities .
12222	Send a MODE READER command .
12223	Quit the server .
12224	Send a DATE command .
12225	Send a help command .
12226	Generate new groups .
12227	Generate new news .
12228	Return a list of new news .
12229	List active newsgroups .
12230	List active times .
12231	List new groups .
12232	List overview format generator .
12233	List all extensions .
12234	Return a list of dictionaries .
12235	Return a list of results .
12236	Send GROUP command .
12237	Get the next article .
12238	Send an article message .
12239	Send HEAD command .
12240	Get message body .
12241	Send an XGTITLE command .
12242	Send an XHDR command .
12243	Send an XZHDR command .
12244	xover generator .
12245	Send an XPAT command .
12246	Return a list of xpaths matching a pattern .
12247	Send an XFEATURE COMPRESS GZIP command .
12248	Send a POST request to NNTP .
12249	Return the offset of a number .
12250	Return a timestamp .
12251	Return a datetime object .
12252	Send an HTTP POST request .
12253	Send a DELETE request to the API .
12254	Send a GET request to the API .
12255	List scheduled queries .
12256	List all tags .
12257	Get a list of tags .
12258	Create a new alert .
12259	Delete a tag .
12260	Create a scheduled query .
12261	Create a scheduled query .
12262	Delete a tag .
12263	Convert an integer or tuple to a string .
12264	Parse a newsgroup line .
12265	Parse a header line .
12266	Unparse headers .
12267	Do a POST request .
12268	Run tests .
12269	Return a docstring for a set of defaults .
12270	Decorator that appends default kwargs to a function .
12271	Return a string containing the docstring of the defaults .
12272	Set the value .
12273	Check that value is of expected type .
12274	Return the value of the variable .
12275	Check that value is a scalar .
12276	Return the symmetric error .
12277	Set the errors .
12278	Set the value of the parameter .
12279	Import metrics .
12280	Extract a dictionary from a list of metrics .
12281	Filter the metrics .
12282	Call the API .
12283	Parse an expression .
12284	Parse an operator .
12285	Add .
12286	Initialize missing properties .
12287	Return a list of Parameter objects .
12288	Return a numpy array of parameter values .
12289	Return a numpy array of parameter errors .
12290	Clear all derived parameters .
12291	Set the method .
12292	Get environment variables .
12293	Get the URL parameters .
12294	Perform a GET request .
12295	Perform a DELETE request .
12296	Perform an HTTP POST request .
12297	Perform a PUT request .
12298	Call the API .
12299	Check if the sceneInfo is valid .
12300	Verify type product .
12301	Get the size of the remote file
12302	Download the scene .
12303	Validates bands .
12304	Establish a connection to the Earthexplorer .
12305	Return a property decorator that prefixes a property name .
12306	Return the timezone for the given zone .
12307	Normalize a timezone - aware datetime .
12308	Join a list of strings with a given delimiter .
12309	Get the positions of the newline characters in a string .
12310	Convert a point to a source string .
12311	Dump the results to stdout .
12312	Filter the results .
12313	Load a list of fortune files .
12314	Set the chance of each file .
12315	Entry point for the script .
12316	Parse a rule .
12317	Handle special characters .
12318	Returns the grammar of the input source .
12319	Return a list of rules .
12320	List of comments .
12321	Return the list of directives in the file .
12322	Compile and return the compiled source .
12323	Compile this parser into a string .
12324	Return the list of imports .
12325	Returns the string representation of the Enum class .
12326	Returns the class definition as a string .
12327	Get the entry point name .
12328	Get the definition of a rule .
12329	Get the source of a rule .
12330	Get the transform for a rule .
12331	Convert an expression into an ASN expression .
12332	Convert a node to ASN
12333	hoist operands that satisfy predicate pred from operands
12334	Remove grouping groups from an Optree node .
12335	Convert an ast node to code .
12336	Convert an ast node to code .
12337	Convert an AST terminal to code .
12338	Return an astroid . OptionGroup node as string .
12339	Convert an AST repetition group to code .
12340	Convert AST special handling to code .
12341	Convert an astroid . Alternate node to code .
12342	Convert an astroid . Concat to python code .
12343	Return an astroid . Exclusion node as string
12344	Return the code for a repeated arithmetic expression .
12345	Return an astroid . Repeat node as string .
12346	Find directives that match the predicate pred .
12347	Return True if child is a child of parent .
12348	Extract directives from a comment .
12349	Handle API results .
12350	Get a new ID .
12351	Remove a hotkey .
12352	Add command line arguments .
12353	Configure logging .
12354	Validate arguments .
12355	Convert a list of infix operators to postfix operators .
12356	Convert a list of operators into an OptreeNode .
12357	Reduce a list of operators .
12358	Add command line options .
12359	Load plugin manifest .
12360	Get a metric definition by name .
12361	Get the column lengths of the fields .
12362	Get the column lengths of the metrics .
12363	Escape underscores .
12364	Output the fields in markdown format .
12365	Output metrics in markdown format .
12366	Generate the markdown file .
12367	Parse input text .
12368	Determine how many characters are left to be consumed .
12369	Add command specific arguments .
12370	Parse a time string into a datetime object .
12371	Output a CSV file .
12372	Output the results as JSON .
12373	Output raw JSON text .
12374	Convert the JSON result to XML .
12375	Return True if the node is a trimmed default .
12376	Pretty print a terminal .
12377	Repetition extractor .
12378	Get terminal node .
12379	Extract a repetition .
12380	Get exclusion .
12381	Count leading whitespace .
12382	Call an extractor function .
12383	The position of this node .
12384	Return True if this node is empty .
12385	Add an item to be ignored .
12386	Check if the node is of type value .
12387	Return a new ParseNode with all children flattened .
12388	Return a new ParseNode with all children trimmed .
12389	Merge another ParseNode into this one .
12390	Return a new ParseNode with a different type .
12391	Return a compressed version of this node .
12392	Return the current position .
12393	Return the position of the maxreaded line and column .
12394	Advance to the next character .
12395	Move to the next line .
12396	Move to the previous line .
12397	Return the last readed line .
12398	Increment the cursor position .
12399	Save the current cursor position .
12400	Restore the last context .
12401	Return a string representation of the action .
12402	Set the name of this signature
12403	Return the number of variables in the header .
12404	Count the number of functions in this signature .
12405	Update the statistics counters .
12406	Update this scope .
12407	Return the union of this scope and the given signature .
12408	Update the set with the intersection of the two sets .
12409	Return the intersection of this scope with the given signature .
12410	Remove any keys that are present in oset .
12411	Return a copy of this scope with the given signature removed .
12412	Symmetric difference update .
12413	Return the symmetric difference of this scope with the given signature .
12414	Add a signature to the scope .
12415	Remove a Signature from the set .
12416	Discard a signature .
12417	Return all the values of this signature .
12418	Return the first signature .
12419	Return the last signature .
12420	Return the Signature for the given key .
12421	Get a scope by symbol name .
12422	Get a signature by symbol name .
12423	Get all polymorphic return variables .
12424	Call the Translator Injector .
12425	Normalizes an AST .
12426	Set attributes from othernode .
12427	Return an iterator over all values in the tree .
12428	Check if a hit is ok .
12429	Get the signature of this function .
12430	Resolves the type to the target type
12431	Return a list of resolved names for the given type .
12432	Set the resolved name of a type .
12433	Delete a local file .
12434	Delete a file from S3 .
12435	Delete a file .
12436	Save a local file .
12437	Save file to S3 .
12438	Save object to file .
12439	Find files in S3 .
12440	Create an enum type .
12441	Check the types of the arguments of a function .
12442	Set a callobject in the chainmap .
12443	Add a method to the class .
12444	Decorator to register a hook .
12445	Decorator to register a rule .
12446	Decorator to register a new directive .
12447	Decorator for class methods .
12448	Bind src to dst
12449	Read an eol character .
12450	Push the rule nodes to the stack .
12451	Pop the rule nodes from the stack .
12452	Get the value of a node .
12453	Add a parsed stream .
12454	Begin a new tag .
12455	Mark the end of a tag .
12456	Set rules .
12457	Set the hooks .
12458	Set directives .
12459	Evaluate a rule .
12460	Evaluate a hook .
12461	Return True if text is in the stream .
12462	Read one character .
12463	Read a single character from the stream .
12464	Read until EOF .
12465	Ignore whitespace .
12466	Set the hit dtype .
12467	Set the cluster dtype .
12468	Check that the structure of the hits is compatible .
12469	Add a rule clause name .
12470	Add a rule to the BNF .
12471	Add a rule .
12472	Add a parser tree to a sequence .
12473	Add an alternative parser tree .
12474	Add a range to a sequence .
12475	Add a rule to the parser .
12476	Add a capture to the sequence .
12477	Add a bind to a sequence .
12478	Add a hook .
12479	Set the value of a parameter .
12480	Parse a string parameter .
12481	Parse a single character .
12482	Handle a parameter identifier .
12483	Set hook name .
12484	Hook a parameter .
12485	Get rules from the parser .
12486	Ignore C ++ .
12487	Add a state .
12488	Returns a dot representation of the graph .
12489	Write the graph to a dot file .
12490	Write the graph to a png file .
12491	Return a string representation of the state .
12492	Return the next state .
12493	Reset all living states .
12494	Infer a block of code .
12495	Infer a subexpr .
12496	Infer an ID .
12497	Infer a literal .
12498	Dump local node info .
12499	Parse a parserrule .
12500	Exit scope .
12501	Return a list of if statements .
12502	visit a Call node by returning a fresh instance of it
12503	Visitor for CallTrue AST node .
12504	Visit a Hook AST node .
12505	Visit a Rule AST node .
12506	Visit a Capture AST node .
12507	visit a Scope node by returning a fresh instance of it
12508	Visitor for Alt AST node .
12509	Visit a Seq AST node .
12510	Visitor for RepOptional AST node .
12511	Return a While node .
12512	Rep0N node .
12513	Concatenates two strings .
12514	Set list indentation .
12515	Convert a list to a string .
12516	Echo a list of nodes .
12517	Populate an edge from a sequence .
12518	Populate a state register from a sequence of sequences .
12519	Build the state tree .
12520	Return True if n == val .
12521	Build a grammar from a string .
12522	Load a grammar from a file .
12523	Parse the given source .
12524	Parse a file .
12525	Set a node .
12526	Set node value as int
12527	Get a subnode .
12528	Default serializer .
12529	Get all depositions
12530	Dump a deposition to a dictionary .
12531	Return list of bibrec IDs in the database .
12532	Return a list of bibrec IDs for the given date .
12533	Import bibdoc file .
12534	Dump a BibDoc to a file .
12535	Get database checks .
12536	Check a BibDoc .
12537	Return a dict representation of the object .
12538	Get all users .
12539	Dump a User object .
12540	Get all features .
12541	Return list of modified record ids .
12542	Return list of modified record ids .
12543	Return a set of fire roles for the given collection .
12544	Get revisions for a record .
12545	Get all collections for a record .
12546	Dump a record in JSON format .
12547	Return the number of records matching the query .
12548	Dump a record .
12549	Dump ra to a dict .
12550	Load common data .
12551	Collect things entry points .
12552	Initialize the application context .
12553	Memoize a function .
12554	Return the SQL to run the query .
12555	Get roles connected to action .
12556	Get list of actions .
12557	Dump the token to a dictionary .
12558	Load a token from the database .
12559	Import a record .
12560	Get a configuration variable .
12561	Return a dict representation of the object .
12562	Get the list of users in the Invenio database .
12563	Return the number of users in the database .
12564	Dump a User object to a dictionary .
12565	Load deposit data .
12566	Create record and persistent identifier .
12567	Load a record .
12568	Load one or more records .
12569	Inspect records .
12570	Load common dumps .
12571	Load communities .
12572	Load a set of users .
12573	Load a deposit .
12574	Get profiling statistics .
12575	Start the web server .
12576	Dump profiling statistics .
12577	Delete the profile .
12578	Stop profiling .
12579	Get the status of the job .
12580	Decorator to disable timestamp .
12581	Load user data .
12582	Calculate the translations for each image .
12583	Merge multiple images together .
12584	Add 1 - dimensional ones to an array .
12585	Create a dump .
12586	Create record .
12587	Update a record .
12588	Create PIDs for a record .
12589	Delete record .
12590	Create files for a record .
12591	Create file versions .
12592	Delete buckets .
12593	Return a list of pids that are missing
12594	Prepare revisions .
12595	Prepare list of files
12596	Prepares the list of pids .
12597	Return True if the document is deleted .
12598	Load community data .
12599	Load a featured community .
12600	Dump a thing .
12601	Check a thing .
12602	Delete the widget
12603	Return the magnitude of a vector .
12604	Normalizes a vector .
12605	Transform a set of texcoords .
12606	Ensure bones are present .
12607	Set the length of the skeleton .
12608	Set the parent of this bone .
12609	Calculate the pivot point for the given data .
12610	Start animation .
12611	Set the current state .
12612	Unsets the current state .
12613	Set the state of the bone .
12614	Unsets the state of the bone .
12615	Ensure model data is available .
12616	Redraw the model .
12617	Draw the object .
12618	Set the model to use .
12619	Write reports to a file .
12620	Generate a test suite XML file .
12621	Add a menu to the window .
12622	Redraws the label .
12623	Redraw the label .
12624	Draws the background .
12625	Delete a widget
12626	Redraw the label .
12627	Register event handlers .
12628	Register event handlers .
12629	Add the main Label
12630	Add ok button
12631	Exit the dialog .
12632	Add Confirm button
12633	Add a cancel button
12634	Update progress bar .
12635	Render each actor in the scene .
12636	Render the world .
12637	Return a context manager for a step .
12638	Check if a resource exists .
12639	Add a category
12640	Returns the missing texture
12641	Get a model by name .
12642	Load a model .
12643	Get the model data for the given name .
12644	Load model data .
12645	Add a widget to the container .
12646	Draws the submenu .
12647	Called when the canvas is redrawn .
12648	Redraw scrollbar .
12649	Check if the mouse is inside the AABB .
12650	Returns the p - value
12651	Adds a layer to the stack .
12652	Get a region of the buffer .
12653	Draw the buffers .
12654	Add an action .
12655	Execute the given action .
12656	Register a new name .
12657	Add a layer .
12658	Draw the layers .
12659	Delete the layer .
12660	The border of the widget .
12661	Offset of the widget .
12662	Get the size of the widget .
12663	Read mesh from hdf store .
12664	Make a connection matrix .
12665	Set fields .
12666	Add a list of fields .
12667	Check if elements are allowed
12668	The space of the elements .
12669	Return a list of centroids and volumes .
12670	Return angles in degrees .
12671	Compute the edges of the mesh .
12672	A pandas DataFrame containing the stats of the graph .
12673	Convert an element set to a node set .
12674	Convert a node set to a surface .
12675	Add surfaces to the element sets .
12676	Metadata about the fields .
12677	Metadata of the step .
12678	Create the workdir if it doesn t exist .
12679	Run the postprocessor .
12680	Run GMSH .
12681	Read a history report .
12682	Read field report .
12683	Return a string representation of a list .
12684	Return equation string .
12685	Return an unsorted set of labels .
12686	Parse API response .
12687	Sends a GET request to the API .
12688	Write a XY report .
12689	Write a field report .
12690	List available components .
12691	Return a descriptive error message .
12692	Check if an exception was thrown by a descriptor .
12693	Set the data .
12694	Get the mode of the axis .
12695	Set x and y axis options .
12696	Create a new class .
12697	Poll datafeeds .
12698	Try to convert value to float .
12699	Convert a string to a number .
12700	Plot a graph .
12701	Force a unicode string .
12702	Return a cleaned HTML string .
12703	Return True if mime_type matches any of the include_mime_types .
12704	Clean a domain name .
12705	Return the left cuts of a domain name .
12706	Make a hash keyword .
12707	Collect the words in the sentence .
12708	Index a stream item .
12709	Invert a hash .
12710	Get the frequency of a set of hashes .
12711	Lookup the stream ids for the given hash .
12712	Lookup the index table for a given hash .
12713	Make stream items from a proto file .
12714	Create a streamitem from an entry .
12715	Create a content item from a node .
12716	Read a varint .
12717	Read an unsigned integer .
12718	Serialize a StreamItem key .
12719	Serialize and encrypt a streamitem .
12720	Context manager to temporarily change working directory .
12721	Strip a prefix from a string .
12722	Strip a suffix from a string .
12723	Check if needle is a subsequence of haystack .
12724	Return an Ice web interface .
12725	Run the server .
12726	Shut down the server .
12727	Register a new route .
12728	Register an error handler .
12729	Serve a static file .
12730	Get the error page callback .
12731	Add a route .
12732	Resolve a route .
12733	Resolve a non - literal route .
12734	Normalize pattern .
12735	Return the response body .
12736	Add a header to the response .
12737	Set a cookie .
12738	Return the status line .
12739	The content type of the response .
12740	Get all values for a key .
12741	Recursively delete a directory .
12742	Get list of open file descriptors .
12743	Return file type stats .
12744	Run a rejester job .
12745	Attempt to fetch data from S3 .
12746	Return a list of lines from a file .
12747	Generate a random adjspecies pair .
12748	Generate a random adjspecies pair .
12749	Morph a sentence .
12750	Get similarity score .
12751	Convert a hiragana sentence .
12752	Entity data .
12753	Get the shortsum of a reviews .
12754	List keywords .
12755	Chronologically chronology .
12756	Create a new stage .
12757	Initialize the stages .
12758	Initialize all stages .
12759	Run the reader and return the results .
12760	Run the writers .
12761	run a list of incremental transforms
12762	Replace a pipeline configuration with a new one .
12763	Create a WSGI application .
12764	Given a dictionary of sentences return a dictionary of chains .
12765	Return True if all target_mentions match the chain_mentions .
12766	Return True if any target mentions match any chain mentions .
12767	Given a rating and a list of tokens return a list of regex matches .
12768	Match a stream item to a list of tokens .
12769	Create a NER file from the config file .
12770	Align a chunk with a NER file .
12771	Terminate the child process .
12772	Multiplies p by n .
12773	Fix email addresses in text .
12774	Return a generator of sentences .
12775	Make the label index .
12776	Return a list of Sentences .
12777	Convert HTML entities to unicode .
12778	make a cleansed file
12779	Create a NER file .
12780	Remove whitespace from a string .
12781	Align a chunk with a NER file .
12782	Make paths absolute .
12783	Instantiate the pipeline configuration .
12784	Generate a chunk of the johns - smith corpus .
12785	Re - based clean text .
12786	Return a cleaned version of the given HTML .
12787	Create a clean visible file .
12788	Remove punctuation and whitespace from a string .
12789	Main function .
12790	Try to load a function from a module .
12791	Load external stages .
12792	Load stages from a module .
12793	Initialize a stage .
12794	Read from a file - like object .
12795	Return True if href is valid .
12796	make a list of labels
12797	Yield paths in input_dir
12798	Iterate over the tasks in the database .
12799	Get a random available key .
12800	Tokenize a sentence .
12801	Get sentences from ner_dom .
12802	Retry a function if it fails .
12803	Verify the md5 of data .
12804	Get bucket .
12805	Decode data from S3 .
12806	Get a chunk from a key .
12807	Convert a stream id to a kvlayer key .
12808	Convert kvlayer key to stream id .
12809	Get the key for a stream item .
12810	Main function .
12811	Build the argument parser .
12812	Add xpaths to a stream item .
12813	Takes a list of sentences and returns a generator of tokens .
12814	Convert a sequence of tokens to character offsets .
12815	Convert character offsets to xpaths .
12816	Add an element .
12817	Return the xpath for the piece .
12818	Return the index of the current text node .
12819	Iterate over the descendants of an element .
12820	Return a list of all elements in the source .
12821	Select an element by name .
12822	Select a subset of elements matching a pattern .
12823	Select an attribute from an element .
12824	Return the next sibling of elem .
12825	Make pretty text .
12826	Call the inkscape binary .
12827	Export a file using Inkscape .
12828	Export SVG to PDF .
12829	Export SVG to PNG .
12830	Returns a Jinja environment for the given file path .
12831	Setup the template file .
12832	Fill the file with the contents of the document .
12833	Save the document to a file .
12834	Create a doctype from a template file .
12835	Replace characters for SVG code .
12836	Render the image to a file .
12837	Render the PDF .
12838	Parse an XML document .
12839	Parse an HTML document .
12840	Parse an HTML fragment and return it as a string .
12841	Insert text at the current position .
12842	Insert node before refNode .
12843	Return a clone of this element .
12844	Execute the script .
12845	Return the string representation of a node .
12846	Insert a child into this node .
12847	Parse config file .
12848	Get google API credentials .
12849	Create datetimes for events .
12850	Create a google calendar event .
12851	Entry point for the script .
12852	Return the file extension .
12853	Add an extension to a file path .
12854	Return a temporary file .
12855	Remove all files with the given extension .
12856	Convert CSV file to JSON file .
12857	Replace a file content .
12858	Parse the HTML .
12859	Check the next tag .
12860	Create italic tag .
12861	Create strong tag .
12862	Create underline tag .
12863	Parse attributes .
12864	Remove line breaks .
12865	Parse href query param .
12866	Parse an attribute .
12867	Translate key values in adict .
12868	Returns the JSON representation of the object .
12869	Find all files in a folder that match a regular expression .
12870	Concat a sequence of strings .
12871	Check if full starts with part .
12872	Return True if full contains part .
12873	Get the length of a string .
12874	Convert an object into a boolean .
12875	Iterate over a sequence .
12876	Look up a key in a table .
12877	Replace characters for SVG code .
12878	Check if an svg file is valid .
12879	Merge two SVG files .
12880	Merge multiple PDF files .
12881	Convert a font file to SVG .
12882	Embed a font to SVG .
12883	Check the inputs .
12884	Check function signature .
12885	Recursively call the function recursively .
12886	Create an input file from an option list .
12887	Recursive helper function .
12888	Convert an object to a string .
12889	Convert an object to a number .
12890	Convert an object to a boolean .
12891	Serialize an expression .
12892	Change XML encoding .
12893	Save text into a QR code .
12894	Launch gromacs .
12895	Call a command .
12896	Convert a LaTeX file to PDF .
12897	Return a list of options for the given psy object .
12898	Transform a geometry from one spatial reference to another .
12899	Create a geometry object .
12900	Expand this rectangle to contain all the elements of other .
12901	Intersect two Envelopes .
12902	Returns True if both points intersect .
12903	Create a polygon .
12904	Create DataFrame from ZNM data .
12905	Write DataFrame to file .
12906	Select rows matching the condition .
12907	Create a Table from a nuclei index .
12908	Return the intersection of two tables .
12909	Return a new table with rows not in another table .
12910	Return elements with odd or even number .
12911	Return elements with odd or even number .
12912	Return elements with odd number .
12913	Return the difference in error .
12914	Root Mean Square Error .
12915	Compute the binding energy .
12916	S2N model .
12917	Calculate s1n .
12918	S2P model .
12919	Calculate s1p .
12920	Create a derived table .
12921	Wrap a function in a db session .
12922	Derive a key from a master password .
12923	Bootstrap a new database .
12924	Search domains .
12925	Modify a domain .
12926	Create a new domain .
12927	Extract hbs files .
12928	Return a file system prefix for a path .
12929	Srid of the authority .
12930	Main function .
12931	Initialize logging .
12932	Update a file .
12933	Return a dictionary of available drivers .
12934	Return image driver for path .
12935	Convert a geom to a numpy array .
12936	Rasterize a layer .
12937	Open a raster file .
12938	Create a raster from bytes .
12939	Copy raster from source to destination .
12940	Return a dictionary of the option names and values .
12941	Create a raster file .
12942	Set the GeoTransform of the Dataset .
12943	Read an array from the file .
12944	Raster envelope
12945	Return the image driver .
12946	Create a new raster .
12947	Return a masked version of the array .
12948	Get the number of data points .
12949	Reads a raster .
12950	Resample the image .
12951	Save image to file .
12952	Set the projection for this dataset .
12953	Warp this raster to another spatial reference .
12954	Calculate chunk length .
12955	Lookup the alphabet for a given charset .
12956	Encode a single chunk .
12957	Convert chunk to long .
12958	Get the chunk at index .
12959	Memoize a function .
12960	Return a compiled regular expression .
12961	Normalizes a date string .
12962	Detect timezone from locale .
12963	Return a dictionary representation of the object .
12964	Activate pdb hook .
12965	Emphasis an object .
12966	Handle incoming jobs .
12967	Main worker function .
12968	Run a worker pool .
12969	Sets the classification of this Proposal .
12970	Send a message .
12971	Turn on a light .
12972	Turn on a switch .
12973	Turn on a light .
12974	Turn off a device .
12975	Send messages from the queue .
12976	Send a reliable message .
12977	Create an adapter for an object .
12978	Sets the nature of this DeviceData .
12979	Update the configuration from a dictionary .
12980	Reset the options .
12981	Set the list of configuration files .
12982	Returns an iterator over the possible values of all options .
12983	Return the default values for all options .
12984	Create config file .
12985	Update the configuration from a dictionary .
12986	Read a configuration file .
12987	Read configuration files .
12988	Return a list of option names .
12989	Return a list of sections .
12990	Resolves a command name to a list of options .
12991	Add options to a parser .
12992	Build the argument parser .
12993	Parse command line arguments .
12994	Process a zsh command .
12995	Complete a zsh command .
12996	Return a list of options for a bash command .
12997	Run bash completion .
12998	Start a new master .
12999	Called when the connection is established .
13000	Called when a line is received .
13001	Called when the connection is lost .
13002	Called when a job is loaded .
13003	Called when a response is received .
13004	Close the job .
13005	Run a list of jobs .
13006	Close the server .
13007	Change the state of the future .
13008	Add a result .
13009	Wait until the job is complete .
13010	Load the next job .
13011	Complete the job .
13012	Add a result to the queue .
13013	Cancel all jobs .
13014	Wait for all jobs to finish .
13015	Distribute jobs from the active jobs to the job sources .
13016	Add a job set to the pool .
13017	Get a job .
13018	Return a job to the pool .
13019	Add a result to a job .
13020	Called when the job is done .
13021	Close the window .
13022	Uniqify a list .
13023	Match a regular expression .
13024	Get all entries .
13025	Get AWS region name .
13026	Filter a list of entries based on a set of filters .
13027	Get host by name
13028	Create an instance from a dictionary .
13029	Get the value of an attribute .
13030	Sort entries by attribute .
13031	Return a string representation of the table .
13032	Create an instance from a boto . cloudformation . Instance object .
13033	Return True if the value matches the filter .
13034	Display the IP address .
13035	Render a list of entries .
13036	Add timestamp to event dict .
13037	Setup logbook .
13038	Create a logger .
13039	Setup the celery application .
13040	Get information about a worker .
13041	Delete a job .
13042	Create a switch option .
13043	Return a configuration section .
13044	Set a value in a configuration file .
13045	Config command handler .
13046	Create bash and zsh files .
13047	Render a list of columns .
13048	Render a row .
13049	Render a table .
13050	Prepare the rows of a table .
13051	Colorize text .
13052	Get a color from a string .
13053	Generate a random color .
13054	Get user input .
13055	Check user credentials .
13056	Check if token is valid .
13057	Require token auth
13058	Check if a process is running .
13059	Dynamically import a module .
13060	Get self IP address
13061	Make a request to the API .
13062	Prepare post parameters .
13063	Serve the application .
13064	Render the template .
13065	Run a command and stream output .
13066	Streams a list of dictionaries .
13067	Stream a list of commands .
13068	Workdays between two dates .
13069	Get the path to a command .
13070	Build the ssh command .
13071	Build a scp command .
13072	Copy entries to remote path .
13073	Copy entries from a remote path to a local path .
13074	Run a command on a list of hosts .
13075	Connect to an entry via SSH .
13076	Load a LSI profile .
13077	Create a LSIProfile object from command line arguments .
13078	Relates a part to this one .
13079	Return a list of related packages .
13080	Load relationships .
13081	Add a part to the registry .
13082	Load a part .
13083	Find the value for the given name .
13084	Create a new instance from an element .
13085	Parse a chatl string .
13086	Build a JWT .
13087	Assign a force field to an AMPAL object .
13088	Find the maximum value of rad and npnp .
13089	Make a dictionary of force field parameters .
13090	Return the object as a stream .
13091	Return a generator of matching segments .
13092	Copy a directory .
13093	Open S3 bucket .
13094	Upload a directory to S3 .
13095	Upload a file to a bucket .
13096	Upload an object to a bucket .
13097	List all filenames in a directory .
13098	List directory names in a directory .
13099	Create a prefix for a directory .
13100	Delete a file .
13101	Ensure a login token exists .
13102	Returns the loud version of the language
13103	Delete a directory .
13104	Return the URL of the home page .
13105	Marks a function or method as silent .
13106	Breadcrumb for project home page .
13107	Home breadcrumb .
13108	Get the energy of a set of AMPAL objects .
13109	Get the internal energy of an AMPAL object .
13110	Return a list of all hotspots in the tree .
13111	Get a KKeeper token .
13112	Upload a file to LTD .
13113	Determine if we should skip travis events .
13114	Purge a surrogate key .
13115	Register a build .
13116	Confirm a build .
13117	Deep update a dictionary .
13118	Entry point for ltdconveyor .
13119	Edit a part
13120	Command for packing a directory .
13121	Split a path into parts .
13122	Find a file in a path .
13123	Get the editor to use .
13124	Process a module node .
13125	Generate a chart .
13126	Generate HTML .
13127	Serialize a dataset into a chart .
13128	Patch json data
13129	Convert json data to html
13130	Convert a dictionary to a Pandas DataFrame .
13131	write html file
13132	Returns the appropriate chart class for the given chart type .
13133	Encode two fields .
13134	Link to GitHub .
13135	Infer tarball URL from app . json .
13136	Create a heroku app .
13137	Delete an app .
13138	Decorator to define an iterator attribute .
13139	Generate a random binary string .
13140	Generate a random IPv4 address .
13141	Generate a random date between start and end .
13142	Returns a session object .
13143	Make a request to Heroku API .
13144	Create a new build .
13145	Check the status of a build .
13146	Generate a sequence of prefixes .
13147	Memoize a function .
13148	Decorator that ensures a function is unique .
13149	Register sub - commands .
13150	Get the root argparser .
13151	Get the description of the object .
13152	Get the help string for this command .
13153	Run subcommand .
13154	Encode a dataset .
13155	Get all athletes .
13156	Get the last n activities .
13157	Request activity list .
13158	Request activity data .
13159	Returns the URL for the given athlete .
13160	Generate an activity endpoint .
13161	Make a request to the given endpoint .
13162	Create a new build .
13163	Create a url with authentication .
13164	Generate a random title .
13165	Generate a random person name .
13166	Generate a random last name .
13167	Render the chart .
13168	Set the dataset .
13169	Render the chart .
13170	Check type .
13171	Return the URL for this request .
13172	Open a webbrowser window .
13173	Save the image to a file .
13174	Make a request to the server .
13175	Return a PIL Image object .
13176	Write the file to the given file object .
13177	Return the checksum of the file .
13178	Generate a random amount .
13179	Decorator for defining entity names .
13180	Return unprotected and protected claims .
13181	Return the signing keys as a JSON object .
13182	Unpack a metadata statement .
13183	Packs a metadata statement .
13184	Evaluate metadata statements .
13185	Check if the federation usage is correct .
13186	Add metadata statements to a request .
13187	Parse command line arguments .
13188	Add command line arguments .
13189	Apply logging options .
13190	Log a message at verbose level .
13191	Return the letter map for a word .
13192	Yield anagrams in a word .
13193	Convert a class name to an equivalent AMP name .
13194	Transform a timeseries into a list of points .
13195	Get the last value from a timeseries .
13196	Validate a page number .
13197	Get a page from an iterator .
13198	Change file mode .
13199	Create an internal signing service .
13200	Create a signing service .
13201	Sign a request .
13202	Create a new resource .
13203	Update metadata statement .
13204	Update a location s signature .
13205	Yield bundle contents .
13206	Create a bundle .
13207	Returns a list of urls for the given asset type .
13208	Returns the HTML tags for the given asset type .
13209	Return a list of HTML tags for all asset types .
13210	Make sure the url is a valid protocol .
13211	Find links in a URL .
13212	Start listening to AMP server .
13213	Returns a list of module names .
13214	import service modules
13215	Convert a string parameter to a tuple of lower and upper dates .
13216	Select fields from a document
13217	Apply datemap_list to doc .
13218	Print a cursor to the screen .
13219	Print the results of the query .
13220	Given a list of do_tasks and a dependency graph return a list of the tasks that the user has specified .
13221	Add default deps for project
13222	Add default assets types for a project .
13223	Add default sequences for a project .
13224	Add userrnd shot to project
13225	Post save handler .
13226	Create a shot for the given sequence .
13227	Create all tasks for an element .
13228	Pre - connect to a peer .
13229	Send a packet to a peer .
13230	Get a config value .
13231	Decorator to register an event type .
13232	Register a Cinder event type .
13233	Register a function as a Neutron customer process .
13234	Decorator to register an event type .
13235	Decorator to register a Swift event type .
13236	Add a function to the keystone process .
13237	Decorator to register an event type .
13238	Add a new factory .
13239	Remove a factory .
13240	Connect to a remote peer .
13241	Receive data from a connection .
13242	Disconnect a connection .
13243	Call a remote command .
13244	Called when the connection is established .
13245	Called when a connection is made .
13246	Called when data is received locally .
13247	Send data to remote device .
13248	Called when the connection is lost .
13249	Returns the local protocol for the given connection identifier .
13250	Called when remote data is received .
13251	Disconnect a connection .
13252	Centers a string .
13253	Print a clock on the right .
13254	Return a version number string .
13255	Identify the unit framework for a given target unit .
13256	Raise TraitError if value is not convertible to target unit .
13257	Add padding to data_to_pad .
13258	Unpads a block of data .
13259	Self - sign a message .
13260	Gather metadata statements .
13261	Pretty print anagrams .
13262	Create an argument parser .
13263	Main function .
13264	Process incoming data .
13265	Called when a type is unregistered .
13266	Create a stub for a remote function .
13267	Ping a remote call .
13268	Return a regex for the command .
13269	Convert a string to an AmpList .
13270	Return a string representation of the object .
13271	Verify this metadata statement .
13272	Parse a remote response .
13273	Dump database to file .
13274	List databases .
13275	Return a dictionary of local files .
13276	Sync a folder .
13277	Decorator to require user tokens .
13278	Redirect to the login page .
13279	Build a package .
13280	Create a readonly session .
13281	Load a JSON file .
13282	Create a self - sign JWT .
13283	Return a signed JWT .
13284	Decorator to mark a function as a library .
13285	Discover modules in testdir .
13286	Main function for librarian .
13287	Return the score of a letter .
13288	Calculate the score of a word .
13289	Generator for wordlists .
13290	Check if a word is a valid scrabble word .
13291	Main function .
13292	CLI entry point for stackoverflow .
13293	Called when a string is received .
13294	Returns the command and responder for the given command name .
13295	Parse request values .
13296	Run the responder .
13297	Write a response .
13298	Called when a connection is lost .
13299	Build a JSONAMPDialectReceiver .
13300	Create a KeyJar from a JWKS string .
13301	Load a bundle from a JSON string .
13302	Process nova events .
13303	Process a Cinder event .
13304	Process a customer event .
13305	Process a customer event .
13306	Process a customer message .
13307	Process a keystone event .
13308	Process a heat customer event .
13309	Serve the application .
13310	Print msg to stdout .
13311	Print msg to stderr .
13312	Registers a Command subclass .
13313	Registers a Command subclass .
13314	Returns the string representation of the value .
13315	Convert a string into an argument .
13316	Update completers dictionary .
13317	Connect to Ternya .
13318	Initialize and return a mq connection .
13319	import customer s service modules
13320	Initialize the nova consumer .
13321	init cinder consumer
13322	Initialize the neutron consumer
13323	init the glance consumer
13324	init the heat consumer
13325	Enable a specific Openstack component notification .
13326	Get song information .
13327	Download music .
13328	Execute the instructions .
13329	Load a module by name .
13330	call a function
13331	Dump a database to a file .
13332	Render Ditaa code .
13333	Cleanly shutdown the application .
13334	Run the application .
13335	Change the current working directory .
13336	Copy a directory tree .
13337	Starts the debugger .
13338	Get the mtime of a file .
13339	Returns True if item has changed since last call .
13340	Sync the database .
13341	Clear the cache .
13342	Scrape a feed .
13343	Download the image from the server .
13344	Check if the image has changed .
13345	Compile a fancy tag function .
13346	Find the caller of this function .
13347	Get the defining component of a peptide .
13348	Main entry point for the script .
13349	Find a symbol in the stack .
13350	Check if a PE is contained in another .
13351	Check if a PE is global .
13352	Get the data type name .
13353	Get the list of related attributes .
13354	Create an enum from an EDT .
13355	Create a bridge function .
13356	Create an external entity .
13357	Create a function that can be used as a decorator .
13358	Create a constant from a CNST syllable .
13359	Create a class method for an operation .
13360	Create a derived attribute .
13361	Create a class from an object .
13362	Create a simple association .
13363	Create a linked association .
13364	Create an association .
13365	Create a domain component .
13366	Process a single call .
13367	Accept the connection .
13368	Reject the call .
13369	Raise an exception .
13370	Send a message to the collector .
13371	Establish a connection to a worker .
13372	Dispatch a reply .
13373	Guess the type of the value .
13374	Deserialize a value .
13375	r \ n
13376	r \ d
13377	Get a feature collection .
13378	Get many documents from the index .
13379	Put features into the index .
13380	Delete a document .
13381	Delete all documents from the index .
13382	Delete the index .
13383	Return a generator of key - value pairs for each hit .
13384	Return an iterator over the ids of each hit in the database .
13385	Return a generator that yields the ids of all hits with the given prefix .
13386	Return an iterator over the ids of all documents in a prefix .
13387	Perform a fulltext search .
13388	Return the fulltext ids for the given query .
13389	Perform a keyword scan .
13390	Return the ids of all keywords in the database .
13391	Return the ids of the documents matching the query .
13392	Return a list of feature names .
13393	Return a list of filters for the given key ranges .
13394	Create the index .
13395	Create the mappings .
13396	Get the index mappings .
13397	Get the field types for this document .
13398	Return the disjunction of terms in a query .
13399	Return the number of bytes required to encode a feature collection .
13400	Count the number of bytes for each filter predicate .
13401	Pretty print a FeatureCollection .
13402	Process docopts .
13403	Default formatter .
13404	Convert an instance to a link string .
13405	Return a unique identifier .
13406	Check uniqueness constraint for a model .
13407	Check link integrity .
13408	Check subtype integrity .
13409	Return a function that returns a list of feature names .
13410	Convert a value to bytes .
13411	Put items into the table .
13412	Delete all tables .
13413	Scan the entire database .
13414	Scan a set of keys .
13415	Scan the index for the given value .
13416	Add a prefix to an index .
13417	Index scan prefix and return key .
13418	Perform a scan of the index for the given prefix .
13419	Define an index .
13420	Add a new entry to the index table .
13421	Put raw value into index .
13422	Yield the keys for the given indexes .
13423	Get an index by name .
13424	Check the name of a PyPI package .
13425	Add a direction .
13426	Get the name of the type .
13427	Get the refered attribute .
13428	Build core type element .
13429	Build an enum type .
13430	Build a complexType element .
13431	Build user type element .
13432	Build a type from a string .
13433	Build a class element .
13434	Build a component element .
13435	Build a schema element .
13436	Pretty - print an XML string .
13437	Fetch bikes .
13438	Set node position and character stream .
13439	Decorator to track a production .
13440	r \ d
13441	r \ x60
13442	r \ x62
13443	r \ d
13444	r \ d
13445	r \ x8B
13446	r \ d
13447	r \ x62
13448	r \ x62
13449	r \ x62
13450	r \ x60
13451	r \ d
13452	r \ d +
13453	Create a queue .
13454	Delete a queue .
13455	List all queues
13456	List all exchanges
13457	Purge a queue .
13458	Create a MIME message .
13459	Read the image from the server .
13460	Return True if text is visible .
13461	Parse command line options .
13462	Serialize a value of type ty .
13463	Serialize an association .
13464	Serialize a Cls class into a CREATE TABLE .
13465	Entry point for n - grams search .
13466	Search for a given query .
13467	Partition a collection according to a condition .
13468	Run the application .
13469	Returns extra context to be passed to the template .
13470	Find a link between inst1 and inst2 .
13471	Returns a copy of this link with the referential attributes set .
13472	Compute lookup key .
13473	Compute the index key .
13474	Return the type of an attribute .
13475	Create a new instance .
13476	Return all the instances of the metaclasses .
13477	Define a class .
13478	Send a message over the specified socket .
13479	Receive messages from socket .
13480	Check for dead code .
13481	Parse email addresses .
13482	Decorator to register a function as an RPC handler .
13483	Build a table of RPC specs .
13484	Normalize postcode .
13485	Return the next value .
13486	Accept S_SYS children .
13487	Accept C - C elements .
13488	Accept a package .
13489	Get the brightness of the image .
13490	Match the pattern .
13491	Find a match in the document .
13492	Returns a QTextEdit . ExtraSelection for the character at position .
13493	Called when the cursor position changes .
13494	Return a tuple of the exception information .
13495	Create an inputhook for Qt4 .
13496	Get a mapper by name .
13497	Add a url pattern to the blueprint .
13498	Add a route to the blueprint .
13499	Add a function to the data store .
13500	Add a function to the set .
13501	Call a URL .
13502	Execute the command .
13503	Handle up key press .
13504	Moves the cursor down .
13505	Return True if the history contains substring .
13506	Move to the next history entry .
13507	Handle execute reply .
13508	Check if history is locked .
13509	Return the history item at the given index .
13510	Set the history
13511	Store the current edits .
13512	Time to close event handler .
13513	Build a Record Collection from a DataFrame .
13514	Convert a collection to a pandas dataframe .
13515	Perform a single spinning method on a DataFrame .
13516	Set the attributes of the object .
13517	Subscribe to all topics .
13518	Log a message .
13519	merges a list of lists
13520	Returns a remote iterator .
13521	Convert a notebook to this notebook format .
13522	Return the supported platform .
13523	Get the importer for the given path item .
13524	Wrapper around StringIO .
13525	Parse a version string .
13526	Determine whether setuptools should be used .
13527	Add a distribution .
13528	Find plugins in plugin_env .
13529	Get the path to a cached archive .
13530	Parse an entry point source .
13531	Return the parsed package info .
13532	Compute the dependencies for this package .
13533	Parse a filename .
13534	Collapse leading whitespace .
13535	Hides the widget .
13536	Connects the event filter to the text edit .
13537	Returns the current text cursor .
13538	Updates the current item .
13539	Register admin site .
13540	Return a list of NT partitions .
13541	Compute system CPU times .
13542	Return a list of system CPU times .
13543	Read raw data from stdin .
13544	Blocking read from stdin .
13545	Update tab bar visibility .
13546	Create a new tab with the current kernel .
13547	Add a frontend to the tab bar .
13548	Add a menu action .
13549	Create dynamic magic function .
13550	Populate all magic menu
13551	Closes the window .
13552	Generate a random password .
13553	Verify a hashed password against a passphrase .
13554	Render an editable boolean cell .
13555	Return an indented short title for an item .
13556	Collect the editable booleans .
13557	Toggle a boolean attribute .
13558	Check if user has permission to change object .
13559	Check if user has permission to delete object .
13560	Add n children .
13561	Create a bintree graph .
13562	Submit a list of jobs .
13563	Validate the tree G .
13564	Make color table .
13565	Return a copy of this color scheme .
13566	Add a new color scheme .
13567	Set the active color scheme .
13568	Return the path to the python library .
13569	Handle iopub messages .
13570	Handle stdin request .
13571	Waits for the kernel to exit .
13572	Set style .
13573	Get the format for the given token .
13574	Get the format from the document .
13575	Returns a QTextCharFormat object from a style .
13576	Find a command in PATH .
13577	Normalize path .
13578	Check that value is a valid package namespace .
13579	Check for valid entry points .
13580	Check if the last line is blank .
13581	Check if the source code has the last two blank lines .
13582	Transform an assign system line .
13583	Transform assign magic line to python code .
13584	Remove leading and trailing whitespace from a prompt line .
13585	Transform an IPython prompt
13586	Push the given lines to the stack .
13587	Return whether more input is available .
13588	Find the indentation level .
13589	Store lines in the buffer .
13590	Return the source and raw data .
13591	Handle cell magic .
13592	Return True if this is a line mode cell .
13593	Transform a single cell .
13594	Add lines to the input stream .
13595	Initialize observers .
13596	Post a notification .
13597	Return the set of observers for a notification .
13598	Add an observer .
13599	Create a new background job .
13600	Update the status lists .
13601	Print a group report .
13602	Flush a group of jobs .
13603	Return the status of the job .
13604	Report the status of the job .
13605	Initialize the background job .
13606	Insert a value at a given position .
13607	Return a deep copy of the environment .
13608	Declare a special variable .
13609	Declare a special list variable .
13610	Declare a special set variable .
13611	Set the current working directory .
13612	Move the robot .
13613	Calculate the energy of the route .
13614	Return a dictionary of default values .
13615	Check if the table exists .
13616	Convert a list to a dictionary .
13617	Render an expression .
13618	Print a warning message .
13619	Parse config file .
13620	Format a list of rows as a table .
13621	Build a link .
13622	Return a script tag for the given url .
13623	Render a css file .
13624	Create an image tag .
13625	Subtract value from arg .
13626	Multiply a number by an argument .
13627	Return value divided by arg .
13628	Return the remainder of a number .
13629	Get model verbose name .
13630	Split a user input line .
13631	Add command line options .
13632	Add a builtin .
13633	Remove a builtin .
13634	Deactivate all builtins .
13635	Find the URL name .
13636	Return a generator of links with explicit rel links .
13637	Return a list of shell names from a string .
13638	Main function for coverage script .
13639	Add a callback action .
13640	Append an action .
13641	Parse the command - line arguments .
13642	Print a help message .
13643	Handle help .
13644	Check if arguments are valid .
13645	Execute the script .
13646	Print debug information .
13647	Unserialize an object .
13648	Set the display hook .
13649	Log uncaught exceptions .
13650	Check if a URL is a TCP or IPC socket .
13651	Validate url .
13652	Validate a url container .
13653	Pull a value from globals .
13654	Select n random ports .
13655	Create a remote function .
13656	Create a parallel function .
13657	Apply a function to a sequence .
13658	Get the last n lines .
13659	Set auto - indent mode .
13660	Initialize logstart .
13661	Save sys module state .
13662	Restore sys module state .
13663	Register a function to be called after the query is executed .
13664	Create a new main module .
13665	Cache main module namespace .
13666	Initialize the user namespace .
13667	Return a list of all known namespaces .
13668	Reset the execution history .
13669	Delete a variable
13670	Remove all keys that match the given regular expression .
13671	Push variables to the user namespace .
13672	Internal function to find an object
13673	Get the docstring of a property .
13674	Find an object by name .
13675	Inspect an object .
13676	Initialize the history manager .
13677	Show traceback .
13678	Display a traceback .
13679	Print the traceback of an event .
13680	Display a syntax error .
13681	Pre - process readline input .
13682	Return the completion result .
13683	Set a custom completer .
13684	Set the namespace and global namespace of the completer .
13685	Run a line magic function .
13686	Find a magic by name .
13687	Define a macro .
13688	Execute a shell command .
13689	Auto rewrite input .
13690	Return a dictionary of user variables .
13691	Evaluate user expressions .
13692	Evaluate an expression .
13693	Safe execution of a file .
13694	Run cached cell magic .
13695	Run a single cell .
13696	Run ast nodes .
13697	Enable pylab .
13698	Expand a variable .
13699	Create a temporary file .
13700	Extract a range of input lines .
13701	Find the user s code .
13702	Clean up temporary files .
13703	Broadcast a message to all connected clients .
13704	Send a message to multiple targets .
13705	Decorator for skipping test functions .
13706	Decorator to mark a function as known failure .
13707	Mark a function as deprecated .
13708	List all profiles in path .
13709	List all bundled profiles .
13710	Find a distribution by key .
13711	Run a command .
13712	Return the full path to a file .
13713	Return the next line .
13714	Send a string to the child .
13715	Send interrupt signal .
13716	Prepare regex pattern .
13717	Wait for a pattern to match .
13718	Wait for a match .
13719	Prepare regex pattern .
13720	Search for a string in the buffer .
13721	Search the buffer for a match .
13722	Return a listener function that logs progress .
13723	Unpack a directory .
13724	Emit a message .
13725	Return the last error
13726	Check the output of a command .
13727	Find the source for a file .
13728	Return a list of the arcs that have been executed .
13729	Returns a list of arc possibilities that are not executed .
13730	Returns a list of arcs that are unpredicted .
13731	Return a list of branch lines .
13732	Return the total number of branches .
13733	Return the missing branch arcs .
13734	Return a dict of branch statistics .
13735	Set the precision .
13736	Returns the percentage of covered statements .
13737	Get the percentage covered .
13738	Highlight given text .
13739	Highlight string using keywords .
13740	Highlight words in a string .
13741	Run a function .
13742	Unquote end of string .
13743	Indent a string .
13744	Return a marquee string .
13745	Format a screen string .
13746	Dedent text .
13747	Wrap paragraphs .
13748	Find the optimal separator width .
13749	Return the i th element of mylist or default .
13750	Compute an item matrix .
13751	Return a list of fields .
13752	Build kernel arguments .
13753	Setup SSH tunnels .
13754	Pretty print an object .
13755	Pretty print an object .
13756	Get the MRO of an object .
13757	Default pretty printer .
13758	Return a printer function that prints a sequence .
13759	Create a pprinter function for a dictionary .
13760	Pretty print the object .
13761	Pretty print a re pattern .
13762	Pretty print a type .
13763	Pretty print a function .
13764	Pretty print exceptions .
13765	Return the previous function for a given type .
13766	Given a type module and a type name return the previous type function .
13767	Write an object to the output .
13768	Write a breakable line .
13769	End a group .
13770	Flush the output buffer .
13771	Pretty print an object .
13772	Return a color scheme table with the exception colors .
13773	Write a row into an Excel spreadsheet .
13774	Get text from the clipboard .
13775	Get clipboard text .
13776	Get text from the clipboard .
13777	Get the prefix for the build directory .
13778	Rekey a dictionary .
13779	Extract dates from an object .
13780	Recursively squash datetime objects .
13781	Default date representation .
13782	Convert objects to json .
13783	Check if install_dir is a site dir .
13784	Write a script to the install directory .
13785	Sleep for t seconds .
13786	Create the argument parser .
13787	Convert . pyx files to . c files .
13788	Main function for the script .
13789	Build a PackageFinder instance .
13790	Called when the log level is changed .
13791	Create a default logger .
13792	Check if flags have changed .
13793	Print alias help .
13794	Print flag help .
13795	Print the subcommands .
13796	Print help .
13797	Print the examples .
13798	Update the config .
13799	Initialize a subcommand .
13800	Flatten flags into a single dict .
13801	Parse command line arguments .
13802	Load a config file .
13803	Generate the configuration file .
13804	Downsample an array by k elements .
13805	Format a list of info .
13806	Write a message to the output .
13807	Called when a config is changed .
13808	Return the help string for this class .
13809	Return the help text for a trait .
13810	Return a section of the configuration file .
13811	Clear the instance of this class .
13812	Return an instance of this class .
13813	Format a failure .
13814	A crash handler .
13815	Flushes the channel .
13816	Emits the started_channels signal .
13817	Read a file - like object .
13818	Read a file - like object without interrupt .
13819	Run a command and return its output .
13820	Split a string into tokens .
13821	Compress a dhist .
13822	Register the magics class .
13823	Record a magic function .
13824	Decorator to mark a method as magic .
13825	Decorator to mark a function as a magic function .
13826	Return a dict of LSMagic documentation .
13827	Register a set of magic objects .
13828	Register a function .
13829	Format a string for LaTeX .
13830	Parse command line options .
13831	Set a default option
13832	Display the current GUI reference .
13833	Create a task from a callable .
13834	Get information about a task .
13835	Return the callable object for this task .
13836	Calculate next run .
13837	Submit this task .
13838	Run the task .
13839	Run asap .
13840	Run a task for a given number of iterations .
13841	Run the callable once .
13842	Find the actual controller key file .
13843	Bind an IPython kernel to the shell and iopub sockets .
13844	Read steps from a test file .
13845	Create an interrupt event .
13846	Listen for multiple objects .
13847	Filter a namespace .
13848	List objects in a namespace .
13849	Check if options are mutually exclusive .
13850	Draw the current active figure if necessary .
13851	Flush all figures to IPython .
13852	Send a matplotlib figure .
13853	Load an extension .
13854	Unload an extension .
13855	Generate n random ports .
13856	Initialize the notebook web application .
13857	Handle SIGINT signal .
13858	Confirm user to exit .
13859	Shutdown all kernels
13860	Calculate the price options .
13861	Replace multiple occurrences of a string in a dictionary .
13862	Render the shell .
13863	Launch a kernel .
13864	Create a zip file .
13865	Fix version in metadata . txt
13866	Check if an object is a mappable type .
13867	Get a partition from a sequence .
13868	Monkey patch pexpect . spawn .
13869	Run a file .
13870	Run a source file .
13871	Report coverage data .
13872	Create the XML file for the analysis .
13873	Download a file from supercomputing . org .
13874	Reduce a list of frequencies .
13875	Compute the n - digit frequencies of a text file .
13876	Read a txt file and yield the digits .
13877	Calculate the frequencies of a list of digits .
13878	Return a two - digit frequency matrix .
13879	Generate n - digit frequencies .
13880	Plot two digit frequencies .
13881	Plot one - digit frequencies .
13882	Debug function .
13883	Reverse a view .
13884	Return True if prefix is private .
13885	Create a DocFileTestSuite from a list of paths .
13886	Debug a source file .
13887	Run a debug script .
13888	Debug a module .
13889	Return a dictionary of all files in hashroot
13890	compress all files in hashroot
13891	Return a list of all keys in the directory .
13892	Returns True if the given record should be allowed .
13893	Return True if record matches any of the matchers .
13894	Format an error .
13895	Embed an interactive shell .
13896	Main loop .
13897	Get new csv writer .
13898	Prepare locale directories .
13899	Write PO entries .
13900	Write header to file .
13901	Subscribe to a user .
13902	Initialize the parser .
13903	Run a Python module .
13904	Run a Python file .
13905	Create a code object from a Python source file .
13906	Create a Python code object from a . pyc file .
13907	Return an HTML table .
13908	Set the current value .
13909	Cancel completion .
13910	Select a row and column .
13911	Select the next item .
13912	Select the next item .
13913	Move to the left .
13914	Move to the right .
13915	Update the list .
13916	Return the frequency of each word in text .
13917	Print the frequency of each word .
13918	Return a string representation of the element .
13919	Write the document to a file .
13920	Validate a pin .
13921	Send a pin to one or more topics .
13922	Delete a shared pin .
13923	Send a pin to a user .
13924	Delete a pin .
13925	Subscribe to a topic .
13926	Get a list of all subscriptions .
13927	Monitor a function .
13928	Begins a progress bar .
13929	A context manager for tasks .
13930	Context manager for a subtask .
13931	Update the progress .
13932	Add a sub - monitor .
13933	Update the progress bar .
13934	Page a string .
13935	Move the package to a new location .
13936	Load a set of pyconfig files .
13937	Load configuration from file .
13938	Read a config file as a dict .
13939	Load flag from config file .
13940	Decode a list of arguments .
13941	Load configuration from argv .
13942	Load configuration from argv .
13943	Parse command - line arguments .
13944	Convert the namespace to a Config object .
13945	Find a module in path .
13946	Add a callback to the stop callback list .
13947	Called when the process is started .
13948	Called when the process is stopped .
13949	Interrupt and then kill the process .
13950	Return a list of arguments to pass to the MPI program .
13951	Start the MPILauncher .
13952	Send local file to remote
13953	fetch a file from remote
13954	Return the number of engines .
13955	Start n engines .
13956	Start a new job .
13957	Default context .
13958	Parse job id from output .
13959	write batch script
13960	Start the job .
13961	Create a context menu .
13962	Appends a JPEG file to the display .
13963	Append a PNG image to the display .
13964	Append a SVG to the document .
13965	Add an image to the document .
13966	Copy image to clipboard
13967	Get an image from the document .
13968	Insert an image .
13969	Insert SVG .
13970	Save an image to disk .
13971	Called when the program exits .
13972	Initialize the environment .
13973	Auto rewrite input .
13974	Ask the user to exit .
13975	Set the next input text .
13976	Read configuration from file .
13977	Get a list of option values .
13978	Get a list of lines from a section option .
13979	Initialize from an environment variable .
13980	Set attributes from keyword arguments .
13981	Read configuration from file .
13982	Set attribute from config option .
13983	Expand a user path .
13984	Set the list of delimiters .
13985	Split line at cursor position .
13986	Return a list of keywords that match the given text .
13987	Return a list of attributes that match text .
13988	Called when the greedy splitter is changed .
13989	Return a list of file matches .
13990	Return list of aliases that match text .
13991	Return a list of matches for text .
13992	Return the default arguments for an object .
13993	Complete the text until the cursor position .
13994	Implements readline . rlcomplete .
13995	Match a record against a set of tests .
13996	Return a list of records that match the given check .
13997	Extract a subdict from a dict .
13998	Return True if there is no input .
13999	Write the output prompt .
14000	Write format data to stdout .
14001	Log output to console .
14002	Raise InvalidOperationException if the object is already freezed .
14003	Convert MySQL timestamp string to Timestamp object .
14004	Called when the event loop has changed .
14005	Dispatch a control message .
14006	Dispatch a message .
14007	Start the shell .
14008	Handle one iteration of the shell .
14009	Publish a pyin message .
14010	Abort a request .
14011	Clear a request .
14012	Convert a topic to a string .
14013	Called when the kernel is shutting down .
14014	Called before the context manager is started .
14015	Called after the context is done
14016	Return an absolute path to a directory .
14017	Return True if name is a file - like object .
14018	Check if an object is a class
14019	Check if path is a package .
14020	Return the package name of the given file .
14021	Create a line label .
14022	Returns the last key that matches a regular expression .
14023	Transplant a function .
14024	Create a transplant class .
14025	Get system CPU times .
14026	Get the command line for this process .
14027	Return a list of open files .
14028	Return a list of connections for this process .
14029	Check if user has group .
14030	Resolve a class from a class path .
14031	Return the percentage of usage used .
14032	Memoize a function .
14033	Mark a function as deprecated .
14034	Login to Google Docs .
14035	Get the GDocs key .
14036	Ensure that the temp path exists .
14037	Clear temporary files .
14038	Upload file to Google Docs .
14039	Synchronize local and gdocs .
14040	Download the PO file .
14041	Uploads PO files to Google Docs .
14042	Clear the database .
14043	Create a new qtconsole
14044	Check URL accessibility .
14045	Check if url has contents .
14046	Get the response code from a URL .
14047	Compare the content type of a URL .
14048	Compare response code .
14049	Validate data .
14050	Clear output .
14051	Find the absolute path of a command .
14052	Return a list of CodeUnits .
14053	Return the name of the root directory .
14054	Return the source file .
14055	Returns True if the file should be considered Python .
14056	Convert timedelta to total seconds .
14057	Wait for the result .
14058	Wait for all messages to arrive .
14059	Get a dict of results from the engine .
14060	Abort the transaction .
14061	Get elapsed time .
14062	Wait for all tasks to finish .
14063	Publish a message to IPython display pub
14064	Wait for all outputs to be ready .
14065	Wait for the results to arrive .
14066	Return absolute file path .
14067	Prepare a list of patterns .
14068	Get the separator from a string .
14069	Find Python files in a directory .
14070	Return the relative filename .
14071	Return the canonical filename for filename .
14072	Get data from a zip file .
14073	Return True if the path matches one of the directories .
14074	Return True if fpath matches one of the patterns .
14075	Apply aliases to a path .
14076	Loop Qt4 .
14077	Start a wx event loop .
14078	Main loop for Tkinter .
14079	Loop a gtk kernel .
14080	Run the kernel in a separate thread .
14081	Enable an interactive GUI .
14082	Compute the GOE of a plane .
14083	Compute the eigenvalue difference of a matrix .
14084	Compute the ensemble differences .
14085	Initialize the step .
14086	Parse a step configuration file .
14087	Parse a step configuration .
14088	Initialize the crash handler .
14089	Load config file .
14090	Initialize the profile directory .
14091	Generate default config file .
14092	Write the file to disk .
14093	Erase all lines and arcs .
14094	Return a dict of line names to lists of line numbers .
14095	Return a dictionary of all arc names sorted by frequency .
14096	Write the data to a file .
14097	Read a file .
14098	Read data from file .
14099	Read a file .
14100	Combine parallel data .
14101	Add line data .
14102	Add arc data .
14103	Add lines and arcs to hash .
14104	Return a summary of the file contents .
14105	Get pasted lines .
14106	Main loop .
14107	Replace multiline history .
14108	Prompt the user for input .
14109	Edit the last syntax error .
14110	Check if we should recompile
14111	Exit the program .
14112	Return the URL and revision number .
14113	Create a new frontend master .
14114	Initialize the colors .
14115	Get information about the object .
14116	Convert Robj to numpy array .
14117	Find the source code for an object .
14118	Set colors of the terminal .
14119	Toggles the color scheme .
14120	Format a traceback as text .
14121	Format a traceback .
14122	Format a list of extracted files .
14123	Format an exception only .
14124	Show an exception only .
14125	Starts the debugger .
14126	Set the mode of the tb .
14127	Decorator for views that require the user to be a member of a group .
14128	Ensure a module is imported recursively .
14129	Add a line to the code .
14130	Add a section .
14131	Get a function by name .
14132	Generate code for an expression .
14133	Render the template .
14134	Do dot notation .
14135	Render a template .
14136	Default formatters .
14137	Return the function to use for the given type .
14138	Given a type module and type name and a function return the previous function .
14139	Called when precision has changed .
14140	Return list of user config files .
14141	Configure options .
14142	Configure logging .
14143	Configure the working directory .
14144	Dumb page .
14145	Page a string .
14146	Page a file .
14147	Get pager command .
14148	Get pager start string .
14149	Print a string to screen .
14150	Print basic unicode .
14151	Print a string in PNG format .
14152	Print a string to a PNG file .
14153	Check if the object can be printed using LaTeX .
14154	Print a string using LaTeX .
14155	Add plugin options .
14156	Validate a list of strings .
14157	Ensure all keys and values in a dict are strings .
14158	Run the IOLoop .
14159	Handle incoming messages .
14160	Execute the given code .
14161	Send a complete request .
14162	Get object info .
14163	Send a history request .
14164	Send a shutdown request to the kernel .
14165	Flush the buffer .
14166	Send an input message .
14167	Start all channels .
14168	Stop all channels .
14169	Return True if channels are running False otherwise .
14170	Load connection file .
14171	Write the connection file to disk .
14172	Start a kernel .
14173	Shutdown the kernel .
14174	Restart the current kernel .
14175	Kill the kernel .
14176	Interrupt the current kernel .
14177	Send signal to kernel .
14178	Check if the kernel is alive .
14179	The shell channel .
14180	Sub - channel .
14181	Get the current hb channel .
14182	Bind a kernel to an IPython instance .
14183	Log a debug message .
14184	Get the list of extension classes .
14185	Perform a pre - step .
14186	Post a step .
14187	Call the extensions finalize method .
14188	Walk an egg directory .
14189	Scan a module .
14190	Launch a new instance of IPython .
14191	Save connection info to file .
14192	load config from json file
14193	Load secondary config .
14194	Execute a cell in parallel .
14195	Enable autopx mode
14196	Disable autopx .
14197	Run a single cell .
14198	Process heartbeat messages .
14199	Run a task .
14200	Remove a task from the queue .
14201	Patch a protocol so that it can be used by the agent .
14202	Patch an attribute if it is missing .
14203	Accept a connection .
14204	Reject the connection .
14205	Get the proxy agent .
14206	Called when a form is valid .
14207	Delete the object .
14208	Ensure user is logged in .
14209	Report a coverage report .
14210	Check all modules .
14211	Open a file in IPython .
14212	Fix the error editor .
14213	Get the clipboard contents .
14214	Add a function to the chain .
14215	Get metadata for a module .
14216	Configure logging .
14217	Import an item from a package .
14218	Try passwordless SSH .
14219	Try passwordless openssh .
14220	Try passwordless paramiko .
14221	Establish a tunnel connection .
14222	Open a tunnel .
14223	Stop scheduling tasks .
14224	Unwraps an exception .
14225	Register an engine .
14226	Unregister an engine .
14227	Handle ExecuteReply messages .
14228	Flush all pending notifications .
14229	Flushes results from the queue .
14230	Flush all pending control messages .
14231	Flush ignored control messages .
14232	Process iopub messages .
14233	Spin for interval seconds .
14234	Stop spinning .
14235	Spin the event loop .
14236	Wait for one or more jobs to complete .
14237	Send an apply request to the client .
14238	Send an execute request .
14239	Get a result .
14240	Get the status of the engine .
14241	Purge results from the engine .
14242	Get the history of the hub .
14243	Query the database .
14244	Return a set of opcodes .
14245	Get the byte parser .
14246	Return a list of lines that match the given regexes .
14247	Parse the text .
14248	Return the first line of the given line .
14249	Given a list of lines return a set of lines that should be ignored .
14250	Parse the source file .
14251	Return all arcs in the file .
14252	Return a dict of line numbers to exit counts .
14253	Return a list of child parsers .
14254	Yield bytes and line numbers .
14255	Find all of the lines in this code .
14256	Return a string representation of a block stack .
14257	Split the code into chunks .
14258	Check that all chunks are valid .
14259	Return a list of arcs .
14260	Return a list of all chunks .
14261	Return all arcs of this parser .
14262	Add coverage options .
14263	Start coverage .
14264	Generate the coverage report .
14265	Check if a file should be included .
14266	Interpret a source distro name .
14267	Open URL with authentication .
14268	Fetch a distribution .
14269	Get parent module .
14270	Return the root topic of the engine .
14271	Render a template .
14272	Configure the plugin .
14273	Format an error .
14274	Split data by num elements .
14275	Convert a notebook from one notebook format to another .
14276	Convert hex color to rgb
14277	Get the colors for a given stylename .
14278	Get a QFont from a family name .
14279	Handle execute reply .
14280	Handle a reply to a history request .
14281	Handle a pyout message .
14282	Handle display data .
14283	Called when the channel is started .
14284	Execute a file .
14285	Process an execute error message .
14286	Process an execute payload .
14287	Set the default color scheme .
14288	Edit a file .
14289	Make in prompt .
14290	Make a continuation prompt .
14291	Called when the style sheet is changed .
14292	Called when the syntax style has changed .
14293	Handle response from server .
14294	Sign url parameters .
14295	Transform the data into a dictionary .
14296	Return virtual memory information .
14297	Get system CPU times .
14298	Return a list of process UIDs .
14299	Get the process gids .
14300	Return a list of process threads .
14301	Return a list of open files for this process .
14302	Get the commit hash for a package .
14303	Return package information .
14304	Return system information .
14305	Return the number of CPU cores on the system .
14306	Return the number of CPUs .
14307	Get the next set of results .
14308	Fetch a single row .
14309	Fetch many rows .
14310	Fetch all rows .
14311	Connect to one or more peers .
14312	Read a notebook from a JSON string .
14313	Read a notebook from a string .
14314	Read data from a string .
14315	Writes a notebook to a file .
14316	Write nb to fp .
14317	Convert . ipynb files to metadata .
14318	Load a value from a dictionary .
14319	Return True if name matches any of the filters .
14320	Determine if the given class should be included in the suite .
14321	Return True if the given directory should be included .
14322	Determine if a file should be loaded .
14323	Check if a function is wanted .
14324	Return a boolean indicating whether the given method should be called .
14325	Determine if a module is wanted .
14326	Read lines from a file .
14327	handle list command
14328	Print a list of lines .
14329	pdef locals globals
14330	Calculate the conversion factor between two currencies
14331	Convert a value from one currency to another .
14332	Compute the return value for a given rate .
14333	Get the encoding of a stream .
14334	Return the default encoding to use .
14335	Write the connection file .
14336	Start the heartbeat thread .
14337	Log connection information .
14338	Initialize the session .
14339	Initialize IO streams .
14340	Initialize the kernel .
14341	Initialize the connector .
14342	Register with the controller .
14343	Convert HTML content to text .
14344	Convert markdown to text .
14345	Convert a domain name to a fully qualified domain name .
14346	Add command line options for NoseExclude .
14347	Configure excludes .
14348	Check if a directory should be excluded .
14349	Returns True if the extension links to a dynamic library .
14350	Call a list of functions .
14351	Call each function in reversed order .
14352	Append a function to the list .
14353	Insert a function into the list .
14354	Format the usage string .
14355	Initialize the application .
14356	Write the pid file .
14357	Remove the pid file .
14358	Get pid from pid file .
14359	Construct a parser for a magic function .
14360	Return the real name of a magic function .
14361	Highlight a block of text .
14362	Rehighlight the given block .
14363	Set the highlight format .
14364	Copy text to clipboard
14365	Execute a shell command .
14366	Hook called when the prompt is finished .
14367	Tab pressed .
14368	Make a context menu .
14369	Filter a console key press event .
14370	Insert continuation prompt .
14371	Handle a complete reply .
14372	Register a callback to be called when a command is executed .
14373	Handle an exec message .
14374	Handle execute reply .
14375	Handle an input request .
14376	Handle kernel died .
14377	Handle an object info reply .
14378	Handle a pyout message .
14379	Handle stream messages .
14380	Handle a shutdown reply
14381	Execute a file .
14382	Interrupt the kernel .
14383	Reset the shell .
14384	Restart the kernel .
14385	Show call tip .
14386	Send a completion request to the kernel .
14387	Process an execute error message .
14388	Process an execute message .
14389	Handle document contents changes .
14390	Add a plugin .
14391	Execute the chain of plugins .
14392	Run all registered plugins .
14393	Simple wrapper for plugins .
14394	Configure plugins .
14395	Load all registered plugins .
14396	Load builtin plugins .
14397	Convert latex string to png string .
14398	Convert latex to HTML .
14399	Convert a math string to an image .
14400	Check if requirements file exists .
14401	Return an iterator over all processes .
14402	Calculate CPU usage .
14403	Return a dictionary representation of the object .
14404	Return the process name .
14405	Return the executable for this process .
14406	Get all the children of this process .
14407	Get CPU percent .
14408	Get the memory usage in percent .
14409	Return a list of memory maps .
14410	Check if the process is running .
14411	Suspends the current process .
14412	Resume the current process .
14413	Kill the current process .
14414	Wait for the process to terminate .
14415	Wire up the kernel .
14416	Hijack gtk . main and gtk . main_quit .
14417	Return True if identifier is shadowed .
14418	Initialize transformers .
14419	Register a transformer .
14420	Unregister a transformer .
14421	Initialize checkers .
14422	Register a checker .
14423	Unregister a checker .
14424	Initialize handlers .
14425	Register a handler .
14426	Unregister a handler .
14427	prefilter a line
14428	Find a handler for a line .
14429	Transform a line .
14430	Prefilter a line .
14431	Prefilter lines .
14432	Check if the IP is auto
14433	Check for special characters .
14434	Returns the handler for the given line .
14435	Return the prefilter handler for the given line .
14436	Handle a line of input .
14437	Process a single line .
14438	Handle a line .
14439	Handle the magic command .
14440	Process a single line .
14441	Handle a line .
14442	Override Qt method .
14443	Hide the call tip .
14444	Paints the call tip .
14445	Show call info .
14446	Show the call tip .
14447	Handle cursor position change .
14448	Create a proxied attribute .
14449	Canonicalize a path .
14450	Validate an instance against a schema .
14451	Return a masked version of this object .
14452	Check if we re running in a virtualenv
14453	Calculate the frequency of each word in a list of targets .
14454	Decorate a view function .
14455	Return a list of default aliases for the kernel .
14456	Soft defines an alias .
14457	Define an alias .
14458	Validate an alias .
14459	Call an alias .
14460	Transform an alias .
14461	Expand aliases .
14462	Autohelp directive .
14463	Reset all attributes .
14464	Split a string into ANSI or special sequences .
14465	Get a color .
14466	Returns a QTextCharFormat
14467	Generate a JWT .
14468	Decorator to acquire the lock .
14469	Clean expired JWTs .
14470	Return True if the token is already used .
14471	Validate a JWT
14472	Acquire a semaphore .
14473	Return common prefix of items .
14474	Filter an event .
14475	Returns the size hint for this widget .
14476	Check if we can cut .
14477	Check if the clipboard can be copied .
14478	Clear the screen .
14479	Cuts the text .
14480	Execute the source code .
14481	Get the input buffer .
14482	Set the input buffer .
14483	Sets the font for this widget .
14484	Paste the text into the clipboard .
14485	Print the given printer .
14486	Move to the top of the prompt .
14487	Reset font .
14488	Internal helper for appending custom commands .
14489	Append an HTML string to the prompt .
14490	Appends an HTML fragment containing plain text .
14491	Append plain text .
14492	Clears the temporary buffer .
14493	Complete with items .
14494	Fill the temporary buffer .
14495	Checks if a key is pressed down .
14496	Create the underlying control .
14497	Create the page control .
14498	Filter a key press event .
14499	Get the plain text of a block
14500	Returns the end cursor .
14501	Get the cursor s column .
14502	Get the input buffer cursor line .
14503	Get the cursor position .
14504	Get selection cursor .
14505	Insert the continuation prompt .
14506	Insert the given HTML into the given cursor .
14507	Insert an HTML document into the clipboard .
14508	Insert plain text .
14509	Keep cursor in buffer .
14510	Handle keyboard quit .
14511	Page text .
14512	Called when the prompt is started .
14513	Read a line from the terminal .
14514	Set the continuation prompt .
14515	Sets the top cursor .
14516	Show the prompt .
14517	Adjust scrollbars .
14518	Main entry point for the script .
14519	Copy a config file to the current location .
14520	Create a profile directory .
14521	Find a profile directory by name .
14522	Convert a comparison function to a key .
14523	Read the contents of a file .
14524	Prompt the user for multiple lines .
14525	Create a temporary file .
14526	Close the stream .
14527	Write data to the file .
14528	Add a new heartbeat handler .
14529	Add a new heart failure handler .
14530	Handle a heartbeat message .
14531	Return a list of batches from a sequence .
14532	Convert a path to a filename .
14533	Walk a directory .
14534	Display all data .
14535	Calculate the time unit for a given elapsed time .
14536	Extract wininst configuration from a dist_filename .
14537	Uncaches a zipfile directory .
14538	Quote a string .
14539	Check for conflicts .
14540	Set fetcher options .
14541	Create the home directory .
14542	Check if a file is an archive file .
14543	Make an object mutable .
14544	Create a readonly proxy object .
14545	Create a new heading cell .
14546	Create a new notebook node .
14547	Create a new author node .
14548	Check if path is a writable directory .
14549	Unquote a filename .
14550	Return the filename of a Python file .
14551	Find a file in one of the search paths .
14552	Get the home directory .
14553	Get the xdg directory .
14554	Get the IPython installation directory .
14555	Get the path to the IPython package directory .
14556	Get the path to an IPython module .
14557	Check if a target is outdated
14558	Return the md5 hash of a file .
14559	Check for old IPython configuration files .
14560	Update suggestions dictionary .
14561	Returns a list of suggestions for the object .
14562	Get suggestions for an object .
14563	Return the relative path to this directory .
14564	Glob a directory .
14565	Return a list of lines .
14566	Read the MD5 hash of the file .
14567	Begin profiling .
14568	Print the results of the profiler .
14569	Closes the profiler .
14570	Handle heartbeats .
14571	Enable a wx application .
14572	Disable event loop integration .
14573	Disable Qt4 .
14574	Enable interactive mode .
14575	Enable a Tkinter application .
14576	Enable Pyglet .
14577	A wave saver .
14578	Initialize the database .
14579	Run a SQL query .
14580	Get session information .
14581	Get the last n lines .
14582	Get a range by string .
14583	Get the name of the history file .
14584	Set session name .
14585	Reset the history .
14586	Get a range session .
14587	Store the output of a line .
14588	Write the history to the database .
14589	Stop the simulation .
14590	Get the number of CPUs .
14591	Get system CPU times .
14592	List available disk partitions .
14593	Return a list of process IDs .
14594	Return a nicely formatted pair .
14595	Format a list of lines .
14596	Return a short version of the current stack .
14597	Decorator that checks the cache .
14598	Join a list of regexes .
14599	Try to remove a file .
14600	Update the MD5 hash of a value .
14601	Update cluster profiles .
14602	Start a cluster .
14603	Stop a cluster .
14604	Find a command in the PATH .
14605	Return stdout and stderr of a system call .
14606	Find code units in the coverage data .
14607	Report coverage data .
14608	Raises exceptions .
14609	Set the current trace .
14610	A decorator that raises a TimeExpired exception if the time limit is exceeded .
14611	Load IPython extensions .
14612	Run the shell code .
14613	Run code from IPython .
14614	Run the startup files .
14615	Run all of the exec_files
14616	Run code given at command line .
14617	Run the module .
14618	Register a function as a generic type .
14619	Return the filename of a static file .
14620	Read data from a file .
14621	Escape special characters .
14622	Report the coverage .
14623	Make local static report files .
14624	Write html to file .
14625	Return the hash of the source file .
14626	Write the index file .
14627	Read the status from a directory .
14628	Write coverage report to directory .
14629	Compare two lists .
14630	Get a slice of a sequence .
14631	Split a sequence into chunks .
14632	Read configuration file .
14633	Read the MANIFEST . in file .
14634	Convert a glob pattern to a regular expression .
14635	Check if filename matches any of patterns .
14636	Return a list of all versioned files .
14637	Start a new kernel .
14638	Shutdown a kernel .
14639	Kill a kernel .
14640	Get a kernel .
14641	Get kernel ports .
14642	Get the notebook id for a kernel .
14643	Start a kernel .
14644	Shutdown a kernel .
14645	Interrupt a kernel .
14646	Restart a kernel .
14647	Create an iopub stream .
14648	Create shell stream .
14649	Create a hb stream .
14650	Reset the instance attributes .
14651	Export an HTML file .
14652	Export an XHTML file .
14653	Ensure image tag is utf8 .
14654	Fix problematic HTML .
14655	Export the document .
14656	Return a unique object or None .
14657	Given a list of tokenized terms and a list of search fields return a list of Q objects .
14658	Get text query .
14659	Build a date less query .
14660	Build a less query
14661	Returns a combined null or blank query .
14662	Set case insensitive fields .
14663	Add command line options .
14664	Validate a method s attributes .
14665	Returns True if the given method should be exposed .
14666	Rotate the cursor .
14667	patch pyzmq to use tornado . ioloop . IOLoop
14668	Create a parser from a schema URL .
14669	Get websocket URL .
14670	Reserializes a list of messages .
14671	Injects a cookie into the request .
14672	Start a new heartbeat .
14673	Start the hb timer .
14674	Stop the heartbeat .
14675	Load data into memory .
14676	Validate and return the index .
14677	Seek to the given block index .
14678	Edit the block at the given index .
14679	Show the block at the given index .
14680	Show all blocks .
14681	Run a series of methods on a collection .
14682	Batch a list of cars .
14683	Run a function in a separate thread .
14684	Run a collection of functions in parallel .
14685	Wrap a function with a context manager .
14686	A decorator to inject object attributes .
14687	Return the source of a traceback .
14688	Return a list of lines that are inspectable .
14689	Displays a progress bar .
14690	Cleans up the specified engines .
14691	Perform a pre call .
14692	Set the ignore state .
14693	Decorator to save message ids .
14694	Sync the results of the given function .
14695	Spin self after f .
14696	Get all messages in the queue .
14697	Get a message from the queue .
14698	Decorator to define a property .
14699	Get only the given fields .
14700	Parse a URL .
14701	Returns a list of modules in path .
14702	Get the list of root modules .
14703	Quick completer .
14704	Return a list of modules to import .
14705	The magic_run_completer event handler .
14706	Return a list of completion suggestions .
14707	Quote an attribute .
14708	Configure the plugin .
14709	Report to the given stream .
14710	Add an error .
14711	Add a failure .
14712	Add a successful test .
14713	Generate a random twobin number .
14714	Randomly weight a list of loads .
14715	Register an engine .
14716	Unregister an engine .
14717	Handle stranded tasks .
14718	Dispatch incoming submission .
14719	Audit for timeouts .
14720	Fail an unreachable message .
14721	Check if the job can be run .
14722	Save a job to the graph .
14723	Submit a task .
14724	Dispatch a result to the client .
14725	Handle a result .
14726	Handle an unmet dependency .
14727	Update the dependency graph .
14728	Start logging .
14729	Print log state .
14730	Write a log line .
14731	Write data to the log .
14732	Stop logging .
14733	Create a new notebook node .
14734	Add a string to the chain .
14735	Add a regex to the dispatcher .
14736	returns a generator of objects that match the key
14737	Return a list of values that match the key .
14738	Called when a notebook dir is changed .
14739	List all notebooks in the notebook directory .
14740	Create a new notebook id .
14741	Delete a notebook .
14742	Check if a notebook exists .
14743	Return the path of a notebook .
14744	Get the path to the file with the given name .
14745	Get a notebook .
14746	Get a notebook object .
14747	Save a new notebook .
14748	Save a notebook .
14749	Save a notebook object .
14750	Delete a notebook .
14751	Create a new untitled notebook .
14752	Copy a notebook .
14753	Given a list of tokens return a list of tokens .
14754	Tokenize a source string into a list of lines .
14755	Load the default config .
14756	Return a list of default classes .
14757	Parse command line arguments .
14758	Initialize the shell .
14759	Initialize the shell .
14760	Initialize the banner .
14761	Return a string representation of an object .
14762	Parse a notifier name .
14763	Set the default value for this trait .
14764	Add or remove notifiers .
14765	Return a dict of traits for the given class .
14766	Get the metadata for a trait .
14767	Validate the value .
14768	Get the default value for this field .
14769	Check to see if the result is a subset of completed .
14770	Return True if this task is unreachable .
14771	Return the result as a dictionary .
14772	Return the depth of n in tree .
14773	Print a bintree tree .
14774	Disambiguate a DNS URL .
14775	Apply a reduce function to each element of a sequence .
14776	Validate targets .
14777	Process a monitor traffic message .
14778	Dispatch a query .
14779	Handle a new heart .
14780	Handle a failed heart .
14781	Save a task request .
14782	Save the result of a task .
14783	Save an iopub message .
14784	Handle a connection request .
14785	register a new engine
14786	Unregister an engine .
14787	Finish a registered engine .
14788	Handle a shutdown request .
14789	Purge pending results .
14790	Extract content and buffers from a result record .
14791	Get results .
14792	Get message history .
14793	Query the database .
14794	Change the current working directory .
14795	Decode the output of a completed command .
14796	Run a command under the root directory .
14797	Execute the script and return the output .
14798	Dispatch message .
14799	Check if the message is coming from this session
14800	Report a list of morfs .
14801	Annotate a file .
14802	Get the installed version of a package .
14803	Squash unicode strings .
14804	Extract a header from a message .
14805	Check packers .
14806	Create a message .
14807	Sign a list of messages .
14808	Serialize a message .
14809	Send a message to a socket .
14810	Send a message to a stream .
14811	Receive a multipart message .
14812	Feed identities .
14813	Unserialize a message .
14814	Save SVG file .
14815	Writes a string to the clipboard .
14816	Convert an SVG string to a QImage .
14817	Return information about an object .
14818	Get the docstring of an object .
14819	Get the source of an object .
14820	Get the argspec of a Python function .
14821	Return a tuple of the call line and docstring .
14822	Find the absolute path of an object .
14823	Find the line number of the source of an object .
14824	Get the definition of an object .
14825	Return the header of the color table .
14826	Print no info message .
14827	Print the definition of an object .
14828	Print the documentation for an object .
14829	Show the source of an object .
14830	Print the contents of a file .
14831	Format a list of fields .
14832	Return a pretty - printed version of an object .
14833	Perform a pattern search .
14834	Return a threaded reactor .
14835	Decorator to mark a function as a Deferred .
14836	Find the best string .
14837	Convert to string .
14838	Return the document as XML .
14839	Load all modules in the given packages .
14840	Invert a dictionary .
14841	Merge this struct with another .
14842	Convert an object to a primitive type .
14843	Format a string .
14844	Get a list of figures .
14845	Print a matplotlib figure .
14846	Decorator to turn off interactive rendering .
14847	Select a matplotlib figure format .
14848	Find the GUI and backend to use .
14849	Activate matplotlib .
14850	Configure inline support .
14851	Activate pylab .
14852	Log a trace event .
14853	Start tracing .
14854	Stop tracing .
14855	Start the tracer .
14856	Install the real tracer .
14857	Start the collector .
14858	Stop this collector .
14859	Pause profiling .
14860	Resume tracing .
14861	Get the line data .
14862	Collect exceptions from a remote call .
14863	Render the traceback .
14864	Start coverage process .
14865	Return the canonical directory for this file .
14866	Return the source code for a file .
14867	Return a tuple of a boolean indicating whether the file should be traced .
14868	Determine if we should trace .
14869	Log a warning .
14870	Check to see if any of the packages have been imported .
14871	Start the profiler .
14872	Clean up after shutdown .
14873	Exclude a regex .
14874	Return the regular expression used to exclude a particular object .
14875	Save data to file .
14876	Combine parallel data .
14877	Harvest data .
14878	Run the analysis .
14879	Analyzes a Morf object and returns a tuple of the filename statements excluded and missing .
14880	Analyzes a code unit .
14881	Report results to a file .
14882	Annotate a set of morfs .
14883	Generate an HTML report .
14884	Report coverage data to an XML file .
14885	Display objects .
14886	Display a list of objects as HTML .
14887	Display a list of objects as SVG .
14888	Display a list of objects as PNG .
14889	Display a list of images .
14890	Display a list of objects as LaTeX .
14891	Display objects as JSON .
14892	Display JavaScript objects .
14893	Reload the data from the server .
14894	Find a command in the system .
14895	Execute a system command .
14896	Forward read events to the given file descriptor .
14897	Read lines from file and send them to socket .
14898	Find launcher class .
14899	Start the cluster .
14900	Build launcher class .
14901	Start the engine .
14902	Start the cluster .
14903	Get the wx application .
14904	Check if wx is running in event loop .
14905	Start event loop in wx event loop .
14906	Get the Qt4 application .
14907	Check if the event loop is running in Qt4 .
14908	Start event loop .
14909	Create a blank canvas .
14910	Draw a cross .
14911	Draw a line .
14912	Set text at position .
14913	Create an AnnotatedImage from a grayscale image .
14914	Generate a UUID .
14915	Generate a unique key from a GET dictionary .
14916	Get the domain of a URL .
14917	Get the arguments from a URL .
