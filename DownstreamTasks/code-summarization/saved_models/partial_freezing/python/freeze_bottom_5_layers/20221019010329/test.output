0	Convert Sina XML to a list of URLs
1	Download a dailymotion video .
2	Download a video from sina .
3	Print a string with the given colors .
4	Print text to stderr .
5	Print a message and exit .
6	Print a message and exit .
7	Detect OS .
8	Download videos from vimeo .
9	Get info from XML
10	Get video url from video id .
11	get the real M3U url
12	Legitimize text .
13	Download a video .
14	Download a stream .
15	Download a video by vid .
16	Match all patterns in text .
17	Parse a query parameter .
18	Get the content of a URL .
19	Send a POST request .
20	Parse host name .
21	Get room id by room url key .
22	Get title by json topic part
23	Download Wanmen data by course .
24	Download Wanmen data by course topic part .
25	Returns True if the task instance is in the queue .
26	Get the event buffer .
27	Returns a connection object .
28	Get AWS credentials .
29	Get the value of a field .
30	Copy expert data to a file .
31	Copy a table to a temporary file .
32	Execute the upload .
33	Return the maximum partition of a table .
34	Get a connection object .
35	Show the current state of a task .
36	Restart gunicorn workers
37	Return a connection object .
38	Translate a list of values to a target language .
39	Get an instance .
40	Create an instance .
41	Patch an instance .
42	Delete an instance .
43	Get a database .
44	Create a database .
45	Patch a database .
46	Delete a database .
47	Export an instance .
48	Start the SQL proxy .
49	Stop the SQL proxy process .
50	Get the version of the SQL proxy .
51	Create a connection .
52	Retrieve a connection from the database .
53	Delete a connection .
54	Returns a CloudSqlProxyRunner instance .
55	Get the database hook .
56	Clean up database hook .
57	Reserve a free TCP port .
58	Normalizes a job_id .
59	Get the error code from the error message .
60	Delete all DagRuns from the database .
61	Delete all DAG task instances
62	Set the state of all DAGs to paused .
63	Print performance results .
64	Check if all tasks have been processed .
65	Invoke a lambda function .
66	Create dataflow evaluation operations .
67	Create a directory .
68	Convert string to float if possible .
69	Make a naive datetime aware .
70	Make a naive datetime .
71	Datetime constructor .
72	Get the connection to the druid broker .
73	Return a Requests session .
74	Send a request to the API .
75	Raise Airflow exception if response is not OK .
76	Run a request and check the response .
77	Create a session .
78	Decorator to provide a session .
79	Reset the database .
80	Get pretty exception message .
81	Get records from the database .
82	Get a pandas DataFrame from the database .
83	Run the query .
84	Insert rows into a table .
85	Get the Cosmos DB client .
86	Check if a collection exists .
87	Create a collection .
88	Check if a database exists .
89	Create a database .
90	Delete a database .
91	Delete a collection .
92	Insert multiple documents .
93	Delete a document .
94	Get a single document .
95	Returns a list of documents matching the given SQL query .
96	Get a function by name .
97	Create a new function .
98	Update a function .
99	Upload a zip file to a project .
100	Delete a function .
101	Get the status of all dependencies of a task .
102	Return True if all dependencies are met .
103	Yields a list of reasons for failure .
104	Parse S3 configuration file .
105	Get credentials .
106	Get a connection .
107	Flush the buffer .
108	Check if fileloc is zipped .
109	Return a list of paths to Python files in directory .
110	Construct a task instance .
111	Start the process .
112	Send termination message to manager .
113	Exit gracefully .
114	Start the DagFileProcessorManager .
115	Start the agent in the background .
116	Start in sync mode .
117	Refresh the DAG directory .
118	Print file processing statistics .
119	Remove all import errors from the database .
120	Log file processing stats .
121	Set new file paths .
122	Wait until all processors have finished .
123	Heartbeats the processing thread .
124	Terminate all child processes .
125	Create an SSH connection to the remote host .
126	Create a transfer job .
127	Get a transfer job .
128	List transfer jobs .
129	Update a transfer job .
130	Delete a transfer job .
131	Cancel a transfer operation .
132	Pause a transfer operation .
133	Resume a transfer operation .
134	Wait for a transfer job to complete .
135	Find tasks for a task instance .
136	Return the number of open slots .
137	Run a command .
138	Remove an option from a section .
139	Get a specific section .
140	Allocate IDs for this project .
141	Begin a transaction .
142	Commit changes to the project .
143	Lookup a project .
144	Rollback a transaction .
145	Run a query .
146	Get an operation by name .
147	Delete an operation .
148	Poll an operation until it is done .
149	Export a project to a storage bucket .
150	Import a project from a storage bucket .
151	Publish a message to a target .
152	Get the hostname from the config .
153	Returns an instance of LanguageServiceClient .
154	Analyze entities in a document .
155	Annotate a text document .
156	Classify text .
157	Get a list of template fields for a module .
158	Template field role .
159	Disposes the database connection pool .
160	Prepare classpath .
161	Check that the target task id is valid .
162	Return True if X - CACHECONF is present .
163	Convert an object to a dictionary .
164	Yields chunks of items .
165	Reduce an iterable in chunks .
166	Chain multiple tasks together .
167	Pretty - print a table .
168	Render a log filename .
169	Get a connection to the API .
170	Wait for an operation to complete .
171	Coerce content to a string .
172	Handle databricks operator execution .
173	Run Pigop CLI .
174	Fetch the state of a celery task .
175	Return the number of tasks per send process .
176	Return the number of tasks per fetch process .
177	Set the default value of a variable .
178	Build a connection object .
179	Create a job .
180	Get a job .
181	Wait for a job to complete .
182	Create a version .
183	Set the default version of a model .
184	List versions of a model .
185	Delete a version .
186	Create a model in a project .
187	Get a model .
188	Write batch data to DynamoDB .
189	Register executors modules .
190	Get the default executor .
191	Get an executor by name .
192	Called when an error occurs .
193	Get a connection to the database .
194	Trigger a DAG .
195	Delete a DAG .
196	Get information about a task .
197	Get all available pools .
198	Create a new pool .
199	Delete a pool .
200	Create or update a container group .
201	Get the state and exit code details of the instance .
202	Returns a list of messages for the specified instance .
203	List logs for a container .
204	Delete a container group .
205	Check if a container group exists .
206	Decorate a function to apply default parameters to it .
207	Constructs an ingest query .
208	Process a message .
209	Return a list of DagRun objects matching the given parameters .
210	Return a list of task instances for this DAG .
211	Get a task instance by its ID .
212	Get the previous execution of this dag run .
213	Get the previous scheduled DAG run .
214	Update the state of this task .
215	Verify task integrity .
216	Make a request to the Jenkins server with headers .
217	Convert a context to Airflow variables .
218	Trigger conditionally .
219	Send a metric .
220	Query a metric .
221	Get a DAG by ID
222	Kill zombies .
223	Bag a DAG .
224	Collects all DAGs in a DAGFolder .
225	Return a report of the DagBag loading stats .
226	Add a number of days to a date .
227	Format a string according to input_format and output_format .
228	Return True if this is a directory .
229	Pokes a file or directory .
230	Clear task instances .
231	Returns the number of times the task is tried .
232	Generate a command to run a task .
233	Get the current state of the task .
234	Mark the task as FAILED .
235	Refresh this instance from the database .
236	Clear XCom data .
237	Return the key for this task .
238	Return True if all dependents of this task are done .
239	Return the datetime of the next retry .
240	Return True if the job is ready for retry .
241	Check if the pool is full .
242	Get a DagRun object for this dag run .
243	Push a key - value pair to XCom .
244	Pull tasks from XCOM .
245	Initialize the run context .
246	Closes the logger .
247	Get a connection to the API .
248	Start an instance .
249	Set a machine type .
250	Get an instance template .
251	Insert a new instance template .
252	Get an instance group manager .
253	Patch an instance group manager .
254	Wait for an operation to complete .
255	Check if a bucket exists .
256	Create a bucket .
257	Check if a prefix exists in a bucket .
258	List prefixes in a bucket .
259	List keys in a bucket .
260	Check if a key exists .
261	Get an object by key .
262	Read a key .
263	Select a key from a bucket .
264	Check if a wildcard key exists .
265	Get a key from a wildcard key .
266	Load a file from S3 .
267	Load a string .
268	Load a file - like object .
269	Load a file object .
270	Copy an object from one bucket to another .
271	Query Cassandra .
272	Convert a user type to a dictionary .
273	Send an email .
274	Return an instance of SpeechClient .
275	Recognize speech .
276	Execute the query .
277	Load a list of entry point plugins .
278	Check if a plugin is valid .
279	Skip a set of tasks .
280	Get an AzureDLFileSystem client .
281	Check if a file exists .
282	Upload a file .
283	List files in a directory .
284	Execute the query .
285	Uncompress a file .
286	Query MSSQL .
287	Decorator for logging actions .
288	Build metrics dictionary .
289	Create a cgroup from a path .
290	Delete a cgroup
291	Parse a host string .
292	Make API call .
293	Get a connection object .
294	Make a query
295	Describe an object .
296	Return a list of available fields for a given object .
297	Get object from Salesforce .
298	Convert a column to a timestamp .
299	Write an object to a file .
300	Return a MongoClient instance .
301	Get a mongo collection .
302	Replaces multiple documents in a collection .
303	Check if a mail attachment exists .
304	Retrieve mail attachments by name .
305	Download mail attachments .
306	Get attachments by name .
307	Return a tuple of filename and payload .
308	Put records to firehose .
309	Get the status of a task instance .
310	Send email .
311	Send email using SMTP .
312	Process the result value .
313	Check if a blob exists .
314	Check if a container contains a blob with the given prefix .
315	Load a string .
316	Read a file .
317	Delete a file .
318	Execute MLSD .
319	Return a connection object .
320	List the contents of a directory .
321	Retrieve a file from the FTP server .
322	Store a file on the remote host .
323	Get the modification time of a file .
324	Execute the hook .
325	Get a connection object .
326	Check if a directory exists .
327	Check if a file exists in a share .
328	List the directories and files in a share .
329	Creates a directory .
330	Load a file .
331	Load a file from a string .
332	Load a file from a stream .
333	Get the storage connection .
334	Copy an object from one bucket to another .
335	Download a file .
336	Upload a file to a bucket .
337	Check if a blob exists .
338	Return True if the object is updated after the given timestamp .
339	Delete a blob .
340	List blobs in a bucket .
341	Get the size of a file .
342	Get the CRC32C checksum of a blob .
343	Get the MD5 hash of a blob .
344	Create a bucket .
345	Composes multiple blobs in a bucket .
346	Check if secondary training status has changed .
347	Get the secondary training status message .
348	Upload a file to S3 .
349	Configure S3 resources .
350	Check if S3 URL is valid .
351	Get a botocore log client .
352	Create a training job .
353	Create a tuning job .
354	Create a transform job .
355	Create an endpoint .
356	Describe a training job .
357	Check the status of a job .
358	Check the status of a training job .
359	Execute the dataflow .
360	Run migrations locally .
361	Run migrations in an online environment .
362	Delete an instance .
363	Creates an instance .
364	Create a table .
365	Delete a table .
366	Update a cluster .
367	Prepare Hive CLI command .
368	Prepare hiveconf .
369	Load data from a DataFrame .
370	Load a textfile .
371	Get the metastore client .
372	Check if a named partition exists in the metastore .
373	Check if a table exists .
374	Get connection to HIVE .
375	Get results from HQL .
376	Write results to a CSV file .
377	Get records from HQL .
378	Get the results as a pandas DataFrame .
379	Get a connection to the API .
380	Get the endpoint for the API .
381	Send Dingding message .
382	Bind parameters to an operation string .
383	Escape a string .
384	Casts a string field to a given type .
385	Validate that the value is of the expected type .
386	Get a connection to the BigQuery service .
387	Build a BigQuery service .
388	Check if a table exists .
389	Create an empty table .
390	Patch a table .
391	Cancel the query .
392	Delete a table .
393	Upsert a table .
394	Grant view access to a dataset .
395	Get a dataset .
396	Get datasets list .
397	Insert multiple rows into a table .
398	Execute an operation .
399	Execute a sequence of operations .
400	Get the next page of results .
401	Query the postgres database .
402	Make intermediate directories .
403	Create a queue .
404	Send a message to a queue .
405	Run a command .
406	Remove the configuration file .
407	Main entry point .
408	Build the HTML header .
409	Build SVG container .
410	Build js chart .
411	Create x axis
412	Create a y axis
413	Get a connection to the database .
414	Decorator for logging actions .
415	Decorate a view function to handle gzipped responses .
416	Get the last DagRun for a given DAG .
417	Create a DAG run .
418	Execute the hook .
419	Create a JSON response .
420	Open a file if it is zipped .
421	Make a cache key .
422	Returns a VideoIntelligenceServiceClient .
423	Annotate a video .
424	Get Opsgenie API Key .
425	Get a connection object .
426	Execute an alert .
427	Build the opsgenie payload .
428	Execute the hook .
429	Get the connection object .
430	Runs a query .
431	Check the status of a query execution
432	Poll the status of a query .
433	Returns a pysftp . Connection object .
434	Handle rate limit exception .
435	Call a Zendesk API .
436	Get partitions from a table .
437	Get a table from a database .
438	Get the location of a table .
439	Get the status of a cluster .
440	Delete a cluster .
441	Describe cluster snapshots
442	Restore a cluster from a snapshot .
443	Create a cluster snapshot .
444	Execute the API call .
445	Create a job flow .
446	Filter for file size .
447	Filter files with ignored extensions .
448	Execute the hook .
449	Get a pool by name .
450	Create a pool .
451	Delete a pool .
452	Convert a dictionary to a Protobuf object .
453	Wait for an operation to complete .
454	Get a specific operation .
455	Append a label to a cluster protobuf .
456	Create a cluster .
457	Fetch a cluster by name .
458	Get the webhook endpoint .
459	Build discord payload .
460	Execute the webhook .
461	Encrypt plaintext .
462	Import a table .
463	Import a query into a directory .
464	Export a table .
465	Get the text - to - speech client .
466	Synthesize speech .
467	Close the logger .
468	Returns a list of init containers
469	Build the environment dictionary .
470	Returns a list of secrets
471	Get the security context for the worker .
472	Get extra links for the given operator .
473	Heartbeat the job .
474	Launch a new process .
475	Start the process .
476	Return True if the job is done .
477	Exit gracefully .
478	Update import errors .
479	Process task instances .
480	Changes the state of tasks without a dagrun .
481	Get the number of tasks in a given state .
482	Change the state of a list of executable task instances .
483	Enqueue task instances with queued state .
484	Execute task instances .
485	Change the state of tasks failed to execute .
486	Process executor events .
487	Process a file .
488	Update counters .
489	Manage the state of the executor .
490	Get a run for a given run date .
491	Return a dict of task instances for a dag run .
492	Execute for run dates .
493	Set all unfinished dag runs to failed .
494	Execute the job .
495	Called when a heartbeat is received .
496	Get a client for the given project .
497	Get an instance .
498	Apply a function to an instance .
499	Create an instance .
500	Update an instance .
501	Delete an instance .
502	Get a database .
503	Create a database .
504	Update a database .
505	Delete a database .
506	Pokes for this attachment .
507	Prepare additional parameters .
508	Get a connection to the cluster .
509	Check if a table exists .
510	Check if a record exists .
511	Build the command to track driver status .
512	Submit a Spark job .
513	Process a Spark submit log .
514	Process the driver status log .
515	Returns a task runner for the given local task job .
516	Wait for the task to complete .
517	Query MySQL database .
518	Configure a CSV file .
519	Write local schema file .
520	Get a dictionary of column types from the schema .
521	Map mysql type to string .
522	Execute the command .
523	Apply a lineage to the operator .
524	De - serialize extra data .
525	Return a list of dates between start_date and end_date .
526	Scale time units .
527	Return the number of days ago .
528	Initialize a role .
529	Delete a role .
530	Get the user s roles .
531	Get a list of all permissions views for this user .
532	Check if a user has a role .
533	Returns True if the user has permission_name and view_menu_name .
534	Delete faulty permissions .
535	Merge permission and view menu .
536	Update admin permissions view .
537	Synchronizes permissions on a DAG .
538	Create perm for all DAGs .
539	Get Fernet object .
540	Check the partition of the table .
541	Get the AWS Glue catalog hook .
542	Receive messages from SQS
543	Get connection to hdfs .
544	Get a connection to the namenode .
545	Check if the given path exists .
546	Upload a file to HDFS .
547	Get the connection to the pinot broker .
548	Return the URI for this connection .
549	Convert a date to a dictionary .
550	Convert a time to a dictionary .
551	Get a redis connection .
552	Get a pandas DataFrame from the database .
553	Run a SQL statement .
554	Set the autocommit setting .
555	Insert rows into a table .
556	Serialize a cell .
557	Check the health of the scheduler .
558	Get extra links
559	Get a cloudant connection .
560	Execute the hook .
561	Get credentials .
562	Create an authorized HTTP object .
563	Decorator to catch HTTP exceptions .
564	Decorator to fallback to the default project id .
565	Return a list of unfinished states .
566	Prepare Spark SQL command .
567	Convert a PIL Image or numpy array to a tensor .
568	Normalize a tensor .
569	Resize an image .
570	Pads an image with the given padding .
571	Crop an image .
572	Crop an image .
573	Flip an image horizontally .
574	Compute the perspective of an image .
575	Flips a Pillow image .
576	Crop an image with a five - crop .
577	Adjust brightness of an image .
578	Adjust contrast of an image .
579	Adjust saturation of an image .
580	Adjust the hue of an image .
581	Adjust the gamma of an image .
582	Rotate an image .
583	Apply affine transformation to an image .
584	Convert an image to grayscale .
585	Save a tensor as an image .
586	Find classes in directory .
587	Read an image file .
588	Read info file .
589	Read matches file .
590	Return the accuracy of the output .
591	Set up the print function for the distributed environment .
592	Download a file from a URL .
593	List all directories under the given root .
594	List all files in a directory .
595	Download a file from Google Drive .
596	Get random parameters .
597	Generate random parameters .
598	Get random parameters .
599	Create a random transformation .
600	Generate random parameters .
601	Download images from Flickr .
602	Download training and test sets .
603	Download files and save as torch files
604	Get the current theme name .
605	Run searx autocomplete .
606	Show preferences page .
607	Return a list of available themes .
608	Return a list of searx queries
609	Parse a JSON response .
610	Custom gradient .
611	Multivariate Normal diagnostic .
612	r Compute the joint log - probability between two evidences .
613	Eight - Schools HMC benchmark .
614	A decorator to expand the docstring of a function .
615	Return a simple name for a distribution .
616	Build a random variable with a custom distribution .
617	Return a random variable of the given distribution .
618	Create a random variable .
619	One step predictive model .
620	Perform a forecast .
621	Return the maximum value of x along axis .
622	Assert that x is finite .
623	Asserts that x is rank at most rank .
624	Return the size of an event .
625	Perform one - hot evaluation .
626	Convert a convert - to - tensor function identifier to a callable .
627	Returns the size of a mixture of components .
628	Get the next interceptor .
629	Decorate a function with an interceptor .
630	Record execution to a tape .
631	Generate random logistic data .
632	Visualize decision .
633	Builds an input pipeline .
634	Check that map_values is valid .
635	Apply a trace function to a state .
636	Call fn with args .
637	Call fn with args and return the result .
638	Broadcasts from from_structure to to_structure .
639	Transform a log - probability function .
640	Perform a leapfrog step .
641	Perform a metropolis hastings step .
642	Hamiltonian Monte Carlo simulation .
643	Sign adaptation .
644	Create a KerasLayer from a dictionary .
645	Convert x to a tensor .
646	Create a scale operator .
647	Create a random walk normal function .
648	Create a random walk uniform function .
649	Expand to event rank .
650	Returns the lower bound of the entropy distribution .
651	Compute the cat probabilities .
652	Validate inputs and outputs .
653	Ensure TensorFlow is installed .
654	Logistic regression .
655	Covert the data to the correct format .
656	Cholesky covariance of x .
657	Standard deviation of x .
658	Variance function .
659	Make axis positive .
660	Squeeze x along axis .
661	Standardize x .
662	Inverse of z .
663	Semilocal linear trend transition matrix .
664	Semilocal linear trend transition noise .
665	Sample a halton sequence .
666	Generate random permutations of dimensions .
667	Get indices .
668	Return the base expansion size .
669	List all primes less than n .
670	Return the machine eps .
671	Hager Zhang model .
672	Fix step size .
673	Perform HagerZhang line search .
674	Line search after bracketing .
675	Inner bisection search .
676	Prepare arguments for computation .
677	Print a tensor .
678	Quadrature scheme for softmaxnormal .
679	Quadrature scheme .
680	Checks that the given param is a quadrature parameter .
681	Determine batch event shapes .
682	Interpolate a grid to a location .
683	Interpolate a scale to a grid .
684	Linear operator scaling .
685	Concatenate vectors .
686	Logarithmic vector matrix .
687	Logarithmic vector multiplication .
688	Return the vector matrix of vs multiplied by ms .
689	Extract log probabilities .
690	Returns marginalized hidden probabilities .
691	Posterior marginals .
692	Posterior mode .
693	Choose a random direction across the input components .
694	Sample the next step .
695	If fn_result is None return fn .
696	Right pad x with zeros .
697	Run one step .
698	Build a trainable posterior .
699	Build a variational loss for a model .
700	Minimizes loss in a graph .
701	Computes moments of masked time series .
702	Computes the initial value of a masked time series .
703	Broadcasts the batch shape of a list of distributions .
704	Construct a MultivariateNormalLinearOperator from a list of distributions .
705	Sums of distributions .
706	Computes empirical statistics from observed time series .
707	Expands the trailing dimension of a time series .
708	Canonicalize observed time series with mask .
709	Mixes over posterior draws .
710	Return the range of this stream .
711	Make a summary statistic for the given attribute .
712	Unify the signature of a distribution maker .
713	Resolve distribution names .
714	Get the required arguments for a function .
715	Computes the KL divergence between two joint sequences .
716	Build the distribution function .
717	Resolve a distribution graph .
718	Compute the entropy of the joint distribution .
719	Check that x is in the support of the distribution .
720	Create a summary of an image .
721	Visualize reconstruction .
722	Visualize qualitative analysis .
723	Summarize distribution parameters .
724	Summarize mean in nats and bits .
725	Construct a MultivariateNormalDiag .
726	Creates a zero state tensor .
727	Call the LSTM cell .
728	Call the convolution layer .
729	Generate a likelihood .
730	Reconstructs the model .
731	Sample from the static prior .
732	Sample a dynamic prior .
733	Shape of the batch .
734	Returns the batch shape tensor .
735	Make a state space model .
736	Sample from the prior .
737	Given a list of bijectors compute the minimum required number of event dimensions .
738	Converts a vector size to a square matrix size .
739	Sort values in ascending or descending order .
740	Sort values along an axis .
741	r Apply ndtr to x .
742	Compute ndtr of x .
743	Returns a tensor with ndtri entries .
744	Computes the log of a tensor .
745	Log NDR asymptotic series .
746	Computes the erfinv of x .
747	Log CDF laplace .
748	r Compute the joint log probability of a text message .
749	Benchmark text messages HMC .
750	Returns True if index_points is a marginal GP .
751	Returns the marginal distribution .
752	Get the index points for this process .
753	Make an IAF stack .
754	Perform one step .
755	Bootstraps the training and validation steps .
756	Return the outer square difference of x and y .
757	Calculate the value and batch jacobian of a function .
758	Prevent 2nd derivative .
759	Distributional transform .
760	Split covariance into marginals .
761	Decompose from posterior marginals .
762	Decompose by component .
763	Decompose a forecast distribution by component .
764	Convert a dense tensor to a sparse tensor .
765	Decorate a function as an operator .
766	Return a string representation of the tensor .
767	Returns the sample shape .
768	Returns the sample shape tensor .
769	The value of the tensor .
770	Evaluate the value .
771	Return the numpy representation of the tensor .
772	Normal conjugates known scale posterior .
773	Fully connected MLP parameterized via the default template .
774	Uniform unit norm .
775	Log unnorm probabilities .
776	Log Normalization .
777	Return the common dtype of the given arguments .
778	Make a summary statistic .
779	Broadcasts tensor_to_broadcast to target_tensors .
780	PDF at peak .
781	Calculate the effective sample size for a set of states .
782	Calculate the effective sample size for a single state .
783	Calculate the scale reduction for a single state .
784	Return the size of an axis .
785	Given a list of states broadcast them to a list of states .
786	Hermite quadrature scheme .
787	Quadrature scheme lognormal quantiles .
788	Merge two mappings .
789	Remove a field from the mapping .
790	Merge two values .
791	Return a deep tuple of x .
792	Left - doubling increments tensor .
793	Find the index of the best interval .
794	Slice bounds by doubling procedure .
795	Sample with shrinkage .
796	Creates a slice sampler with one dimension .
797	Make a setter for a random variable .
798	Create a log joint function .
799	Get inputs for a function .
800	VGG convolution block .
801	Build a tree .
802	Decorate a function to check for None gradients .
803	Returns True if there is no u turn .
804	Perform a leapfrog step .
805	Returns the log joint of current_target_log_prob and current_momentum .
806	Random bernoulli distribution .
807	Returns a default location scale function .
808	Creates a default mean field normal distribution .
809	Default multivariate normal function .
810	Deserialize a Keras function .
811	Serialize a function .
812	Broadcasts a structure .
813	Convert a nested structure to a tensor .
814	Convert args to a tensor .
815	Call fn with args .
816	Returns a dictionary of tensor - like attributes .
817	Make a mixture prior .
818	Pack images .
819	Download a file .
820	Builds fake input functions .
821	Validate block sizes .
822	Check that flat_xs does not broadcast .
823	Multivariate Normal tril layer .
824	Bernoulli layer .
825	Normal distribution .
826	Poisson distribution .
827	Euler method .
828	Returns a list of drifts .
829	Computes log acceptance correction .
830	Call volatility_fn_results or grads_volatility_fn with state .
831	Broadcast volatility .
832	Make an AR transition matrix .
833	Sample the sample shape .
834	Reshapes input and output .
835	Call a function and reshape the output .
836	Betainc function .
837	Flat sample distributions .
838	Allocates a bag of words .
839	Create a LDA variational layer .
840	Return a list of topics strings .
841	Create a dataset of new groups .
842	Builds fake input functions .
843	Builds training and eval input functions .
844	Minimize a graph .
845	Add control dependencies for ema .
846	Save images to a file .
847	Visualize training data .
848	Load Bernoulli MNIST dataset .
849	Convert dtype to numpy dtype .
850	Return the base dtype of the given dtype .
851	Return True if dtype is a bool dtype .
852	Check if dtype is complex .
853	Return the maximum value of a dtype .
854	Return the name of a dtype .
855	Return the size of a dtype .
856	Raise ValueError if items have different base types .
857	Assert that tensors have the same dtype .
858	Minimize a simplex .
859	Nelder - Mead algorithm .
860	Return a replace_worst_with_reflected function .
861	Perform the expansion step .
862	Performs a contraction .
863	Shrinks a simplex to the best vertex .
864	Replace x at index with replacement .
865	Check the convergence of a simplex .
866	Prepare arguments for the objective function .
867	Prepare arguments for the objective function .
868	Prepare arguments for the objective function .
869	Evaluate multiple objective functions .
870	Plot weight posteriors .
871	Plots a plot of the posterior samples .
872	Create a fake data object .
873	Returns a dictionary of configuration parameters .
874	Create a new instance from a dict .
875	Matrix multiplication .
876	Calculate the standard deviation of a statistic .
877	Assigns a log moving mean exp to a variable .
878	Make a columnar tensor .
879	Random rademacher .
880	Generate a random Rayleigh distribution .
881	Pick a scalar condition .
882	Finish the log probability for one fiber .
883	Finish prob for a single fiber .
884	Rotate x if necessary .
885	Undo batch normalization .
886	Check that the layer is valid .
887	Slice a single parameter .
888	Convert slice parameters to a dictionary .
889	Apply a single step to a distribution .
890	Apply a sequence of slices to a distribution .
891	Apply slices to a distribution .
892	Fit a model .
893	Convergence criteria for small relative norm weights .
894	Prepare arguments for TensorFlow .
895	Returns the number of columns in x .
896	Prefers a static function .
897	Copy docstring from original_fn to new_fn .
898	Get a static predicate .
899	Returns the rank of a tensor .
900	Applies a case transformation to the given predicates .
901	Create a name scope .
902	Computes the mixture standard deviation .
903	Make a tril scale .
904	Make a diagonal scale .
905	Get shapes from loc and scale .
906	Checks if the given scale is a diagonal scale .
907	Check that a distribution is reparameterized .
908	Pad mixture dimensions with padding .
909	Selects a scalar condition from a tensor .
910	Moves a dimension from one index to another .
911	Check that x is non - negative .
912	Returns True if a and b have the same shape .
913	If x is None return x .
914	Returns True if the dtype is known to be unsigned .
915	Returns True if dt is a signed by dtype .
916	Return the largest integer by dtype .
917	Return the smallest integer by dtype .
918	Check if a dtype is integer like .
919	Check the shape of a categorical event .
920	Logarithmic combination of n and counts .
921	Rotate x by shift .
922	Picks a vector .
923	Prefers static broadcast shape .
924	Generate a new seed .
925	Computes the diagonal of a tensor .
926	Return the size of a dimension .
927	Process quadrature grid and probs .
928	Returns a dict of arguments and their values for the parent frame .
929	Expands x to a vector .
930	Returns a tensor with the given dependencies .
931	Validate rightmost_transposed_ndims .
932	Validate a permutation vector .
933	Return the shape of the event .
934	Concatenate two tensors .
935	Returns the dimensions of x .
936	Merge two tensors .
937	Returns a Tensor with a rank at least .
938	Check that static and dynamic shapes are equal .
939	Augments the sample shape .
940	Build a backward pass step .
941	Backward smoothing update .
942	Builds a Kalman filter step .
943	Linear Gaussian update .
944	Kalman transition function .
945	Builds a kalman mean step .
946	Builds a single step of prior covariance recursion .
947	Builds a Kalman sample step .
948	Propagate mean .
949	Propagate a covariance to a linop .
950	Perform backward smoothing pass .
951	Sample n samples from the prior .
952	Computes the posterior marginals .
953	Creates a joint mean step .
954	Computes the joint covariances for each timestep .
955	Convert latents to observations .
956	Log Normalization .
957	Return the mode matrix .
958	Rotate samples .
959	Sample n samples from the 3D distribution .
960	Create a copy of a function .
961	Remove dict keys with a value .
962	Replace dicts with pretty dictionaries .
963	Get samples from a distribution .
964	Return True if x is a namedtuple .
965	Choose a base case .
966	Return a new instance of the same type as accepted and rejected .
967	Returns the sum of x .
968	Returns the value and gradients of a function .
969	Call a function with the given arguments .
970	Perform a while loop .
971	Run a trace scan .
972	Make a setter that will replace the inner results of a kernel .
973	Decorate a getter to return innermost results .
974	Enable store parameters in results .
975	Replace event shape in shape tensor .
976	Replace event_shape_in with event_shape_out .
977	Check that shape is valid .
978	Return True if all inputs have converged .
979	Get initial state arguments .
980	Line search step .
981	Returns a restricted version of value_and_gradients_function .
982	Update the position .
983	Check if the gradient and objective are converged .
984	Broadcast value to target .
985	Compute the harmonic number of x .
986	Default function for `exchange_proposed_fn`.
987	Get a field from kernel results .
988	Returns a Tensor with the same shape as old_states .
989	Return the variance scale term .
990	Calculate the forward log - det Jacobian of a bijector .
991	Returns a function that takes a bijector or a list of bijectors and returns a list of bijectors .
992	Return the inverse transform function for a bijector .
993	Perform one step .
994	Return a Tensor where cond is True or False .
995	Secant 2 .
996	Inner function for secant2 .
997	Inner update for secant2 .
998	Update the value and gradients function .
999	Bisection loop .
1000	Performs a bisect operation .
1001	Bisect a value and gradients function .
1002	Returns True if val1 and val2 are finite .
1003	Return True if val_0 satisfies wolfe conditions .
1004	Calculate the secant of two vectors .
1005	Create a simple step size update policy .
1006	Implementation of one step integrator .
1007	Computes the log acceptance correction .
1008	Perform one step .
1009	Bootstraps the HamiltonianMonteCarloExtraKernelResults with the given init_state .
1010	Bayesian ResNet layer .
1011	Resnet block .
1012	Make an encoder for a vocabulary .
1013	Constructs a decoder for a vocabulary .
1014	Make a prior .
1015	Sample chain .
1016	Deep Exponential family .
1017	Create a trainable positive deterministic variable .
1018	Returns a trainable gamma variable .
1019	Load NIPS 2011 papers .
1020	Initializes parameters .
1021	Return the KL function for a given type .
1022	Read an image from a file .
1023	Download sprites .
1024	Create a character .
1025	Create a sequence of frames .
1026	Create a random sequence .
1027	Create a dataset of sprites .
1028	Validate distributions .
1029	Flatten a list of kernels .
1030	Flatten a list of multiplicand kernels .
1031	Build fake data .
1032	Count the number of integers in arr .
1033	Find bin edges .
1034	Computes a histogram of x .
1035	Quantiles .
1036	Get the static dimension of x .
1037	Add back dimensions to x .
1038	Make axis non - negative list .
1039	Move dimensions to flat end .
1040	Sorts a tensor .
1041	Make state space models for each component .
1042	Computes the amari alpha .
1043	Reverses the kl distribution .
1044	Jensen - Shannon model .
1045	Computes the Pearson correlation coefficient .
1046	Squared Hellinger .
1047	Triangular pearson function .
1048	Power of a tensor .
1049	Returns the absolute value of logu .
1050	Jeffreys coefficient .
1051	Modified GAN .
1052	Returns the dual CISZAR function .
1053	Symmetrized CISZAR function .
1054	Monte Carlo Ciszar divergence .
1055	Helper for csiszar_vimco .
1056	Raises a ValueError if x does not have the expected dimensions .
1057	Batch gather with broadcast .
1058	Broadcast cat event and params .
1059	Logspace expectation importance sampler .
1060	Broadcast event and samples .
1061	Minimize a value and gradients .
1062	Checks that the inverse Hessian is positive definite .
1063	Update the inverse Hessian .
1064	Computes the inverse Hessian update .
1065	Matrix multiplication right .
1066	Tensor product of two tensors .
1067	Transpose a batch .
1068	Pads the shape of x with zeros .
1069	Sum the rightmost ndims of x .
1070	Computes the sqrt of x .
1071	Returns the common dtype of arg_list .
1072	Minimize the gradient of a function .
1073	Get initial state .
1074	Get the direction of the search .
1075	Make an empty queue for element .
1076	Push new_vecs onto the queue .
1077	Computes the PSD of x .
1078	Returns True if x is larger than det_bounds .
1079	Uniform correlation like matrix .
1080	Rejection samples .
1081	Compute the Clopper - Pearson confidence interval of samples .
1082	Estimate volume of true volumes .
1083	Von Mises cdf series .
1084	Von Mises cdf .
1085	Perform one - step crossover .
1086	Minimize a population .
1087	Get initial arguments for the objective function .
1088	Find the best value in a population .
1089	Check that the distance between each member of the population is less than the supplied tolerance .
1090	Generate a starting population .
1091	Perform a binary crossover .
1092	Get the mutants of a population .
1093	Generate random mixing indices .
1094	Ensure a tensor is a list .
1095	Returns a tensor with the given tolerance .
1096	Soft thresholding operator .
1097	Clip a tensor by value keeping its gradient .
1098	Builds an input pipeline .
1099	Plot generated images .
1100	Convert a list of productions into a string .
1101	Call the LSTM .
1102	Compute latent code posterior .
1103	Return the integral of x .
1104	Hat integral inverse .
1105	Computes the rank of a matrix .
1106	Pinv a matrix .
1107	Solves the LU problem .
1108	LU matrix inverse .
1109	Reconstructs assertions .
1110	Helper function for LU solve .
1111	Create a block - diagonal matrix .
1112	Validate a matrix .
1113	Gradient of negative log likelihood .
1114	Fit a sparse model .
1115	Generate slices of num_blocks and n_out .
1116	Generate a mask .
1117	Creates a dense layer .
1118	Create input order .
1119	Create a list of degrees .
1120	Create masks from degrees .
1121	Make a masked initializer .
1122	Build the masks .
1123	Call the layer .
1124	Draw a sample of the multinomial distribution .
1125	Create a zero - dimensional MultivariateNormalDiag .
1126	Return a tfd . Observation noise function .
1127	Convert parameters to weights .
1128	Return the depth of a graph .
1129	Return the best order of dependencies .
1130	Flatten a distribution chain rule .
1131	Build the distribution chain rule .
1132	Computes variational loss .
1133	Optimal variational posterior .
1134	Build is_last_day_of_season function .
1135	Builds the effects_to_residuals tensor .
1136	Builds a transition matrix for a given season .
1137	Build a tfd . MultivariateNormalDiag for seasonal transition noise .
1138	Builds a condensed seasonal transition noise matrix .
1139	Check if observation data is empty .
1140	Validate observation data .
1141	Add a scheduler to this tensor .
1142	Set a checkpoint .
1143	Sets the gradient clipping constant .
1144	Optimizes the tensor .
1145	Set training summary .
1146	Set the value summary .
1147	Create a local optimizer .
1148	Set training data .
1149	Set summary trigger .
1150	Read data sets .
1151	Get a list of texts from news20 .
1152	Download Glove W2V .
1153	Compile the tensor .
1154	Fit the model .
1155	Evaluate the distribution at x .
1156	Predict a set of features .
1157	Read MNIST dataset .
1158	Preprocess MNIST data .
1159	Get the end trigger .
1160	Validate optimizer .
1161	The value of the field .
1162	Call BigDl function .
1163	Call a Java function .
1164	Convert RDD to Java object .
1165	Convert Python object to Java object .
1166	Get an activation by name .
1167	Initialize from a numpy array .
1168	Get the label of the image feature .
1169	Read a parquet file .
1170	Write a parquet file .
1171	Get an image from the image_frame .
1172	Convert this frame to an image tensor .
1173	Get the label of this ImageFrame .
1174	Get the predicted values of the image frame .
1175	Predict a batch of samples .
1176	Fit the optimizer .
1177	Transform the image .
1178	Save Keras definition to file .
1179	Builds a keras model .
1180	Predict the class of the given data .
1181	Set weights .
1182	Get the weights of the layer .
1183	Save tensorflow to file .
1184	Train or evaluate the model .
1185	Loads a torch layer .
1186	Load weights from Keras .
1187	Create a Criterion object from a JCriterion .
1188	Load weights from json file .
1189	Load an imdb dataset .
1190	Builds a Keras model .
1191	Get the shape of the input .
1192	Get the output shape .
1193	Read MNIST dataset .
1194	Read ratings . dat .
1195	Get the bigdl jar path .
1196	Returns True if spark is below 2 . 2 .
1197	Export a checkpoint .
1198	Save a dictionary of tensors to a file .
1199	Return a new KTensor with the given axis expanded .
1200	Precompute future symbols .
1201	Simple attention layer .
1202	Attention layer .
1203	Compute BLEU score between reference and translation documents .
1204	Get the log file .
1205	Log a message .
1206	Summarize gradient updates .
1207	Dump weights to Tensorboard .
1208	Read data by config .
1209	Train and evaluate model from config .
1210	Interactively interact with an Alice .
1211	Given a list of labels and a list of classes assign them to onehot .
1212	Convert proba to onehot .
1213	Create a tf . Session .
1214	Load the model .
1215	Returns the momentum variable of the optimizer .
1216	Update the graph variables .
1217	Calculate the F1 score of a macro score .
1218	Process a word .
1219	CNN layer .
1220	Creates a bi - RNN .
1221	Builds a stacked bi - RNN layer .
1222	Constructs a stacked CNN layer .
1223	Embedding layer .
1224	CuDNN GRU .
1225	CuDNN compatible GRU .
1226	CuDNN LSTM layer .
1227	CuDNN - compatible LSTM layer .
1228	CuDNN Bi - GRU layer .
1229	LSTM layer .
1230	Strided bi - GRU layer .
1231	Variational dropout layer .
1232	Builds the network .
1233	Build word cnn .
1234	Build basic network .
1235	Train on batch .
1236	Predict on batch .
1237	Make a vector from a list of words .
1238	Make a vector of tags .
1239	Calculate the bleu score of a sentence .
1240	Verify that the given URL is a valid S3 URL .
1241	Extract certificates from text .
1242	Verify certs chain .
1243	Verify signature .
1244	Verify signature chain .
1245	Return a list of JSON controls .
1246	Returns a list of ms_bot_framework controls .
1247	Returns a list of telegram controls .
1248	List of alexa controls .
1249	Main entry point .
1250	Wrap a function with a graph .
1251	Wrap a function with a keras backend .
1252	Returns the accuracy of a test set .
1253	Return the accuracy of the predictions .
1254	Initializer for pre - initialized variables .
1255	Read data from a file .
1256	Make a hello bot agent .
1257	Convert x to one - hot .
1258	Prettify metrics .
1259	Populate the default settings directory .
1260	Load the model .
1261	Save the model to disk .
1262	Get training op .
1263	Search a word in the trie .
1264	Make a default operation cost dictionary .
1265	Start timer .
1266	Handle a request .
1267	Act on the agent .
1268	Generate a response dictionary .
1269	Handle an intent request .
1270	Handle a launch request .
1271	Handle unsupported message .
1272	Pretty print struct .
1273	Convert ELEMO loss to PLP .
1274	Build a Chainer from a configuration file .
1275	Interact with a model .
1276	Predict on a stream .
1277	Read a text file .
1278	Get a function from a string .
1279	Decorator to register a metric .
1280	Get a metric by name .
1281	Create a DecayType from a string .
1282	Get the best value for a given loss .
1283	Encodes tokens into embedding vectors .
1284	Read requirements . txt .
1285	Computes the log loss of the sklearn model .
1286	Export weights to a hub .
1287	Show details of an item .
1288	Create a new EcommerceAgent .
1289	Main entry point .
1290	Download a file .
1291	Untar a file .
1292	Decompresses a URL .
1293	Update a dictionary recursively .
1294	Add . md5 suffix to path .
1295	Set a query parameter .
1296	Return the alexa response .
1297	JSON representation of the control .
1298	Return a dictionary of the MMS Bot Framework
1299	Return the JSON representation of the control .
1300	Returns a dictionary containing the activity of the bot .
1301	Compute the F1 score of a Squad V2 query .
1302	Return recall at k .
1303	Check if GPU exists .
1304	Parse a config property .
1305	Parse a configuration file .
1306	Expand a path to the user s home directory .
1307	Create a component from parameters .
1308	Process incoming requests .
1309	Delete a conversation .
1310	Refreshes the list of valid certificates .
1311	Verify a signed request .
1312	Handle a request .
1313	Load a class from a string .
1314	Register a model class .
1315	Get a registered model .
1316	Get the regularization path for a GLM model .
1317	Make a GLM model .
1318	Create a new H2OCluster from a list of key - value pairs .
1319	Shutdown the H2O instance .
1320	Check if H2O is running .
1321	Show the status of the cluster .
1322	List available jobs
1323	List all timezones
1324	Fill from h2ocluster .
1325	Metalearner parameters .
1326	Try to stabilize the object .
1327	Get a summary of a column
1328	Delete a frame .
1329	List available model builders
1330	Validate model parameters .
1331	Compute model metrics .
1332	Get model metrics
1333	Delete a model .
1334	Pretty - print the data .
1335	Run instances .
1336	Terminate EC2 instances .
1337	Stop EC2 instances .
1338	Start instances .
1339	Reboot instances .
1340	Wait for SSH on a list of hosts .
1341	Get the full name of a method .
1342	Find function from code .
1343	Return a string representation of the function signature .
1344	Wrap a string to a given number of spaces .
1345	Join the job .
1346	Train a model .
1347	Fit the model .
1348	Returns a dictionary of parameters
1349	Signal handler .
1350	Wipes the output directory .
1351	Remove a sandbox directory .
1352	Scrape port from stdout .
1353	Scrape cloud size from stdout .
1354	Stop the JVM .
1355	Stop all nodes .
1356	Get the IP address of the node .
1357	Get the port of the node .
1358	Get the roc of the model .
1359	Determine the size of the vector .
1360	H2O Mean Absolute Error
1361	H2O mean squared error .
1362	Calculate the median absolute error between two targets .
1363	Computes the H2O explained variance score .
1364	Raise H2OTypeError if var is not of expected type .
1365	Raise H2OValueError if v does not match regex .
1366	Raise H2OValueError if v satisfies the condition cond .
1367	Return a list of arguments to be used in the assert statement .
1368	Check if a variable is of the given type .
1369	Get the name of a type .
1370	Get source code for a lambda function .
1371	Check that a variable is of the correct type .
1372	Check if a variable is in the enum .
1373	Get the H2O configuration .
1374	Read configuration file .
1375	Yields absolute paths to log files .
1376	Execute a progress function .
1377	Store model progress .
1378	Recalculate model parameters .
1379	Estimate the completion time of the progress bar .
1380	Guess the next poll interval .
1381	Compute progress at time t .
1382	Calculate the time at which the progress will be reached .
1383	Draws a string .
1384	Compute widget sizes .
1385	Get the terminal size .
1386	Set encoding .
1387	Fit the encoder .
1388	Get a H2OFrame from the cache .
1389	Refresh the cache .
1390	Return the type of the given column .
1391	Return a new H2OFrame with columns of the specified type .
1392	Print a summary of this H2OFrame .
1393	Describe this Frame .
1394	Return a new DataFrame with the first few rows and columns filled in .
1395	Multiply this H2OFrame with another H2OFrame .
1396	Return a list of all levels in the table .
1397	Return the number of levels in the tree .
1398	Set the level of the frame .
1399	Set the domain levels .
1400	Rename columns .
1401	Set column names .
1402	Set the name of a column .
1403	Return True if self is in item .
1404	Create a new H2OFrame with a modulo_kfold_column function .
1405	Create a stratified KFold column .
1406	Print the structure of the H2OFrame .
1407	Return the DataFrame as a pandas DataFrame .
1408	Remove a column from the frame .
1409	Quantile function .
1410	Concatenate frames .
1411	Bind data to this DataFrame .
1412	Bind data to this H2OFrame .
1413	Split a frame into multiple frames .
1414	Create a new group by expression .
1415	Fill missing values with NaN .
1416	Impute values of a column .
1417	Merge two H2OFrames .
1418	Relevel the frame .
1419	Insert missing values .
1420	Return a new H2OFrame with a variable .
1421	Corresponds to IDD Field cor
1422	Return the distance between this node and another node .
1423	Return a new H2OFrame with as . factor .
1424	Split a string by pattern .
1425	Return the number of rows and columns that match a pattern .
1426	Create a substring expression .
1427	Return a new H2OFrame with a string stripped of the left side of this H2OFrame .
1428	Return the entropy of the matrix .
1429	Return a new H2OFrame with the number of valid substrings in a path .
1430	Create a table expression .
1431	Plot a histogram of the data .
1432	Return a new H2OFrame with an isax expression .
1433	Replace first occurrence of pattern with replacement .
1434	Convert to upper case .
1435	Return a new H2OFrame with a grep expression .
1436	Return a new H2OFrame with NA removed .
1437	Difference lag 1 frame
1438	Return a new H2OFrame with a is . na function .
1439	Return a new H2OFrame with a minute field .
1440	Run if statement .
1441	Random stratified split .
1442	Return a new H2OFrame with this frame cut .
1443	Return the maximum value of the index .
1444	Apply a function to this H2OFrame .
1445	Parse text into a Code object .
1446	Parse a file .
1447	Move the cursor by drow and dcol .
1448	Unparse the text .
1449	Get the size of the model .
1450	A list of the centers of the model .
1451	The standard deviation of the centers .
1452	Connect to H2O .
1453	Make a request to H2O API .
1454	Check H2O version .
1455	Import a path lazily .
1456	Upload a file .
1457	Imports a CSV file .
1458	Import a Hive table .
1459	Import a SQL table .
1460	Import SQL table from H2O .
1461	Parse a raw H2O frame .
1462	Create a deep copy of a H2OFrame .
1463	Get a H2O model .
1464	Get a specific grid
1465	Get a frame by id
1466	Download model to POJO .
1467	Download a H2OFrame to a CSV file .
1468	Download all logs from H2O .
1469	Export a H2OFrame to a file .
1470	Convert a H2OFrame to a list .
1471	Run a demo function .
1472	Load a dataset .
1473	Make metrics from predicted and actual frames .
1474	Puts a key to a file .
1475	Upload custom metric .
1476	Raise H2OValueError if frame_id is invalid .
1477	Return a human readable string of a given size .
1478	Normalize a slice .
1479	Return True if the slice is normalized .
1480	Predict a Pandas DataFrame .
1481	Generate predictions from a CSV file .
1482	Decorator to mark a function as deprecated .
1483	Wait for the job to complete .
1484	Return a dictionary of deep features for a given layer .
1485	Print a summary of the grid .
1486	Show the grid search results .
1487	Returns a list of hyperparameter values .
1488	Returns a dictionary of hyperparameters .
1489	Get a grid from H2O
1490	Compute F1 for each model .
1491	Get the importance of each component .
1492	Project archetypes .
1493	Plot a scree plot .
1494	Translates a name to a human readable name .
1495	Remove indentation from text .
1496	Extract run information from a java log file .
1497	Main entry point .
1498	Close the H2O session .
1499	Get the session ID .
1500	Start logging .
1501	Prepare data payload .
1502	Prepare file payload .
1503	Log start transaction .
1504	Log the end of a transaction .
1505	Log a message .
1506	Process a response .
1507	Print a message .
1508	Get the H2O leaderboard for a project .
1509	Download a POJO file .
1510	Download a Molecule .
1511	Fit the model .
1512	Apply the transformation to X .
1513	inverse transform
1514	Extract a true string from a string .
1515	Find node name .
1516	Find git hash branch .
1517	Return True if the build timeout was found
1518	Find build failure .
1519	Find build_id .
1520	Extracts the job build URL from a string .
1521	Grab all java messages associated with running a unit test .
1522	Save a dictionary of failed tests .
1523	Update summary file .
1524	Write file content to file .
1525	Write a Java message .
1526	Load java messages to ignore .
1527	Normalize an enum constant .
1528	Get a list of synonyms for a word .
1529	Poll the status of the job .
1530	Write the assembly to a POJO file .
1531	Fit a frame to a H2O frame .
1532	Percentile on sorted list .
1533	Returns a dictionary of default parameters
1534	Return a dictionary of actual parameter values .
1535	Get the deep features of a frame .
1536	Get the scoring history for this model .
1537	Show model details .
1538	Return variable importances as a pandas DataFrame
1539	Returns the residual degrees of freedom of the model .
1540	The coefficients of the model .
1541	Download a POJO file .
1542	Download a model from H2O .
1543	Save model details to disk .
1544	Check that y_actual and y_predicted have the same length .
1545	list of cross validation models
1546	Hybrid Gradient Boosting estimator .
1547	Demo of H2O Deep Learning model .
1548	Generalized Linear Estimator .
1549	Wait for a keystroke .
1550	Return the cell as a pandas DataFrame .
1551	Show the table .
1552	Start a JVM .
1553	Find H2O . jar .
1554	Yield paths to h2o . jar files
1555	Get the hit ratio table .
1556	Create a writer for a CSV file .
1557	Convert a URI to a path .
1558	Convert path to URI .
1559	Parse function and class lines .
1560	Generate API documentation for a module .
1561	Return a list of all modules in this package .
1562	Write API documentation .
1563	Write the index file .
1564	Convert the cell values to a list .
1565	Load dictionary from file .
1566	Add new java messages .
1567	Update a message dictionary .
1568	Extract a message from a file .
1569	Save dictionary to file .
1570	Print a dictionary of java messages .
1571	Parse command line arguments .
1572	Print usage information .
1573	Locate all Python files in a directory .
1574	Find a magic number in a file .
1575	Main entry point .
1576	Transform a H2OFrame .
1577	Summarize failed runs
1578	Extract intermittens from collected failed tests
1579	Plot the ROC curve .
1580	Computes the confusion matrix of the model .
1581	Check if a Deep Water model is available .
1582	Trims data back to a given month .
1583	Return a dictionary of endpoint groups .
1584	Update site forward .
1585	Return a JSON formatted string .
1586	Comment a user .
1587	Get credentials .
1588	Like a user .
1589	Like a hashtag .
1590	Check if user is not in bot .
1591	Read a list from a file .
1592	Schedule a message .
1593	Settle the message .
1594	Downloads a virtual network gateway .
1595	Guess service info from a path .
1596	Updates a PowerShell command .
1597	Deletes an application definition by ID .
1598	Creates or updates an application definition .
1599	Returns the URI for the given request .
1600	Returns a connection object for the given request .
1601	Perform a request .
1602	Execute script actions .
1603	CheckFrontDoorNameAvailability .
1604	Purges a deleted vault .
1605	Get authorization server .
1606	Validate request URI .
1607	Load the CLI credentials from the config directory .
1608	Get Azure CLI credentials .
1609	Resolve .
1610	Check name availability locally .
1611	Opens a request .
1612	Sets the request timeout .
1613	Set a request header .
1614	Get all response headers .
1615	Sends a request .
1616	Returns the status of the request .
1617	Returns the status text .
1618	The response body .
1619	Sets the client certificate .
1620	Make a PUT request .
1621	Set a request header .
1622	Send a request body .
1623	Returns a response object .
1624	Get a readable ID from an ID name .
1625	Get the serialization name for an element .
1626	Verify a face to a person .
1627	Add a job .
1628	Extract properties from a node .
1629	Get a list of nodes from a path .
1630	Find namespaces from a child node .
1631	Convert a minidom XML string to a Service Bus namespace .
1632	Convert a minidom XML string to a Service Bus Region object .
1633	Convert XML string to namespace availability response .
1634	Convert minidom XML string to metrics object .
1635	Replaces the runbook content .
1636	ListRecommendations .
1637	Update a kb .
1638	GetMemberGroups .
1639	Build package from PR number .
1640	Imports data into a resource group .
1641	Publish a runbook .
1642	Renew the session lock .
1643	Replace a word alteration .
1644	AddValue .
1645	Gets the properties of the specified storage account .
1646	Gets the storage account keys for the specified service .
1647	Regenerates storage account keys .
1648	Creates a storage account .
1649	Updates a storage account .
1650	Deletes the specified storage account .
1651	Checks availability of a storage account .
1652	Gets the properties of the specified hosted service .
1653	Creates a hosted service .
1654	Deletes the specified hosted service .
1655	Creates a deployment .
1656	Deletes a deployment .
1657	Shuts down a hosted service .
1658	Changes the configuration of a deployment .
1659	Updates the status of a deployment .
1660	Upgrades a deployment .
1661	Walk an upgrade domain .
1662	Reboot a role instance .
1663	Deletes the specified role instances .
1664	Checks availability of a hosted service .
1665	List certificates associated with a service .
1666	Gets a service certificate .
1667	Adds a certificate to a hosted service .
1668	Deletes a service certificate .
1669	Gets a management certificate .
1670	Adds a management certificate .
1671	Deletes a management certificate .
1672	Gets the properties of the specified affinity group .
1673	Creates an affinity group .
1674	Deletes the specified affinity group .
1675	List subscription operations .
1676	Creates a reserved IP address .
1677	Deletes the specified reserved IP address .
1678	Associates a reserved IP address with a service .
1679	Disassociates a reserved IP address from a service .
1680	Gets the specified reserved IP address .
1681	Gets the specified persistent VM role .
1682	Creates a virtual machine deployment .
1683	Adds a role to a service .
1684	Updates a role .
1685	Deletes a role .
1686	Captures a role .
1687	Starts a role .
1688	Starts the specified roles .
1689	Restarts a role .
1690	Shut down a role .
1691	Shut down the specified roles .
1692	Adds a DNS server to a service .
1693	Updates a DNS server .
1694	Deletes the specified DNS server .
1695	List the versions of a resource extension .
1696	Replicates a virtual machine image .
1697	Unreplicates a VM image .
1698	Shares a virtual machine image .
1699	Creates a VM image .
1700	Deletes a VM image .
1701	List VM images .
1702	Updates a VM image .
1703	Adds an OS image .
1704	Updates an operating system image .
1705	Updates an operating system image .
1706	Deletes an OS image .
1707	Gets the specified data disk .
1708	Adds a data disk .
1709	Updates a data disk .
1710	Deletes the specified data disk .
1711	Adds a disk .
1712	Updates a disk .
1713	Deletes a disk .
1714	Summarize for management group .
1715	Build the receiver .
1716	Fetches the next batch of messages .
1717	Renews the session lock .
1718	Creates or updates a virtual machine scale set .
1719	Converts a VM scale set to a single placement group .
1720	ScreenText .
1721	Create a key .
1722	Import a key .
1723	Update a key .
1724	SetSecret .
1725	SetCertificateIssuer .
1726	Create a Service instance from a connection string .
1727	Get a subscription .
1728	List all subscriptions for a topic .
1729	Send a list of messages .
1730	Return an instance of the sender .
1731	Get a Receiver for this entity .
1732	Get a deadletter receiver .
1733	Parse an asynchronous operation response .
1734	Perform a GET request .
1735	Perform a PUT request .
1736	Wait for an asynchronous operation to complete .
1737	Gets the status of an operation .
1738	Update the management header .
1739	Build a package .
1740	GetCertificates .
1741	Returns a list of regions .
1742	List all namespaces .
1743	Get a namespace by name .
1744	Creates a service bus namespace .
1745	Deletes the specified namespace .
1746	Checks the availability of a service bus namespace .
1747	List topics with the given name .
1748	List notification hubs .
1749	List relays .
1750	Retrieves metrics rollups from a queue .
1751	Get metrics rollups for a given metric .
1752	Get metrics rollups notification hub .
1753	Get metrics rollups for a relay .
1754	Create an environment .
1755	Create a virtualenv with pip installed .
1756	Creates a new server .
1757	Sets the server administrator password .
1758	Lists the servers quotas .
1759	Gets the server event logs .
1760	Creates a firewall rule .
1761	Updates a firewall rule .
1762	Deletes the specified firewall rule .
1763	Lists all firewall rules for a given server .
1764	Lists service level objectives .
1765	Creates a database .
1766	Updates a database .
1767	Delete a database .
1768	List databases .
1769	ListAgreements .
1770	Close this message handler .
1771	Close the receiver .
1772	Get the current session state .
1773	Set the session state .
1774	Receive a list of deferred messages .
1775	Merge a reservation order .
1776	Validate the challenge .
1777	Purges a table from a workspace .
1778	Default error handler .
1779	Creates a queue .
1780	Deletes a queue .
1781	Retrieves a queue .
1782	Creates a topic .
1783	Gets the specified topic .
1784	Creates a rule .
1785	Gets the specified rule .
1786	List rules for a given topic and subscription .
1787	Creates a subscription .
1788	Gets a specific subscription .
1789	Lists the subscriptions for a topic .
1790	Sends a message to a topic .
1791	Unlocks a subscription message .
1792	Sends a batch of messages to a queue .
1793	Unlocks a message in a queue .
1794	Receive a message from a queue .
1795	Receive a subscription message .
1796	Creates an event hub .
1797	Updates an event hub .
1798	Gets an event hub .
1799	Sends a message to a Hub .
1800	Updates the service bus header .
1801	Returns an authorization string .
1802	Check if a token is expired .
1803	Get token from accessconstrol server .
1804	Update request URI query .
1805	Resets a service principal profile .
1806	Delete this message .
1807	Unlock the lock .
1808	Renew the lock .
1809	Adds headers to the request .
1810	Return the batch body as a dictionary .
1811	GetClusterHealth .
1812	GetClusterHealthUsingPolicy .
1813	Unprovisions an application type .
1814	GetRepairTaskList .
1815	Submit a property batch .
1816	General error handler .
1817	Starts a web site network trace operation .
1818	ListSlotDifferencesSlot .
1819	Swaps a slot .
1820	GetByType .
1821	AddFaceFromStream .
1822	Handle redirect .
1823	Creates a migration .
1824	Publish events .
1825	Moves resources from one resource group to another .
1826	Set the profile to use .
1827	ListQueryResultsForManagementGroup .
1828	Create a queue .
1829	Delete a queue .
1830	Creates a topic .
1831	Delete a topic .
1832	Creates a subscription .
1833	Create a Connection object from a connection string .
1834	Get the properties of the queue .
1835	Return True if the lock is expired .
1836	Create a session .
1837	Create a subscription .
1838	Exports request rate by interval .
1839	Return a list of results from results_queue .
1840	Bulk add tasks .
1841	Task collection thread handler .
1842	Build a configuration dictionary .
1843	Resets a user s password .
1844	Starts an environment .
1845	Create a message .
1846	Convert an XML Element to a Rule object .
1847	Convert an XML Element to a Queue object .
1848	Convert an XML Element to a Topic object .
1849	Convert an XML Element to a Subscription object .
1850	Creates a certificate .
1851	Deletes a certificate .
1852	Get client from CLI profile .
1853	Create a client from a JSON dictionary .
1854	Get a client from an auth file .
1855	Parse an enumeration results list .
1856	Extract properties from an XML element .
1857	Delete .
1858	Get a queue .
1859	List all queues owned by this service .
1860	Get a topic .
1861	Returns a list of all registered topics .
1862	Receive a sequence of deferred messages .
1863	Settle multiple messages at once .
1864	Get a specific site .
1865	Create a site .
1866	Delete a site .
1867	Updates a site .
1868	Restart a site .
1869	Retrieve historical usage metrics for a website .
1870	Get the metric definitions for a webspace .
1871	Get the publish profile XML for a given webspace and website .
1872	Get the publish profile for a webspace .
1873	Updates the policies for the specified container registry .
1874	Creates a Cloud Service .
1875	Checks availability of a job collection .
1876	Gets the specified job collection .
1877	Completes a restore operation .
1878	Cancel scheduled messages .
1879	Send pending messages .
1880	Reconnect the sender .
1881	Get a certificate from a publish settings file .
1882	Load cached cookies .
1883	Get terminal width .
1884	Return the cut prefix of a string .
1885	Print a message inplace .
1886	Format a file size .
1887	Format elapsed time .
1888	Create a status line .
1889	Print a progress bar .
1890	Generate a list of segment numbers for this playlist .
1891	Return a generator of segments for this presentation .
1892	Wait for the specified amount of time .
1893	Put a segment into the queue .
1894	Put a value in a queue .
1895	Get parameters for a video stream .
1896	Extract nonce from the redirect URL .
1897	Find the VPID for a given URL .
1898	Parse JSON data .
1899	Parse XML data .
1900	Parse a query string .
1901	Search a dictionary for a key .
1902	Spawn a process .
1903	Yield Tag objects from HTML .
1904	Parse a manifest .
1905	Determine the JSON encoding of a sample .
1906	Parse a JSON response .
1907	Parse XML response .
1908	Parse a set of cookies .
1909	Parse headers .
1910	Parse query parameters .
1911	Return the message as a string .
1912	Make a LogRecord .
1913	Login to LiveEdu account .
1914	Load a support plugin .
1915	Update query string .
1916	Iterate over chunks of a video .
1917	Yields all requires for a given name .
1918	Check file output .
1919	Create a file output .
1920	Create an HTTP server .
1921	Iterate over HTTP requests .
1922	Create an HTTP server and start it .
1923	Passthrough a stream .
1924	Open a stream .
1925	Output a stream .
1926	Read data from a stream .
1927	Handle a stream .
1928	Fetch the streams for a given plugin .
1929	Fetch a list of streams from a plugin .
1930	Resolve a stream name .
1931	Format valid stream names .
1932	Handle a URL .
1933	Print installed plugins .
1934	Authenticate with Twitch .
1935	Load plugins .
1936	Setup command line arguments .
1937	Setup the console .
1938	Setup HTTP session options .
1939	Load plugins .
1940	Setup options for HLS .
1941	Log current OS and Python versions .
1942	Extracts the stream ID from the given text .
1943	Get an iframe .
1944	Set an option .
1945	Get an option .
1946	Set a plugin option .
1947	Get a plugin option .
1948	Resolve a URL .
1949	Load plugins from a given path .
1950	Convert hours minutes seconds to seconds .
1951	Validate that a string starts with a string .
1952	Validate that string ends with string .
1953	Checks if a string contains a string .
1954	Get an attribute of a value .
1955	Filter values by a function .
1956	Apply a function to each element of a dictionary .
1957	Validate a URL .
1958	Find an element by xpath .
1959	Find all elements matching a XPath .
1960	Find the URL of a player .
1961	Load M3U8 data .
1962	Return the name of a supported player .
1963	Perform a login .
1964	Extract stream_id from HTML .
1965	Extract stream_info from HTML .
1966	Login to the server .
1967	Map a function to a key .
1968	Make an API call .
1969	Start a new session .
1970	Get information about a media .
1971	Create a Crunchyroll API .
1972	Compress a string .
1973	Format a character .
1974	Format a string for output .
1975	Read n bytes from the stream .
1976	Return the value of this code .
1977	Return an explanation of the code .
1978	Set the decoding table .
1979	Set the length table .
1980	Show a table of all symbols .
1981	Read a tuple .
1982	Return an explanation string for the given index .
1983	Get the value of a given index .
1984	Return the span of a given index .
1985	Get the value for a given index .
1986	Return the mnemonic for the given index .
1987	Return the mnemonic for the given index .
1988	Compile the actions table
1989	Execute an action .
1990	Make a hex data string .
1991	Process a stream .
1992	Read the metablock length .
1993	Read uncompressed data .
1994	Read a block type .
1995	Replaces all values in v with transformed values .
1996	Read a prefix array .
1997	Return a monochrome color .
1998	r Normalize a color vector .
1999	Create an arrow table from a Vaex DataFrame .
2000	Mark a function as hidden .
2001	Add virtual columns for cartesian velocities .
2002	Add virtual columns proper motion2vperpendicular .
2003	Return a graphviz representation of the node .
2004	Count the number of values in this column .
2005	Apply a mapping function to the expression .
2006	Flask application initialization .
2007	Open multiple files .
2008	Read a SAMP message .
2009	Create a DatasetAstropyTable from a Astropy Table .
2010	Create a DataFrame from a list of arrays .
2011	Convenience constructor for from_arrays .
2012	Create a DataFrame from a pandas DataFrame .
2013	Create a DataFrame from a CSV file .
2014	Create a server object from a URL .
2015	Zeldovich dataset .
2016	Concatenate multiple DFAs .
2017	Create a virtual range column .
2018	Open a dataset .
2019	Evaluate an expression .
2020	Decorator for delayed functions .
2021	Return a set of columns that depend on this selection .
2022	Run a task .
2023	Sort the list .
2024	Detects Gadget file type .
2025	Clear the plot .
2026	wait for last plot to finish
2027	Open a document .
2028	Write to a file .
2029	Split and combine masks .
2030	Perform a nop operation .
2031	Perform the first aggregation .
2032	Calculate the mean of an expression .
2033	Calculate the sum of a list of expressions .
2034	Return the standard deviation of the given expression .
2035	Calculate the covariance of x and y .
2036	Calculate the minimum and maximum values of an expression .
2037	Return the minimum value of the expression .
2038	Calculate the median of a given expression .
2039	Plot a scatter plot .
2040	Count the number of HEALPix pixels in the dataset .
2041	Plot a healpix plot .
2042	Plot a 3D volume .
2043	Return the data type of an expression .
2044	Get the private directory for this file .
2045	Get the state of a virtual column .
2046	Set the state of this expression .
2047	Remove virtual_meta . yaml
2048	Write virtual meta data to disk .
2049	Write the meta . yaml file .
2050	Returns True if any of the expressions in expressions_list are a subset of any of the dimensions in exclude .
2051	Set a variable .
2052	Evaluate a variable .
2053	Evaluate a selection mask .
2054	Convert to a dictionary .
2055	Return a copy of the DataFrame .
2056	Convert to pandas DataFrame .
2057	Convert to an arrow table .
2058	Convert to astropy table
2059	Add a column to the DataFrame .
2060	Rename a column .
2061	Add virtual columns to polar coordinates .
2062	Add virtual columns to spherical coordinates .
2063	Add virtual columns cartesian velocities to polar coordinates .
2064	Add virtual columns to cartesian coordinates .
2065	Add virtual columns rotation .
2066	Add virtual columns spherical to cartesian .
2067	Add virtual columns to spherical coordinates .
2068	Add a virtual column .
2069	Delete a virtual column .
2070	Add a variable .
2071	Delete a variable .
2072	Return the last n elements .
2073	Print a head and tail table .
2074	Describes the dataset .
2075	Print the difference between two lists .
2076	Set the current row .
2077	Returns a list of column names that match the specified regex .
2078	Trim a DataFrame .
2079	Take a subset of the DataFrame .
2080	Extract a subset of the sequence .
2081	Return a random sample of the array .
2082	Split the array with a random sample .
2083	Split a sequence into chunks of the given fraction .
2084	Sorts the Series by the given key .
2085	Materialize a virtual column .
2086	Undo selection .
2087	Redo selection .
2088	Returns True if the selection can be undone .
2089	Select the given boolean expression .
2090	Select non - missing columns .
2091	Return a new Series with non - missing values removed .
2092	Select a rectangle .
2093	Select a box .
2094	Select a circle .
2095	Selects an ellipse .
2096	Select a lasso .
2097	Make a selection inverse .
2098	Set a selection .
2099	Create a new selection .
2100	Find a valid column name .
2101	Return the root nodes of the expression graph .
2102	Return a graphviz representation of the whole dataframe .
2103	Categorize a column .
2104	Encodes the given column as an ordinal value .
2105	Return a Datas object with the data of the table .
2106	Return the length of the array .
2107	Stack two DataFrames horizontally .
2108	Concatenate this DataFrame with another DataFrame .
2109	Export to HDF5 .
2110	Add a column to the DataFrame .
2111	Monkey - patch a DataFrame .
2112	Register a function .
2113	Fill NA values in an array .
2114	Return the day of week of x .
2115	Day of year .
2116	True if x is a leap year .
2117	Return the year of x .
2118	Return the month of x .
2119	Return the month name of x .
2120	Return the day of the year .
2121	Return the day name of x .
2122	Return the week of year of x .
2123	Return the hour of a time series .
2124	Return the minute of a date .
2125	Return the second of x .
2126	Capitalize x .
2127	r Concatenate two strings .
2128	Return True if x contains pattern .
2129	Count the number of occurrences of pat in x .
2130	Find a substring within a string .
2131	Get the string at index i .
2132	Find the index of a substring in a string .
2133	Make a string arrow from a string .
2134	Strips leading whitespace from x .
2135	Pad a string to a given width with fillchar .
2136	Return a ColumnStringArrow that repeats x times .
2137	Find the index of a substring within a string .
2138	Find the index of a substring in a string .
2139	Return a string arrow with the given width filled with fillchar .
2140	r Strip a string from a column .
2141	Slice x from start to stop .
2142	Strips whitespace from a string .
2143	Create a ColumnStringArrow from a string sequence .
2144	Convert a string to upper case .
2145	Return the autotype of arr .
2146	Return a numpy recarray representation of the object .
2147	Write properties to a file .
2148	Write a comment to a file .
2149	Write a property .
2150	Iterate over properties in a file .
2151	Yield lines from a file .
2152	Show installed versions .
2153	Rename a keyword argument .
2154	Set the FFT library .
2155	Track beats .
2156	Adjusts the pitch - shift of the harmonic component .
2157	Convert frames to samples .
2158	Convert samples to frames .
2159	Convert time - series to frames .
2160	Convert midi to note .
2161	Convert Hz frequencies to Mel
2162	Convert mels to Hz
2163	r Frequencies of the FFT
2164	Calculate CQT frequencies
2165	Calculate the frequencies of mel bands .
2166	Calculate the A weighting for the given frequencies .
2167	Times - like samples .
2168	Samples X along a given axis .
2169	Hybrid CQT .
2170	Project onto the pseudo - CQT basis .
2171	CQT filter .
2172	Compute the FFT of a CQT filter .
2173	Trim a stack of CQTs to a given number of bins .
2174	Compute the CQT response
2175	Calculate the early downsample count .
2176	Perform early downsampling .
2177	Calculate the accu cost of each step .
2178	Return a warping path for dtw .
2179	Viterbi algorithm .
2180	Viterbi discriminative model .
2181	r Creates a transition matrix with uniform states .
2182	Return a transition matrix for a loop .
2183	r Transition matrix for a cycle of states .
2184	Creates a transition matrix of n_states with the given width .
2185	Detect the onset of a frame .
2186	r Calculate the onset strength of a time series .
2187	Given an array of events and an array of energy find the closest onset to those events .
2188	r Calculate the mel spectrogram onset strength for a set of samples .
2189	Write times to a CSV file .
2190	Write audio to a wav file .
2191	Create a colormap from data .
2192	Plot a waveplot of the audio data .
2193	Set the current image .
2194	Return mesh coordinates .
2195	Check that axes is an instance of matplotlib . axes . Axes .
2196	Scale axes .
2197	Compute the FFT bins for a given number of samples .
2198	Calculate the mel - frequency basis .
2199	Calculate the CQT frequencies for a given number of samples .
2200	Compute the chroma for a given number of octaves .
2201	Convert a frame number to a time in seconds .
2202	Estimate the tune of a pitch - track .
2203	Perform a piptrack analysis .
2204	Compute the harmonic and percissives of y .
2205	Harmonic function .
2206	r Compute the percussive coefficient of y .
2207	Stretch a time series .
2208	Shift the pitch of a time series .
2209	Remix an audio buffer .
2210	Compute the MSE for a signal .
2211	Trim a signal .
2212	Split a signal into samples .
2213	Phase vocoder .
2214	Convert amplitude to db
2215	Compute the spectrogram of a signal .
2216	Harmonic - percussive separation .
2217	Decompose S into components and activations .
2218	Compute self - similarity filter .
2219	Helper function to apply a recurrence filter .
2220	Compute the mel bands of a signal .
2221	Compute the chroma of a signal .
2222	Returns a function that returns a float window .
2223	r Return a list of frequencies for a given sampling rate .
2224	r Calculate the constant frequencies of a signal .
2225	Convert a QuantFigure to a Chroma .
2226	Calculate the bandwidth of a window .
2227	Get a window .
2228	Multirate filterbank .
2229	Calculate the frequencies for a given tuning .
2230	Fills x with win_sq with the given hop length .
2231	Sumsquare window .
2232	Diagonal filter .
2233	Calculate the spectral centroid .
2234	Spectral rolloff function .
2235	r Spectral flatness .
2236	Polynomial features .
2237	Calculate zero crossing rate .
2238	Compute a chroma stft filter .
2239	Generate a chroma CQT .
2240	Melspectrogram filter .
2241	Jaccard distance between two integers .
2242	Return the index of the closest match to the given interval .
2243	Match intervals between two intervals .
2244	Match two intervals .
2245	Match events from events_from to events_to .
2246	Compute the salience of a signal .
2247	r Harmonics interpolation .
2248	Estimate the harmonic energy at a given frequency range .
2249	Compute the harmonics of a 2D array .
2250	Load a soundfile .
2251	Load audio from a file .
2252	Convert y to mono .
2253	Resample audio .
2254	Compute the autocorrelated power spectrum .
2255	LPC function .
2256	Create a sequence of clicks .
2257	Calculate the tone of a signal .
2258	Chirp time series .
2259	Return a set of files matching the given extensions .
2260	Stretched a WAV file .
2261	Process command line arguments .
2262	This demo demonstrates how to split harmonics and percussives .
2263	r Calculate a beat track .
2264	Return a list of beats in ascending order .
2265	Calculate beat local score .
2266	Calculate the Pearson divergence between local score and beat score .
2267	Find the last beat in the cumscore
2268	Convert recurrence matrix to lag matrix .
2269	Convert lag matrix to recurrence matrix .
2270	Decorator to wrap the filter
2271	Return a subsegment of data .
2272	Perform an agglomerative clustering .
2273	r Enhances a path with a given window size .
2274	Detect onsets .
2275	Create a frame .
2276	Check that audio data is valid .
2277	Validate that x is an integer .
2278	Fix the length of data .
2279	Sort an array along an axis .
2280	r Normalize a signal .
2281	Return True if x is greater than or equal to x along the specified axis .
2282	Pick a peak from an array .
2283	Sparsifies rows of a sparse matrix .
2284	Roll a sparse matrix .
2285	Convert a buffer to a float .
2286	Convert an index to a list of slices .
2287	Synchronize data with a given index .
2288	Softmask an array .
2289	Return a tiny version of x .
2290	Write frames to a video file .
2291	Read the next image .
2292	Get a frame .
2293	Convert image to frames .
2294	Track progress of tasks .
2295	Run func in parallel .
2296	Flip an image .
2297	Rotate an image .
2298	Clip a list of bounding boxes .
2299	Scale a list of bounding boxes .
2300	Crop an image .
2301	Impad an image .
2302	Impad an image to a multiple of a specified size .
2303	Scale a size .
2304	Resize an image .
2305	Resize an image .
2306	Rescale an image .
2307	Register a file handler .
2308	Returns the priority of the given priority .
2309	Dequantize an array .
2310	Show an image .
2311	Show a list of bounding boxes .
2312	Read a flow from a file .
2313	Write a flow to a file .
2314	Dequantize a flow .
2315	Load state_dict into module .
2316	Load checkpoint from file or url .
2317	Convert weights to cpu
2318	Save checkpoint to file .
2319	Initialize an optimizer .
2320	Initialize the logger .
2321	The current learning rate .
2322	Register a hook .
2323	Run a workflow .
2324	Register training hooks .
2325	Convert a video file .
2326	Resize a video file .
2327	Cut a video .
2328	Concatenate video files .
2329	List items from a file .
2330	Read a dictionary from a file .
2331	3x3 convolution layer .
2332	Create an object from a dict .
2333	Read an image .
2334	Read image from bytes .
2335	Write an image to a file .
2336	Convert BGR to grayscale .
2337	Convert gray to BGR .
2338	Cast inputs to dst_type .
2339	Return True if seq is a sequence of expected_type .
2340	Slice a list .
2341	Check prerequisites .
2342	Average the values of the history .
2343	Scatter input to devices .
2344	Return the value of a color .
2345	Return the time since last check of a timer .
2346	Start the timer .
2347	Return the time since the timer was started .
2348	Elapsed time since last check .
2349	Show a flow .
2350	Convert flow to RGB .
2351	Make a color wheel
2352	Compute the accuracy of a batch .
2353	Scatter a tensor or list of tensors .
2354	Scatter inputs and kwargs .
2355	Perform the request .
2356	Return a JSON response .
2357	Return a text representation of the request .
2358	Handle a callback .
2359	Perform multiple requests .
2360	Make a request .
2361	Start the master process .
2362	Normalize a task to v2 format .
2363	Parse a YAML file for line numbers .
2364	The wheel distribution name .
2365	Return the basename of the archive .
2366	Add requirements to metadata file .
2367	Convert an egg - info file to a dist - info file .
2368	Create a message activity .
2369	Create a message with a list of suggested actions .
2370	Create an attachment activity .
2371	Create a list activity .
2372	Create a list of attachments .
2373	Create a trace activity .
2374	Setter for the telemetry client .
2375	Read a list of keys .
2376	Write changes to the database .
2377	Delete a list of keys .
2378	Create a StoreItem from the result .
2379	Create a dict from a store item .
2380	Sanitize a key .
2381	Create database and container .
2382	Get or create a database .
2383	Get or create a container .
2384	Fill in Qna event .
2385	Returns a conversation reference for the given activity .
2386	Get the name of a step .
2387	Check if a channel supports suggested actions .
2388	Check if a channel supports card actions .
2389	Get the channel ID of the activity .
2390	Check if an auth header is an emulator token .
2391	Create a hero card attachment .
2392	Returns a list of parameters defined in this instruction .
2393	Return a copy of this instance with a mirror .
2394	Inverse of this gate .
2395	Set control value .
2396	Return a copy of this Cpy .
2397	Return a qasmif instruction .
2398	Return a QASM instruction .
2399	Run a circuit .
2400	Run a pass .
2401	Return a list of all passes in the working list .
2402	Dump the flow control passes .
2403	Factory method for creating a controller .
2404	Create a UBase expression .
2405	Get parameters for a single gate .
2406	Return a single gate matrix .
2407	einsum_matmul_index is the inverse of numpy . einsum .
2408	einsum_vecmul_index is the inverse of einsum_vecmul .
2409	Helper function for einsum index labels .
2410	Convert a Circuit to a DAGCircuit .
2411	Return the fitted exponential function .
2412	Compute the oscillatory fitting function .
2413	Plot a coherence measurement .
2414	Calculate the shape of the RBF data .
2415	Plot RBBI data .
2416	Split runs on parameters .
2417	Return a tuple of theta phi and lamb .
2418	Convert YYZ angles to ZYZ angles .
2419	Validate the input state .
2420	Trim a PIL image .
2421	Given a list of qregs and an instruction return a list of qregs and a list of qregs .
2422	Convert a Circuit to an instruction .
2423	Run the transpiler .
2424	Find the best subset of the coupling map .
2425	Create a barrier instruction .
2426	Return the average of counts and observables .
2427	Process a bit ID node .
2428	Process a custom unitary node .
2429	Process a gate node .
2430	Process a CNOT node .
2431	Process a measure node .
2432	Process if node .
2433	Create a DAG operation .
2434	Get the duration of a channel .
2435	Get the start time of a channel .
2436	Get the stop time of a channel .
2437	Yield instructions for this schedule .
2438	Check that value is of expected type .
2439	Dumps additional data .
2440	Load additional data .
2441	Create a validation schema .
2442	Validate an instance .
2443	Decorate a method to run after the init method .
2444	Convert to a dictionary .
2445	Create a new instance from a dictionary .
2446	QFT function .
2447	Return partial trace vector .
2448	Vectorize a density matrix .
2449	Devectorizes a vectorized square matrix .
2450	Convert choi to rauli
2451	Chops an array so that all imaginary and real components are zero .
2452	Return the outer product of two vectors .
2453	Compute the concurrence of a state .
2454	Calculate the Shannon entropy of a vector .
2455	Calculate the Shannon entropy of a state .
2456	Calculate the mutual information of a state .
2457	Compute the entanglement of formation .
2458	Return the Shannon entropy of a qubit .
2459	Flatten a schedule .
2460	Shift a schedule .
2461	Insert a new child into the schedule .
2462	Append a child component to a parent component .
2463	Add a U3 gate to the pipeline .
2464	Get the status of the backend .
2465	Start timer .
2466	Estimates the time remaining for a given iteration .
2467	Disassemble a Quil program .
2468	Hamming distance between two strings .
2469	Create a quaternion from an axis rotation .
2470	Create a quaternion from Euler angles .
2471	Normalize the quaternion .
2472	Convert to a 3x3 matrix .
2473	Convert to zyz
2474	Process data .
2475	Plot a histogram .
2476	Check the type of the value .
2477	Raise QiskitIndexError if index is out of range .
2478	Check if a matrix is a square matrix .
2479	Check if a matrix is diagonal .
2480	Return True if op is a symmetric matrix .
2481	Check if a matrix is a hermitian matrix .
2482	Check if a matrix is positive semidefinite .
2483	Check if a matrix is an identity matrix .
2484	Check if a matrix is unitary .
2485	Convert a QuantumChannel to a chi - chi output .
2486	Convert a QuantumChannel to a superop .
2487	Convert to Kraus .
2488	Convert to Chi representation .
2489	Convert to PTM .
2490	Convert to Stinespring or Operator representation .
2491	Convert data to an operator .
2492	Convert an operator to a numpy array .
2493	Convert stinespring to Operator representation .
2494	Convert superop to choi .
2495	Convert ChoI data to superop data .
2496	Convert kraus data to choi
2497	Convert Choi matrix to Kraus matrix .
2498	Convert stinespring to kraus .
2499	Convert stinespring to chi .
2500	Convert kraus to stinespring .
2501	Convert kraus vectors to superop vectors .
2502	Transform from Pauli to Chi .
2503	Convert Chi data to Pauli .
2504	Reravel two matrices .
2505	Transform from Pauli to PCA .
2506	Raise QiskitError if input_dim != output_dim .
2507	Hide ticklines and labels on axis .
2508	Set the label convention
2509	Clear the data structures .
2510	Add vectors to the list of vectors .
2511	Add an annotation .
2512	Render the plot .
2513	Plot the front of the sphere .
2514	Show the figure .
2515	Two - qubit kak .
2516	Return the top part of the layer .
2517	Return a mid string .
2518	Format the bot .
2519	Return the length of the rectangle .
2520	Returns a list of parameters for a label instruction .
2521	Return a label for a box instruction .
2522	Return a latex representation of this parameter .
2523	Compile a set of circuits .
2524	Filter out deprecated warnings .
2525	Return local hardware information .
2526	Check if we have a connection to the given hostname and port .
2527	Check the status of a job .
2528	Return a constant array .
2529	Square of a time series .
2530	Calculate the triangle of a signal .
2531	Cosine function .
2532	Fix gaussian width .
2533	Gauss - centered Gaussian .
2534	Calculate the derivative of a gaussian .
2535	Gaussian square function .
2536	Create a default pass manager .
2537	Default pass manager simulator .
2538	Check if a register exists .
2539	Return a copy of this Circ with a mirror Circ .
2540	Return a copy of this Circ with the inverse Circ .
2541	Append an instruction onto the current wires .
2542	Add an instruction to the list .
2543	Add a register to the QuantumCircuit .
2544	Raise a QiskitError if there are duplicate qubits .
2545	Raise a QiskitError if any of the qargs are not in this circuit .
2546	Raise QiskitError if cargs are not valid
2547	Check that circuits are compatible .
2548	Return the QASM code for this instruction .
2549	Draw the circuit .
2550	Return the number of gate operations .
2551	Return the total width of the image .
2552	Counts the number of operations performed on the instruments .
2553	Return the number of connected components .
2554	Bind parameters to the circuit .
2555	Binds a value to a parameter .
2556	Draw a pulse drawer .
2557	Search forward n gates .
2558	Given a list of gates and a coupling map return a list of gates that have no partition .
2559	Calculate the distance between gates and layout .
2560	Return the score of a step .
2561	Create a copy of a DAGCircuit .
2562	Transform a gate for a layout .
2563	Return a list of DAGNodes representing the swap operations from an edge .
2564	Run the transformer .
2565	Add a physical qubit to the coupling graph .
2566	Add an edge between two qubits .
2567	Return a subgraph of the graph .
2568	List of physical qubits in the graph .
2569	Check if the graph is connected .
2570	Compute the distance matrix .
2571	Return the distance between two qubits .
2572	Transpile a list of circuits .
2573	Add a Cu1 gate .
2574	Inverse this instruction .
2575	Apply a q_if instruction to each instruction .
2576	Add a C if instruction .
2577	Subscribe to an event .
2578	Dispatch an event .
2579	Unsubscribe from an event .
2580	Publish an event .
2581	Initialize qubits .
2582	Initialize the circuit .
2583	Return a list of gates to uncompute .
2584	Calculate the bloch angles of two complex numbers .
2585	Perform multiplexing .
2586	Checks if the given value is a virtual register .
2587	Returns a copy of this layout .
2588	Combine this layout into another layout .
2589	Add a Coffoli gate .
2590	Insert a new schedule component .
2591	Raise TranspilerAccessError if the property is protected .
2592	Convert a list of gates and a dictionary of qregs to a list of indices .
2593	Run the stochastic swap .
2594	Update a layer .
2595	Group a set of qubits into a Pauli set .
2596	Create a Pauli from a label string .
2597	Initialize from z and x vectors .
2598	Return the product of p1 and p2 .
2599	Convert to operator .
2600	Convert to an instruction .
2601	Update the z - vector .
2602	Update qubits with x .
2603	Insert paulis into the tensor .
2604	Append paulis to the end of the list .
2605	Delete a set of qubits .
2606	Create a random sample of num_qubits .
2607	Create a PauliSingle instance .
2608	Compute the outcome of a measure .
2609	Add samples to the memory .
2610	Add a measure to the classical state .
2611	Reset the state of a qubit .
2612	Validate the initial statevector .
2613	Initialize statevector .
2614	Get the state vector .
2615	Validate that measure sampling is enabled .
2616	Run the job .
2617	Run a job .
2618	Raises a BasicAerError if the circuit is invalid .
2619	Validate the initial unitary .
2620	Initialize the unitary matrix .
2621	Convert unitary to unitary array .
2622	Run a job .
2623	Validate the configuration of this circuit .
2624	Return True if obj is a bit .
2625	Run the transpiler .
2626	Check if this interval overlaps with another .
2627	Shift the interval by time .
2628	Shift the timeslot by time .
2629	Get the start time of a channel .
2630	Get the stop time of a channel .
2631	Return True if this timeslot collection is mergeable with another .
2632	Merge this collection with another collection .
2633	Shift the timeslots by the given time .
2634	Report an issue or comment .
2635	Process rho data .
2636	Plot the state of paulivec .
2637	Add a RZZGate instruction .
2638	Add a CSWAP gate .
2639	Initialize the backend prop .
2640	Create a program graph from a DAG .
2641	Select the next edge in the program .
2642	Select the item with the lowest cost .
2643	Select the best remaining qubit for a given program .
2644	Run the program .
2645	Return a list of instruction objects .
2646	Inverse the gate .
2647	Apply q_if to each gate .
2648	C - if gate .
2649	Check if the matrix is unitary .
2650	Return the conjugate of this operator .
2651	Transpose the operator .
2652	Power of an operator .
2653	Return a tuple of the input and output dimensions .
2654	Convert an instruction to an operator .
2655	Update the layout of a layer .
2656	Separate a bitstring into substrings .
2657	Format level 0 memory .
2658	Format level 1 memory .
2659	Format level 2 memory .
2660	Format counts in memory .
2661	Format a statevector .
2662	Format a unitary matrix .
2663	Decorator to raise JobError if job is not submitted .
2664	Submit the job .
2665	Return the status of the job .
2666	Return True if lo_freq is included in this interval .
2667	Bloch multivector plot
2668	Return the list of qubits in the user lo config .
2669	Get measurement lo frequencies from user lo config .
2670	Run the decomposition .
2671	Plot the state of qsphere .
2672	Choose k from n to k .
2673	Return the index of the kth item in a list .
2674	Plot the state of a pauli vector rho .
2675	Return a list of unique hardware backends .
2676	The operator of the node .
2677	Create a constant pulse .
2678	Create a zero pulse .
2679	Create a square pulse .
2680	Sample a sawtooth pulse .
2681	Sample a triangle pulse .
2682	Create a sinusoidal cosine pulse .
2683	Create a sin pulse at a specific frequency .
2684	Sample a gaussian pulse .
2685	Create a gaussian derivative pulse .
2686	Create a gaussian square pulse .
2687	Return the distance between the x and y axis .
2688	Return a string representation of the qreg node .
2689	Instantiate a backend instance .
2690	Rename a register .
2691	Remove all operations named opname .
2692	Add a QuantumRegister to the circuit .
2693	Add a classical register .
2694	Add a wire to the DAG .
2695	Check that the condition is valid .
2696	Get the bits in a condition .
2697	Add an operation node .
2698	Apply an operation back to the circuit .
2699	Check that all edges map to the same register .
2700	Check that the wire map is valid .
2701	Map a condition to a new condition .
2702	Given a DAG extend it back .
2703	Composes the input circuit back into the output circuit .
2704	Check that the list of wires is correct .
2705	Given a node return the pred and succ maps .
2706	Compute the full predecessor and successor maps .
2707	A topological sort of the graph .
2708	Iterate over edges in the graph .
2709	Return a list of all nodes with the given operation .
2710	Return a list of gate nodes .
2711	Return a list of named nodes .
2712	Returns a list of two - q gate nodes .
2713	Get predecessors of a node .
2714	Returns a list of predecessors of the given node .
2715	Return the ancestors of a node .
2716	Return a list of successors of a node .
2717	Remove an op node .
2718	Remove all ancestors of a node .
2719	Remove all descendants of a node .
2720	Remove all non - ancestor nodes of a node .
2721	Remove all descendants of a node .
2722	Return a list of all layers in the DAGCircuit .
2723	Return a list of nodes in the DAG .
2724	Iterate over all layers in the multigraph .
2725	Given a list of names of the qubits in the multi_graph return a set of lists of gates .
2726	Yield nodes connected to the given wire .
2727	Count the number of operations in topological order .
2728	Return a dictionary of properties of the tensor .
2729	Create a TomographyBasis object .
2730	Add a measurement gate to the circuit .
2731	Set the tomography basis for a set of qubits .
2732	Process a tomography set .
2733	Create a list of tomography circuits .
2734	Generate data for tomography .
2735	Given a dict of counts and a list of meas_qubits return a dict of counts on measured qubits .
2736	Fit a tomography data set to a state .
2737	Fit the least square fit to the tomo data .
2738	Project a list of qubits onto a basis .
2739	Linear inverse of TOMO .
2740	r Calculate the wizard for a given rho .
2741	Calculate wigner data .
2742	Apply meas_fun to circuit .
2743	Check the status of a job .
2744	Monitor the status of a job .
2745	Calculate the Euler angles of a unitary matrix .
2746	Simplify a rotation matrix .
2747	Run enlarge with ancilla .
2748	Create a tab of qubits .
2749	Create a job history tab .
2750	Plot job history .
2751	Draws a pulse .
2752	Add a Cu3 gate to the pipeline .
2753	Builds a bell circuit .
2754	Transpile a list of circuits .
2755	Transpile a circuit .
2756	Execute a simulation .
2757	Return the drive channel in this queue .
2758	The control channel of this pulse .
2759	Return the first measurement channel in the queue .
2760	Return the first available acquire channel .
2761	Calculate the input state of a state machine .
2762	Assemble a run .
2763	Unsets the QISKIT logger .
2764	Plot the state of the given rho .
2765	Process fidelity operator inputs .
2766	Input the given data .
2767	Pop a lexer from the stack .
2768	Push the lexer onto the stack .
2769	Run the circuit .
2770	Returns the Qobj conversion method for the given instruction .
2771	Convert a acquire instruction to a QobjMeasurement .
2772	Convert a frame change .
2773	Convert a persistent value to a QValue .
2774	Convert a drive command to a QObject .
2775	Convert a snapshot instruction to a qobj model .
2776	Update pulse annotations .
2777	Decorate a continuous pulse sampler function .
2778	Return a list of backends that match the given filters .
2779	Resolve a backend name .
2780	Convert a DAG to a QuantumCircuit .
2781	Make a dictionary of observables .
2782	Update the current symtab .
2783	Verify that a bit is declared in the bitlist .
2784	Verify that the expression list is valid .
2785	Raise QasmError if obj is not a gate or opaque call .
2786	Verify that a register is valid .
2787	Verify that the object is a bitlist or an idlist .
2788	Find the column in the input string .
2789	Parse debug flag .
2790	Parse QASM data .
2791	Parse a string and return the AST .
2792	Parse the QASM file .
2793	Add a Crz gate .
2794	Return the basis state of a bitstring .
2795	Project a state to a density matrix .
2796	Return the purity of a state .
2797	Run the program .
2798	Create a backend widget .
2799	Update backend info .
2800	Generate the jobs pending widget .
2801	Run a DAG .
2802	Get a backend by name .
2803	Return the shape of the bipartite layer .
2804	Given a list of bit labels yield a tuple of the register name and the register number .
2805	Truncate a float .
2806	Generate a LaTeX document .
2807	Get the depth of the image .
2808	Get the beamer page .
2809	Load schema from file .
2810	Get a JSON schema validator .
2811	Load schemas and validators .
2812	Validate a JSON dictionary against a JSON schema .
2813	Format the causes of an error .
2814	The majority operator .
2815	Unmajority operator .
2816	Generate a LaTeX source for a circuit .
2817	Draw a circuit in a Matplotlib figure .
2818	Random unitary operator .
2819	Generate a random density matrix .
2820	Generate a random GNibre matrix .
2821	Compute the Helmholtz distribution
2822	Random density of buses
2823	Return a list of custom unitary calls .
2824	Power n times .
2825	Compose a tensor product with another tensor .
2826	Convert an instruction to a superoperator .
2827	Run the barrier .
2828	Convert a list of circuits into a qobj .
2829	Unroll all 3q or more gates .
2830	Run the decomposition .
2831	Define the gate definition .
2832	Check that value is of expected type .
2833	Check the type of the value .
2834	Set the absolute tolerance .
2835	Set the relative tolerance .
2836	Reshape the input and output dimensions .
2837	Return a tuple of input dimensions .
2838	Return a tuple of output dimensions .
2839	Return a copy of the dataset .
2840	Power n times .
2841	Return a tuple of the appropriate dimensions for the given dimensions .
2842	Implementation of einsum_matmul .
2843	Deal with validation errors
2844	Raise ValidationError if data is invalid .
2845	Check that value is a valid type .
2846	Calculate the fidelity of two states .
2847	Compute the SVD of a matrix .
2848	Return the inverse of this snapshot .
2849	Set the label .
2850	Return True if this vector is unitary .
2851	Convert to operator .
2852	Convert to an instruction .
2853	Initialize the transformer .
2854	Sort enum for model .
2855	Patch the pytz . strftime module to work with Python 3 . x .
2856	Return a dictionary of locale data .
2857	Return a generator that yields all available locales .
2858	Check if tokens are valid .
2859	Split string by known words .
2860	Parse a date string .
2861	Parse a time string .
2862	Return True if the given date string is valid .
2863	Translate a date string .
2864	Parse a date string with a list of date formats .
2865	Return an instance of the ammo generator .
2866	Convert a Java exception to a network error code .
2867	Convert JMeter exception to HTTP status code .
2868	Read configuration file .
2869	Compose phantom config .
2870	Get information about the pipeline .
2871	Compose STPD configuration .
2872	Log stdout and stderr .
2873	Expand a time string into an integer .
2874	Read configuration options .
2875	Prepare stepper information .
2876	Generate a stpd filename .
2877	Read cached stepper info .
2878	Write cached options to file .
2879	Make a stpd file .
2880	Create a new Pipeline .
2881	Return the rps at the given time .
2882	Execute a command .
2883	Decodes monitoring data .
2884	Make points for a label .
2885	Publish a key - value pair .
2886	Count the number of codes that match a regex .
2887	Stop the pool .
2888	Feed data from StpdReader .
2889	Initialize logging .
2890	Add user options .
2891	Configure the core .
2892	Graceful shutdown .
2893	Collect data from the queue .
2894	Notify listeners of aggregated data .
2895	Get a marker by type .
2896	Parse a duration string .
2897	Start the agent .
2898	Start the agent .
2899	Discover JMeter UDP port .
2900	Add JMeter components
2901	Terminate the process .
2902	Read data from tank
2903	Create a criterion from a string .
2904	Returns a list of HostConfig objects
2905	Create agent startup config file .
2906	Check disk usage .
2907	Check that memory is available .
2908	Get terminal size
2909	Get the right line .
2910	Truncate a line of text .
2911	Render the left panel .
2912	Render the screen .
2913	Add a widget to the info widget list .
2914	Fill a rectangle .
2915	Return the length of the given line .
2916	Create a load plan .
2917	Get the level string .
2918	Add a widget to the screen .
2919	Make a writer request .
2920	Load plugins .
2921	Returns the plugin of the specified type .
2922	Returns a list of plugins of the specified type .
2923	Collect a file .
2924	Add an artifact file .
2925	Create a temporary file .
2926	Load config files .
2927	Flush the configuration file .
2928	Get options from a section .
2929	Find all sections that start with the given prefix .
2930	Decodes a chunk of stats data .
2931	Get information about the phantom .
2932	Prepare the agent .
2933	Poll agent data .
2934	Send collected data to all listeners .
2935	Detect the configuration of the plugin .
2936	Handle data items .
2937	Decode agent data .
2938	Subscribe to channels .
2939	Run the event loop .
2940	Close the websocket .
2941	Make a single request .
2942	Submit an order .
2943	Get a specific order .
2944	Get a specific position .
2945	List assets .
2946	Get an asset by symbol .
2947	Create a joining subplan .
2948	Check that obj is a dict .
2949	Get a dict parameter .
2950	Construct an event logger .
2951	Construct a JSON event logger .
2952	Create a Config instance from a config file .
2953	Get the configuration for a repository .
2954	Format a config dictionary for GraphQL .
2955	Get a pipeline by name .
2956	Get all pipelines
2957	Get the next event from the queue .
2958	Execute a pipeline through a queue .
2959	Wait for the process to finish .
2960	Create a Field instance .
2961	Build the execution plan .
2962	Build a pipeline .
2963	Build a sub pipeline .
2964	Get a solid by name .
2965	Construct a list of comands to publish .
2966	Release a new version .
2967	Returns a PipelineContextDefinition with a default context .
2968	Decorate a function as an input selector schema .
2969	Decorate a function as a selector schema .
2970	Write a block of text .
2971	Download a file from S3 .
2972	Upload a file to S3 .
2973	Context manager for user code errors .
2974	Create a directory .
2975	Context manager for user code execution .
2976	Create a context free log .
2977	Returns True if any of the steps succeeded .
2978	True if all steps have been skipped .
2979	Returns a dictionary of transformed values .
2980	Return the transformed value of the step .
2981	Return the failure data for this step .
2982	A configuration dictionary with typed fields .
2983	Check if config_value is a valid dataset .
2984	Check if config_value is a valid table .
2985	Execute the core transform .
2986	Decorate an existing type as a DAGster type .
2987	Decorator for resource functions .
2988	Create a new event .
2989	Coalesce the topological steps of a execution plan .
2990	Get connection parameters .
2991	Create a new connection .
2992	Create a new cursor .
2993	Close the database connection .
2994	Make a model from a dict .
2995	Convert a list of dictionaries into a list of models .
2996	Return a formfield for this field .
2997	Convert a value to a model instance .
2998	Apply rel filters to queryset .
2999	Compute uniform NFPs .
3000	Compute real NFPs .
3001	Compute the best set of partitions .
3002	Compute the optimal number of partitions for a set of sizes .
3003	Calculate C1 and C2 .
3004	Initialize slots .
3005	Return the byte size of the hash .
3006	Serialize this MinHash .
3007	Deserialize a LeanMinHash from a buffer .
3008	Update the hash values .
3009	Merge this MinHash with another MinHash .
3010	Union two MinHash objects .
3011	Index entries .
3012	Return a list of keys matching the query .
3013	Compute the minimum hash value of a vector .
3014	Remove a key from the dictionary .
3015	Update the value of a register .
3016	Count the number of samples in the dataset .
3017	Merge this HyperLogLog with another HyperLogLog .
3018	Clear the regulation .
3019	Calculate apk score .
3020	Map k nearest neighbors to k nearest neighbors .
3021	Sorts the hashtables .
3022	Given a minhash and the number of permutations of a minhash return a list of keys in the range .
3023	Close all open hashtables .
3024	Return an ordered storage instance .
3025	Return an unordered storage instance .
3026	Return the user data for the given object .
3027	Mark social login as connect .
3028	Select a text from a list .
3029	Parse a scoped selector .
3030	Parse a statement .
3031	Parse a value .
3032	Advance one line .
3033	Parse a configurable reference .
3034	Creates a proxy for an exception with an augmented message .
3035	Convert a string to Markdown format .
3036	After create session .
3037	Ensure a function is wrappable .
3038	Decorate a function or class .
3039	Format a value .
3040	Clear the configuration .
3041	Binds a value to a binding key .
3042	Get the value of a parameter .
3043	Return True if fn_or_cls might have arg_name .
3044	Get a cached arg spec for a function .
3045	Given a function fn and a list of positional arguments return a list of the names of those positional parameters .
3046	Get all positional parameter names for a function .
3047	Get the default values for a function parameter .
3048	Context manager for creating a new config scope .
3049	Decorator to make a function configurable .
3050	Return the operative configuration string .
3051	Parse a config file .
3052	Register a file reader .
3053	Parse a config file .
3054	Parse config files and bindings .
3055	Parse a string value .
3056	Finalize the configuration .
3057	Iterate over flattened values .
3058	Iterate over ConfigurableReference objects in a config .
3059	Set a constant .
3060	Create constants from enum .
3061	Return a list of selectors matching a partial selector .
3062	Get all selectors that match a partial selector .
3063	Return the minimal selector for a given selector .
3064	Format a sp search query .
3065	Parse the Retry - After header .
3066	Validate a property value .
3067	Return a description of the property .
3068	Set the value .
3069	Return the thing at the given index .
3070	Initialize the object .
3071	Set default headers
3072	Checks the Host header and raises a 403 if it is present .
3073	Get a thing .
3074	Process a websocket message .
3075	Post a message .
3076	Delete a thing .
3077	Start the server .
3078	Return a description of the action .
3079	Start the action .
3080	Finish the task .
3081	Return the event description as a dictionary .
3082	Get IP address .
3083	Return a sorted list of IP addresses .
3084	Set the value .
3085	Notify of an external update .
3086	Return a dictionary describing the thing .
3087	Set the href prefix .
3088	Return a dictionary of property descriptions .
3089	Returns a list of action descriptions .
3090	Returns a list of event descriptions .
3091	Add a property .
3092	Remove a property .
3093	Get the value of a property .
3094	Returns a dictionary mapping property names to property values .
3095	Set a property value .
3096	Get action by name and id .
3097	Add an event .
3098	Add an available event .
3099	Perform an action .
3100	Remove an action .
3101	Add an available action .
3102	Remove a subscriber .
3103	Add a subscriber to an event .
3104	Remove an event subscriber .
3105	Notify the client of a property change .
3106	Notify about an action .
3107	Notify about an event .
3108	Annotate the model with the given annotations .
3109	Update a model .
3110	Insert multiple rows .
3111	Insert a new record .
3112	Insert a new record .
3113	Build an insert query .
3114	Check if a field is magical .
3115	Get the fields to insert and update .
3116	Called when a model is saved .
3117	Called when a model is deleted .
3118	Create a Case expression for a not None field .
3119	Resolve an expression .
3120	Return a string representation of this HStore .
3121	Return a copy of this instance with relabeled labels .
3122	Add join conditions to the query .
3123	Check if a field is a HStoreField .
3124	Insert or update a list of objects .
3125	Create a required HSTORE .
3126	Renames a hstore required constraint .
3127	Drop a required HSTORE constraint .
3128	Generate a name for a required constraint .
3129	Create the SQL statement for this index .
3130	Create a custom command .
3131	Get the database backend class .
3132	Create hstore extension .
3133	Prepares a value to be used in a query .
3134	Create a RETURNING statement .
3135	Return a list of SQL queries to insert into the database .
3136	Rewrite an INSERT or UPDATE query .
3137	Rewrites an INSERT or UPDATE query .
3138	Rewrite an INSERT query that doesn t return anything .
3139	Build the conflict target for this query .
3140	Get a model field by name .
3141	Format a field name .
3142	Format a field value .
3143	Create a unique key in a HSTORE .
3144	Rename a HSTORE unique constraint .
3145	Drop a unique constraint from a HStore .
3146	Generate a unique constraint name .
3147	Iterate over the uniqueness keys of a field .
3148	Add a condition to this query .
3149	Add extra conditions to the query .
3150	T distribution 95 conf level .
3151	Calculate the variance between two samples .
3152	Calculate the t - score between two samples .
3153	Check if two samples are significant .
3154	Sorts a list of roots into topological order .
3155	Yield n - qens vectors .
3156	Play a board .
3157	Select the best child .
3158	Draw a random playout .
3159	Remove benchmarks that are not compatible with Python 2 .
3160	Expand a benchmark name .
3161	Generate a string table .
3162	Initialize benchmarks .
3163	Returns the domain of the knots .
3164	Fetch items from a channel .
3165	Parse raw posts .
3166	Get information about a specific user .
3167	Fetch all items of a given category .
3168	Fetch items from the RSS feed .
3169	Setup command parser .
3170	Fetch items from the database .
3171	Get a list of bugs .
3172	Get comments on bugs .
3173	Retrieve history of bugs .
3174	Get a list of attachments .
3175	Get the notes for an issue .
3176	Fetch merge requests for a given date .
3177	Get the notes for a merge .
3178	Get the versions of a merge .
3179	List merge requests .
3180	Merge a merge .
3181	List the versions of a merge .
3182	Merge a merge version .
3183	Get a list of notes for an item .
3184	List emojis for an item .
3185	List the emojis for a note .
3186	Calculate time to reset .
3187	Fetch items from GitLab .
3188	Initialize the rate limit .
3189	Setup command parser .
3190	Fetch a list of messages .
3191	Return a unique identifier for a metadata .
3192	Returns the number of members in a conversation .
3193	Get information about a channel .
3194	Get information about a specific user .
3195	Setup command parser .
3196	Return the timestamp of the last time the item was updated .
3197	Parse a buglist from a CSV file .
3198	Parse bugs details .
3199	Parse bug activity .
3200	Logout the user .
3201	Return the XML metadata for this bug .
3202	Get bug list
3203	Get a list of bugs .
3204	Get activity about a bug .
3205	Fetch a list of items for a given category .
3206	Fetch events from a group .
3207	Get events from a group .
3208	Retrieve comments for a given event .
3209	Get the RSVP records for a specific event .
3210	Fetch data for a question .
3211	Fetch comments for a question .
3212	Build a question object .
3213	Fetch API questions for a resource .
3214	Get HTML question .
3215	Get comments for a post .
3216	Parse a question container .
3217	Parse the answer info container of a given HTML question .
3218	Parse the number of HTML pages in a question .
3219	Parse user info .
3220	Fetch items from Gerrit .
3221	Parse reviews from raw data .
3222	Fetch Gerrit 28 reviews .
3223	Get the server version .
3224	Get a list of reviews from Gerrit .
3225	Retrieve the next group item .
3226	Execute a command .
3227	Execute a command from the archive .
3228	Execute a command from the remote server .
3229	Setup command parser .
3230	Fetch issue data .
3231	Fetches all attachments for an issue .
3232	Fetch issue messages .
3233	Fetches all activities for an issue .
3234	Fetch user data .
3235	Get information about a user .
3236	Issues the specified issue .
3237	Get a collection of bugs from an issue .
3238	Get the URL for the project .
3239	Fetch items from API .
3240	Get groupsio subscriptions
3241	Find the group id for this group .
3242	Perform a GET request .
3243	Setup command parser .
3244	Generate a unique UUID .
3245	Fetch items from a backend .
3246	Fetch items from archive .
3247	Find all backends in a package .
3248	Fetch data for a given category .
3249	Fetch items from an archive .
3250	Filter classified data .
3251	Parse command line arguments .
3252	Set authentication arguments .
3253	Sets the arguments for the archive command .
3254	Add command line options to the parser .
3255	Run the backend .
3256	Initialize the archive manager .
3257	Return the timestamp of the last modification time of the item .
3258	Parse a mbox file .
3259	Fetch and parse messages from a MailingList .
3260	Copy a mbox to a temporary folder .
3261	Validate a message .
3262	Convert a casedict to a dict .
3263	Get a message by key .
3264	Fetch data for a given category .
3265	Fetch items from the repository .
3266	Parse a git log file .
3267	Set up the git repository path .
3268	Setup command parser .
3269	Parse the stream .
3270	Clone a repository .
3271	Count the number of objects in the repository .
3272	Check if the repository is detached .
3273	Update the repository .
3274	Return a list of commits from the git repository .
3275	Return a list of git rev - list commands
3276	Get the log for this repository .
3277	Show information about this repository .
3278	Fetch a pack file .
3279	Read commits from pack file .
3280	Update a list of references
3281	Return a list of refs for this repository .
3282	Update a git ref
3283	Execute a git command .
3284	Read stderr from subprocess .
3285	Execute a git command .
3286	Fetch tweets from a category .
3287	Fetch tweets from a category .
3288	Return a generator of tweets matching a query .
3289	Setup command parser .
3290	Fetch all items of a given category .
3291	Fetches data for a given category .
3292	Parses a hit string and returns a dictionary of hits
3293	Fetches the hits for a list of keywords .
3294	Return the updated_on timestamp of an item .
3295	Return the metadata category for the given item .
3296	Fetch pull requests .
3297	Fetch repo info .
3298	Get the reactions for an issue .
3299	Returns a list of issue comment reactions
3300	Return a list of issue assignees
3301	Get a list of user data for a pull request .
3302	Returns a list of commit hashes for a pull request .
3303	Get pull review comment reactions
3304	Get a user by login .
3305	List reactions for an issue .
3306	List issues .
3307	List pull requests for this repository .
3308	Return the repo name .
3309	Pull requested reviewers for a pull request .
3310	Pull all commits for a pull request .
3311	Pull review comments .
3312	Get information about a user .
3313	Get orgs for a user .
3314	Returns the number of tokens remaining in the rate limit .
3315	Return a list of tokens rate limits .
3316	Choose the best API token .
3317	Return True if we need to check tokens .
3318	Update current rate limit .
3319	Initialize metadata .
3320	Store data in the archive .
3321	Retrieve an entry from the archive .
3322	Create an archive .
3323	Create a hashcode for a given uri and payload .
3324	Verify archive integrity .
3325	Load metadata from database .
3326	Count the number of rows in a table .
3327	Create an archive .
3328	Remove an archive .
3329	Return a list of file paths that match the given criteria .
3330	Yields a tuple of the archive path and the created_on timestamp .
3331	Find all files in the directory .
3332	Check if a file is compressed .
3333	Generate a range of months between two dates .
3334	Convert a message to a dictionary .
3335	Remove invalid XML characters .
3336	Convert an XML string to a dictionary .
3337	Parse issues from raw JSON .
3338	List issues from Redmine .
3339	Get information about an issue .
3340	Get information about a user .
3341	Make a request to the Redmine API .
3342	Fetch all items of a given category .
3343	Fetch data from a repository .
3344	Get the contents of a repository .
3345	Map custom fields to a dictionary .
3346	Filter custom fields .
3347	Parse issues from raw page .
3348	Get a list of issues .
3349	Get issues for a given date .
3350	Get comments for an issue .
3351	Get a list of all fields available on the server .
3352	Fetch all items of a given category .
3353	Get a list of jobs .
3354	Get builds for a job .
3355	Parse a list of questions .
3356	Get a list of questions .
3357	Setup command parser .
3358	Fetches items from MediaWiki .
3359	Get the max date of a list of reviews .
3360	Fetch pages from reviews API .
3361	Get all pages
3362	Get a list of recent changes for a list of namespaces .
3363	Fetch a list of messages .
3364	Parse messages from raw JSON .
3365	Filter a message by chats .
3366	Get a list of updates for this account .
3367	Fetch a list of articles from the server .
3368	Add offset to metadata .
3369	Parse an email article .
3370	Fetch data from the remote server .
3371	Fetch an article .
3372	Fetch data from remote
3373	Fetch data from the archive .
3374	Create an HTTP session .
3375	Setup rate limit handler .
3376	Sleep for rate limit .
3377	Update the rate limit .
3378	Parse Supybot log file .
3379	Retrieve a list of archives for a given date .
3380	List all supybot archives
3381	Parse Supybot messages .
3382	Parse supybot timestamp .
3383	Parse a supybot message .
3384	Fetch a list of topics .
3385	Parse topics page .
3386	Get a specific topic
3387	Post a post .
3388	Fetch all items of a given category .
3389	Parse tasks from raw JSON .
3390	Parse a list of users from raw JSON .
3391	Returns a generator that yields the most recent tasks .
3392	Get the most recent transactions .
3393	Get a list of users .
3394	List phids .
3395	Call Conduit API .
3396	Return a unique identifier for a metadata item .
3397	Parse contents summary .
3398	Get the contents of the media .
3399	Retrieve a historical content .
3400	Parse measurement result .
3401	Return the WFS capabilities URL .
3402	Read capabilities from a URL .
3403	Read a string .
3404	Parse wml2 result .
3405	Build URL .
3406	Find all elements of a complex type .
3407	Construct a schema from a list of elements .
3408	Get a URL to describe a feature type .
3409	Execute a complex input
3410	List movie lists .
3411	List TV Lists .
3412	List movies .
3413	Retrieve information about this account .
3414	List alternative titles .
3415	List credits .
3416	List the external IDs associated with this account .
3417	List the keywords associated with this account .
3418	List recommendations .
3419	Retrieve a list of release dates .
3420	List releases .
3421	List translations for a project .
3422	List similar movies .
3423	List reviews .
3424	Get the changes for this repository .
3425	List upcoming jobs .
3426	Get the currently playing music .
3427	Retrieve popular posts .
3428	List the top rated items .
3429	List account states .
3430	Set the value of a rating .
3431	List movie credits .
3432	Returns a single tv credits .
3433	Retrieve information about a credit .
3434	Get a list of TV services .
3435	Retrieve information about this account .
3436	List movie lists .
3437	Retrieve information about this session .
3438	Get the list of movies watching your account .
3439	Create a new token .
3440	Token validation with login .
3441	Create a new session .
3442	Create a new guest session .
3443	List rated movies .
3444	Retrieve the status of an item .
3445	Create a list .
3446	Remove an item .
3447	Clear a list of users .
3448	List content ratings .
3449	Returns a list of similar images .
3450	On the air .
3451	Retrieve information about a series .
3452	List credits for a series .
3453	Returns a list of external IDs for this series .
3454	Retrieve information about a series .
3455	List credits for a series .
3456	Returns a list of external IDs for this series .
3457	Set attributes from a dictionary .
3458	Retrieve movie information .
3459	Retrieve a specific collection .
3460	Get a specific tv .
3461	Retrieve person information .
3462	Retrieve company information .
3463	Retrieve keyword information .
3464	Retrieve a list of multi - linked resources .
3465	Normalize a string .
3466	Return a tuple of the number of n - grams in a list of refs .
3467	Return a tuple of the number of n - grams in a reference string .
3468	Compute the erfcc of x .
3469	Aligns two texts .
3470	Get all descriptors in a module .
3471	Register a JSON descriptor .
3472	Register a device .
3473	Echo a string to a file .
3474	Return True if the given descriptor is a class .
3475	Convert to a JSON string .
3476	Get the coordinate of this descriptor .
3477	Return the surface area of a given atom .
3478	The surface area of the surface .
3479	Create a Structure from a molecule .
3480	Create a Descriptor from a JSON object .
3481	Fill missing values .
3482	Return a new Molecule with missing values removed .
3483	Return a tuple of keys and values .
3484	Return a dictionary representation of the object .
3485	The name of the value .
3486	Decorator to log calls to a function .
3487	Synchronized decorator .
3488	Print a progress message .
3489	Print a message .
3490	Raise a RuntimeError .
3491	Get a temporary file name .
3492	Set a temporary file .
3493	Remove temporary files .
3494	Return a fixed path .
3495	Returns a list of parameters for the given method .
3496	Merge opt parameters .
3497	Add options to the command line parser .
3498	Terminate the task .
3499	Add a task .
3500	Wait for all workers to terminate .
3501	Update progress bar .
3502	Read S3 keys from environment .
3503	read S3 keys from commandline
3504	Read S3 keys from config file .
3505	Initialize S3 keys .
3506	Connect to S3 .
3507	List all buckets
3508	Walk a directory tree .
3509	Return a list of all files in the given directory .
3510	Expand a list of source paths .
3511	Upload a single file to S3 .
3512	Put multiple files into a directory .
3513	Create a bucket .
3514	Update the privilege of a file .
3515	Print the contents of a list of files .
3516	Download a single file .
3517	Get files from a directory .
3518	Copy a single file or directory .
3519	Copy files from source to target .
3520	Delete files from S3 .
3521	Return a list of relative paths to a directory .
3522	Syncs two directories .
3523	Calculate the hash of a file .
3524	Get the MD5 hash of the file .
3525	Create a directory recursively .
3526	Check if the remote key matches the local key .
3527	Return True if path matches filter_path .
3528	Walk a directory .
3529	Check if a file or directory is conditional .
3530	Get the privilege for a file .
3531	Lookup an object from S3 .
3532	Read a chunk of data from a file .
3533	Upload a file to S3 .
3534	Verify that the file size is correct .
3535	Write a chunk of data to a file .
3536	Copy source to target .
3537	Run a command .
3538	Validate format .
3539	Pretty print a list of objects .
3540	List buckets .
3541	Create a bucket .
3542	Put files into S3 .
3543	Get files from S3 .
3544	s3 cat handler
3545	Dsync files .
3546	Copy files from source to target .
3547	Copy files from source to target .
3548	Delete a file from S3 .
3549	du handler
3550	Total size handler .
3551	Match a date .
3552	Return a tuple of time and value .
3553	Return a tuple of delta and value .
3554	Check that value is a dict .
3555	Discover gateways .
3556	Listen for incoming messages .
3557	Read a message from the hub .
3558	Push data to callbacks
3559	Get the AES key .
3560	Report an exception to Rollbar .
3561	Include the includeme hook .
3562	Ensure log handler exists .
3563	Get the current request object .
3564	Initialize a Rollbar instance .
3565	Decorator to mark a function as a lambda .
3566	Report a message to Rollbar .
3567	Search items by title .
3568	Create an agent log .
3569	Build a person data dictionary .
3570	Add Lambda context data to data dict .
3571	Add request data to the payload .
3572	Check if we should add any frame locals .
3573	Build request data .
3574	Build server data .
3575	Build payload .
3576	Main entry point .
3577	Compose two Hangul characters .
3578	Decompose a hangul letter .
3579	Checks if the given letter is a Jongsung .
3580	Attach a word to a word .
3581	Check if node is inside an except handler .
3582	Check if node is inside a lambda .
3583	Yield all elements of a node .
3584	Check if a node is clobbering in except .
3585	Check if node is a super node .
3586	Check if a node is an error .
3587	Check if node is a default argument .
3588	Return True if the given node is a function decorator .
3589	Return True if node is an ancestor of frame .
3590	Return the parent of node .
3591	Decorator to store a list of checks messages .
3592	Collects the fields from a string .
3593	Get an argument from a call node .
3594	Check if a node is inheriting from a standard exception .
3595	Check if an exception is of a certain type .
3596	Return True if node is decorated with a property decorator .
3597	Return True if func is decorated with qnames .
3598	Find a try except wrapper node .
3599	Checks if the given node is from a fallback block .
3600	Returns a list of exception handlers for the given node .
3601	Checks if a node ignores an exception .
3602	Check if a class is abstract .
3603	Infer the value of a node .
3604	Determine the type of a node .
3605	Check if a function is registered in singledispatch .
3606	Returns True if the given node is a postponed evaluation .
3607	Return a list of fully qualified module names .
3608	Get the name of an import .
3609	Pretty - print tree definitions .
3610	Write a graph file .
3611	Visit an import node .
3612	visit an ImportFrom node by returning a fresh instance of it
3613	Check the position of the import .
3614	Record an import node .
3615	Check imports order .
3616	Check that this is a relative import .
3617	Add imported module .
3618	Check for deprecated modules .
3619	Check that a module is preferred .
3620	Report external dependencies .
3621	Filter dependencies graph .
3622	Get the default options from the user .
3623	Insert default options into sys . argv .
3624	Return True if node is visible .
3625	Get the callbacks for a node .
3626	Visit a node .
3627	Check the consistency of the messages .
3628	visit a Call node by returning a fresh instance of it
3629	Check that the node is a datetime . time .
3630	Check that open mode is valid .
3631	Handle a message .
3632	Display the messages .
3633	Get the title for a node .
3634	Set default options .
3635	Return True if node is a builtin node .
3636	Add a class to the classdiagram .
3637	Get the ancestors of a node .
3638	Yields all instances of the given class node .
3639	Extract classes from a class node .
3640	Leave a project .
3641	Add imports from a module .
3642	Create a class diagram .
3643	Return a list of Diadefs
3644	Check if an owner is ignored .
3645	Return a list of names with similar names to the given node .
3646	Return True if the given node has no member .
3647	Return True if node has a parent of node_type .
3648	Return True if name is used as variadic .
3649	Return True if node has no context variable .
3650	Visit an attribute node .
3651	visit a Assign node by returning a fresh instance of it
3652	Check that the call is uninferable .
3653	Add error messages for unary operations .
3654	Iterate over interfaces implemented by node .
3655	Build a project from a list of files .
3656	Visit a package node .
3657	Make sure that the function definition is valid .
3658	visit a AssignName node by returning a fresh instance of it
3659	Handle assignment attribute types .
3660	Visit an import node .
3661	Visit an importfrom node .
3662	Determine if a module is a standard module .
3663	Handle imported modules .
3664	Generate ANSI code .
3665	Colorize a message .
3666	Register linters .
3667	Handle a message .
3668	Display a layout .
3669	Handle a message .
3670	Open a graph .
3671	Write a node .
3672	Write an edge .
3673	Check that the new format is valid .
3674	Process a non - raw string token .
3675	Visit a section .
3676	Visit an evaluation section .
3677	visit a table
3678	Write a default table .
3679	Add a renamed message .
3680	Register messages from a checker .
3681	Register a message .
3682	Check that the symbol is valid .
3683	Raises InvalidMessageError if msgid and other_symbols have the same symbol .
3684	Raises InvalidMessageError if msgid and other_msgid conflict .
3685	Returns a list of message definitions for the given message id or symbol .
3686	Get a string representation of a message .
3687	Print the help message for the given message ids .
3688	List all messages that may be emitted .
3689	Load pylint extensions .
3690	Return the number of CPU cores .
3691	Report messages stats .
3692	Fix import path .
3693	Load plugin modules .
3694	Load plugin configuration .
3695	Set an option .
3696	Register a checker .
3697	Disable all reporters .
3698	Enable Python 3 porting mode .
3699	Return a list of all registered checkers .
3700	Return a list of checker names .
3701	Prepare list of needed checkers .
3702	Expand a list of modules .
3703	Set the current module .
3704	Check an astroid module .
3705	Display the evaluation report .
3706	Show help message .
3707	Print full documentation .
3708	List messages .
3709	List checker groups
3710	Normalize text .
3711	Get the module name and frame id of a function .
3712	Safely decode a line .
3713	Return True if base_name is in the blacklist .
3714	Register linter plugins .
3715	Return a comment string .
3716	Format option value .
3717	Format a section .
3718	Format ini options .
3719	Insert child at index .
3720	Append a child node to this node .
3721	Return the parents of this node .
3722	Format the message .
3723	Get the content of a table .
3724	Compute the content of the layout .
3725	Collect all block lines from a module node .
3726	Handle an ignored message .
3727	Register a report .
3728	Create a report section .
3729	Add stats .
3730	Get the name of the setter property .
3731	Get the name of the setters property .
3732	Return True if the function returns something .
3733	Return a list of possible exc types for a node .
3734	Process a module .
3735	Process a module .
3736	Process tokens .
3737	Return True if stmt is from a future import .
3738	Return True if the given statement is in a for loop .
3739	Return the overridden method of a class .
3740	Return a string explaining the extra info for a node .
3741	Detect global scope .
3742	Return True if the variable is assigned locally .
3743	Mark a node as consumed .
3744	visit a Global node by returning a fresh instance of it
3745	Return True if we are in a class scope .
3746	Check if there is a homonym in the upper function scope .
3747	Check that unpacking is properly balanced .
3748	Check that all class definitions are met .
3749	Get all packages in a directory .
3750	Install PyLint .
3751	Run install_lib .
3752	Report similarities .
3753	Main entry point .
3754	Append a stream to the lineset .
3755	Return a list of tuples of the number of sims and a list of tuples of the number of sims .
3756	Display a list of sims .
3757	Find common lines between two linesets .
3758	Iterate over all simulations common to all linesets .
3759	Yields tuples of the index and the stripped line .
3760	Create a dictionary mapping line numbers to lists of line numbers .
3761	Return True if definition is equivalent to call .
3762	Check if two nodes have the same attribute .
3763	Return True if original and overridden have different default values .
3764	Return True if original and overridden have different parameters .
3765	Try to infer a call result .
3766	Mark a node as accessed .
3767	visit a ClassDef node by returning a fresh instance of it
3768	Check that the given node has consistent mro .
3769	Check that all bases are correct .
3770	visit a FunctionDef node by returning a fresh instance of it
3771	Check that the overridden method is not in use .
3772	Leave a function definition .
3773	Check if the given node is in slots .
3774	Visit a name node .
3775	Check access to members of a node .
3776	Check that this class is abstract .
3777	Check signature of method1 and refmethod .
3778	Return True if node is a method parameter .
3779	Return True if body is a raise statement .
3780	Check for bad exception context .
3781	visit a FunctionDef node by returning a fresh instance of it
3782	Display a report .
3783	Return True if node is a typing namedtuple .
3784	Return True if node is an enum class .
3785	Return True if node is a class definition .
3786	Open the parser .
3787	Add error messages for class definitions .
3788	Leave a class definition .
3789	Visitor for If node .
3790	Check that there are too many boolean expressions .
3791	Check spelling of docstring .
3792	Format a template string .
3793	Return True if the token at index is a comma .
3794	Return True if node is an actual if node .
3795	Check if the given node is simplifiable .
3796	Check stop iteration inside generator .
3797	Check if an exception inherits from StopIteration .
3798	Check that the next keyword argument is a StopIteration .
3799	Check for nested blocks .
3800	Return a dictionary of all types which are duplicated .
3801	Add a message if the operator is or .
3802	Check that the given comparison node is valid .
3803	Return True if node is an and or ternary .
3804	Check that all return statements are consistent .
3805	Return True if the given node is a return statement .
3806	visit a For node by returning a fresh instance of it
3807	Check if Graphviz is available .
3808	Run Diadefs .
3809	Write packages in diagram .
3810	Write classes in diagram .
3811	Set the printer .
3812	Set the printer for the graph .
3813	Return True if this event should be emitted .
3814	Format the help message .
3815	Get the environment variables .
3816	Lint a file .
3817	Run pylint in Python .
3818	Get the cycles of a given vertice .
3819	Return the source code .
3820	Generate a dot file .
3821	Format a section .
3822	Register a message definition by message id .
3823	Disable a message .
3824	Enable a message .
3825	Get the symbol of a message .
3826	Check if a message is enabled .
3827	Add a message .
3828	Print full documentation .
3829	Print checker documentation .
3830	Get the indent length of a line .
3831	Given a list of bar positions and a bad position return a line suitable for use as an indentation hint .
3832	Return the indent string for a token .
3833	Handle line start .
3834	Return a tuple of a valid indentation level and a list of valid indentation strings .
3835	Return a _ContinuedIndent for a hanging bracket .
3836	Return a _ContinuedIndent for a continuation inside a bracket .
3837	Pushes a token onto the token stack .
3838	Add a new line .
3839	Check for keyword parentheses .
3840	Check if there is a valid type annotation .
3841	Check for equals spacing .
3842	Check that the next token is surrounded by a space .
3843	Visit a default node .
3844	Check that the given node is a multi - statement line .
3845	Check the given lines .
3846	Check indentation level .
3847	Return True if the node is in the iterator context .
3848	Is this node a conditional import?
3849	visit a Name node by returning a fresh instance of it
3850	visit a Subscript node by returning a fresh instance of it
3851	Visit an attribute node .
3852	visit a ExceptHandler node by returning a fresh instance of it
3853	Visitor for Raise node .
3854	Find a pylintrc file in the current directory .
3855	Validate a value .
3856	Expand the default value of an option .
3857	Match a long option .
3858	Register options provider .
3859	Set provider option .
3860	Set a global option .
3861	Generate configuration file .
3862	Load config file .
3863	Load command line configuration .
3864	Add a help section to the command line parser .
3865	Print the help message .
3866	Load default options .
3867	Return the attrname of an option .
3868	Return the definition of an option .
3869	Yield options grouped by section .
3870	Return True if func is a method call .
3871	Checks if the given node is a complex format string .
3872	Visit a module .
3873	Visit a ImportFrom node .
3874	Visit an import node .
3875	visit a Call node by returning a fresh instance of it
3876	Check that the format string is valid .
3877	Return True if node is in a loop .
3878	Return the parent of a break loop node .
3879	Check if a loop exits early .
3880	Return a tuple of property classes and property names .
3881	Determine the name type of a function .
3882	Report by type stats .
3883	Returns True if the given node is redefined by a decorator .
3884	Return True if call is a one - arg call .
3885	visit a Starred node by returning a fresh instance of it
3886	Check for nonlocal and global variables .
3887	visit a Call node by returning a fresh instance of it
3888	Check for useless else on loop .
3889	Check if node is in a loop .
3890	Open the linter .
3891	visit an Expression node by returning a fresh instance of it
3892	visit a Lambda node by returning a fresh instance of it
3893	Fail if the assert is on a tuple .
3894	visit a Dict node by returning a fresh instance of it
3895	Check that the node is unreachable .
3896	Check if node is an in try ... finally block .
3897	Check that the sequence is reversed .
3898	Visitor for Assignname AST node .
3899	Check that a name is valid .
3900	Check the docstring of a node .
3901	Check that a literal comparison is valid .
3902	Add a subgraph .
3903	Parse a subgraph .
3904	Visit a module .
3905	Add a checker .
3906	Visit an AST node .
3907	Add a relationship between two objects .
3908	Get a relationship from a given object .
3909	Return a sorted list of attribute names .
3910	Return a list of all methods declared in the given node .
3911	Add an object to the diagram .
3912	Return a list of class names from a list of AST nodes .
3913	Return a list of all classes in this module .
3914	Return the class with the given name .
3915	Return a list of modules contained in this node .
3916	Return the module with the given name .
3917	Get a module by name .
3918	Add from_module to node .
3919	Delete the grant .
3920	Return the query for this model .
3921	Get a user by username and password .
3922	Get a user by access token or refresh token .
3923	Set a token .
3924	Set a grant .
3925	Get a client by code .
3926	Prepare a request .
3927	Initialize the application .
3928	Register a remote application .
3929	Make a request .
3930	Authorize a user .
3931	Handle an OAuth1 response .
3932	Handle OAuth2 response .
3933	Handle an authorized response .
3934	Decorate a function to return an authorized response .
3935	Hash a token .
3936	Make a client with a given token .
3937	Create an OAuth client .
3938	Insecure transport middleware .
3939	Confirm authorization request .
3940	Decorate a request token handler .
3941	Get the client secret for a given client key .
3942	Get request token secret .
3943	Get the access token secret .
3944	Get the default realms for a client .
3945	Get realms of a token .
3946	Return the redirect URI for the given token .
3947	Get the RSA key .
3948	Validate client key .
3949	Validate a request token .
3950	Validate an access token .
3951	Validate timestamp and nonce .
3952	Validate a redirect URI .
3953	Validate realms .
3954	Validate verifier .
3955	Verify request token .
3956	Verify realms .
3957	Save an access token .
3958	Save a request token .
3959	Save a verifier .
3960	Get the error URI for this provider .
3961	Confirm an authorization request .
3962	Verify a request .
3963	Extract client credentials from a request .
3964	Check if client authentication is required .
3965	Authenticate client .
3966	Authenticate a client ID .
3967	Get the original scopes of the token .
3968	Confirm scopes for a refresh token .
3969	Get the default redirect URI for the client .
3970	Get the default scopes for a client .
3971	Invalidate an authorization code .
3972	Save authorization code .
3973	Save a bearer token .
3974	Validate a bearer token .
3975	Validate client ID .
3976	Validate code .
3977	Validate grant type .
3978	Validate a refresh token .
3979	Validate response type .
3980	Validate scopes .
3981	Validate a user .
3982	Revoke a token .
3983	Update the default data for the API request .
3984	Convert dictionary keys to string
3985	Change weibo header
3986	Register a remote app .
3987	Create a remote app .
3988	Extract parameters from the request .
3989	Convert text to bytes .
3990	Decode a base64 string .
3991	Create a response object .
3992	Get cached OAuth clients .
3993	Add a remote application .
3994	Add a remote application .
3995	Check if an exception occurred .
3996	Check that all certificates are valid .
3997	Callback for check_load_privatekey .
3998	Check if the callback is incorrect .
3999	Check that the load_privatekey callback is correct .
4000	Get revoked certificates .
4001	Revokes duplicate certificates .
4002	Create a certificate request .
4003	Create a new X509 certificate .
4004	Decorator to make a function requires a flag .
4005	Load verification locations .
4006	Set the password callback .
4007	Use a certificate chain file .
4008	Use a certificate file .
4009	Use a certificate .
4010	Add an extra chain certificate .
4011	Use a private key file .
4012	Use a private key .
4013	Load client CA file .
4014	Set the depth of SSL verification .
4015	Load a temporary DH file .
4016	Set the cipher list .
4017	Set the client CA list .
4018	Add a certificate authority .
4019	Set the server name callback .
4020	Set whether or not to use SRTP profiles .
4021	Set a callback function that will be called when the next protocol is selected .
4022	Set the list of alpn protocols .
4023	Set the ALPN select callback .
4024	Set the OCSP callback .
4025	Set the OCSP server callback .
4026	Set the OCSP client callback .
4027	Set the SSL context .
4028	Get the server name .
4029	Set the name of the TXT record .
4030	Read data from the socket .
4031	Read data into a buffer .
4032	Read data from a BIO .
4033	Renegotiates the SSL connection .
4034	Shutdown the SSL session .
4035	Return a list of cipher names .
4036	Return a list of client CA names .
4037	Set shutdown state .
4038	Return random bytes from the server .
4039	Generate a random client random string .
4040	Get the master key .
4041	Export a keying material .
4042	Get the SSL session .
4043	Get the name of the current cipher .
4044	Get the current cipher bits .
4045	Get the current cipher version .
4046	Get the protocol version name .
4047	Get the next protocol negotiated .
4048	Set the list of alpn protocols .
4049	Return the ALPN protocol negotiated message .
4050	Create a new memory buffer .
4051	Convert a BIO to a string .
4052	Set an ASN . 1 time boundary .
4053	Convert a string timestamp to an ASN1_TIME .
4054	Get an elliptic curve by name .
4055	Dump a public key in PEM or ASN . 1 format .
4056	Load a public key .
4057	Sign data with a private key .
4058	Verify a signature .
4059	Dump an X509CRL to a string .
4060	Return a cryptography key .
4061	Generate a private key .
4062	Check that the key is valid .
4063	Load all elliptic curves .
4064	Load elliptic curves from lib .
4065	Convert this curve to an EC key .
4066	DER encoded X509 name .
4067	Get the components of this name .
4068	Get the short name of the object .
4069	Get the data for this extension .
4070	Return a cryptography CSR object .
4071	Set the public key .
4072	Get the public key .
4073	Get the name of the subject .
4074	Add a list of X509Extensions .
4075	Return a list of X509Extensions .
4076	Verify a private key .
4077	Convert the certificate to cryptography .
4078	Set the certificate version .
4079	Get the public key .
4080	Set the public key .
4081	Sign a key .
4082	Get signature algorithm .
4083	Return the digest of the given digest name .
4084	Set the serial number .
4085	Get the serial number of the certificate .
4086	Adjust the notAfter field of the X509Certificate .
4087	Adjust the modification time of the X509 certificate .
4088	Check if the session has expired .
4089	Get the issuer name .
4090	Set the issuer name .
4091	Get the subject name .
4092	Set the subject name .
4093	Add a list of X509Extensions .
4094	Return the extension at the given index .
4095	Add a certificate to the store .
4096	Add a CRL to the store .
4097	Set the time of the certificate .
4098	Initialize the context .
4099	Return an exception from the context .
4100	Verify a certificate .
4101	Set the serial number .
4102	Get the serial number .
4103	Set the reason .
4104	Return the reason of the CRL .
4105	Set the revocation date .
4106	Convert the CertificateRevocationList to cryptography .
4107	Return a tuple of revoked certificates .
4108	Get the issuer of the CRL .
4109	Sign a CRL .
4110	Export a CRL .
4111	Return the type name of the object .
4112	Set the CA certificates .
4113	Export the certificate to PKCS12 .
4114	Sign a message with a private key .
4115	Verify a private key .
4116	Base64 encode the SPKI .
4117	Get the public key .
4118	Set the public key .
4119	Raise an exception from the error queue .
4120	Convert text to bytes .
4121	Return a factory for printing tokens .
4122	Get service metadata .
4123	Yields all issues for all boards and lists .
4124	Get the annotations for a card .
4125	Get a list of boards
4126	List all lists in a board .
4127	List cards .
4128	Get comments for a card .
4129	Return the API url for the given path .
4130	Return a list of results from github .
4131	Convert a link field to a dictionary .
4132	Get issues by query .
4133	Get pull requests for a tag .
4134	Aggregate remote issues .
4135	Get a value from the main config .
4136	Returns a dictionary of templates
4137	Validate the configuration of a service .
4138	Determine if an issue should be included .
4139	Make a table .
4140	Evaluate an oracle command .
4141	Get a configuration option as an integer .
4142	Pull bugwarrior issues .
4143	Make a GET request .
4144	Get a collection from the API .
4145	Find a UUID for a given issue .
4146	Merge two fields in left to right .
4147	Given a list of targets return a dictionary of UDAS config overrides .
4148	Parse a sprint string .
4149	Get credentials .
4150	Multi - rouge n
4151	Calculate pValues for a gene set .
4152	r Correction of pvals .
4153	Z - score a 2D array .
4154	Heatmap a DataFrame .
4155	Adjust spine positions .
4156	Prepare an argparse ArgumentParser object .
4157	Add command line parser for prerank .
4158	Add a parser to subparsers .
4159	Add an argument parser to subparsers .
4160	Compute the enrichment score of a gene list .
4161	Compute the ranking metric tensor for the given expression .
4162	Compute ranking metric .
4163	Calculate the p - value of a GSEA .
4164	Compute GSEA significance .
4165	Get the names and descriptions of all marts .
4166	Returns a pandas . DataFrame with the datasets for the given mart .
4167	Get the attributes of a dataset .
4168	Get filters for a dataset .
4169	Query the Biomart database .
4170	Run GSEA .
4171	Single Sample GSEA
4172	Prerank a set of genes .
4173	Plot a GSEA replot .
4174	Set the number of cores .
4175	Load gene sets from a GTF file .
4176	Returns a list of library names
4177	Download and generate Enrichr library gene sets .
4178	Calculate heatmat
4179	Save results to file .
4180	Load gene expression data .
4181	Run GSEA analysis .
4182	Run GSEA .
4183	Run a sample permuation .
4184	Run ssgsea for gct expression matrix
4185	Save results on samples .
4186	Run GSEA .
4187	Run Enrichr .
4188	Parse gene sets .
4189	Parse gene lists or bed file .
4190	Send a list of genes
4191	Check if gene list is valid .
4192	Download background genes .
4193	Run Enrichr .
4194	Create a cube filter script .
4195	Create an icosphere filter script .
4196	Create a torus filter
4197	Computes the Horizon edges of a plane .
4198	Generate a cube hires plot .
4199	Get the color values for a given color .
4200	Check that a variable has the correct number of terms .
4201	Make a list .
4202	Write a filter script to a file .
4203	Generate a LS3 Loop filter .
4204	Merge Close Vertices
4205	Close holes .
4206	Split vertexes incident on non manifold faces .
4207	Write Snap Mismatched Borders filter .
4208	Translates vertically and horizontally .
4209	Rotate a script .
4210	Scale vertically and horizontally .
4211	Create a function for a cylinder .
4212	Wraps a script around a cylinder .
4213	Bends a polygon .
4214	Deform a curve .
4215	Convert a VC3D texture to a tex file .
4216	Write mesh2fc filter to script .
4217	Uniform mesh resampling filter
4218	Return the Poisson Surface Reconstruction XML filter .
4219	Voronoi algorithm .
4220	Select all faces and Vertices
4221	Write a Vect quality filter .
4222	Add a conditional face selection filter
4223	Adds a function to the script .
4224	Evaluate cylindrical verticies .
4225	Return the spherical version of a script .
4226	Join a script with a filter .
4227	Rename a filter .
4228	Change the current layer .
4229	Duplicate a filter script .
4230	Delete lower layer .
4231	Handle an error .
4232	Begin a filter script .
4233	Add a layer .
4234	Delete a layer .
4235	Save filters to a file .
4236	Run meshlabserver script .
4237	Main entry point .
4238	Generate a Hausdorff distance filter
4239	Generate a Poisson disk filter .
4240	Write a mesh element script .
4241	Clustered Vertex Subsampling filter
4242	Write a flat plane filter .
4243	Generate a per - triangle filter .
4244	Voronoi Atlas filter
4245	Measure the topology of a script .
4246	Parse a topology file .
4247	Parse Hausdorff log file .
4248	Generate a per - vertex color filter .
4249	Write Voronoi filter .
4250	Generate a RAINbow script .
4251	Return a string that can be used for math math . atan2 .
4252	Calculate the cross product of two vectors .
4253	Multiply a vector by a scalar .
4254	Defines a new vertex attribute .
4255	Flip faces .
4256	Generate a list of point sets
4257	Generate a Taubin Smooth filter
4258	Apply a Depth Smooth filter .
4259	Sort a bounding box file .
4260	Measure the topology .
4261	Measure all geometries .
4262	Measure the dimension of a mesh .
4263	Lowercase the extension of a filename .
4264	Patch app . request_class so it can be used as a decorator .
4265	Return the configuration for a given upload set .
4266	Configure uploads .
4267	Get the configuration for this upload set .
4268	Returns the URL for the uploaded file .
4269	Get the path to a file .
4270	Return True if the given extension is allowed .
4271	Resolve a conflict in the target folder .
4272	Get the vprof version .
4273	Remove duplicate objects .
4274	Get the difference between two lists of objects .
4275	Format the object count .
4276	Trace memory usage .
4277	Return a list of code events .
4278	Return the overhead of the object .
4279	Compute memory overhead .
4280	Profile package .
4281	Profile a module .
4282	Profile function .
4283	Run the profiler .
4284	Return a set of module names from a package path .
4285	Run a function in a separate process .
4286	Return the type of a run object .
4287	Initialize module .
4288	Initialize package .
4289	Initialize the function .
4290	Replace sys . argv with self . _run_args .
4291	Sample a frame .
4292	Insert a stack into the call tree .
4293	Calculate the sample count of a node .
4294	Format a tree .
4295	Return the call tree .
4296	Return a dictionary of package information .
4297	Return the profiling module .
4298	Profile a function .
4299	Transform profiling data into a list of tuples .
4300	Return a dictionary containing the package information for this object .
4301	Return the profiling module .
4302	Profile function .
4303	Initialize the database .
4304	Show a guestbook .
4305	Add a new entry .
4306	Handler for the CMHP profiler .
4307	Start HTTP server .
4308	Handle the root directory .
4309	Handle other files .
4310	Handle GET requests .
4311	Handle a POST request .
4312	Send a response .
4313	Return True if module_path is a standard directory .
4314	Record a line event .
4315	Yields all lines without standard library .
4316	Fill the heatmap .
4317	Skip lines in src_code .
4318	Generate a profile package for this run .
4319	Format a heatmap file .
4320	Generate a profile module .
4321	Profile function .
4322	Run all profilers defined in prof_config .
4323	Run a function .
4324	Predict the predicted probabilities of X .
4325	Predict log probabilities for X .
4326	Fit the model .
4327	Count the number of documents in the vocabulary .
4328	Sort the features in a vocabulary .
4329	Limit features based on document frequencies .
4330	Fit the transformer to Z .
4331	Transform a Z matrix .
4332	Return a scikit - learned version of this scaler .
4333	Fit the model to the data .
4334	Call super . predict .
4335	Fit a linear regression model .
4336	Fit the model to Z
4337	Fit a transform to the data Z
4338	Return the score of the last step .
4339	Fit the estimator .
4340	Return the score of an estimator .
4341	Fit the KMeans model .
4342	Predict on X .
4343	Predict on X .
4344	Check if rdd is of expected dtype .
4345	Create vocabulary
4346	Calculate statistics for each block .
4347	Fit the SVM to Z .
4348	Transform a RDD into a NumPy array .
4349	Iterate over a block collection .
4350	Yields a tuple of blocks of dtypes .
4351	Block RDD .
4352	Apply a function to each RDD .
4353	Shape of this RDD .
4354	Convert to numpy array .
4355	Apply a function to each element of the matrix .
4356	Return True if the given bit perm is set .
4357	Return True if path is a root write .
4358	Check the configuration file .
4359	Read configuration from file .
4360	Run a command as a shell .
4361	Execute a command .
4362	Execute a command over SSH .
4363	Validate the configuration .
4364	Get the headers from the request .
4365	Get the request body .
4366	Make sure the event option is set .
4367	Get IFTTT URL .
4368	Return the text of a packet .
4369	Print a discovery packet .
4370	Discover devices .
4371	Execute the device .
4372	Send a confirmation message .
4373	Called when a push is received .
4374	Execute a device .
4375	Run on_push .
4376	Convert a Transaction to a Transaction object .
4377	Find the ledger file .
4378	Run compatibility tests .
4379	Get a long description of the project .
4380	Create a PrecalculatedTextMeasurer from a JSON file .
4381	Return the default precalculated widths .
4382	Create a badge .
4383	Generate a list of supported Unicode characters .
4384	Given a list of characters and a list of encodings generate a list of encoded characters .
4385	Return a mapping from character to length .
4386	Write a JSON file .
4387	Convolve a gaussian kernel with a 2D image .
4388	Get a Gaussian kernel .
4389	Convert image to grayscale .
4390	Main entry point for pyssim .
4391	Calculate the SSIM value of a target image .
4392	Compute the SSIM of two images .
4393	Destroy the timer .
4394	Set the code version .
4395	Get the status of this node .
4396	Print status information .
4397	Return the node associated with a connection .
4398	Try to bind to the server .
4399	Called when a new incoming connection is received .
4400	Handle incoming messages .
4401	Callback for the utility callback .
4402	Return True if we should connect to this node .
4403	Check if we should connect to a single node .
4404	Called when a connection is established .
4405	Called when an outgoing message is received .
4406	Called when a connection is disconnected .
4407	Add a node .
4408	Drop a node .
4409	Send a message to a node .
4410	Destroy this connection .
4411	Add an item to the queue .
4412	Add an item to the heap .
4413	Get an item from the heap .
4414	Acquire a lock .
4415	Check if a lock is acquired .
4416	Release a lock .
4417	Decorator for checking a function .
4418	Decorator for views that require a token
4419	Set the hosts to connect to .
4420	Create Elasticsearch indexes .
4421	Migrate indexes .
4422	Strip metadata from report .
4423	Save aggregate reports to Kafka .
4424	Extracts an XML report .
4425	Parse an aggregate report file .
4426	Convert parsed Forensic reports to CSV .
4427	Parse a report file .
4428	Return a list of supported IMAP capabilities .
4429	Save results to output directory .
4430	Create a zip file from results .
4431	Sends a report email to the user .
4432	Save aggregate reports to Splunk .
4433	Save forensic reports to Splunk HEC .
4434	Decode base64 data .
4435	Download public suffix list .
4436	Get the reverse DNS for a given IP address .
4437	Convert a human - readable timestamp to a datetime object .
4438	Download a country database for a given IP address .
4439	Get information about an IP address .
4440	Convert an Outlook MSG file to EML .
4441	Convert a string to a list .
4442	Parse a report file .
4443	Drain the client .
4444	Publish a message .
4445	Publish a message .
4446	Publish a message .
4447	Subscribe to a subject .
4448	Unsubscribe from a subscriber .
4449	Send a ping to the server .
4450	Select the next available server .
4451	Process an error message .
4452	Process an error .
4453	Execute the connection command .
4454	Process a pong .
4455	Process a message .
4456	Process connection info .
4457	Process connection init .
4458	Flush all pending data .
4459	Read loop .
4460	Perform co - activation .
4461	Decode images .
4462	Load features from a numpy array .
4463	Load features from images .
4464	Calculate Pearson correlation
4465	Return the dot product of imgs_to_decode .
4466	Feature selection function .
4467	Get a list of studies by regions .
4468	Get the order of features in a dataset .
4469	Classify a set of regions .
4470	Classify the data .
4471	Fit the classifier .
4472	Set the class weight of the classifier .
4473	Perform cross validation .
4474	Fit the sk_classifier .
4475	r Average the average across a set of regions .
4476	Get random voxels .
4477	Returns a list of top words in the model .
4478	Pearson correlation coefficient .
4479	Find the FDR of a voxel .
4480	Load activations from file .
4481	Create image table .
4482	Returns a list of studies matching the given criteria .
4483	Add features to the feature table .
4484	Returns a list of feature names .
4485	Returns a dictionary of feature names and counts
4486	Load a dataset from a file .
4487	Save the feature table to a file .
4488	Get image data .
4489	Get feature data .
4490	Returns a list of ordered names for features .
4491	Given a feature or a list of features return a list of ids to keep .
4492	Returns a list of features that match the search string .
4493	Get a list of ids by expression .
4494	Convert SDF to CSR format .
4495	Decorator to mark functions as deprecated .
4496	Transform foci to mat .
4497	Convert from xyz to mat .
4498	Apply a transformation .
4499	Mask an image .
4500	Get a mask of the image .
4501	Load images from filenames .
4502	Save image to filename .
4503	Set logging level .
4504	Expand an address .
4505	Normalize a string .
4506	Parse an address .
4507	Find near - dupe hashes .
4508	Convert a dictionary to a namedtuple .
4509	Get ticker price .
4510	Get prices data for a ticker .
4511	Get a bulk of news .
4512	Make a request .
4513	Get access token .
4514	Make a request to the API .
4515	Get album tracks .
4516	Get a specific artist .
4517	Get Spotify albums .
4518	Top tracks for an artist .
4519	List related artists .
4520	Get artists .
4521	Browse a category .
4522	List playlists for a category .
4523	List categories .
4524	Retrieve a list of featured playlists .
4525	Browse new releases .
4526	Get recommendations .
4527	Follows artists or users .
4528	Get albums from the artist .
4529	Get all albums for this artist .
4530	Total albums in the artist .
4531	List artists related to this artist .
4532	Get the currently playing track .
4533	Get the current player .
4534	List available devices .
4535	List recent played tracks .
4536	Replace multiple tracks in a playlist .
4537	Reorder a playlist .
4538	Create a playlist .
4539	Get a list of playlists for this playlist .
4540	Get a list of tracks for this album .
4541	Get all tracks for this album .
4542	Generate an OAuth2 URL .
4543	Get an album .
4544	Get an artist .
4545	Get a track .
4546	Get a user by ID .
4547	Get albums .
4548	Get artists .
4549	Perform a search .
4550	Convert a string to an ID .
4551	Raises an exception if the current object has the specified attribute .
4552	Create an instance of this class from a client .
4553	Generate a base URL for OAuth2 .
4554	Return a dictionary of attributes .
4555	Returns a string with the parameters of the request .
4556	Build a list of PlaylistTrack objects .
4557	Get all tracks for this playlist .
4558	Resume playback .
4559	Transfer a player to another device .
4560	Retrieve a Spotify object from its href .
4561	Get the status of the current test .
4562	Convert or shorten a month .
4563	Update code urls .
4564	Return True if the current version is greater than the older one .
4565	Return True if the current branch is dev .
4566	Return True if we do not need to deprecate anything .
4567	Backup the configuration data .
4568	Restore the backup content .
4569	Return True if the line should be ignored .
4570	Handle options .
4571	Extract base from element .
4572	Format a string .
4573	Get the status code of the request .
4574	Get the HTTP status code .
4575	Check that the given domain is valid .
4576	Return True if the given domain is a valid subdomain .
4577	Check that the given IP is valid .
4578	Check if the given IP is a valid IPv4 range .
4579	Check that the given URL is valid .
4580	Load the configuration file .
4581	Try to stay safe .
4582	Check if the passed string is an URL .
4583	Set the file to test .
4584	Print the header .
4585	Process a file decision .
4586	Set the domain .
4587	Test a URL .
4588	Colorize the logo .
4589	Format a domain .
4590	Extract domain from file .
4591	Return a list of files to test .
4592	Return the URL of the file .
4593	Switch the state of a variable .
4594	Get the current status of the user .
4595	Parse the status file .
4596	Get the structure file .
4597	Create a directory .
4598	Delete uneeded directories .
4599	Sets the path to the config file .
4600	Load the configuration file .
4601	Install the production configuration .
4602	Download the iana configuration file .
4603	Download the public suffix configuration .
4604	Installs the directory structure file .
4605	Merge the upstream config into the new config .
4606	Load the configuration file .
4607	Split a version into digits and non - digit parts .
4608	Check the versioning of two versions .
4609	Return True if the current version is the cloned version .
4610	Handle non - existant index .
4611	Return the path to the analytic host file directory .
4612	Generate the unified file .
4613	Generate the status file .
4614	Do not produce file .
4615	Update the public suffix database .
4616	Load the public database .
4617	Format an element as a regular expression .
4618	Hierarchical search .
4619	Load the database .
4620	Return the referer for the given extension .
4621	Yields a tuple of the matched extension and the referer .
4622	Update the database .
4623	Return a list of links to mine .
4624	Retrieve the mining information .
4625	Backup our mined informations .
4626	Add elements to the file path database .
4627	Remove the file from the database .
4628	Return a list of mined files .
4629	Process the mining logic .
4630	Get the content of a file .
4631	Write content to file .
4632	Write a Whois record .
4633	Set the expiration date .
4634	Called when a referer is not found .
4635	Initialize the before header informations .
4636	Initializes the header constructor .
4637	Print the header .
4638	Constructs the data constructor .
4639	Return the size of the given header .
4640	Colorize the data .
4641	Print the data to a JSON file .
4642	Data to print .
4643	Save the file we are working with .
4644	Calculate the difference between two times .
4645	Format the execution time .
4646	Return a list of files to delete .
4647	Return a list of databases to delete .
4648	Delete all files .
4649	Hash a file .
4650	Return the hash of the data .
4651	Get the hash of the file .
4652	Execute the command .
4653	Remove a key from the main dictionnary .
4654	Rename a key .
4655	Merge two dictionaries .
4656	Write the current dictionnary to a JSON file .
4657	Write the main dictionnary to a yaml file .
4658	Fix the path .
4659	Write data to the file .
4660	Read the file .
4661	Format the main list .
4662	Merge two lists .
4663	Return a list of items not matching the regex .
4664	Match the regex against the data .
4665	Replace all occurrences of self . regex with self . replace_with .
4666	Count the number of tests .
4667	Calculate the percentage of the current status .
4668	Log the progress .
4669	Check if the given URL is valid .
4670	Check if a domain is valid .
4671	Return True if the domain is valid .
4672	Get the status of the test .
4673	Reformat historical formating errors .
4674	Retrieve the database .
4675	Backup the inactive database .
4676	Return the current time .
4677	Return the content of the database .
4678	Check if the database subsystem is present .
4679	Retrieve whois database .
4680	Backup the database .
4681	Return True if we are in the database .
4682	Return True if the current time is older than our current epoch .
4683	Get the expiration date from the database .
4684	Add this element to the database .
4685	Set permissions for travis .
4686	Run travis .
4687	Get the NS informations .
4688	Create a WHOIS socket .
4689	Get the current status code .
4690	Get the referer from the database .
4691	Get the current object bound to this proxy .
4692	Yield standard library paths .
4693	Return a list of standard package names .
4694	Yield line numbers of unused imports .
4695	Yields a tuple of the line number and module name of the unused import .
4696	Yield line numbers of star imports .
4697	Yields a tuple of the line number and module name of a star import .
4698	Yield line numbers of unused variables .
4699	Yield duplicate key line numbers .
4700	Create a dictionary from a list of messages .
4701	Check source code .
4702	Extract package name from line .
4703	Return True if line is a multiline import statement .
4704	Return True if line is a multiline statement .
4705	Filter from import statements .
4706	Break up import statements .
4707	Filter the given source code .
4708	Given a list of messages return a dictionary mapping line numbers to messages .
4709	Remove star imports .
4710	Filter duplicate lines .
4711	Check if a dictionary entry has a given key .
4712	Return True if value is a literal or a name .
4713	Return a list of line numbers that don t start with a pass .
4714	Filter out lines that are not used in the source .
4715	Get the indentation of a line .
4716	Return the ending of a line .
4717	Clean up source code .
4718	Split a comma separated string .
4719	Check if a file is a Python file .
4720	Check if a file should be excluded .
4721	Given a list of filenames and a list of directories and a list of files match them .
4722	Main entry point for autoflake .
4723	Reads a lease response payload .
4724	Write the payload to output_stream .
4725	Writes a CancelRequestPayload to the given output stream .
4726	Reads a CancelResponsePayload from a stream .
4727	Create a new Name .
4728	Read a digest from a stream .
4729	Write the digest to a stream .
4730	Create a new Digest object .
4731	Read KMIP Application Specific Information .
4732	Write the application specific information .
4733	Create a new ApplicationSpecificInformation .
4734	Read a DerivationParameters object from a stream .
4735	Write this DerivationParameters to an output stream .
4736	Read a GetRequestPayload from a stream .
4737	Write this GetRequestPayload to a stream .
4738	Read the KMIP response payload .
4739	Write this GetResponsePayload to an output stream .
4740	Read a SignatureVerifyRequestPayload from a stream .
4741	Write the KMIP data to an output stream .
4742	Read a SignatureVerifyResponsePayload from a stream .
4743	Process a request .
4744	Build an error response .
4745	Process a template attribute .
4746	Retrieves attributes from a managed object .
4747	Returns the value of an attribute from a managed object .
4748	Set attributes on a managed object .
4749	Set an attribute on a managed object .
4750	Returns True if the operation is allowed .
4751	Write this DecryptRequestPayload to a stream .
4752	Create a secret .
4753	Set a setting .
4754	Load settings from a file .
4755	Process a bind parameter .
4756	Process the result value .
4757	Read a long integer from the stream .
4758	Write this LongInteger to a stream .
4759	Check that the value is valid .
4760	Read a BigInteger from a stream .
4761	Write the value to ostream .
4762	Validate that the value is an integer .
4763	Validate the enumeration .
4764	Read a boolean value from the stream .
4765	Write the boolean value to the given stream .
4766	Write this Boolean to a stream .
4767	Validate that the value is a bool .
4768	Read an Interval from a stream .
4769	Validate the interval .
4770	Return the key wrapping data .
4771	Set the key wrapping data .
4772	Validate the key .
4773	Validate the secret data .
4774	Validate the opaque data .
4775	Convert an attribute name to a tag .
4776	Convert an attribute tag to a name .
4777	Return a bit mask from a list of enumerations .
4778	Get a list of enumerations from a bit mask .
4779	Returns True if the given bit mask is valid .
4780	Reads a CreateKeyPairRequest payload .
4781	Write the KMIP template attribute .
4782	Reads a CreateKeyPairResponsePayload .
4783	Write the CreateKeyPair response payload .
4784	Read the attribute list request payload .
4785	Write the attribute list request payload .
4786	Read a GetAttributeList response payload .
4787	Write the GetAttributeList response payload .
4788	Return a list of all JSON files in a directory .
4789	Scan policy files .
4790	Run the operation policy file monitor .
4791	Get a certificate from a connection .
4792	Extracts the extended key usage value from a certificate .
4793	Get common names from a certificate .
4794	Get the client identity from a certificate .
4795	Reads a CreateRequestPayload .
4796	Write the Create request payload .
4797	Reads a CreateResponsePayload .
4798	Write this CreateResponsePayload to an output buffer .
4799	Convert an object to a key .
4800	Read the encrypted response payload .
4801	Reads a KMIP DeriveKeyRequestPayload .
4802	Write the KMIP DeriveKey request payload .
4803	Check if an attribute is supported .
4804	Returns True if the attribute is deprecated .
4805	Returns True if the given attribute applies to the given object type .
4806	Check if an attribute is multivalued .
4807	Get a value from the configuration file .
4808	Reads a CheckResponsePayload from a stream .
4809	Write this CheckResponsePayload to an output stream .
4810	Reads an attribute reference from an input buffer .
4811	Write this attribute reference to an output buffer .
4812	Read attributes from an input stream .
4813	Write the attributes to an output stream .
4814	Reads a nonce from an input stream .
4815	Write the Nonce struct to an output stream .
4816	Reads a UsernamePasswordCredential from an input stream .
4817	Write this credential to an output stream .
4818	Reads a device credential from an input stream .
4819	Write this KMIP device to an output stream .
4820	Reads a credential from an input stream .
4821	Write the credential struct to an output stream .
4822	Read the MAC signature key information .
4823	Write this MACSignatureKeyInformation to an output stream .
4824	Read the key wrapping data .
4825	Write this KMIP message to an output stream .
4826	Reads a KeyWrappingSpecification from a stream .
4827	Write this KeyWrappingSpecification to a stream .
4828	Read the extension information .
4829	Write the extension information .
4830	Create a new ExtensionInformation object .
4831	Read a RevocationReason from a stream .
4832	Write this RevocationReason to a stream .
4833	Validate the revocation reason code and revocation message .
4834	Read the ObjectDefaults object .
4835	Write the ObjectDefaults structure to an output buffer .
4836	Read the object defaults from an input buffer .
4837	Write this object to an output buffer .
4838	Read a KMIP RNGParameters object .
4839	Write the KMIP RNGParameters object to an output buffer .
4840	Read a ProfileInformation object from an input buffer .
4841	Write this ProfileInformation object to an output buffer .
4842	Write this ValidationInformation object to an output buffer .
4843	Reads a CapabilityInformation object from an input buffer .
4844	Write the capability information to output_buffer .
4845	Stop the server .
4846	Start the connection service .
4847	Reads a location request payload .
4848	Write this object to an output buffer .
4849	Read a LocateResponsePayload .
4850	Write the location response payload .
4851	Creates a symmetric key .
4852	Create a symmetric key pair .
4853	Generate a message authentication code .
4854	Encrypts a plain text .
4855	Encrypt a plain text using a symmetric key .
4856	Encrypts plain text using an asymmetric encryption key .
4857	Decrypts a symmetrically encrypted message .
4858	Create an RSA key pair .
4859	Derive a key .
4860	Create a RSA private key .
4861	Verify a signature .
4862	Read a SignResponsePayload from a stream .
4863	Write this response payload to an output stream .
4864	Read a GetUsageAllocationRequestPayload from a stream .
4865	Converts a ProtocolVersion enum value to a KMIP Version enum value .
4866	Read a protocol version from an input stream .
4867	Write this ProtocolVersion to an output stream .
4868	Read authentication credentials from an input stream .
4869	Write the authentication struct to an output stream .
4870	Read a PollRequestPayload from a stream .
4871	Read a Certificate object from a stream .
4872	Write a Certificate object to a stream .
4873	Authenticate with SLUGS .
4874	Read the ArchiveResponsePayload .
4875	Write this ArchiveResponsePayload to an output stream .
4876	Run the session .
4877	Read a RekeyResponsePayload from a stream .
4878	Check if a profile is supported .
4879	Derive a key .
4880	Get a list of attributes .
4881	Get a list of all attributes of a user .
4882	Perform a query .
4883	Signs data .
4884	Open the client connection .
4885	Close the connection .
4886	Create a cryptographic key .
4887	Creates a key pair .
4888	Registers a managed object .
4889	Rekey a device .
4890	Derive a key .
4891	Locate managed objects .
4892	Checks the status of a user .
4893	Get a managed object .
4894	Get the list of attributes for a managed object .
4895	Activates a managed object .
4896	Revokes a managed object .
4897	MACs a message .
4898	Build a CryptographicParameters object from a dictionary .
4899	Builds an EncryptionKeyInformation object from a dictionary .
4900	Build MAC signature key information .
4901	Builds a KeyWrappingSpecification from a dictionary .
4902	Build common attributes .
4903	Build a name attribute .
4904	Reads a query request payload .
4905	Write the QueryRequestPayload to the given output buffer .
4906	Writes the KMIP data to output_buffer .
4907	Reads a GetAttributesResponsePayload from the stream .
4908	Write the GetAttributesResponse payload .
4909	Get a single entry point .
4910	Get a group by name .
4911	Get all entries in a group .
4912	Load the object .
4913	Create an EntryPoint from a string .
4914	Run livereload .
4915	Generate project files .
4916	Generate controller file .
4917	Generate action .
4918	Generate a form .
4919	Generate a model .
4920	Generate a macro .
4921	Create a directory .
4922	Rewrite and copy src_file to dst_file .
4923	Return the time since the given date .
4924	Make sure the URL is valid .
4925	Encode something using the secret key .
4926	Decode something into a dict .
4927	Decorate a function to return a JSON response .
4928	Return an absolute URL for the given endpoint .
4929	Load configuration from environment variables .
4930	Sign in a user .
4931	Get the currently logged in user .
4932	Create Flask application .
4933	Register jinja loader .
4934	Register routes to the application .
4935	Register error handler .
4936	Register hooks .
4937	Write a DataFrame to a CSV file .
4938	Read a DataFrame from a CSV file .
4939	Serializes a data frame to JSON .
4940	Deserializes a data frame from a reader .
4941	Update from a pandas DataFrame .
4942	Update from raw data .
4943	Returns the URL for the contents of the file .
4944	Adds a new file from a pandas . DataFrame .
4945	Adds a new file from raw data .
4946	Open an intermediate dataset .
4947	Read the contents of a binary file .
4948	Read the contents of the intermediate dataset as text .
4949	Convert to a pandas DataFrame .
4950	Get an intermediate dataset .
4951	Get experiments for a workspace .
4952	Get datasets for a workspace .
4953	Get a dataset .
4954	Publish a function or a workspace .
4955	Publish a service .
4956	Decorate a function with annotations .
4957	Decorator to mark a function as a return type .
4958	Decorator to attach a new attachment .
4959	Find all globals defined in code .
4960	Return a copy of this Pen .
4961	Lookup a color .
4962	Draw a rectangle .
4963	Compute the Bernstein extrema of a cubic Bezier curve .
4964	Return the cubic Bernstein distance between two points .
4965	Build choices list .
4966	Returns a function that takes a list of command options and returns a list of options .
4967	Registers a function as a hook for items .
4968	Composes a dynamic tree from a list of Sitetree objects .
4969	Initialize the cache .
4970	Clear the cache .
4971	Get an entry from the cache .
4972	Update the value of an entry .
4973	Set an entry in the cache .
4974	Initialize the cache .
4975	Resolve a tree alias .
4976	Determine if the current app is an admin .
4977	Calculate the depth of an item .
4978	Get the current item for a tree .
4979	Returns the URL for the given sitetree item .
4980	Initialize the tree .
4981	Get the current page s attribute .
4982	Get the ancestor level of the given item .
4983	Create a menu .
4984	Check if the current user can access the item .
4985	Build breadcrumbs .
4986	Return the tree for the given tree alias .
4987	Render the children of the given item .
4988	Returns the children of the given item .
4989	Updates the has_children property of a tree item .
4990	Filter a list of items .
4991	Returns the parent item of the given item .
4992	Add a climber to the tree .
4993	Resolve a variable .
4994	Parse a sitetree tree .
4995	Sitetree children tag .
4996	Sitetree Breadcrumbs tag .
4997	Parse a sitetree menu tag .
4998	Render a template .
4999	Create a template tag .
5000	Get the URL name for a model .
5001	Register the tree admin .
5002	Redirect to tree layout page .
5003	Redirect to another item .
5004	Redirect to the tree item view .
5005	Redirect to the tree view .
5006	Create a tree item form .
5007	Get a model tree .
5008	Move an item .
5009	Make sure the item is a parent of itself .
5010	Return a list of urls for the tree view .
5011	Dump the tree view .
5012	Create a tree .
5013	Create a tree item .
5014	Import app s sitetree module .
5015	Returns the model class for the given settings entry .
5016	Create a Config object from a mapping .
5017	Load a configuration from a Python file .
5018	Load configuration from a TOML file .
5019	Create a Config instance from an object .
5020	Create a ZipkinAttrs object for a span .
5021	Create HTTP headers for a new span .
5022	Get the current trace context .
5023	Start logging .
5024	Stops this span .
5025	Update the binary annotations for this span .
5026	Add a binary annotation to the span .
5027	Override the span name .
5028	Create an endpoint .
5029	Copy an existing endpoint with a new service name .
5030	Build a V1 span .
5031	Encodes a list of spans into a string .
5032	Create a protobuf Span .
5033	Convert hex id to bytes .
5034	Get the protobuf kind of a Span .
5035	Convert an endpoint to a Zipkin Endpoint .
5036	Convert annotations to protobuf .
5037	Create an annotation .
5038	Create a binary annotation .
5039	Create an endpoint .
5040	Copy an endpoint with a new service name .
5041	Create a list of annotations for a host .
5042	Build a list of binary annotations .
5043	Create a span .
5044	Convert a thrift span to bytes .
5045	Encodes a list of binary thrift objects .
5046	Detect the span version and encoding of a message .
5047	Convert a list of spans into a list of spans .
5048	Push a zipkin attribute to the stack .
5049	Encodes a v2 span into a byte string .
5050	Create a JSON endpoint .
5051	Encodes a Span into a protobuf .
5052	Decodes a list of spans .
5053	Convert a thrift endpoint to an Endpoint .
5054	Decode thrift annotations .
5055	Convert from thrift binary annotations to local and remote endpoints .
5056	Decodes a thrift span .
5057	Convert trace_id to string .
5058	Convert an unsigned long to lower hex .
5059	Write a hex value to the buffer .
5060	If the month is 02 and the day is greater than max_month_day set the day to max_month_day .
5061	Set the transaction code
5062	Set the Iphone ID for a tag .
5063	Set the TNR of a tag .
5064	Parse tag data .
5065	Parse a file or file - like object .
5066	Join lines of a string .
5067	Return a JSON or plain text response .
5068	Check if we have exceeded a ratelimit .
5069	Make a request .
5070	Get information about a bot .
5071	Get a list of bots .
5072	Read a term from the stream .
5073	Write a message .
5074	Close the file .
5075	Decodes a binary string into a Python object .
5076	Encodes a term .
5077	Add a source address .
5078	Send pending messages .
5079	Sets the remote service hello callback .
5080	Stop the server .
5081	Clear local services .
5082	Search for services .
5083	Create a SOAP message .
5084	Discovers the log level and runs run .
5085	Return a tagged item manager .
5086	Get all child relations of a model .
5087	Get all child m2m relations of a model .
5088	Saves the clusterable model .
5089	Create a model from a serializable data dictionary .
5090	Validate all unique fields .
5091	Return True if the form has changed .
5092	Return a new Address with a valid checksum .
5093	Generate a checksum for this address .
5094	Parse command line arguments .
5095	Create an argument parser .
5096	Prompt the user for a seed .
5097	Validate signature fragments .
5098	Get a private key .
5099	Get the key for a given address .
5100	Create a key iterator .
5101	Create a sponge of the given index .
5102	Absorb a sequence of trits into this state .
5103	Squeeze a sequence of trits .
5104	Transform the state .
5105	Get a list of digests .
5106	Get private keys .
5107	Prepare a multisig transfer .
5108	Add two trits .
5109	Trits from an integer .
5110	Add two trits .
5111	Full add trits .
5112	Output seed .
5113	Find transactions .
5114	Get a list of inputs .
5115	Get new addresses .
5116	Get a list of transfers .
5117	Promote a transaction .
5118	Replay a bundle .
5119	Send a list of transfers .
5120	Send a list of trytes to the device .
5121	Resolve a URI to an adapter .
5122	Send a request .
5123	Log a message .
5124	Send an HTTP request .
5125	Interpret response from node .
5126	Add a response to the response queue .
5127	Add a digest to this address .
5128	Get the multisig address .
5129	Create an iterator over the keys .
5130	Converts a digest to an Address object .
5131	Generate an address from a key iterator .
5132	Return a list of Transaction objects for the given adapter .
5133	Iterate over the addresses used in a transaction .
5134	Get bundles from a list of transaction hashes .
5135	Check if the given encoding is valid .
5136	Get codec info .
5137	Encodes a byte string into a binary string .
5138	Decodes a byte string .
5139	Find addresses from Tangle .
5140	Add a route .
5141	Create a Transaction object from a tryte string .
5142	Return a JSON - compatible representation of this Transaction .
5143	Get signature validation trytes .
5144	Set whether this transaction is confirmed .
5145	Return a list of messages contained in this transaction .
5146	Return a list of trytes representing this transaction .
5147	Return a list of transactions grouped by address .
5148	Discover commands in a package .
5149	Execute the command .
5150	Apply a filter .
5151	Get the URL for a job .
5152	List of validation errors .
5153	Check if the bundle is valid .
5154	Create a validator .
5155	Get the signature errors for a bundle .
5156	Return error message for group signature .
5157	Traverse a bundle .
5158	Start IPython REPL .
5159	Generate a random seed .
5160	Return the digest of the key .
5161	Sign all input transactions in a bundle .
5162	Pretty print the object .
5163	Absorb a sequence of trits at offset .
5164	Squeeze a sequence of trits .
5165	Add context to the exception .
5166	Security level specification .
5167	Increment the legacy tag .
5168	The tag of the transaction .
5169	Add a transaction to the bundle .
5170	Finalize the bundle .
5171	Sign inputs with a key generator .
5172	Sign inputs at the given index .
5173	Add input transactions to the bundle .
5174	Convert value to standard unit .
5175	Decompress a G1 compressed point .
5176	Return prime field inverse of a .
5177	Create an instance from a JSON file .
5178	Find word groups in text .
5179	Find the synonym for a word .
5180	Expand abbreviations in text .
5181	Split a text description .
5182	Return a list of category names .
5183	Create a random colour .
5184	Plot the component summary .
5185	Create a LEGEND object from a name .
5186	Load a builtin timescale .
5187	Generate a random color .
5188	Create a list of Decor objects from an image file .
5189	Create a Legend from a CSV file .
5190	Convert to a CSV string .
5191	Return the maximum width of this table .
5192	Return a decor object for the given component .
5193	Get an attribute of a class .
5194	Return the component of a given colour .
5195	Plot all elements in the list .
5196	Create a component from text .
5197	Return a summary of the component .
5198	Create a Rock component .
5199	Process a single row .
5200	Parse a canstrat file .
5201	Return True if self is within boundaries .
5202	Return a sorted list of all unique values in this list .
5203	Create intervals from tops .
5204	Clean up longitudinal data .
5205	Create an IntervalList from a PETREL file .
5206	Build a list of intervals from a dictionary .
5207	Read text from a CSV file .
5208	Create a colormap from an image .
5209	Create a DataFrame from a log .
5210	Initialize from a LaS3 string .
5211	Create a list of Interval objects from a Canstrat file .
5212	Return a copy of this striplog .
5213	Write a list of components to a CSV file .
5214	Convert to Lithology .
5215	Plot the legend on an axis .
5216	Get the data for a specific field .
5217	Extracts data from a basis set .
5218	Find the first occurrence of a search term in this index .
5219	Return a list of incongruities .
5220	Find all gaps in a sequence .
5221	Prune a strip .
5222	Anneal the strip .
5223	Fill the intervals with gaps .
5224	Union two striplogs .
5225	Intersect two striplogs .
5226	Merge overlapping pieces .
5227	Plot a histogram of the data .
5228	Invert the striplog .
5229	Crop this striplog at the given extent .
5230	Return the quality of a set of tests .
5231	Convert hex color to name .
5232	Create a loglike from an image .
5233	Returns a tuple of the field name and the field value .
5234	Get a list of jobs .
5235	Parse JobHCL .
5236	Update a token .
5237	Get allocation information .
5238	Fail a deployment .
5239	Pauses a deployment .
5240	Checks the health of a deployment .
5241	Drain a node .
5242	Drain a node .
5243	Check if a node is eligible .
5244	List files .
5245	Get a stream .
5246	Stat a file .
5247	Join an agent .
5248	Update servers .
5249	Force leave a node .
5250	Get a list of nodes .
5251	Get evaluations .
5252	Get all namespaces .
5253	Register a job .
5254	Plan a job .
5255	Dispatch a job .
5256	Revert a job .
5257	Revert a job to a stable version .
5258	Deregisters a job .
5259	Get configuration information .
5260	Delete a peer .
5261	List deployments
5262	Return a random value for the given object type .
5263	Get random mutator .
5264	Get a string of a polyglot attack .
5265	Perform fuzzing .
5266	Return a safe unicode string .
5267	Run the server .
5268	Stop the server .
5269	Generate a custom HTML file .
5270	Execute the fuzzing process .
5271	Monkey - patch mutate_object_decorate .
5272	Spawn a process .
5273	Get the output from the process .
5274	Finish the read process .
5275	Close the process .
5276	Start the PJF worker .
5277	Execute the fuzzing method
5278	Decorate a function to encode a JSON string .
5279	Build a random string .
5280	Build a string from a list of values .
5281	Return a string representation of this query .
5282	Build a random value .
5283	Build an Opt instance .
5284	Build a reference definition .
5285	Build a STAR .
5286	Shutdown the process .
5287	Run and monitor the process .
5288	Start the process monitor .
5289	Return a random float between a and b .
5290	Add a definition to a category .
5291	Add a definition to a category group .
5292	Generate a GramFuzz object .
5293	Perform fuzzing of elements
5294	Return the fuzzed version of the configuration .
5295	Return a fuzzed version of the JSON .
5296	Decorate a function to mutate an object .
5297	Handler for SIGTERM signal .
5298	Quit the running process .
5299	Pause a running process .
5300	Resume a paused command .
5301	Stop the running process .
5302	Restart the process .
5303	Returns a list of Skype Events
5304	Set the user s mood .
5305	Set the avatar for this user .
5306	Get metadata about a URL .
5307	Retrieve a contact .
5308	Get a user by ID .
5309	Get a list of bots .
5310	Get a bot by id .
5311	Search for users by search string .
5312	Return a list of invite requests .
5313	Initialize from raw data .
5314	Merge other into self .
5315	Merge an object into the cache .
5316	Make a syncStateCall .
5317	Read token file .
5318	Write token file .
5319	Verify a token .
5320	Refresh Skype token .
5321	Get the user s ID .
5322	Get a valid Skype registration token .
5323	Syncs the endpoint presence docs with Skype .
5324	Check if a user exists .
5325	Authenticates a token .
5326	Authenticate with Skype .
5327	Configures a messaging service .
5328	Ping to Skype .
5329	List recent conversations .
5330	Get a chat .
5331	Create a thread .
5332	Return the ID of a user .
5333	Convert a chat URL to a chat ID .
5334	Exhaust the results of a function .
5335	Convert text to unicode .
5336	Detect format of text .
5337	Parse text into metadata and content .
5338	Return a dictionary representation of the object .
5339	Load a YAML file .
5340	Export metadata as YAML .
5341	Export metadata in JSON format .
5342	Match the string .
5343	Return a list of items in the string .
5344	Return a list of sublists of this Wiki .
5345	Replace all occurrences of pattern with newstart .
5346	Return a list of arguments in the string .
5347	Return a list of lists matching pattern .
5348	Plant the trie .
5349	Build a pattern from a trie .
5350	Check that the index is valid .
5351	Insert string at index .
5352	Return the atomic partition of a character .
5353	Returns a list of subspans of the given type .
5354	Shrinks the list of spans to the given range .
5355	Insert a new span at index .
5356	Return the nesting level of this node .
5357	Return the shadow of the string .
5358	Return a byte array containing the EXT_LINK shadow .
5359	Return a mapping from type to spans .
5360	Pretty print the object .
5361	Return a list of all parameters contained in this list .
5362	A list of ParserFunction objects .
5363	Return a list of all templates in the document .
5364	List of wikilinks in the document .
5365	Return a list of all comments in the document .
5366	Return a list of external links .
5367	Return a list of sections .
5368	Return a list of tables .
5369	Return a list of lists matching pattern .
5370	Return a list of tags .
5371	Yield subspans of a given type .
5372	Return a list of all ancestors of this text .
5373	Return the parent of this text .
5374	Return the mode of a list .
5375	Get an argument by name .
5376	Normalizes the name .
5377	Remove first of dup arguments .
5378	Remove duplicate arguments .
5379	Set an argument .
5380	Get an argument by name .
5381	Check if this command has an argument with the given name and value .
5382	Delete an argument .
5383	Convert a CRS code to a string .
5384	Find an Ellipsoid by name .
5385	Load a CRS from a URL .
5386	Create a GeoJSON object from a file .
5387	Create a CRS object from an EPSG code .
5388	Create a CRS object from an ESRI code .
5389	Create a CRS object from a SR code .
5390	Create a CRS from unknown text .
5391	Write the record to out .
5392	Read a VLR from a stream .
5393	Parse geo tiff keys from VLR list .
5394	Parse a GeoTiffKey .
5395	Get the signedness of an extra dimension .
5396	Get the ID for an extra dimension type .
5397	Create a point record from another point record .
5398	Copy fields from another record .
5399	Append zeros if too small .
5400	Returns a frozenset of all dimensions names .
5401	Create a numpy array of zeros .
5402	Create a point from a stream .
5403	Decompress a compressed buffer .
5404	The x - dimension of the image .
5405	The y - coordinate of the y - axis .
5406	Return the z - component of the matrix .
5407	Add extra dimension .
5408	Write the points data to a file .
5409	Write to a file .
5410	Write data to a file .
5411	Given a dictionary of point format dimensions and a dictionary of dimensions dictionary build a dictionary of dtypes .
5412	Build a dictionary of unpacked point formats dtypes .
5413	Convert numpy dtype to point format .
5414	Returns the minimum file version for a given point format .
5415	Checks if a point format is compatible with a given file version .
5416	Returns a list of vlrs of the given type .
5417	Extract a list of vlrs of a particular type .
5418	Read a list of VLRs from a data stream .
5419	Return True if all files have the same point_format_id .
5420	Return True if all files have the same dtype .
5421	Raise PylasError if file signature is not correct .
5422	Read a header from the stream .
5423	Read VLRList from stream .
5424	Read points from file .
5425	Read compressed points data .
5426	Read internal waveform packet .
5427	Read EVLRList from stream .
5428	Log a warning if the stream is at the expected position .
5429	Open a LAS file or file - like object .
5430	Read a LAS file .
5431	Create a LasData object from a header .
5432	Create a LAS dataset .
5433	Convert a source LAS to a PackedPointRecord .
5434	Merge las files .
5435	Write las to file and read again .
5436	Return a datetime object representing the creation date .
5437	Set the creation date .
5438	The minimum x y z values .
5439	Set the minimum values .
5440	Maximum x y z values .
5441	Set the maximum values .
5442	Return the scales of the image .
5443	Return the x y and z offsets of this vector .
5444	Get the file version of a file .
5445	Convert old_header to new_header .
5446	Unpack a source array into a numpy array .
5447	Packs sub_field_array into array .
5448	Return a list of lost dimension names .
5449	Returns a dictionary of sub - dimensions .
5450	The total number of bytes required to store extra data .
5451	Return True if there is a waveform packet .
5452	Demo of satel_integra library .
5453	Calculate the checksum of a command .
5454	Print a hex string .
5455	Verify and strip a response .
5456	Return a list of set bit numbers .
5457	Generate a query .
5458	Run a demo .
5459	Connect to the server .
5460	Start monitoring .
5461	Disarm a partition .
5462	Clear the alarm .
5463	Set an output .
5464	Keep a connection alive .
5465	Monitor the status of the device .
5466	Close the connection .
5467	Purge the database .
5468	Guess the type of a file .
5469	Get the ID of a file .
5470	Get a notebook .
5471	Create a notebook model from a record .
5472	Get a directory .
5473	Convert a list of file records into a list of FileModel instances .
5474	Create a directory model from a directory record .
5475	Create a file model from a record .
5476	Save a notebook .
5477	Save a file .
5478	Rename a file or directory .
5479	Delete a file or directory .
5480	Ensure a user exists in the database .
5481	Purge a user .
5482	Create a directory .
5483	Check if a table is in a directory .
5484	Delete a directory .
5485	Check if a directory exists .
5486	List files in a directory .
5487	List directories in a directory .
5488	Return True if the given API path is a file .
5489	Select files for a given user .
5490	Return a list of default file fields .
5491	Get a file .
5492	Get a file .
5493	Get a file s id .
5494	Check if a file exists .
5495	Renames a directory .
5496	Save a file .
5497	Generate notebooks .
5498	Purge all remote checkpoints for a user .
5499	Generate a list of checkpoints .
5500	Generate notebooks .
5501	Reencrypt a row .
5502	Re - encrypt a user s content .
5503	Derive a single Fernet key .
5504	Derive fernet keys from a list of passwords .
5505	Create a factory for a single password .
5506	Decorate a function to memoize a single argument .
5507	Get the name of a column .
5508	Convert a row to a dict with no content .
5509	Convert a row to a dictionary with content .
5510	Create a checkpoint for a notebook .
5511	Create a file checkpoint .
5512	Delete a checkpoint .
5513	Get the content of a checkpoint .
5514	List the checkpoints for a path .
5515	Renames all checkpoints from old_path to new_path .
5516	Delete all checkpoints at path .
5517	Purge remote checkpoints for this user .
5518	Resolve a path .
5519	Apply a prefix to a model .
5520	Decorator for dispatching a path to a manager .
5521	A decorator for dispatching a path to a manager .
5522	Returns a function that dispatches the given path .
5523	Called when a manager has changed .
5524	Get a directory .
5525	Normalize API path .
5526	Split a path into the API directory and the file name .
5527	Base64 encode a notebook .
5528	Reads a base64 - encoded file .
5529	Decodes a base64 encoded string into a text and base64 encoded string .
5530	Decode a base64 - encoded file .
5531	Return a list of directories in a path .
5532	A decorator that raises a 404 if the path is outside the root .
5533	Create a new user .
5534	Separate directories and files .
5535	Walk a directory tree .
5536	Yield all files in a directory .
5537	Yield files with content
5538	Re - encrypt all users .
5539	Re - encrypt a single user .
5540	Re - encrypt all users .
5541	Unencrypt a single user .
5542	Create a temporary alembic ini file .
5543	Upgrade alembic database .
5544	Sanitize a block .
5545	Queue an instance .
5546	Load instances of an embed type .
5547	Insert an instance .
5548	Load the data from the database .
5549	Validate data .
5550	Admin view .
5551	Return the JSON representation of the object .
5552	Hide the authenticated fields .
5553	Exclude fields from the response .
5554	Get the published version of the article .
5555	Get the queryset for the view .
5556	Get the queryset for this view .
5557	Returns True if this field is a null boolean field .
5558	Validate a widget .
5559	Validate a zone .
5560	Return True if id is a valid UUID .
5561	Get permissions for this user .
5562	Modify the permissions of the group .
5563	Validates an author .
5564	Save a zone .
5565	Return a dictionary with the data for each field .
5566	Prepare the data for the field .
5567	Render the template .
5568	Get settings for this integration .
5569	Callback for the integration .
5570	Get integration settings .
5571	Update the integration settings .
5572	Sign up a user .
5573	Create a maptag with the given tagname and contents .
5574	Render a zone .
5575	Save a featured image .
5576	Save a subsection .
5577	Get file extension .
5578	Returns the URL of the medium .
5579	Save the image .
5580	Save a thumbnail .
5581	Return a connection object .
5582	Get a BandwidthLimitedStream for a file .
5583	Read amount bytes from the file .
5584	Consumes amt from the queue .
5585	Schedule consumption for a token .
5586	Process a scheduled consumption .
5587	Calculate the projected rate at a given time .
5588	Record the current consumption rate .
5589	Download a file from a bucket .
5590	Wait for a result .
5591	Get callbacks for a given callback type .
5592	Return a filtered dictionary .
5593	Decrement the counter .
5594	Finalize callback .
5595	Determine if a file is a special file .
5596	Acquire a tag .
5597	Release a lock .
5598	Adjust the chunksize of a file .
5599	Queue a file IO task .
5600	Create an IOWriteTask .
5601	Return the appropriate download output manager class .
5602	Main entry point .
5603	Main entry point .
5604	Add a write request to the queue .
5605	Return True if the fileobj is seekable .
5606	Upload a file to a bucket .
5607	Download a file .
5608	Copy a file or directory .
5609	Delete a key from a bucket .
5610	Shutdown the server .
5611	Cancel a transfer .
5612	Wait until all transfer coordinators have completed .
5613	Read amount bytes from fileobj .
5614	Wrap data in chunks .
5615	Get the upload input manager class .
5616	Set the exception for this transfer .
5617	Set the result .
5618	Set the exception .
5619	Return the result of this Future .
5620	Cancel the task .
5621	Submit a task to an executor .
5622	Add a callback to be called when a function is done .
5623	Add a failure cleanup function .
5624	Mark the task as done .
5625	Submit a task to the executor .
5626	Add a callback to the future .
5627	Upload a file to S3 .
5628	Download a file from S3 .
5629	Iterate over step decorators .
5630	Extracts the step from the decorator .
5631	Refactor a step .
5632	Iterate over step decorators .
5633	Get the step argument for a decorator .
5634	Refactor a step .
5635	Select a Python parser to use .
5636	List team memberships .
5637	Create a team membership .
5638	Updates a team membership .
5639	Delete a membership .
5640	Get the category fact .
5641	Send a webhook .
5642	List members of a room .
5643	Delete a membership .
5644	Validate a base URL .
5645	Check if a string is a web url .
5646	Open a local file .
5647	Check that the given object is of the given acceptable types .
5648	Create a dictionary from a list of dictionaries .
5649	Check response code .
5650	Convert a JSON string into a dictionary .
5651	Return a datetime object from a string .
5652	List rooms .
5653	Create a room .
5654	Update a room .
5655	Delete a room .
5656	List license objects .
5657	The created date of the team .
5658	Get the access token .
5659	Create a webhook .
5660	Updates a webhook .
5661	Delete a webhook .
5662	Remove max = null from next - URL .
5663	Setter for wait_on_rate_limit .
5664	Update request headers .
5665	Return the absolute URL for a given URL .
5666	Make a request to the API endpoint .
5667	Make a GET request .
5668	Get a list of pages .
5669	Get items from a given URL .
5670	Make a PUT request .
5671	Perform a DELETE request .
5672	Create a new login session .
5673	List messages in a room .
5674	Create a message .
5675	Delete a message .
5676	Create a new person .
5677	Retrieve a person by ID .
5678	Update a person .
5679	Delete a person .
5680	Return a person object representing the authenticated user .
5681	List roles .
5682	List teams .
5683	Create a team .
5684	Updates a team .
5685	Delete a team .
5686	List events .
5687	Serialize data .
5688	Get an access token .
5689	Get the last activity date .
5690	Create a new webhook .
5691	Get the NGrok public URL .
5692	Delete a webhook by name
5693	Create a webhook .
5694	Main entry point .
5695	Command line interface for the DSMR console .
5696	Read telegram data from serial .
5697	Read telegram data into a queue .
5698	Create a DSMR protocol .
5699	Create a DSMR reader .
5700	Create a TCP DSMR reader .
5701	Data received .
5702	Called when a connection lost .
5703	Handle telegram .
5704	Parse telegram data .
5705	Get the version of a file .
5706	Ensure that a Python version is supported .
5707	Find all packages under top .
5708	Create command class .
5709	Create a command for a function .
5710	Run a command .
5711	Make sure all targets are present .
5712	Wraps a list of commands into a command class .
5713	Create a file handler class .
5714	Given a list of data files and a list of existing data files return a list of data files .
5715	Get package data .
5716	Compile a glob pattern .
5717	Split a path into its components .
5718	Translate glob patterns .
5719	Join translated parts .
5720	Translate a glob pattern into a regular expression .
5721	Truncate a table .
5722	Write a table to the database .
5723	Write indexes to database .
5724	Write triggers to database .
5725	Write the constraints for a table .
5726	Write contents of a table to a file .
5727	Process a row .
5728	Write indexes to file .
5729	Write the constraints for a table .
5730	Write triggers to file .
5731	Return the number of items in the queue .
5732	Enqueue data .
5733	Start a task .
5734	Build the extra predicate string .
5735	SimpleJSON datetime serializer .
5736	Reconnect to MySQL .
5737	Execute a SELECT query .
5738	Get a connection to the database .
5739	Run the benchmark .
5740	Connect to the aggregator .
5741	Lookup a variable by errno .
5742	The number of connections in the pool .
5743	Handle a connection failure .
5744	Create a simple expression .
5745	Update a table .
5746	Connect to a database .
5747	Setup the database .
5748	Destroy the database .
5749	Start a step .
5750	Stop a step .
5751	Load steps from raw_steps .
5752	Disconnect from the API .
5753	Reconnect to the server .
5754	Connect to the server .
5755	Handle a message .
5756	Stop timers .
5757	Send ping to API .
5758	Check if a pong is received .
5759	Send a payload to the API .
5760	Unpause the subscription .
5761	Handle a system message .
5762	Handle info messages .
5763	Error handler
5764	Data handler .
5765	Resubscribe for soft start .
5766	Handle authentication .
5767	Handle configuration .
5768	Update the timestamps of a channel .
5769	Reset the connection .
5770	Retrieve the candles for a given pair .
5771	Configures the bitfinex configuration .
5772	Subscribe to a ticker .
5773	Unsubscribe from ticker .
5774	Subscribe to order book .
5775	Unsubscribe from an order book .
5776	Subscribe to raw order book .
5777	Unsubscribe from raw order book .
5778	Subscribe to trades .
5779	Unsubscribe from trades .
5780	Subscribe to candles .
5781	Unsubscribe from candles .
5782	Authenticate the client .
5783	Cancel an order .
5784	Called when a device command is received .
5785	Called when a device command is received .
5786	Handle a message notification .
5787	Create a Device Type .
5788	Publish an event .
5789	Update a device .
5790	Returns a list of ClientStatus objects .
5791	List custom bundles .
5792	Create a custom bundle .
5793	Update a schema
5794	Disconnect from the IBM Watson IoT Platform .
5795	Called when a client connects .
5796	Subscribe to device events .
5797	Subscribe to device status .
5798	Subscribe to device commands .
5799	Publish a command to a device .
5800	Called when an unsupported message is received .
5801	Handle a device event .
5802	Callback for device status events .
5803	Called when an app status event is received .
5804	Get a specific event .
5805	List events for a device .
5806	Make an API call .
5807	Initiate a request .
5808	Get the status of a request .
5809	Close the index .
5810	Count the number of intersections between two coordinates .
5811	Return a list of nearest neighbors to the given coordinates .
5812	Get the bounds of this index .
5813	Delete an index .
5814	Create an index from a stream of data .
5815	Loads a byte string .
5816	Delete an object .
5817	Raise RTreeError if the return code is zero .
5818	Load the application .
5819	Initialize Flask - Common extension .
5820	Serve the application .
5821	Convert to native format .
5822	Crop an image on a centerpoint .
5823	Process an image .
5824	Process an image .
5825	Process an image .
5826	If data is None open it .
5827	Process the placeholder image .
5828	Update VersatileImageField .
5829	Update the ppoi field .
5830	Assigns the ppoi to the field .
5831	Return a formfield suitable for use in a form .
5832	Convert value to string .
5833	Autodiscovers the VersatileImageField registry .
5834	Unregister a SizedImage subclass .
5835	Unregister a filter .
5836	Return the URL for the placeholder image .
5837	Build filters and sizers .
5838	Get the root folder for this image field .
5839	Returns the path to the root folder of the sized image field .
5840	Returns the path to the directory containing the filtered sized root folder .
5841	Delete files matching a regex .
5842	Preprocess an image .
5843	Preprocess GIF .
5844	Preprocess a JPEG image .
5845	Retrieve an image .
5846	Save an image .
5847	Return the ppoi as a string .
5848	Create a resized image .
5849	Render the file input .
5850	Build the context for the widget .
5851	Return a copy of base_attrs with extra_attrs merged with extra_attrs .
5852	Get the path to a resized image .
5853	Return the path to a filtered file .
5854	Validate a list of sizes .
5855	Get image url from image key .
5856	Get the Rendition Key Set for a given key .
5857	Format an instruction .
5858	Format a function .
5859	Decodes a byte string into an Instruction object .
5860	Decode a module .
5861	Decorator to mark a function as deprecated .
5862	Connect to the server .
5863	Close the connection .
5864	Read a result from the server .
5865	Handle a request .
5866	Parse AGI result .
5867	Check AGI code .
5868	Reset all instances to their default values .
5869	Return a list of instances .
5870	Get metadata from setup . py .
5871	Get the primary keys of a model .
5872	Deserializes the given value .
5873	Get an existing instance .
5874	Get the declared fields for a given class .
5875	Load data into this instance .
5876	Split data into kwargs and association attributes .
5877	Delete orphaned tables .
5878	Create a new database snapshot .
5879	List snapshots .
5880	Restore a snapshot .
5881	Remove a snapshot .
5882	Rename a snapshot .
5883	Replace a snapshot .
5884	Shuffle the indexes .
5885	Textacy cleaner .
5886	Apply func to data in parallel .
5887	Create a process_text constructor .
5888	Process text .
5889	Process text in parallel .
5890	Generate document length stats .
5891	Returns a pandas DataFrame of the number of tokens in the corpus .
5892	Map a parameter type to a list of string types .
5893	Parse a dictionary of interfaces .
5894	Return the inverse bidict .
5895	Update with rollback .
5896	Return a copy of this bidict .
5897	Return a copy of this Bidict .
5898	Return True if this Bidict is equal to another .
5899	Return a mapping of key - > value pairs .
5900	Clear the internal state .
5901	Move a node to the end of the tree .
5902	Write text to a temporary file .
5903	Get contacts from a list of address books .
5904	Merge command line options into a config object .
5905	Load address books .
5906	Prepare search queries for address book parsing .
5907	Create a new contact .
5908	Add birthdays to a list .
5909	Subcommand for finding phone numbers .
5910	List contacts .
5911	Modifies a vCard contact .
5912	Delete a contact .
5913	Execute the source command .
5914	Handles the merge subcommand .
5915	Subcommand for COPY or MOVE .
5916	Get action by alias .
5917	Convert a boolean config value to a boolean value .
5918	Create a new contact .
5919	Initialize from a file .
5920	Create a contact from user input .
5921	Create a new contact from an existing contact .
5922	Get the names part of a vCard .
5923	Add a list of categories .
5924	Parse a type value .
5925	Convert a list into a string .
5926	Convert a string to a date .
5927	Compare two UIDs .
5928	Search all contacts matching a given regular expression .
5929	Search contacts by name .
5930	Search contacts by UID .
5931	Search the address book .
5932	Return a dictionary mapping short UIDs to contacts .
5933	Returns the short UID of the given UID .
5934	Find all vCard files matching the given search criteria .
5935	Load a VCard file .
5936	Get an abook by name .
5937	List of available architectures .
5938	List of available architectures .
5939	Return an ArgSpec for a function .
5940	Dispatch a command .
5941	Prompt the user for input .
5942	Encodes the given value to UTF - 8 .
5943	Guesses the type of the given kwargs .
5944	Add commands to a parser .
5945	Decorator to mark a function as named .
5946	Decorate a function as an argument .
5947	Prompt user for confirmation .
5948	Replace the current query with a new one .
5949	Like filter .
5950	Return a cached result .
5951	Return the first entity in the collection .
5952	Delete entities from the database .
5953	Called when an entity is deleted
5954	Add a prefix to a key .
5955	Estimate the lua code for a work index .
5956	Perform a search .
5957	Return the number of items matching the filter .
5958	Connect to the database .
5959	Convert a string into a list of unicode strings .
5960	Refresh indices for a model .
5961	Clean old index .
5962	Add an object to the session .
5963	Get the value of a key .
5964	Write data to redis .
5965	Save changes to the database .
5966	Delete the object .
5967	Get a list of models by ids .
5968	Register a reduce function .
5969	Open a semaphore .
5970	Return the number of available CPUs .
5971	Send a result to the result queue .
5972	Process a worker .
5973	Add a work item to the call queue .
5974	Ensure the executor is running .
5975	Wrap non - picklable objects .
5976	Start the server .
5977	Duplicate a file descriptor .
5978	Get a reusable executor .
5979	Wait for the jobs to complete .
5980	Return a dictionary of preparation data .
5981	Prepare process data .
5982	Close all open fds .
5983	Terminate a process without using psutil .
5984	Terminate a process .
5985	Get the exitcodes of the terminated workers .
5986	Format a list of exit codes .
5987	Main program .
5988	Ensure the semaphore tracker is running .
5989	Process an event .
5990	Disassemble a Python program .
5991	Interactively interact with the terminal .
5992	Split a string into a list of arguments .
5993	Return a tuple of stack frames and line numbers .
5994	Run a list of hooks .
5995	Forget the current stack .
5996	Get an integer from a string .
5997	Get an integer .
5998	Process commands .
5999	Queue startfile .
6000	Find the next token in a string .
6001	Raises EOFError .
6002	Read a line from stdin .
6003	Close the connection .
6004	Disassemble a message .
6005	Disassemble bytes .
6006	Return the number of frames in a given frame .
6007	Return the name of the CALL_FUNCTION instruction .
6008	Print the stack trace of a process .
6009	Lookup a subcommand by prefix .
6010	Show short help for a subcmd .
6011	Add a subcommand callback .
6012	Run a subcommand .
6013	Start the debugger .
6014	Show a category of commands .
6015	run lineinfo
6016	Find a frame that is debugged .
6017	Map thread names to thread ids .
6018	Get an integer from a string .
6019	Return True or False .
6020	Set a boolean value .
6021	Set a value in the debugger settings .
6022	Run show_bool .
6023	Show an integer .
6024	Show the value of a variable .
6025	Check if this is a def statement .
6026	Return True if this is a class definition .
6027	Quit the current thread .
6028	Set the default background color .
6029	Check if the color is dark .
6030	Get the signature of a frame .
6031	Return a list of all expressions
6032	Display a frame .
6033	Format the message .
6034	Read a message .
6035	Log a debug message .
6036	Raise an error if the given subcommand is unknown .
6037	Run the program .
6038	Pretty print a simple array .
6039	Look up a signal name by number .
6040	Lookup a signal by name .
6041	Return the canonical name of a signame .
6042	Set a signal handler .
6043	Check and adjust sighandlers .
6044	Show information about a signal .
6045	Handle a signal .
6046	Handle a print signal .
6047	Handle a signal .
6048	Convert a filename to a module name .
6049	Search a file in a list of directories .
6050	Return the path to a Python script file .
6051	Return a list of all python files in the caller directory .
6052	Write a message to the output .
6053	Run the program .
6054	Columnize commands .
6055	Post - mortem .
6056	Close the connection .
6057	Write a message to the socket .
6058	Complete an identifier .
6059	Add a string to the command queue
6060	Add frames to ignore .
6061	Return the canonical name of a file .
6062	Return the filename for the given filename .
6063	Return True if the tracer is running .
6064	Return True if we should stop .
6065	Set the next frame .
6066	Print the stack trace of a function .
6067	Run the debugger .
6068	Check that the function name is correct .
6069	Delete a breakpoint .
6070	Delete a breakpoint by number .
6071	Disable all breakpoints .
6072	Disable a breakpoint by number .
6073	Delete all breakpoints between filename and lineno .
6074	Open an input stream .
6075	Read a line from stdin .
6076	Prompts the user for confirmation .
6077	r Consume whitespace .
6078	r tNUMBER
6079	Return a future for the given query .
6080	Restore original login .
6081	Load a module .
6082	Iterate over all documents in the project .
6083	Main entry point .
6084	Transcode a JSON or CSV file to a stream .
6085	Open a JSON or CSV file .
6086	Normalize data in a stream .
6087	Convert a date string to a timestamp .
6088	Detect the encoding of a file .
6089	Stream json lines from file .
6090	Transcode filename to utf - 8 .
6091	Open a CSV file in Python 2 .
6092	Read a CSV file .
6093	Main entry point .
6094	Connect to a Luminoso API .
6095	Save a token to disk .
6096	Make a request .
6097	Delete a resource .
6098	Wait for a build to finish .
6099	Return the root URL for a given URL .
6100	Save a token to a file .
6101	Make a JSON request .
6102	Make a POST request .
6103	Change the path .
6104	Get the default account .
6105	Get the documentation for this project .
6106	Wait for a job to complete .
6107	Perform a GET request .
6108	Print result as CSV .
6109	Read parameters from a JSON file .
6110	Simplify a document .
6111	Create a project .
6112	Create a project from a JSON file .
6113	Main entry point .
6114	Upload a stream to a project .
6115	Upload a file .
6116	Main entry point .
6117	Create a LuminosoLogin instance from a username and password .
6118	Login page .
6119	Post login page .
6120	Get data for a resource .
6121	Fetch data for each period .
6122	Prepare the view .
6123	Initialize the view .
6124	Render view for get request .
6125	Handle a message .
6126	Update the menus
6127	Return a list of default handlers for this site .
6128	Called when a message is received .
6129	Called when a dom has been modified .
6130	Create the widget .
6131	Initialize the widget .
6132	Destroy this component .
6133	Add a child to this component .
6134	Remove a child from this component .
6135	Yield all child widgets of this node .
6136	Set an attribute .
6137	Update a proxy .
6138	Notify that a change has occurred .
6139	Return a list of declarations that match the query .
6140	Prepare the proxy .
6141	Initialize the widget .
6142	Set the widget source .
6143	Called when a change has occurred .
6144	Handle a block change .
6145	Update the children of this block .
6146	Read a file .
6147	Print an error message and exit .
6148	Error parsing command line .
6149	Get a product by name .
6150	Create a new session .
6151	Reset the store .
6152	Returns a list of stores that match a search term .
6153	Set the delivery system .
6154	Retrieve the menu for a given store .
6155	Add an item to the basket .
6156	Add a pizza to the basket .
6157	Adds a side to the basket .
6158	Removes an item from the basket .
6159	Set payment method .
6160	Process payment .
6161	Make a GET request .
6162	Perform a POST request .
6163	Call API .
6164	Append an item to the menu .
6165	Add an exit item .
6166	Draw the menu .
6167	Process user input .
6168	Select the current item .
6169	Parse old menu data .
6170	Return the top value of a DataFrame .
6171	Group a DataFrame by a given group .
6172	Convert string to datetime
6173	Convert a datetime to a string .
6174	Change the date format of a column .
6175	Cast a column to a given type .
6176	Rank a DataFrame .
6177	Apply waterfall to a dataframe .
6178	Perform a basic math operation .
6179	Round values in a DataFrame .
6180	Absolute values in a DataFrame .
6181	Pivot a DataFrame with a given value .
6182	Pivot a dataframe by group .
6183	Group a DataFrame by multiple columns .
6184	Cumulative sum of a column .
6185	Add missing row to a dataframe .
6186	Decorator to log exceptions raised in decorator .
6187	Log a message to a logger .
6188	Log the execution time of a function .
6189	Decorator to log the shapes of a function .
6190	Rename a dataframe .
6191	Compute the cumulative sum of a dataframe .
6192	Combine columns with aggregation function .
6193	Get a parameter value from a function call .
6194	Remove old cachedir entries .
6195	Roll up a dataframe .
6196	Return the maximum value of a column .
6197	Return the minimum value of a column .
6198	Fill missing values in a DataFrame .
6199	Add an offset to a date object .
6200	Add months to a date object .
6201	Add nb_years years to dateobj .
6202	Parse a date string .
6203	Filter a dataframe by date .
6204	Calculate percentage of a column .
6205	Ada family core .
6206	Get the learning updates for the optimizer .
6207	Get training parameters
6208	Compute updates for optimization .
6209	First glimpse sensor .
6210	Prepare the network .
6211	Compute the cost of a tensor .
6212	Apply a function to the training and validation sets .
6213	Vectorize target .
6214	Report training and validation statistics .
6215	Train the model .
6216	Sample a batch of samples .
6217	Compute the alignments of the model .
6218	Compute the context vector .
6219	Concatenate variables .
6220	Pad the training and validation sets .
6221	RMSprop core .
6222	Report the current time .
6223	Compute the cost function for the given data .
6224	Run the monitor .
6225	Build loop variables .
6226	Scan a step of the loop .
6227	Compute the momentum of the core .
6228	Create a iftrain instruction .
6229	Skip batches and epochs .
6230	Load parameters from a file .
6231	Train the model .
6232	Run the training step .
6233	Run a valid step .
6234	Report a score map .
6235	Get the current data set .
6236	Apply a function to the tensor .
6237	Print a summary of the parameters .
6238	Return a variable of the given type .
6239	Create a list of neural variables from a dataset .
6240	Create a shared theano variable .
6241	Stack encoders .
6242	Stack decoders .
6243	Encode x using the encoding layer .
6244	Decodes x .
6245	Create a 2D Gaussian kernel .
6246	Register a layer .
6247	Monitor layer outputs .
6248	Get all parameters .
6249	Setup input variables .
6250	Compute the results of a computation .
6251	Save parameters to file .
6252	Load parameters from a file .
6253	Report network information .
6254	Register parameters .
6255	Register updates .
6256	Register training updates .
6257	Register monitors .
6258	Calculate the L2 norm of a list of tensors .
6259	Dump elt_to_pickle into file_obj .
6260	Load an element from a file .
6261	Load parameters from a file .
6262	Create request elements .
6263	Decodes a user state .
6264	Parse credentials data .
6265	Filter request elements based on request type .
6266	Log a user in .
6267	Normalize a dictionary .
6268	Convert a list of items into a dictionary .
6269	Parse JSON or XML .
6270	Resolve provider class .
6271	Create a cookie .
6272	Save session data .
6273	Get data from cookie .
6274	Return the deserialized data .
6275	Generate a signature for the given parts .
6276	Serialize the given value .
6277	Check if the session is valid .
6278	Return True if the session has expired so far .
6279	Serialize credentials .
6280	Return True if content is a binary string .
6281	The content of the response .
6282	Create request elements .
6283	Get user information from Bitbucket .
6284	Decorator for FlaskAuthomatic .
6285	Login to OpenID .
6286	Generate a session key .
6287	Set a session variable .
6288	Generate a CSRF token .
6289	Log a message .
6290	Return True if status is in category .
6291	Split a URL into base and params .
6292	Decorate a function for cross - origin requests .
6293	Set CORS headers .
6294	Return a dict of keyword arguments for the given app instance .
6295	Return a string representation of an object .
6296	Ensure inst is iterable .
6297	Return True if a is close to b .
6298	Decorator to mark a function as deprecated .
6299	Deserialize audio segment .
6300	Create a new AudioSegment from a file .
6301	Create an AudioSegment from a NumPy array .
6302	Execute sox command .
6303	Filter a WAV file for silence .
6304	Compute the FFT of the signal .
6305	Generate frames from raw data .
6306	Normalize the SPL of this AudioSegment by the average RMS .
6307	Combine two audio segments .
6308	Resample the audio file .
6309	Return a string representation of this segment .
6310	Generate a spectrogram of the data .
6311	Given a list of offset_front_ids and a list of offsets_corresponding_to_onsets and a list of offsets_corresponding_to_offsets choose the offset_front_id that overlaps with the candidates .
6312	Given an onset sample idx and a list of offset fronts return the offset front id after the sample idx .
6313	Get the offset front id after an onset front .
6314	Match onset_front_id to onset_fronts .
6315	Given a list of onset_fronts and a list of offset_fronts and a list of onset_fronts and a list of onset_fronts and a list of onset_fronts and a list of onset_fronts and a list of onset_fronts and a list of onset_fronts and a list of onset_fronts and a list of onset_fronts and a list of onset_fronts and a list of onset_fronts and a list of onset_fronts and a list of onset_fronts and a list
6316	Update the segmentation mask .
6317	Return the id of the front of a given index .
6318	Given a list of onset_fronts return a generator that yields the ids of the fronts in the list .
6319	Given a list of onset_fronts and a list of onset_fronts and a list of offsets return a list of offsets corresponding to the onset_fronts and onset_fronts .
6320	Remove overlaps from fronts .
6321	Remove fronts that are too small .
6322	Break a list of fronts into poorly matched fronts .
6323	Merge adjacent segments .
6324	Separate masks into multiple masks .
6325	Downsample a two - dimensional mask .
6326	Perform ASA task .
6327	Bandpass filter .
6328	Lowpass filter .
6329	Convert a list of lists to tf input .
6330	Expand and standardize a dataset .
6331	Compare two lists ignoring order .
6332	Given a list of filenames and a measurer calculate the representative mean of each group .
6333	Load confusion matrices from audit file .
6334	Convert a list of lists to tf input .
6335	Update the index URL from environment variables .
6336	Autodetect requirements files .
6337	Resolve all streams .
6338	Resolve a stream property .
6339	Resolve by predicate .
6340	Handle an error .
6341	Push a sample to the stream .
6342	Push a chunk of data .
6343	Get information about the stream .
6344	Open a stream .
6345	Perform time correction .
6346	Create a child element .
6347	Return the next sibling of this element .
6348	Return the previous sibling of this element .
6349	Set the name .
6350	Set the value of the field .
6351	Append a child element .
6352	Prepend a child element .
6353	Append a copy of an element .
6354	Create a copy of an element .
6355	Remove a child .
6356	The results of the resolver .
6357	Pair words .
6358	Autocomplete a query .
6359	Compute the n - grams of the edges of a token .
6360	Iterate over a pipe .
6361	Perform an unordered map .
6362	Make a fuzzy version of a word .
6363	Do a fuzzy query .
6364	Do fuzzy index .
6365	Add manytomany relations to results .
6366	Show help for command .
6367	Show database information .
6368	Get or set a database key .
6369	Print a geohash .
6370	List housenumbers
6371	Index a document .
6372	Get the score of a word .
6373	Str distance .
6374	Send a request .
6375	Send multiple requests to a pool .
6376	Get bits from an array .
6377	Convert a HArray or HArray - like object to a HArray - like object .
6378	Convert a slice to a slice .
6379	Find all files matching pattern in directory .
6380	Return True if sigOrVal is in iterable .
6381	Given a list of items generate logic for each item .
6382	Return a signal of length howMany .
6383	Return the ceil of x .
6384	Checks if a number is a power of 2 .
6385	Add case statement .
6386	Add a default statement .
6387	Register an interface .
6388	Called before simulating a unit .
6389	Log a signal change
6390	Process a HWProcess .
6391	Return a list of callables that can be used to add agents to a unit .
6392	Get the CCLK associated with this unit .
6393	Yields all elements in iterable that satisfy a function .
6394	Group a collection by a function .
6395	Flatten an iterable .
6396	Merge nested if statements .
6397	Remove unconnected signals .
6398	Check if a statement is too simple .
6399	Merges two processes .
6400	Given a list of processes reduce them into a list of processes .
6401	Register a write request .
6402	Convert a Unit or Unit class to a list of Unit objects .
6403	Given a list of statements and a list of outputs return the name of the outputs that should be marked .
6404	Cut off drivers of a signal .
6405	Register signal .
6406	Synthesize this instance .
6407	Get the maximum ID for a given statement .
6408	Returns the maximum id of a given proc s statements .
6409	Write data to the interface .
6410	Change the direction of the interface .
6411	Load declarations .
6412	Returns a list of signals for this interface .
6413	Returns the physical name of this port .
6414	Return the bit length of the data .
6415	Returns the sensitivity of the given operation .
6416	Evaluate an operator .
6417	Convert bits to the specified type .
6418	Re - reinterpret bits to hStructT .
6419	Return the number of full words between start and end .
6420	Yields tuples of word index and list of words
6421	Pretty prints an interface .
6422	Generate frames from a TransTmpl .
6423	Yields tuples of word index and list of parts
6424	Packs data into a list of values .
6425	Clean signal meta data .
6426	Given a list of statements and a list of outputs discover the enclosure for each statement .
6427	Given a list of signals and a list of signals and a list of signals and a list of signals and a list of signals and a list of signals and a list of signals and a list of signals and a list of signals and a list of signals and a list of signals and a list of signals and a list of signals and a list of signals and a list of signals and a list of signals and a list of signals and a list of signals and a list of signals and a list of signals and a list of signals and a list of signals and a list of signals and a list of signals and a list of signals and a list
6428	Returns the context of this statement .
6429	On reduce signal .
6430	Merge two statements .
6431	Check if two lists of statements are mergable .
6432	Merge two lists of HDLStatements .
6433	Merge two lists of statements .
6434	Try to reduce a list of statements .
6435	Called when parent event dependent .
6436	Set the parent statement .
6437	Given a list of statements and a list of target statements register them as stements .
6438	Destroy this statement .
6439	Register a new register .
6440	Get the signature for a field .
6441	Clean the subunit .
6442	Flattens the fields in sigOrVal .
6443	Unpack a HStruct .
6444	Return a copy of this operator with signed conversion .
6445	Set sensitivity of a process .
6446	Evaluate a set of conditions .
6447	Connects two sim ports .
6448	Return an updater that updates the value of the given value .
6449	Create an updater for an array .
6450	Create a vector from a numpy array .
6451	Registers the given HWProcess .
6452	Evaluate a param .
6453	Set the value of this parameter .
6454	Create a HStruct from an interface map .
6455	Finalizes the state of the device .
6456	Cascading index .
6457	Convert a Python value to a Python value .
6458	Auto - casts sigOrVal to toType .
6459	Cast sigOrVal to toType .
6460	Walk the parameters of an interface .
6461	Return a list of connected physical interfaces .
6462	Packs an interface into a signature .
6463	Convert a rom into a process .
6464	Convert to RTL .
6465	Register an interface .
6466	Try to reduce the value of a signal .
6467	Try to reduce a value to a mask .
6468	Return the base name scope .
6469	Return True if the object should be serialized .
6470	Create a new HdlType .
6471	Serialize an IfContainer .
6472	Get the base condition for a given condition .
6473	Create a SimBitsT object for the given width and signedness .
6474	Get the name of a constant .
6475	Cut off drivers of this signal .
6476	Load from array .
6477	Load from HStruct .
6478	Load from HType .
6479	Get the item width of this HArray .
6480	Walk the tree starting at the given offset .
6481	Fix the sign of a number .
6482	Merge this IfContainer with another IfContainer .
6483	Get the indent string for a given indent number .
6484	Raises IntfLvlConfErr if prop is already in obj .
6485	Register a parameter .
6486	Update parameters from otherObj .
6487	Register a unit .
6488	Register an interface .
6489	Register an array .
6490	Get a single driver .
6491	Static evaluation of the expression .
6492	Create a new RtlSignal with resT .
6493	Return a copy of this context with a new indent level .
6494	Try to connect to a unit .
6495	Propagate the current clock to all units .
6496	Propagate clk_n and rst_n .
6497	Propagate clk_n and rst_n .
6498	Propagate Rstn to all units .
6499	Propagate RST to all units .
6500	Iterate over the bits of a signal .
6501	Return a tuple of a boolean indicating whether the object should be serialized or not .
6502	Return a tuple of serialize and priv .
6503	Return a tuple of a boolean and a dictionary of parameters .
6504	Get the name of this object .
6505	Make an association .
6506	Prepare a unit for simulation .
6507	Convert a unit to a SimModel .
6508	Re - connects signals from a unit to a model .
6509	Generate VCD code for a simulated unit .
6510	Initialize the write callback .
6511	Connect this port to a signal .
6512	Registers a signal to be sent to the receiver .
6513	Connects this driver to the network .
6514	Get the international signature of this instruction .
6515	Return True if process is dependent on sig .
6516	Add a process to the queue .
6517	Add a process to the list of processes to run .
6518	Schedule a CombUpdateDoneEvent .
6519	Schedule the values to be applied .
6520	Resolve strategy for conflicts .
6521	Run all comb processes .
6522	Run the sequence processes .
6523	Apply values to signals .
6524	Return a copy of sig .
6525	Write value to signal .
6526	Add a process to the queue .
6527	Simulate a unit .
6528	Create a function that can be used as an op .
6529	Convert ternary operators to if statements .
6530	Process a HWProcess .
6531	Calculate the hamming distance between two hashes .
6532	Compute the average hash of an image .
6533	Calculate the distance between two images .
6534	Setup Vizio platform .
6535	Update state .
6536	Mute or unmute a volume .
6537	Drive volume up .
6538	Move the volume down .
6539	Set the volume level .
6540	Reset all pieces .
6541	Return the piece at the given square .
6542	Remove piece at square .
6543	Set piece at square .
6544	Check if a move is suicide or check by dropping a pawn .
6545	True if the player was suicide .
6546	Is game over?
6547	Return True if this is a checkmate .
6548	Is this repetition a fourfold repetition?
6549	Pop a move off the stack .
6550	Return a list of squares .
6551	Push a USI to the queue .
6552	Return the zobrist hash of the board .
6553	Get the piece s symbol .
6554	Create a color from a symbol .
6555	Return the USI code for this piece .
6556	Create a piece from USI string .
6557	Parse a list of commits .
6558	Parse a commit message .
6559	Load config from command line .
6560	Execute from command line with config .
6561	Add an argument to an argument parser .
6562	Load configuration from file .
6563	Generate a YAML string .
6564	Return a Markdown representation of the class .
6565	Cast val to self . cast_as .
6566	Return a list of dates between two dates .
6567	Parse a date from a string .
6568	Load a currency file .
6569	Set missing rates to None .
6570	Compute missing rates for a given currency .
6571	Get the rate for a given date .
6572	Convert an amount to another currency .
6573	Group an iterable into n groups .
6574	Animate frames .
6575	Read a single record .
6576	Write a record to the file .
6577	Map words to memory .
6578	Return the DAF file comments .
6579	Add an array .
6580	Close the DAF .
6581	Return a list of positions for a given temperature budget .
6582	Close the DAF file .
6583	Load PCK data .
6584	Compute a segment from tdb and tdb2 .
6585	Visit a Call node .
6586	Visits a BinOp node .
6587	Visit a Dict node .
6588	Visits a JoinedStr AST node .
6589	Visits a keyword .
6590	Visit an except handler .
6591	Detect the logging level of a node .
6592	Get the name of an except handler .
6593	Get the id attribute of a value .
6594	Return True if node is a bare exception .
6595	Check exc_info keywords .
6596	Delete a file if needed .
6597	Create a widget for a database file .
6598	Return the rendered PDF .
6599	If the response_class is a PDFTemplateResponse it will be used .
6600	Quote a string for use in a URL .
6601	Configure MONGODB options .
6602	Convert string to underscore .
6603	Ensure all indexes are in the collection .
6604	Parse a CSV file .
6605	Load content from a file .
6606	Parse a line into a PriceModel object .
6607	Translates the given symbol to its corresponding mapping .
6608	Load all symbol maps .
6609	Get the session .
6610	Add a new price .
6611	Import prices from CSV file .
6612	Show the latest prices available for a security .
6613	List prices .
6614	Download prices .
6615	Remove old price entries .
6616	Get a default session .
6617	Add a symbol map .
6618	List all symbol maps .
6619	Get a symbol map by symbol .
6620	Read lines from a CSV file .
6621	Map entity to price model .
6622	Map a model to a Price entity .
6623	Read configuration file .
6624	Returns the path to the config template .
6625	Create user config file .
6626	Get the path to the config file .
6627	Get the contents of the config file .
6628	Set a configuration option .
6629	Get a configuration option .
6630	Save the configuration to disk .
6631	Parse a namespace and mnemonic from a symbol .
6632	Add a price entity to the collection .
6633	Add a price entity to the database .
6634	Download and save a price .
6635	DAL session object .
6636	Get a list of prices .
6637	Get prices on a given date .
6638	Prune all prices .
6639	Prune prices for a symbol .
6640	Download a price from Finance .
6641	Get security data .
6642	Return a partial function .
6643	Update child calls .
6644	Recursively descend the tree .
6645	Declares a function as a multi function .
6646	Check that student and solution parts have the same length .
6647	Raises InstructorError if code and incorrect_msg are not specified .
6648	Assert that student code contains text .
6649	Check that a package is imported .
6650	Checks if the student has output .
6651	Check if a function call has a printout .
6652	Fail if there is no error .
6653	Check if the student has chosen an option .
6654	Check a function .
6655	Get the result from a process .
6656	Override the solution AST .
6657	Indicate that inst is an instance .
6658	Return a list of all defined items .
6659	Convert this state to a child state .
6660	Return the output of a parser .
6661	Test if the state has a context loop .
6662	Check that the state has a context with the given name .
6663	Check a part .
6664	Check the index of a part .
6665	Check the arguments of a function .
6666	Check a call .
6667	Get true anomaly .
6668	Initialize the application .
6669	Initialize LDAP configuration .
6670	Add a server to the pool .
6671	De - contextualise a connection .
6672	Teardown the request context .
6673	Authenticate a user .
6674	Authenticate a user via direct bind .
6675	Authenticate a user with LDAP .
6676	Get groups for a specific user .
6677	Get information about a user .
6678	Get information about a user .
6679	Get a single object .
6680	Return a connection object .
6681	Make a connection to the database .
6682	Create a connection .
6683	Destroy a connection .
6684	Search a collection .
6685	Search for labels .
6686	Search a collection .
6687	List all jobs in a collection .
6688	Speak the client .
6689	Announce a command .
6690	Update secrets .
6691	Update headers .
6692	Require client secrets .
6693	Download a file .
6694	Stream a file .
6695	Update authorization token .
6696	Get or create a folder .
6697	Read a JSON response .
6698	Get a bucket .
6699	Update the secrets .
6700	Initialize the client .
6701	Load secrets .
6702	Get a list of logs .
6703	List logs in the bucket .
6704	Create an endpoint folder .
6705	Initialize transfer client .
6706	List all containers
6707	Show status of backend .
6708	Add a variable to the registry .
6709	Remove a variable from the registry .
6710	Activate a backend
6711	Delete a backend .
6712	Update the base for this image .
6713	Create a basic authentication header .
6714	Generate a signature .
6715	Generate a signature for a request .
6716	Perform a DELETE request .
6717	Make a HEAD request .
6718	Paginate a GET request .
6719	Verify that SSL certificates are enabled .
6720	Remove an image .
6721	Get the sregistry version . py file .
6722	Return a list of installed requirements .
6723	Get Singularity version .
6724	Check if a software is installed .
6725	Get the installation directory .
6726	Get the path to the thumbnail for the robot .
6727	Run a command .
6728	Get metadata for an image .
6729	Update secrets .
6730	Print the results of a build .
6731	Kill a registry .
6732	List logs for a container .
6733	Return a list of all collections in the account .
6734	Update the secrets .
6735	Update secrets .
6736	Get SREGISTRY client .
6737	Run IPython .
6738	Get manifests for a repository .
6739	Get the manifest for a repository .
6740	Get the path to the cache directory .
6741	Extracts the Docker container environment .
6742	Update the base URL .
6743	Update the private token .
6744	Return a dictionary of metadata for this job .
6745	Get client settings .
6746	Get and update a setting .
6747	Update a client setting .
6748	Authorizes a registry .
6749	List available builders .
6750	Load templates by name .
6751	Get the IP address of an instance .
6752	Run a build .
6753	List containers in the bucket .
6754	List all containers in the bucket .
6755	List Schemas .
6756	Main entry point .
6757	Initialize the database .
6758	Get build template .
6759	Search for containers .
6760	List all endpoints
6761	List files at an endpoint .
6762	Share an image .
6763	Read client secrets .
6764	Return a list of services for this project .
6765	Delete an object .
6766	Delete a file .
6767	Destroy an instance .
6768	Get all subparsers for a given parser .
6769	Generate a random string .
6770	Get a temporary directory .
6771	Extract a tar archive .
6772	Extract a TAR archive .
6773	Get the hash of a file .
6774	Read a file .
6775	Read a JSON file .
6776	Clean up a list of files .
6777	Push an image to S3 .
6778	Get or create a collection .
6779	Get a collection by name .
6780	Get a container .
6781	Return a list of images that match the query .
6782	Inspect a container .
6783	Renames an image .
6784	Move an image to another location .
6785	Remove a container .
6786	Add an image to the registry .
6787	Push an image to a registry .
6788	Parse a recipe header .
6789	Find a single recipe .
6790	Create a build package .
6791	Run a build .
6792	Update blob metadata .
6793	Format a container name .
6794	Return True if the user has permission to use color .
6795	Emit an error message .
6796	Write a message to a stream .
6797	Print a table of rows .
6798	Push a container to GCP .
6799	Get a template by name .
6800	Get image manifest
6801	Get build template .
6802	Update secrets .
6803	Make a string representation of a class .
6804	Context manager for S3 errors .
6805	Create a temporary file .
6806	Return a gravatar url for a user .
6807	Return a gravatar url for a given email .
6808	Check if an email has a gravatar .
6809	Generate a gravatar profile URL .
6810	Generate chimera blocks .
6811	Chimera block quadratic model .
6812	Enumerate resonance smiles
6813	Return a list of ResonanceMolSupplier objects .
6814	Normalize a molecule .
6815	Apply a transform to a molecule .
6816	Canonicalize a molecule .
6817	Validate a SMILES string .
6818	Disconnect a molecule .
6819	Standardizes a SMILES string .
6820	Enumerate tautomers from SMILES .
6821	Canonicalize a Tautomer smiles string .
6822	Standardize a molecule .
6823	Return the tautomer parent of mol .
6824	Find the parent fragment of a molecule .
6825	Remove stereochemistry from a molecule .
6826	Return the isotope parent of a molecule .
6827	Charge the parent of the given molecule .
6828	Get the superparent of a molecule .
6829	Main entry point for molvs .
6830	Remove all fragments from a molecule .
6831	Choose the largest fragment .
6832	r Integrate an IVP .
6833	Get GitHub stats .
6834	Get members of org .
6835	Get teams of org .
6836	Get repos .
6837	Get the total number of contributors for a repo .
6838	Get all pull requests for a given repo .
6839	Get all issues from a repository
6840	Get the readme for a given repo .
6841	Get license for repo .
6842	Get all commits for a given repo
6843	Write organization . json file .
6844	Write totals to a file .
6845	Write languages to file .
6846	Make sure the directory exists .
6847	Remove a file .
6848	Government organizations .
6849	Create a GitHub Enterprise session .
6850	Check API limits .
6851	Connect to GitHub .
6852	Query GitHub repositories .
6853	Get organization .
6854	Write stargazers to a file .
6855	Create a project from a gitlab repository .
6856	Create a project object from DOE code .
6857	Return the license object for a given license .
6858	Get the traffic for this organization .
6859	Get a list of releases
6860	Get a list of referrers
6861	Get data from API
6862	Write a JSON file for a GitHub repository .
6863	Write data to file .
6864	Check data redundancy .
6865	Write data to a file .
6866	Write referrers to a file .
6867	Process DOE Code JSON file .
6868	Process a DOE Code URL .
6869	Process a JSON file .
6870	Login to GitHub .
6871	Get list of members of organization
6872	Write logins and emails to a file .
6873	Connect to a stashy server .
6874	Connect to gitlab .
6875	Query repos .
6876	Return the SLOC of a git repo .
6877	Compute labor hours .
6878	Remove null values from a dictionary .
6879	Read a GQL file .
6880	Query GitHub from a file .
6881	Submit a query to GitHub
6882	Wait for a reset to happen .
6883	Count up to waitTime seconds .
6884	Load data from file .
6885	Save data to file .
6886	Create a connection to TFS .
6887	Create a project analysis client .
6888	Create a TFS Core Client .
6889	Create a TFS Git Client .
6890	Create a TFS Git Client .
6891	Get Git Repositories for a project .
6892	Get Tfvc Branches for a project .
6893	Get the number of commits for a year .
6894	Calculate the total number of commits for each week .
6895	Write last year commits to file .
6896	Configure backends .
6897	Return a MetricsInterface for the given thing .
6898	Record a timing event .
6899	Context manager for timing a stat .
6900	Decorator for timing a function .
6901	Generate a tag .
6902	Record a timing event .
6903	Add a histogram to a stat .
6904	Rollup metrics .
6905	Create a Case for enum values .
6906	Convert a DB value to an enum .
6907	Convert a value to its Python equivalent .
6908	Make sure the value is of the correct type .
6909	Resolve a path .
6910	Given a list of usls and a dictionary of lists of usls return a dictionary of lists of usls
6911	Return the mean value of the series .
6912	Mark the current rate .
6913	Return the mean rate of the counter .
6914	Mark this Derive .
6915	Send a metric .
6916	Serialize a metric .
6917	Format a metric string .
6918	Send a batch of metrics .
6919	Raise MissingSetting if option is missing .
6920	Make sure data is valid JSON .
6921	Get or set a setting .
6922	Get a mapping of ledger codes to guids .
6923	Get all available divisions .
6924	Map exact invoice numbers to foreign invoice numbers .
6925	Solve the SAT problem .
6926	View decorator .
6927	Register a form view .
6928	Register a method view .
6929	Create an API view .
6930	Register a generic API view .
6931	Register a view set handler .
6932	Create a stream from a file descriptor .
6933	Read ready data .
6934	Close the connection .
6935	Called when a connection lost .
6936	Register a watch request .
6937	Unwatch a watch .
6938	Setup a watch for a path .
6939	Setup the client .
6940	Read an event from the stream .
6941	Touch this message .
6942	Update the interval .
6943	Update the short and long intervals .
6944	Close all connections .
6945	Return True if we are in a starved state .
6946	Connect to nsqd .
6947	Query the lookupd server .
6948	Set the maximum number of in flight connections .
6949	Log a message to the logger .
6950	Register a listener .
6951	Remove a listener .
6952	Trigger an event .
6953	Publish a message to a topic .
6954	Set the feature transform
6955	Get the prediction of the model .
6956	Calculate the theta of a point .
6957	Parse a log file .
6958	Clean up temporary fastq files .
6959	Merge default adapters .
6960	Trimmomatic program .
6961	Read a depth file .
6962	Run coverage analysis .
6963	Set template path .
6964	Set main channel names .
6965	Get user channel information .
6966	Render a template .
6967	Render the template as a string .
6968	Set the input and output channels .
6969	Add a sink to the main fork list .
6970	Sets the channel to fork into .
6971	Update the attributes of this component .
6972	Set compiler channels .
6973	Set the raw inputs of the process .
6974	Set secondary inputs .
6975	Add extra inputs to the process .
6976	Parse coverage header string .
6977	Parse an assembly file .
6978	Get the content of a sequence .
6979	Filter contigs based on a set of comparisons .
6980	Return the total assembly length of this assembly .
6981	Write the filtered assembly to a file .
6982	Write the assembly report to a file .
6983	Remove inner forks .
6984	Checks for inner fork insanity checks .
6985	Runs sanity checks on a pipeline string .
6986	Parse a pipeline string .
6987	Given a fork process and a list of pipeline_list return the lane of the fork process .
6988	Return a list of lanes from a lane string .
6989	Establish a linear connection between processes .
6990	Fork a connection between two processes .
6991	Adds unique identifiers to the pipeline string
6992	Remove unique identifiers from pipeline links .
6993	Check that all required files are present .
6994	Return a mapping of header names to positions .
6995	Convert seconds to hours minutes seconds
6996	Convert a string to a float .
6997	Extract pipeline processes from log file .
6998	Clear the inspect data .
6999	Update barrier status .
7000	Retrieve a log file .
7001	Assess resource warnings .
7002	Update process stats .
7003	Parse the log file .
7004	Update the parser and trace parser .
7005	Display the overview screen .
7006	Move up or down .
7007	Move right or left .
7008	Get the last n lines from the log file .
7009	Prepare static info for the pipeline .
7010	Convert a . treeDag . json file to a dictionary .
7011	Get the hash of the run .
7012	Returns the path to the nextflow pipeline file .
7013	Split a FASTA file .
7014	Run pipeline status routine .
7015	Run Brew innuendo .
7016	Find a Brew recipe by name .
7017	List all available recipes .
7018	Validate pipeline string .
7019	Builds the upstream pipeline for the given task .
7020	Build the downstream pipeline for a task .
7021	Define pipeline string .
7022	Run auto pipeline .
7023	Return a string representation of a component .
7024	Writes a report to a file .
7025	Run trimmomatic report .
7026	Fix contig names in assembly file .
7027	Remove temporary fastq files .
7028	Parse files .
7029	Parse a log file .
7030	Iterates over all entries in the database .
7031	Get the contig id from a contig string .
7032	Get the sample - assembly data .
7033	Write report data to file .
7034	Run assembly report
7035	Parse an assembly file .
7036	Get summary stats for contigs
7037	Return a list of window labels for the given window .
7038	Calculate the GC property of a segment .
7039	Calculate GC proportion for a sliding window .
7040	Run Skesa .
7041	Write a JSON report to a file .
7042	Return the index of the last biased position .
7043	Trim range assessment .
7044	Get the optimal trim position for 5 and 3 .
7045	Retrieve summary information from a file .
7046	Check the health of a summary file .
7047	Parse bowtie log
7048	Parse process name .
7049	Add a dependency process to the pipeline .
7050	Search the tree backwards for a template .
7051	Build the header .
7052	Build the footer .
7053	Set the channels for each process .
7054	Set the init process .
7055	Set secondary channels .
7056	Set status channels from pipeline process .
7057	Return a string representation of a resources dictionary .
7058	Return a string representation of a container .
7059	Returns a string representation of the parameters .
7060	Returns a string with the merged parameters of all processes .
7061	Returns the manifest string
7062	Set the resources and containers configurations
7063	Write a DAG to a file .
7064	Render pipeline .
7065	Write configs to the project directory .
7066	Export params to stdout .
7067	Export directives to stdout .
7068	Returns a list of docker tags
7069	Build the nextflow .
7070	Set the range of kmer numbers .
7071	Run metaSPAdes .
7072	Returns a unique identifier for the report .
7073	Update the trace watch .
7074	Update the log watch .
7075	Send a live report .
7076	Initialize live reports .
7077	Close connection to the server .
7078	Convert the fastq file to a tab file .
7079	Run fastqc .
7080	Send Mash Dist to output file
7081	Main entry point .
7082	Create a . versions file
7083	Pre - process mash output .
7084	Colorize a message .
7085	Parser for the procs_dict format .
7086	Processes a list of Processes
7087	Guess the compression type of a file .
7088	Get the range of a qual string .
7089	Get a list of encodings in a range .
7090	Parse a coverage table file .
7091	Filter assembly file .
7092	Filter BAM file using samtools view .
7093	Evaluate minimum assembly coverage .
7094	Get assembly size from assembly file .
7095	Perform assembly mapping .
7096	Convert CamelCase to CamelCase .
7097	Return a map of process names to classes .
7098	Process a newick file .
7099	Quickhull algorithm .
7100	Map W to the next best sample .
7101	Apply a median filter to X .
7102	Compute the Krnl gaussian .
7103	Compute Squared Euclidean distance .
7104	Compute the covariance matrix of X and G .
7105	Apply a gaussian filter .
7106	Compute the concentration of X .
7107	Return the circular shift of X .
7108	Return the embedded space of a matrix .
7109	Format the output file .
7110	Plot boundary plots .
7111	Plot a list of labels .
7112	Plot one track .
7113	Plot a tree .
7114	Get the segments of a feature .
7115	Convert a list of feature segments into a 2D - FMC segment .
7116	Compute the similarity between two features .
7117	Fit the model to X and Y .
7118	Perform partial fitting .
7119	Read references .
7120	Find estimations in JAMS .
7121	Save estimations to a file .
7122	Get all boundary algorithms .
7123	Returns a dictionary of configuration parameters .
7124	Returns a list of all audio files in the dataset .
7125	Read hierarchy references from a jam file .
7126	Get the duration of a feature
7127	Write a mirex file .
7128	Get the path to the dataset file .
7129	Align the segmentation of a song to a beat .
7130	Estimate beats from the audio data .
7131	Read ann_beats file .
7132	Compute beat sync features .
7133	Read features file .
7134	Write the features file .
7135	Returns a list of all parameter names in this object .
7136	Compute framesync times
7137	Return a list of frame times in seconds .
7138	Get the audio file features .
7139	Select features .
7140	Preprocess features .
7141	Postprocess the data .
7142	Main entry point .
7143	Print results .
7144	Compute GTM results from estimations .
7145	Compute information gain .
7146	Process a track .
7147	Returns the name of the results file .
7148	Process a text file .
7149	Add a config variable .
7150	Compute all features for a given audio file .
7151	Process a file or directory .
7152	Compute the gaussian cost .
7153	Normalizes a logarithmic frequency .
7154	Normalize min and max values .
7155	Normalize the input data .
7156	Get the number of frames for a given duration .
7157	Remove empty segments .
7158	Sonify the audio .
7159	Synchronizes new labels with old labels .
7160	Process segmentation level .
7161	Aligns the end hierarchies of two hierarchies .
7162	Compute the distance to a node .
7163	Estimate the K - means of the K - means of the K - means
7164	Get clustered data .
7165	Run kmeans .
7166	Compute the BIC of the data
7167	r Returns the magnitude of X
7168	Convert segments . json file to bounds .
7169	Convert a JSON bounds file to a numpy array .
7170	Convert segments . json to labels .
7171	Convert a JSON file to a list of beats .
7172	Compute FFMPEG 2D
7173	Compute the labels for the given data .
7174	Filter the activation matrix .
7175	Get boundaries module .
7176	Returns a module for the given labels_id .
7177	Run hierarchical segmentation .
7178	Run flat segmentation .
7179	Run the segmentation algorithm .
7180	Process a track .
7181	Process audio files .
7182	Update the beta matrix for a single sample .
7183	Main entry point .
7184	Decorate a function as a coroutine .
7185	Return the sum of init and update .
7186	Set a task .
7187	Spool an iterable into words .
7188	Send all lines from inputstream to target .
7189	Wraps a HTTP interface .
7190	Translates from source to target .
7191	Get the translation table for a given language .
7192	Print a translation table .
7193	Remove nodes from a network .
7194	Write a network to a Pandas HDF5 file .
7195	Create a Network object from a Pandas HDF5 file .
7196	Set a variable .
7197	Aggregate accessibility variables .
7198	Get a list of node ids from the kdtree .
7199	Plot the data .
7200	Set the pois for a given category .
7201	Find nearest pois to a given category .
7202	Get the low connectivity nodes of a given impedance .
7203	Process a node .
7204	Make an OSM query .
7205	Build a node query .
7206	Perform an OSM node query .
7207	Return True if value is a regular expression .
7208	Compares the value with the expectation .
7209	Decorate a method with a fluent proxy .
7210	Compare two expressions .
7211	Trigger methods on instance .
7212	Match a request against this matcher .
7213	Get a matcher by name .
7214	Initialize a matcher .
7215	Set the request body .
7216	Set the JSON body .
7217	Set a key - value pair .
7218	Append functions to target .
7219	Trigger a request .
7220	Sets the URL matcher .
7221	Set headers .
7222	Matches header names .
7223	Expects a list of headers .
7224	Set the Content - Type header .
7225	Set the query parameters .
7226	Sets the request body .
7227	Add a JSON matcher .
7228	Add an XML matcher .
7229	Set the contents of a file .
7230	Set the status of the object .
7231	Set the error .
7232	Return a mock response .
7233	Match incoming request against registered mock matchers .
7234	Decorator to activate an async function .
7235	Set the mock engine .
7236	Enable networking .
7237	Create a mock expectation .
7238	Remove a mock .
7239	Activate mock engine .
7240	Disable the mock engine .
7241	Return True if we should use networking .
7242	Match a request against all registered mock definitions .
7243	Return a copy of this request .
7244	Activate a function or coroutine .
7245	Context manager to temporarily use a temporal engine .
7246	Add an interceptor to this engine .
7247	Remove an interceptor by name .
7248	Get a setting .
7249	Return the SQL to decrypt the column .
7250	Set the original value on the instance .
7251	Returns a placeholder for the given value .
7252	Returns a DecryptedCol instance for the given alias .
7253	Returns a placeholder for the public key .
7254	Hunt for repeated keys .
7255	Base regression function
7256	Return the inverse of the covariance matrix .
7257	Recurse through the tree .
7258	Calculate averages for all nonterminals .
7259	Propagate averages of a node .
7260	Explained variance .
7261	Compute a regression model .
7262	Find the best root of the tree .
7263	Set the integral merger rate .
7264	Calculate the number of branches in the tree .
7265	Calculate the cost of a node .
7266	Attach the merger cost to the tree .
7267	Optimize the coalescent time scale .
7268	Generate sequence from profile .
7269	Normalize a profile .
7270	Set the GTR value .
7271	Set GTR model .
7272	Set the sequence length .
7273	Assign sequences to nodes .
7274	Prepare the tree .
7275	Prepares the tree .
7276	Calculate the dist2root of the tree .
7277	Reconstruct the tree anc .
7278	Compute the branch mutation matrix for a node .
7279	Return the expanded sequence of a node .
7280	Create the Fitch profiles
7281	Return the state of a fitch .
7282	Find the intersection of two arrays .
7283	Compute the LH of the tree .
7284	The ancestral likelihood of the tree .
7285	Return the maximum branch length for a given node .
7286	Perform branch length optimization .
7287	Run the branch length optimization .
7288	Return the optimal length of a branch .
7289	Optimize sequences and branch lengths .
7290	Reconstructs the tree ancillary sequence .
7291	Return the Q matrix
7292	Create a custom GTR instance .
7293	Create a standard model .
7294	Check that Q is all zero .
7295	Given a sequence pair and a multiplicity estimate the probability that the sequence pair is t - compressed .
7296	Compute optimal t for a sequence pair .
7297	Compute optimal time t for a given sequence pair .
7298	Calculate the probability that a t - profile is a member of a group .
7299	Evolve a profile to a given temperature .
7300	Compute the log likelihood of a sequence .
7301	Set branch length mode
7302	Apply a clock filter to the tree .
7303	Plot the root to tip .
7304	Resolve multiple polytomies .
7305	Print tree log - likelihood .
7306	Add a coalescent model .
7307	Find the best root position .
7308	Assure that the tree is valid .
7309	Create GTR model .
7310	Read VCF file if necessary .
7311	Perform ancestral reconstruction .
7312	Calculate the FWHM for a given distribution .
7313	Create a delta function .
7314	Multiply a list of Distribution objects .
7315	Assign dates to the clock tree .
7316	Setup tree regression .
7317	Make a time - tree .
7318	Calculate timetree likelihood .
7319	Convert dates to human readable format .
7320	Calculate the uncertainty of a node due to rate variation .
7321	Get the maximum posterior region for a given node .
7322	Find the minimum of the interpolation object .
7323	Return the median of the interpolated grid .
7324	Return a numeric date .
7325	Create a DataQualityData from a regression data model .
7326	Return a connection to the guacd server .
7327	Close the connection .
7328	Receive an instruction .
7329	Send data to the server .
7330	Send an instruction .
7331	Handshake with Guacamole .
7332	Convert unicode to utf - 8 .
7333	Load an instruction .
7334	Encodes an argument string .
7335	Encode this instruction .
7336	Return the URL for a class .
7337	Return the URL for this instance .
7338	Return the URL for a class .
7339	Download the object .
7340	The parent object of this job .
7341	Ask the user for credentials .
7342	Interactive login .
7343	Show information about the currently logged in user .
7344	Print the user details .
7345	Return a new QuerySet with the given filters applied .
7346	Return a new chromosome filtered by a range .
7347	Return a new chromosome filtered by chromosome and position .
7348	Get a list of facets .
7349	Process filters .
7350	Return the next page .
7351	Execute a query .
7352	Migrate a dataset .
7353	Main entry point .
7354	Download all files from a vault folder .
7355	Construct a new instance from a dictionary .
7356	Logout the user .
7357	Make a request to the API .
7358	Return the child object of this task .
7359	Cancel the task .
7360	Parse the SNPFF information .
7361	Convert a row to a dictionary .
7362	Get credentials from netrc file .
7363	Save the configuration to a file .
7364	Format a value .
7365	Normalize tabular data .
7366	Build a row .
7367	Build a line .
7368	Return a list of attributes for a cell .
7369	Format a table .
7370	Migrate this dataset to another dataset .
7371	Validate a full path .
7372	Uploads a file or folder .
7373	Validate a Vault path .
7374	Validate the API host URL .
7375	Add paths to the manifest .
7376	Annotate records .
7377	Evaluate the expression .
7378	Set the format name .
7379	Register a new output format .
7380	Format output data .
7381	Adapter for tabulate .
7382	Get the user configuration directory .
7383	Return a list of system config directories .
7384	Read the default config file .
7385	Read configuration files .
7386	Returns the path to the user config file .
7387	Return a list of system config files .
7388	Return a list of additional files in this directory .
7389	Write the default configuration file .
7390	Read configuration files .
7391	Truncate a string to max_width .
7392	Replace all occurrences of replace with s .
7393	Call commands in sequence .
7394	Apply options to a command .
7395	Apply an option to a command .
7396	Initialize options .
7397	Run pep8radius .
7398	Run the command .
7399	Truncate a string .
7400	Format a list of numbers .
7401	Format a row .
7402	Create a vertical table .
7403	Generate a table .
7404	Render a template file .
7405	Return True if type is a number .
7406	Checks if the given type is a boolean .
7407	Return True if the given type is binary .
7408	Generate a key .
7409	Generate a keypair .
7410	Find all objects matching a template .
7411	Insert an image .
7412	Export a panel .
7413	Return the first day of the given weekday .
7414	Repeat a day .
7415	Repeat a day of the week between start and end .
7416	Bibweekly helper .
7417	Handle a single chunk event .
7418	Export a list of variant objects
7419	Export a list of verified variants .
7420	Export a list of MT Variants into a text file .
7421	Add or update a user .
7422	List str variants for a given institute .
7423	Retrieve a specific variant .
7424	Retrieve a specific variant .
7425	Verify a variant .
7426	Export a case .
7427	Retrieve a list of variants from Cancer .
7428	Classify a variant .
7429	View a single evaluation .
7430	Retrieve the classification for a given criterion .
7431	Upload a panel .
7432	Download verified excel files .
7433	Given a list of HGNC symbols and a list of HGNC symbols and a list of HGNC symbols and a list of HGNC symbols and a list of HGNC symbols and a list of HGNC symbols and a list of HGNC symbols and a list of HGNC symbols and a list of HGNC symbols and a list of HGNC symbols and a list of HGNC symbols and a list of HGNC symbols and a list of HGNC symbols and a list of HGNC symbols and a list of HGNC symbols and a list of HGNC symbols
7434	Add incomplete penetrance info to genes .
7435	Link genes .
7436	Make a request to the MME server .
7437	Get a list of connected nodes .
7438	Get cytoband coordinates
7439	Get the subcategory for a given category .
7440	Get the length of a given category .
7441	Get the end of a variant .
7442	Parse coordinates from a variant .
7443	Check some coordinates .
7444	Create a new panel .
7445	Update a panel .
7446	Export a panel .
7447	Edit a gene .
7448	Save a delivery report .
7449	Retrieve a list of HPO phenotypes .
7450	List whitelisted users
7451	Build a phenotype object
7452	Get information about a gene .
7453	Convert genes to JSON .
7454	List all institutes .
7455	List transcripts .
7456	Display a list of events on a given day .
7457	Return a list of variants in a case .
7458	Retrieve a list of str variants for a given institute and case .
7459	Return information about a variant .
7460	Add a variant to a variant store .
7461	Parse a variant .
7462	Return header for variants export .
7463	Get variant information from a list of genes .
7464	Given a list of genes return a dictionary of predictions .
7465	Create a variant case .
7466	Find the bai file for a bam file .
7467	Get observations for a variant .
7468	Parse a gene object .
7469	Return a string representation of a transcript .
7470	Return the end position of a variant .
7471	Return the frequency of a variant .
7472	Convert clinsig objects to human readable strings .
7473	Return a link to the thousandg variant .
7474	Generate a URL for a cosmic mutation .
7475	Generate a beacon URL for a variant .
7476	Generate a link to a variant .
7477	Return a human readable version of the spidex .
7478	Return the expected inheritance of a variant .
7479	Return a list of all callers for a given variant .
7480	Retrieve a list of variants for a given institute and case .
7481	Export CLINVAR data .
7482	Get a clinvar submission .
7483	Retrieve an ACMG variant .
7484	Submit a variant evaluation .
7485	Return an evaluation object
7486	Upload HGNC symbols from a file .
7487	Create an excel file for verified variants .
7488	Export all genes to . bed format
7489	Parse CLINSIG data .
7490	Parse a list of compounds
7491	Export all genes .
7492	Build an individual object
7493	Load variants .
7494	Show a case .
7495	List available collections .
7496	Load an institute .
7497	Update an institute .
7498	Return a file handle for a given file path .
7499	Get the net number .
7500	Get the next and prev nodes of a network .
7501	Check year and month .
7502	Check if a weekday is valid .
7503	Parse case data .
7504	Add peddy information to config data .
7505	Parse individual data .
7506	Parse individuals from a list of samples .
7507	Parse a case .
7508	Parse a PED file .
7509	Build an evaluation object .
7510	Export mitochondrial variants for a case .
7511	Return True if all terms are pathogenic .
7512	Return True if there is likely pathogenic .
7513	Return True if bs_terms and bp_terms are likely Benign .
7514	Takes a list of acmg terms and returns a list of terms that are uncertain
7515	Add gene information to the variant object .
7516	Retrieve variants from a case .
7517	Retrieve variants from Sanger .
7518	Return a variant object for a given document .
7519	Retrieve a list of gene variants .
7520	Return a list of variants that are verified .
7521	Return a list of causative IDs .
7522	Return a list of variant ids that are causative .
7523	Iterate over other causatives of a variant .
7524	Delete old variants for case .
7525	Return a list of variants overlapping the given variant .
7526	Return a dictionary of variants that have been evaluated for a given case .
7527	Get a VCF file for a region .
7528	Retrieve sample variants .
7529	Get a connection to MongoDB .
7530	Given a list of variant_ids and a dictionary of form_fields and a dictionary of form_fields and a dictionary of form_fields and a dictionary of form_fields and a dictionary of form_fields and a dictionary of form_fields and a dictionary of form_fields and a dictionary of form_fields and a dictionary of form_fields and a dictionary of form_fields and a dictionary of form_fields and a dictionary of form_fields and a dictionary of form_fields and a dictionary of form_fields and a dictionary of form_fields and a dictionary of form_fields and a dictionary of form_fields and a
7531	Given a list of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists .
7532	Given a list of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of
7533	Load transcripts from Ensembl .
7534	Load a panel
7535	Build an Exon object
7536	Delete a panel
7537	Delete all indexes
7538	Delete a user
7539	Delete scout genes collection
7540	Delete Scout exons
7541	Delete a case .
7542	List individuals .
7543	Parse matches for a patient .
7544	Show cases in institute .
7545	Load a user by email .
7546	Log a user in .
7547	Build an institute object .
7548	Delete an event .
7549	Create a new event .
7550	Get all events for a given institute and case .
7551	Get a list of events for a user .
7552	Add a phenotype to a case .
7553	Remove a phenotype from a case .
7554	Create a comment .
7555	Parse genotypes for a variant .
7556	Check if a coordinate is within a chromosome .
7557	List HPO terms .
7558	List transcripts .
7559	Load all exons
7560	Load a region .
7561	Return a queryset of all events in a given month .
7562	Get live events .
7563	Parse requirements . txt .
7564	Check if a gene exists in the database .
7565	Update a panel
7566	Create a new gene panel
7567	Export a panel .
7568	Return information about an archive .
7569	Migrate a case .
7570	Migrate a case .
7571	Research a case .
7572	Load HGNC genes .
7573	List HPO terms
7574	Create a Flask application .
7575	Configure extensions .
7576	Register blueprints .
7577	Configure the application .
7578	List aliases for a given symbol
7579	Build panel .
7580	Export verified variants for institute .
7581	Export variants .
7582	Create a VCF entry from a variant object .
7583	Test if mongod is running .
7584	Generate a md5 hash of a list of arguments .
7585	Initialize the application .
7586	Setup the database .
7587	Run scout index .
7588	Setup database .
7589	Run scout setup demo
7590	Setup database connection .
7591	List institutes .
7592	Parse genetic models .
7593	List available panels .
7594	Add institute to database .
7595	Update an institute .
7596	Fetch an institute by ID .
7597	Return True if date is a valid date .
7598	Get a datetime object from a date string .
7599	List HPO genes .
7600	Parse a rank score entry .
7601	Add a user to an institute .
7602	Check connection to MongoDB .
7603	Initialize the application .
7604	Load a delivery report .
7605	Add a user to the database .
7606	Run pileup .
7607	Load exons from Ensembl .
7608	Update compounds for a case .
7609	Add gene links to a gene object
7610	Show gene information .
7611	Parse a HGNC gene line .
7612	Parse hgnc genes .
7613	Get an open clinvar submission for a user and institute .
7614	Update a clinvar submission .
7615	Get the clinvar_subm_id of a submission .
7616	Add new variants and case data to clinvar submission .
7617	Update the status of a clinvar submission .
7618	Get all clinvar submissions for a user and institute .
7619	Delete a clinvar object .
7620	Convert a case ID to a dictionary of CLIN variables .
7621	Parse HPO OBO .
7622	List genes .
7623	Show a list of genes .
7624	List genes .
7625	Check if panels exist in database .
7626	Load variants for a case .
7627	Load a case from the database .
7628	Decorator to render a template .
7629	Show details about an institute .
7630	Return a list of user institutes .
7631	Get the HGNC ID for a gene .
7632	Update a panel .
7633	Load all disease terms
7634	Load the disease terms from omim .
7635	Parse the frequencies of a variant .
7636	Parse the frequency of a variant .
7637	Parse SV frequencies .
7638	List users .
7639	Build a HGNC gene .
7640	Load a panel .
7641	Load OMIM panel .
7642	Compares two mim panels .
7643	Update the version of the Mim database entry .
7644	Add a panel to the database .
7645	Get a panel by ID .
7646	Delete a panel .
7647	Fetches a gene panel .
7648	List gene panels .
7649	Convert gene to panels
7650	Update a panel .
7651	Add a pending action to a panel .
7652	Apply pending changes to panel .
7653	Return a set of clinical symbols for a given case .
7654	List cases .
7655	Emit a record .
7656	Load indexes from the database .
7657	Update indexes .
7658	Drop all indexes
7659	Build a variant query .
7660	Build a mongo query .
7661	Make clinsig query
7662	Add coordinates to the query
7663	Add gene - related parameters to the query .
7664	Drops whole database .
7665	Parse a panel from a CSV file .
7666	Build clnsig object
7667	Load HGNC gene bulk .
7668	Load transcript bulk .
7669	Load multiple exon objects into the database .
7670	Get a gene by HGNC identifier .
7671	Get the ID of a HGNC symbol .
7672	Get a list of genes for a given HGNC symbol .
7673	Fetches all genes for a given build
7674	Return the number of genes in the database .
7675	Drop the hgnc_gene collection .
7676	Drop the transcripts collection .
7677	Drop the exons collection .
7678	Fetches all ensembl transcripts
7679	Convert HGNC symbols to gene objects
7680	Find gene by alias .
7681	Fetches all genes by alias
7682	Fetches all ensembl genes
7683	Return the HGNC symbol for a given HGNC symbol .
7684	Add hgnc_id to gene
7685	Get a list of intervals that overlap the specified genes .
7686	Update the omim panel
7687	List cases in institute .
7688	Get a specific case .
7689	Get matches from MME server .
7690	Matchmaker endpoint .
7691	Delete a case from MME .
7692	Show a case report .
7693	Generate a case report .
7694	Diagnose a case .
7695	List phenotypes .
7696	List phenotypes actions .
7697	Edit an event .
7698	Change the status of a case .
7699	Assign a case to an institute .
7700	List HPO terms .
7701	Mark a variant as validated .
7702	Mark a variant as causative .
7703	Download a delivery report .
7704	Share a case .
7705	Reruns a case .
7706	Open a research .
7707	Deliver a vcf2cytosure file from a directory .
7708	Download a multiqc report .
7709	Return a list of cases matching a case query .
7710	Return the content of a case report .
7711	Return the contents of a coverage report .
7712	Return a list of clinvar submissions for a given user and institute .
7713	Export the mt excel files for a case .
7714	Update a case s synopsis .
7715	Query phenomizer for diseases .
7716	Convert a VCF to cytosure .
7717	Return a dict containing the institute and case of a case .
7718	Return a list of variants with Sanger ordered by case .
7719	Add a MME to a case
7720	Delete multiple patients .
7721	Get matches from the MatchMaker server .
7722	Matches a case against a list of patients .
7723	Update the omim gene panel
7724	Parse the INFO of a variant .
7725	Build a transcript
7726	Load an institute into the database .
7727	Parse CADD information .
7728	Scout case .
7729	Update a variant .
7730	Update variant rank for all variants
7731	Update variant compounds .
7732	Update compounds in a variant .
7733	Update compounds in the variant collection .
7734	Update the compounds of a case .
7735	Load a single variant .
7736	Upsert a variant .
7737	Load variants bulk .
7738	Assign a user to a case .
7739	Share a case .
7740	Diagnose a case .
7741	Mark a case as checked .
7742	Order verification for variant .
7743	Get all sanger ordered variants .
7744	Validate a variant .
7745	Mark a variant as causative .
7746	Update dismiss variant .
7747	Update the ACMG for a variant .
7748	Given a chromosome position and a reference position and a variant type return a dictionary of the parsed ids .
7749	Parse a simple ID .
7750	Generate a md5 key for a document .
7751	Convert a panel .
7752	Create a new variant id from a variant object .
7753	Return the number of cases in the database .
7754	Update dynamic gene list
7755	Fetches a case .
7756	Delete a case .
7757	Add a case to the database .
7758	Replace a case .
7759	Update a case .
7760	Submit an evaluation .
7761	Get all evaluations for a given variant .
7762	Parse Ensembl transcripts .
7763	Parse Ensembl gene request .
7764	Parse Ensembl transcript request .
7765	Parse Ensembl line .
7766	Parse ensembl genes from a file .
7767	Parse Ensembl exons .
7768	Parse Ensembl exon request .
7769	Initialize a logger .
7770	Parse OMIM line .
7771	Parse OMIM morbid .
7772	Extract phenotypes from genemap file .
7773	List Mim genes .
7774	Convert a string to a number .
7775	Format a month .
7776	Format a day .
7777	Format a month name .
7778	Popover helper .
7779	Get panel info .
7780	Parse a gene dictionary .
7781	Parse gene lines .
7782	Parse gene panel .
7783	List diseases .
7784	Drop HPO terms
7785	Get a list of users .
7786	Parse the conservation data for a variant .
7787	Parse the conservation of a variant .
7788	Get general case information .
7789	Return a list of cases grouped by status .
7790	Return a JSON response .
7791	Get year and month .
7792	Check for cancelled events .
7793	Fetch a HPO term .
7794	Search HPO terms .
7795	Get a disease term .
7796	Return a list of disease terms
7797	Load a disease term into the database .
7798	Given a list of HPO terms generate a sorted list of gene IDs .
7799	Read an HDF5 file .
7800	Setup frequencies axis
7801	Setup time axis
7802	Read a filterbank file .
7803	Compute the longitude and latitude of the station .
7804	Blank a DC bin .
7805	Print information about the file .
7806	Calculate the extent of the plot .
7807	Plot waterfall plot .
7808	Plot time series .
7809	Write the filterbank to a file .
7810	Calibrate N1 bandpass .
7811	Return the average over each coarse channel .
7812	Apply Mueller transformation to data arrays
7813	Calculate differential gain and phase from noise diode measurements
7814	Calculate the fracpols of a string .
7815	Write waterfall and cross - pols to a file .
7816	Find the closest value in xarr to val .
7817	Rebin a 2D array .
7818	Unpack a numpy array .
7819	Calculate the difference between the noise diode and the stokes .
7820	Plot stokes diode .
7821	Plot calibrated noise diode data .
7822	Plot the gain offsets for a cross - section .
7823	Open a file .
7824	Setup selection range .
7825	Calculate the size of the selection
7826	Calculate the shape of the selection
7827	Set up channels based on f_start and f_stop .
7828	Set the frequencies of the channels .
7829	Returns a numpy array with the start and stop times of the integrations
7830	Populate frequencies array
7831	Calculate the number of coarse channels .
7832	Calculate the number of blobs of a given dimension .
7833	Returns True if the data array is heavy .
7834	Read data from file .
7835	Read all data from the file .
7836	Read a row from the file .
7837	Read data from the container .
7838	Update header .
7839	Print information about the file .
7840	Write data to a file .
7841	Write the container to an HDF5 file .
7842	Write the filterbank to HDF5 light .
7843	Get the blob dimensions for a chunk .
7844	Get the chunk dimensions of the file .
7845	Grab data from the plot .
7846	Command line tool for creating spectra from GuppiRaw files .
7847	Read the first header .
7848	Find the number of data blocks in the file .
7849	Print stats from the next data block .
7850	Plot a histogram .
7851	Generate a filterbank header .
7852	Find the size of the header .
7853	NAME matchfils . py
7854	Command line tool for creating HDF5 Raw files .
7855	Fold calibrated time series .
7856	Integrate a waterfall .
7857	Calculate calfluxes from calflux and calfreq .
7858	Get the center frequency of a channel .
7859	Calculate noise diode ON and OFF spectra .
7860	Calculate the diode spectrum of a calibrator .
7861	r Calculate the tsys of a diode .
7862	Calibrate fluxes using the diode spectrum
7863	Return the length of the header .
7864	Check if file is a filterbank file .
7865	Fix a header string .
7866	Generate a header string for a SIGPROC file .
7867	Convert angle in degrees to sigproc angle
7868	Calculate the number of integers in a file .
7869	Return a dictionary representation of the traceback .
7870	Create a subparser for a record type .
7871	Create a zonefile line parser .
7872	Remove comments from text .
7873	Add a default name to text .
7874	Parse a line .
7875	Parse a zone file .
7876	Parse zone file .
7877	Quote a field .
7878	Parse Avro schema string .
7879	Convert a list of classes into a Python package .
7880	Return the source code for a class .
7881	Decorator to disable auto - store .
7882	Convert a record to JSON compatible .
7883	Load a record from a dictionary .
7884	Load a json record .
7885	Add a schema to the registry .
7886	Get a schema by name .
7887	Return a dictionary representation of this variable .
7888	Add a mixin to a class .
7889	Create a new record from a class .
7890	Return a schema dictionary for the given record .
7891	Get the root schema dictionary for a record .
7892	Read a sequence of lines from a file .
7893	Write multiple outputs to a file .
7894	Push a value onto the front of a dictionary .
7895	Perform a search query .
7896	Perform a raw filter .
7897	Return a list of all entities with the given attributes .
7898	Get entity from href .
7899	Given a quote return the closest quote to it .
7900	Escape a string .
7901	Return the elementary rotation matrix for a given rotation angle .
7902	Construct a covariance matrix from the given vector .
7903	Calculate the average sky error for a given point .
7904	Calculate parallax error
7905	G magnitude error
7906	r G magnitude error in Eom
7907	Make a plot of the magnitude error .
7908	Return the average number of traits of a given beta .
7909	Calculate the angular distance between two points .
7910	Transform cartesian coordinates .
7911	Transform spherical coordinates to polar coordinates .
7912	Transform the covariance matrix to a 3x3 matrix .
7913	Returns the error scaling factor for the given observable and beta .
7914	Make a plot .
7915	Make a plot .
7916	Return a function that returns True if any of the given functions evaluates to True .
7917	Decorator for helpful failure messages .
7918	Unquote a string .
7919	Apply a function to each item in the collection .
7920	Return a new QuerySet with elements that don t match the given function .
7921	Filter items by a function .
7922	Apply a function to each item in the collection and return a new Collection .
7923	Return a new Collection with items dropped while a function returns True .
7924	Zip together the iterators and return a new Collection .
7925	Find a node .
7926	Return a list of paths for serach .
7927	Iterate over a group of characters .
7928	Convert regdescr into a list of register options .
7929	Format an event string .
7930	Build a list of minimal runs from a list of events .
7931	Report results .
7932	Print results to file .
7933	Print a summary of the results .
7934	Clean up code .
7935	Round to next power of base .
7936	Given a list of indices and a block size return a list of blocks with the given size .
7937	Calculate cache access .
7938	Calculate cycles for each cache level .
7939	Analyze the kernel .
7940	Perform IACA analysis .
7941	Strip comments and uncomment lines .
7942	Remove unreferenced labels .
7943	Select the best block in blocks .
7944	Select a pointer increment .
7945	Select a block from the assembly file .
7946	Insert markers between two lines .
7947	Perform ICAC instrumentation .
7948	Main entry point .
7949	Simulate a model .
7950	Return a generator that yields integers between start and stop .
7951	Get the last modification time of a directory .
7952	Check command line arguments .
7953	Main entry point .
7954	Main entry point .
7955	Return a sympy . Symbol representing a positive integer .
7956	Transform multidimensional array declaration to 1D array declaration .
7957	Transform a multidimensional reference to a 1D reference .
7958	Find the type of a node .
7959	Decorator to turn a function into an iterable .
7960	Check that all variables have the same datatype .
7961	Set a constant .
7962	Substitutes constants in an expression .
7963	Return a dictionary of variable sizes .
7964	Calculate relative offset for a variable .
7965	Remove duplicate access variables .
7966	Return the total length of each iteration .
7967	Get loop stack .
7968	Return a list of free symbols in the index .
7969	Compiles a dictionary of sympy accesses .
7970	Return a dictionary mapping variable names to their relative distances .
7971	Convert global iterator to indices .
7972	Return an iterator over all global variables .
7973	Convert indices to global iterator .
7974	Returns an iterator over all global iteration variables .
7975	Print kernel information .
7976	Print information about the variables .
7977	Print the constants information .
7978	Print kernel code .
7979	Convert a math AST to a sympy symbol .
7980	Get the offsets for a given array reference .
7981	Get the basename of a reference .
7982	Get the index type of a loop .
7983	Build list of const declarations .
7984	Return a list of array declarations .
7985	Return a list of for loops in the kernel .
7986	Build array declarations from kernel ast .
7987	Find the outermost loop .
7988	Build array initializations .
7989	Build a dummy function call .
7990	Build a kernel function declaration .
7991	Build a list of scalar declarations .
7992	Get kernel code .
7993	Build a kernel call .
7994	Get the main code for this kernel .
7995	Perform ICAA analysis .
7996	Build an executable .
7997	Convert a string into a sympy expression .
7998	Generate a unique identifier .
7999	Get the last modification time of the file .
8000	Return a cachesim . CacheSimulator object for this memory hierarchy .
8001	Get the bandwidth of the benchmark .
8002	Get compiler name and flags .
8003	Parse a perfctr event string .
8004	Enforce no overlap .
8005	Get the path to the header file .
8006	Align an iteration with a cl boundary .
8007	Returns a list of load percentages
8008	Return a list of hits for each cache level .
8009	Returns a list of misses for each cache level .
8010	Get the number of stores in the machine .
8011	Return a list of evicts per level .
8012	Get information about the cache .
8013	Fix an environment variable .
8014	Configures the argument group .
8015	Report results .
8016	Parse the README . md file .
8017	Schedule a retry .
8018	Build a purchase item
8019	Record a purchase .
8020	Get course content
8021	Get course content from ecommerce .
8022	Update unenrolled list
8023	Send a course refund notification .
8024	Send an offer assignment notification email .
8025	Get the logger configuration .
8026	Retry an order .
8027	Fulfill an order .
8028	Return a SailthruClient object for the given site code .
8029	Get the value of a key .
8030	Set a value in the cache .
8031	Get the value of a configuration variable .
8032	Get the override filename for a given variable .
8033	Get a value by version .
8034	Get Eplus version .
8035	Return a dictionary of file references .
8036	Populate from json data
8037	Returns a list of all external files .
8038	Set default values for all tables .
8039	Prepare extensible cycles .
8040	Get the name of an extended field .
8041	Return a dictionary of short references for each file .
8042	Returns the value of the specified column .
8043	Update the value of a field .
8044	Update a record .
8045	Set the default values for this field .
8046	Add fields to the record .
8047	Pop an item off the list .
8048	Insert value at index .
8049	Delete this record .
8050	Register a record hook .
8051	Register a link .
8052	Create a regex for a given intent .
8053	Return the remaining duration of a given time .
8054	Serialize the event .
8055	Make an HTTP request .
8056	Get a list of available services .
8057	Try to create a directory .
8058	Configure a service .
8059	Register a CA .
8060	Set the state of a recording .
8061	Update event status .
8062	Update the agent state .
8063	Return the location of a configuration file .
8064	Update the configuration .
8065	Check if the agent is running .
8066	Initialize the logger .
8067	Home page .
8068	Serve an image .
8069	Run all modules .
8070	Parse an ICAL vCal file .
8071	Get the current schedule .
8072	Main control loop .
8073	Main control loop .
8074	Make an error response .
8075	Make a data response .
8076	Get the internal state of the service .
8077	List upcoming events .
8078	Get event by uid
8079	Delete an event .
8080	Modify an event .
8081	Extracts configuration parameters from the given properties string .
8082	Upload media package
8083	Start recording .
8084	Return a fragment that can be used to render the template .
8085	Return a list of all resources in this list .
8086	Return a dictionary representation of this resource .
8087	Create a fragment from a dict .
8088	Add content to the message .
8089	Add a resource .
8090	Add a resource url .
8091	Initialize js function .
8092	Convert a list of resources to HTML .
8093	Convert a resource to HTML .
8094	Returns a JSON response .
8095	Render a standalone HTML response .
8096	Render a fragment to a standalone HTML .
8097	Calculate the FDR for the given parameters .
8098	Convert values to one dimensional array .
8099	Lookup values from error table .
8100	Compute the posterior chromatogram hypothesis for a given experiment .
8101	Generate final error table .
8102	Extract summary errors from a DataFrame .
8103	Computes the error statistics for the given target scores and decoy scores .
8104	Find a cutoff based on the error statistic .
8105	Score an XGBoost dataset .
8106	Infer the peptides from the input file .
8107	Infer peptides from a file .
8108	Infer proteins from a protein file .
8109	Subsample an OSW file .
8110	Reduce input file to output file .
8111	Backpropagate input file to output file .
8112	Filter SMASS files .
8113	Get a group by ID .
8114	Create a group .
8115	Delete a group .
8116	Get a list of groups members .
8117	Update members of a group .
8118	Returns the number of effective members of a group .
8119	Check if a user is an effective member of a group .
8120	Modify the configuration file .
8121	Create a dataset .
8122	Decrypt contents .
8123	Get stdin .
8124	Get stdout .
8125	Get stderr .
8126	Get debug output .
8127	Context manager for with_stdin .
8128	Context manager for with_stdout .
8129	Context manager for with_stderr .
8130	Context manager for with_subprocess .
8131	Empty account .
8132	Empty a container .
8133	Decorate a function to write to stdout .
8134	Decorate a function with a stderr filed .
8135	Log an error message .
8136	Print help message .
8137	Print usage information .
8138	Print version information .
8139	Make a request .
8140	Create a new account .
8141	Delete an account .
8142	Put a container .
8143	Head an object .
8144	Get an object .
8145	Put an object in a container .
8146	Post an object to a container .
8147	Resolve an option .
8148	Return a copy of this context .
8149	Write headers to file .
8150	Show authentication information .
8151	Generate a temporary URL .
8152	Quote a string .
8153	List containers .
8154	Get a client .
8155	Encrypt with AES256CBC .
8156	Decrypt data using AES256CBC .
8157	Upload a directory structure .
8158	Put an account .
8159	Put a container .
8160	Get the manifest body .
8161	Create a container .
8162	Retrieve a tempurl .
8163	Print the X - Trans ID .
8164	Print help for a command .
8165	Check if buffer is empty .
8166	Encrypt data with AES256CBC .
8167	Get the status of a GitHub repository .
8168	Get a specific pull request .
8169	Get all pull requests for a given repo .
8170	Mark all slider items as published
8171	Returns a list of slider items
8172	Render a hero slider .
8173	Acquire readers lock .
8174	Release all readers .
8175	Acquire the writer lock .
8176	Add a task to the registry .
8177	Remove a task from the registry .
8178	Get a task by ID .
8179	Return a list of tasks sorted by task_id .
8180	Return a dictionary representation of the configuration .
8181	Create a TaskConfig object from a dictionary .
8182	Execute a perceval job .
8183	Initialize the archive manager .
8184	Run the job .
8185	Execute the fetch command .
8186	Create an index .
8187	Create mapping in ElasticSearch .
8188	Encoder for JSON requests .
8189	Write items to writer .
8190	Add a task to the scheduler .
8191	Remove a task from the scheduler .
8192	Get all queued items .
8193	Validate task arguments .
8194	Parse the archive args .
8195	Perform a job .
8196	Schedule a job task .
8197	Cancel a job task .
8198	Run the job listener .
8199	Listen for new jobs .
8200	Schedule the scheduler .
8201	Schedule a task .
8202	Cancel a task .
8203	Handle a successful job .
8204	Handle a failed job .
8205	Build arguments for a job .
8206	Get a secret .
8207	Register the view .
8208	Register a view .
8209	Reverse the action of a URL .
8210	Get the view name .
8211	Build a version string .
8212	Resolve a key .
8213	Get the engine for a given scheme .
8214	Parse a database schema path .
8215	Parse a database configuration from a URL .
8216	Parse a database url .
8217	Create a new user .
8218	List users .
8219	Create a new password .
8220	Add the detail view name to the URL field .
8221	Parse a boolean value .
8222	Parse an integer .
8223	Return the parser for the given type .
8224	Get Django settings .
8225	Create a ModelDict from a model .
8226	Base64 encode a string .
8227	Create a field from a dictionary .
8228	Create a validator from a dictionary .
8229	Cartesian product of parameters .
8230	Find unique points in a list of explored parameters .
8231	Change the logging kwargs .
8232	Decorate a function with a simple logging configuration .
8233	Try to create directories for filename .
8234	Return a list of strings
8235	Rename a log file .
8236	Set the logger .
8237	Extract replacements from trajectory .
8238	Show progress bar .
8239	Check and replace parser arguments .
8240	Convert a parser to a StringIO object .
8241	Find multiproc options .
8242	Find the multiproc dictionary .
8243	Check the log config .
8244	Handle config parsing .
8245	Given a dictionary of log config return a new dictionary .
8246	Create logging handlers and tools .
8247	Cleans up all resources .
8248	Start redirection .
8249	Write a string to the stream .
8250	Check if two results are equal .
8251	Check if two parameters are equal .
8252	Decorate a function to run in a manual way .
8253	Decorator to mark a function as deprecated .
8254	Mutually exclusive decorator .
8255	A decorator to mark a function as deprecated .
8256	Retry a function .
8257	Add prefix naming to a class .
8258	Add parameters to a trajectory
8259	Run a network .
8260	Compute the Euler Scheme
8261	Add parameters to the trajectory
8262	Calculate the lorenz diffusion coefficient
8263	Create a storage service .
8264	Factory for creating storage instances .
8265	Add parameters to a trajectory
8266	Calculate the difference between two values
8267	Compact HDF5 file .
8268	Return True if the trajectory is in a group .
8269	Build the model eqs for a given trajectory .
8270	Pre - build the model .
8271	Build the model .
8272	Build the model .
8273	Pre - build the network .
8274	Build the network .
8275	Add parameters to trajectory .
8276	Compute the Fano factor for a given neuron .
8277	Compute the mean Fano factor for each neuron .
8278	Compute mean fano factor over all exc neurons
8279	Add monitors to network .
8280	Add monitors to the network .
8281	Make a folder for a given trajectory .
8282	Plot a result .
8283	Print the spike raster plot .
8284	Plots the results of the analysis .
8285	Get batch number .
8286	Explore a batch
8287	The variables of this node .
8288	Get the node function .
8289	Rename the name .
8290	Set the details of this node .
8291	Convert a node to a message .
8292	Remove a subtree .
8293	Delete a node .
8294	Remove a node or leaf .
8295	Remove a node along a branch .
8296	Translate a shortcut .
8297	Add prefix to split names .
8298	Determine the type of a node .
8299	Add a generic item .
8300	Add a node to the tree .
8301	Create a link under an act node .
8302	Check that the names are valid .
8303	Create an instance of a group .
8304	Create a parameter or a result node .
8305	Set details tree node .
8306	Iterate over all nodes in the tree .
8307	Make a child iterator for a node .
8308	Recursive traversal bfs .
8309	Perform a very fast search .
8310	Search a node by key .
8311	Given a start node and a split name find all items that start with the split name .
8312	Get the KIDS of this node .
8313	Add a group from storage .
8314	Add a leaf from storage .
8315	Return a list of directory names .
8316	Return a Bunch of debug information .
8317	Get the parent of this node .
8318	Add a group .
8319	Add a link .
8320	Remove a link from the network .
8321	Add a leaf node .
8322	Remove a child from this node .
8323	Remove a child from the group .
8324	Return True if item is in the trajectory .
8325	Get the default value of a field .
8326	Get children .
8327	Return a copy of the groups
8328	Get the leaves of the tree .
8329	Get links .
8330	Store a child of this group .
8331	Store this trajectory in a file .
8332	Load a child trajectory .
8333	Load this trajectory .
8334	Add a parameter group .
8335	Add a parameter .
8336	Add a result group .
8337	Add a result group .
8338	Add a derived parameter group .
8339	Add a derived parameter .
8340	Add a config group .
8341	Add a configuration group .
8342	Evaluate the fitness of a single individual .
8343	Add commit variables to traj .
8344	Make a git commit .
8345	Flatten a nested dictionary .
8346	Flatten a nested dictionary .
8347	Displays a progress bar .
8348	Get the argspec of a function .
8349	Given a function and a dictionary of keyword arguments return a dictionary of matching keyword arguments .
8350	Format a timestamp as a string .
8351	Convert a port number to a TCP port .
8352	Raise an IOError if path already exists .
8353	Reset the progress bar .
8354	Get the remaining time for a given index .
8355	Return a copy of the dictionary .
8356	Remove an annotation .
8357	Return a string representation of the annotation .
8358	Make an ordinary result .
8359	Make a shared result .
8360	Create shared data .
8361	Request data from the service .
8362	Get the data node .
8363	Return True if the item is a supported type .
8364	Create shared data .
8365	Manipulate the data in the trajectory .
8366	Lock a client .
8367	Send a shutdown signal .
8368	Close the connection .
8369	Start the client .
8370	Send a REQ and replicate it .
8371	Acquire a lock .
8372	Listen for ZMQ messages .
8373	Put data into the queue .
8374	Detect the forked process .
8375	Handle data messages .
8376	Run the worker .
8377	Receive data from the queue .
8378	Receive data from the socket .
8379	Store data in the storage service .
8380	Store a message in the references dictionary .
8381	Store a list of references .
8382	Decorate a function to parse config data .
8383	Collect options from a section .
8384	Return a dictionary of configuration parameters .
8385	Interpret the config file .
8386	Add parameters to trajectory .
8387	Convert a rule number to binary form .
8388	Make a random initial state .
8389	Plot a pattern .
8390	Generate a cellular automaton .
8391	Main entry point .
8392	Process a signal update .
8393	Get the overview group .
8394	Load data from the server .
8395	Store a message .
8396	Load multiple items from an iterable .
8397	Check HDF5 properties .
8398	Store multiple items at once .
8399	Close the HDF5 file .
8400	Extract file information .
8401	Backup a trajectory .
8402	Read a row from a trj file .
8403	Prepare trajectory for merging .
8404	Load the meta data for a trajectory .
8405	Load a sub - branch .
8406	Raises a VersionMismatchError if the current trajectory version is different from the given one .
8407	Fill the run table .
8408	Load exploration data for a trajectory .
8409	Store the explorations of a trajectory .
8410	Make a list of overview tables .
8411	Store a trajectory .
8412	Store a sub - tree branch .
8413	Create a leaf node .
8414	Load nodes from a trajectory
8415	Store trajectory nodes in hdf5 file .
8416	Given an instance of a HDF5Table and an instance of a HDF5Table and an instance of a HDF5Table and an instance of a HDF5Table and an instance of a HDF5Table and an instance of a HDF5Table and an instance of a HDF5Table and an instance of a HDF5Table and an instance of a HDF5Table and an instance of a HDF5Table and an instance of a HDF5Table and an instance of a HDF5Table and an instance of a HDF5Table and an instance of a HDF5Table and an
8417	Get or create a table .
8418	Get a node by name .
8419	Set all attributes to recall natives .
8420	Recall native types .
8421	Add or modify a row .
8422	Insert all keys in insert_dict into row .
8423	Extracts a dictionary from a HDF5 file .
8424	Cut a string to a maximum length .
8425	Create or get a group .
8426	Create or get a group .
8427	Store annotations on node .
8428	Load annotations from node .
8429	Store a trajectory group .
8430	Load a trajectory group .
8431	Load all annotations for a trajectory node .
8432	Extract missing flags .
8433	Add a summary to the PGM .
8434	Add meta info to the PGM .
8435	Create a HDF5 group from a dictionary .
8436	Store a parameter .
8437	Write data into a shared array .
8438	Write a shared PGM table .
8439	Write a dictionary as a table .
8440	Write data to a PGM file .
8441	Write data into other arrays .
8442	Write data into an array .
8443	Delete a link .
8444	Delete a parameter or a group .
8445	Write data into a pytables table .
8446	Create a pytables table description
8447	Get a table column .
8448	Get the length of the longest string .
8449	Load data into a dict .
8450	Read a dictionary of lists .
8451	Read shared data .
8452	Read a PGM table .
8453	Read a HDF5 array .
8454	Load a trajectory .
8455	Make a set name .
8456	Set properties .
8457	Add to the list of dynamic imports .
8458	Set the crun parameter .
8459	Iterate over runs in the trajectory .
8460	Shrink the trajectory .
8461	Set a parameter in the trajectory .
8462	Preset a parameter .
8463	Prepare the experiment .
8464	Get a value from a run .
8465	Check if a run is completed .
8466	Remove explored parameters from disk .
8467	Copies a node from the trajectory
8468	Explore a trajectory .
8469	Update the run information dictionary .
8470	Add information about a run .
8471	Lock all parameters .
8472	Lock all derived parameters .
8473	Finalize the run .
8474	Load skeleton .
8475	Load a file .
8476	Backup a trajectory .
8477	Make a list of reversed wildcards .
8478	Merge multiple trajectories .
8479	Merge a trajectory with another trajectory .
8480	Renames a full name .
8481	Merge derived parameters from another trajectory .
8482	Merge links from other_trajectory into this trajectory .
8483	Merge config with other trajectory
8484	Merge two trajectories .
8485	Merge results from other_trajectory into rename_dict .
8486	Migrate the trajectory to another storage service .
8487	Store this trajectory .
8488	Restore default parameters .
8489	Set explored parameters to the given index .
8490	Make a single run .
8491	Return a list of run names .
8492	Get the run information dictionary .
8493	Find the index of a parameter in the parameter list .
8494	Start a run .
8495	Finalize run .
8496	Set start time .
8497	Set the finish time of the run .
8498	Construct an instance of a class .
8499	Return an item dictionary from a parameter dictionary .
8500	Finalize the run .
8501	Get the configuration dictionary .
8502	Return a dictionary of results .
8503	Store items from an iterator .
8504	Load items from disk .
8505	Remove items from the network .
8506	Delete a list of links .
8507	Remove all children .
8508	Delete items from the trajectory .
8509	Pool a single run .
8510	Wrapper for _frozen_pool_single_run .
8511	Configure pool .
8512	Configure frozen pool .
8513	Process a single run .
8514	Configure frozen SCOOP .
8515	Run a single run .
8516	Configure logging system .
8517	Configure niceness .
8518	Handle sigint handling for a single run .
8519	Run a single run .
8520	Wrap the handling function .
8521	Load a class from a string .
8522	Create a class .
8523	Return the length of the range .
8524	Return a string representation of the current value .
8525	Checks whether two values are equal .
8526	Get the range of this parameter .
8527	Explore the given iterable .
8528	Expands the range of this parameter .
8529	Perform sanity checks on a list .
8530	Store the current state of the object .
8531	Load data from disk .
8532	Load from a dictionary .
8533	Return True if val1 equals val2 .
8534	Check if data is a supported matrix .
8535	Serialize a sparse or CSR matrix .
8536	Build a tuple of the names of the parameters .
8537	Reconstruct a sparse or CSR matrix .
8538	Load data from a dictionary .
8539	Store data in pickle format .
8540	Load data from disk .
8541	Translate key .
8542	Return a string representation of the value .
8543	Convert to a dictionary .
8544	Set positional values .
8545	Get a single result .
8546	Set a single result .
8547	Returns True if the given item is supported .
8548	Return a dictionary representation of this parameter .
8549	Load parameters from a dictionary .
8550	Set a single result .
8551	Store the data in a dictionary .
8552	Load data from a dictionary .
8553	Merge all files in folder
8554	Upload a file .
8555	Download a file .
8556	Create a session .
8557	Merge trajectories .
8558	Start saga jobs .
8559	Multiply two reals
8560	Run the Euler integration .
8561	Process the results of a neuron postprocess .
8562	Add parameters to a trajectory
8563	Add exploration of I and tau_ref
8564	Execute network pre run .
8565	Execute network run .
8566	Extract subruns from trajectory .
8567	Execute a network run .
8568	Add parameters to the trajectory .
8569	Pre - run the network .
8570	Run the network .
8571	Run the network simulation .
8572	Make filename from trajectory
8573	Return the next element in the chain .
8574	Merge all trajectories in a folder .
8575	Handle SIGINT .
8576	Read configuration from file .
8577	Request PIN from Ecobee .
8578	Request tokens from Ecobee .
8579	Refreshes the access token .
8580	Get thermostat data .
8581	Write tokens to file .
8582	Set the HVAC mode .
8583	set fan minimum on time
8584	Set hold temperature .
8585	Set climate hold .
8586	Delete a vacation
8587	Resumes a program .
8588	Send a message .
8589	Set the humidity level .
8590	Generate a delay to enter in SELECTING .
8591	Generate a random timeout resending .
8592	Generate a timeout request for renew .
8593	Generate a random renewing time .
8594	Return a dictionary of all attributes of this FSM .
8595	Reset all attributes .
8596	Get the timeout for a given state and function .
8597	Set the timeout of a function .
8598	Send a Discover packet .
8599	Select an offer .
8600	Send a DHCP request .
8601	Set the timeouts for this client .
8602	Process an ACK packet .
8603	Process a DHCPNAK packet .
8604	Initialize state .
8605	Set state to BOUND .
8606	Enter RENEWING state .
8607	Rebind script .
8608	End the script .
8609	Error state .
8610	Wait for response to select .
8611	Raise an error if there are too many requests .
8612	Raise a RENEWING exception if there are too many request retries .
8613	Raise REBINDING .
8614	Receive an offer .
8615	Process incoming ACK .
8616	Process NAK .
8617	Process an ACK packet .
8618	Process NAK .
8619	Handle ACK rebinding .
8620	Handle NAK rebinding .
8621	Called when renewing the lease .
8622	Set a query parameter .
8623	Add a value to the query string .
8624	Remove a query parameter .
8625	Get status of supervisor .
8626	Create output dictionary .
8627	Main entry point .
8628	Validate a message .
8629	Read TDMS file .
8630	Add deformation to chn_names .
8631	Convert TDMS file to FCS file .
8632	Check if this diff is equal to another .
8633	Create a patch .
8634	Delete the next patch .
8635	Delete a patch .
8636	Check if a file is in a patch .
8637	Backup a file
8638	Add a file .
8639	Run a Quilt command .
8640	Create the directory .
8641	Copy this directory to another directory .
8642	Link this file to another file .
8643	Copy this file or directory .
8644	Return a Directory object for this file .
8645	Backup a file .
8646	Refresh a patch .
8647	Unapply a patch .
8648	Unapply the top patch .
8649	Unapply all applied patches .
8650	Apply a patch to the series .
8651	Apply the next patch to the series .
8652	Apply all patches to the series .
8653	Read the series file .
8654	Save patchlines to file .
8655	Add a patch .
8656	Insert a list of patches .
8657	Add patches .
8658	Remove a patch .
8659	Return a list of patches after the given patch .
8660	Return a list of patches before the given patch .
8661	Return a list of patches until a given patch .
8662	Replace a patch .
8663	Create the version file .
8664	Check that the quilt meta - data version is valid .
8665	Add this command to a parser .
8666	Add this option to a parser .
8667	Add this command to a subparser .
8668	Set the subparsers arguments .
8669	Add subparsers to the parser .
8670	Raise QuiltError if file is not in patch
8671	Check if file is in next patches
8672	Revert a file .
8673	Import a patch .
8674	Import a list of patches
8675	Add a way .
8676	Yield missing node ids .
8677	Add a node to the graph .
8678	Build a route from a relation .
8679	Create a route name for a relation .
8680	Get the agency ID for a relation .
8681	Process the file .
8682	Register a relation .
8683	Create dummy data .
8684	Patch agencies .
8685	Create a dummy trip for a given trip_id .
8686	Write a zipped file .
8687	Write the buffers to a zip file .
8688	Build an Agency object from a relation .
8689	Extract stops from a relation .
8690	Given a relation and a list of ways return a list of Shape objects .
8691	Return a list of supported versions .
8692	Send APDU .
8693	Authenticate devices .
8694	Register a client .
8695	Authenticate a client .
8696	Register U2F devices .
8697	Convert data to string .
8698	Wraps a function with error handling .
8699	Wrap a class .
8700	Return True if filepath matches any of the blame patterns .
8701	Get the email address for a given email address .
8702	Return the entry with the given filename .
8703	Convert markdown to reST .
8704	Serve Flawless web server .
8705	Record an error .
8706	Convert a URL to a StringIO object .
8707	Convert a string to an Image object .
8708	Decorator to validate an image .
8709	Raise ImageSizeError if image is too big .
8710	Raise ImageSizeError if width is too big .
8711	Raise ImageSizeError if height is too big .
8712	Parse a category .
8713	Parse the totals of a field .
8714	Yields all items in the file .
8715	Save an error .
8716	Parse the source and save the data .
8717	Parse an item .
8718	Return an instance of the model .
8719	Save an item .
8720	Download a file .
8721	Load the source file .
8722	Yields items from the CSV file .
8723	Setter for allow_network_access .
8724	Run a docker command .
8725	Add files to the docker container .
8726	Add a file to the sandbox .
8727	Get a list of enrollments for a course .
8728	Get enrollments for a course .
8729	Get a list of enrollments for a section .
8730	Get enrollments for a section .
8731	Returns a list of enrollments for a given regid .
8732	Enroll a user in a course .
8733	Get a list of roles in an account .
8734	Get a list of roles in an account .
8735	Get the effective course roles in an account .
8736	Get a specific role .
8737	Get a role by SIS ID .
8738	Get a course .
8739	Get a course by SIS ID .
8740	Get a list of courses in an account .
8741	Returns a list of courses in the specified SIS account .
8742	Returns a list of courses published in an account .
8743	Get a list of courses published in an account .
8744	Get a list of courses for a given regid .
8745	Create a course .
8746	Update SIS ID .
8747	Get activity for a given account and term .
8748	Returns the grade for a given account and term .
8749	Get statistics by account .
8750	Get activity by SIS course ID .
8751	Returns the list of assignments for a course .
8752	Retrieve student summaries for a course .
8753	Returns the activity for a given sis_user_id and sis_course_id .
8754	Gets the student messaging for a given sis_course_id and sis_user_id .
8755	List all external tools in an account .
8756	List all external tools in a course .
8757	Create an external tool .
8758	Update an external tool .
8759	Delete an external tool .
8760	Check that all required parameters are set .
8761	Get a specific user .
8762	Get a list of users for a course .
8763	Get a list of users for a SIS course .
8764	Create a user .
8765	Get a list of logins for a user .
8766	Update a user login .
8767	Find the next page .
8768	Get a resource url .
8769	Get a paged resource .
8770	Get a resource .
8771	Send a PUT request to a resource .
8772	Post a resource .
8773	Delete a resource .
8774	Returns a list of CanvasAdmin objects .
8775	Create an admin .
8776	Create an admin by SIS account ID .
8777	Delete an admin .
8778	Delete an admin by SIS ID .
8779	Create a grading standard for a course .
8780	Get a specific section .
8781	Get a section by SISID .
8782	Get a list of sections in a course .
8783	Get a list of sections in a course .
8784	Get a list of sections with students in a course .
8785	Get a list of sections with students in a course .
8786	Create a course section .
8787	Update a section .
8788	Get quizzes for a course .
8789	Get a specific account .
8790	Get a list of sub accounts .
8791	Update an account .
8792	Update SIS ID .
8793	Get authentication settings for a given account .
8794	Update authentication settings .
8795	Get a term by SIS ID .
8796	Import a CSV string .
8797	Import a directory .
8798	Gets the status of a SIS import .
8799	Build the import . zip file .
8800	Get all assignments for a course .
8801	Update an assignment .
8802	Returns a list of available report types .
8803	Get a list of reports by type .
8804	Create a report .
8805	Create a course provisioning report .
8806	Creates a course SIS export report .
8807	Create an unused courses report .
8808	Get report data .
8809	Get the status of a report .
8810	Delete a report .
8811	Move detections in a label .
8812	Flip detections in a label .
8813	Get a dict from an object .
8814	Returns a copy of the config .
8815	If edit_empty_value is set return the empty value .
8816	Parse arguments and keyword arguments .
8817	Create metrics .
8818	Setup logging .
8819	Configure the registry .
8820	Create metrics .
8821	Get a metric by name .
8822	Handle home page .
8823	Handle metrics request .
8824	Query Wolfram Alpha API .
8825	Fix HTTPMessage .
8826	Query Wolfram Alpha API .
8827	Return a chain of information about the pod and assumptions .
8828	Return a list of pods that have a result .
8829	Encode data to JSON .
8830	Call API .
8831	Make a GET request .
8832	Delete a resource .
8833	Make a PUT request .
8834	Make a POST request .
8835	Process a query .
8836	Group sentences by length .
8837	Disambiguates a PDF file .
8838	Disambiguate a query .
8839	Segment text .
8840	Get a language .
8841	Fetch a concept .
8842	Fit the ensemble to the data .
8843	Return the score of the given features .
8844	Fit the MDR grid cell .
8845	Fit the model and predict the results .
8846	Score a set of features .
8847	Fit the CMDR object to the data .
8848	Transform a list of features .
8849	Returns the score of the Continuous MDR model .
8850	Predict the MDR model .
8851	Generate n - way models .
8852	Plot a grid of MDRs .
8853	Get the configuration from the application .
8854	Get a configuration value .
8855	Create a vector .
8856	Create a vector .
8857	Evaluate a file .
8858	Evaluate a Python stream .
8859	Evaluate a string .
8860	Bootstrap a repl module .
8861	Run the compiler .
8862	Create a MultiFunction .
8863	Add method to map .
8864	Add a method to the MultiFunction .
8865	Get a method by key .
8866	Remove a method from a map .
8867	Remove a method .
8868	Return True if v is a macro variable .
8869	Locates the line and column of a form .
8870	Decorate a parse function with a location function .
8871	Raise ParserException if node does not appear in tail position .
8872	Assert that the given node is a tail node .
8873	Resolve a bare symbol .
8874	Resolve a symbol .
8875	Parse an AST .
8876	Whether to warn on shadowed variables .
8877	Add a new symbol to the symbol table .
8878	Return a string representation of the given entries .
8879	Return a string representation of a sequence .
8880	Return a string representation of o .
8881	Fallback for lrepr .
8882	Fix missing locations .
8883	Compile and execute a ReaderForm .
8884	Compiles a Python module .
8885	Compile a module .
8886	Compile Python bytecode .
8887	Create a sequence from an iterable .
8888	Munge a string .
8889	Demunge a string .
8890	Create a Fraction instance with the given numerator and denominator .
8891	Get a logger handler .
8892	Create a Map from a mapping .
8893	Partition a collection into n elements .
8894	Decorate a function to add line and column information .
8895	Read a namespaced name .
8896	Read a collection .
8897	Read a list .
8898	Read a vector .
8899	Read a set .
8900	Read a map literal .
8901	Read a string .
8902	Read a symbol .
8903	Read a keyword .
8904	Read a meta tag .
8905	Read a function definition .
8906	Read a quoted string .
8907	Expand a syntax quote .
8908	Process a syntax quoted form .
8909	Read a syntax quoted form .
8910	Read a unquote .
8911	Read a deref statement .
8912	Read a single character .
8913	Read a regex pattern .
8914	Read a reader macro .
8915	Read the next comment .
8916	Read the next token .
8917	Read expressions from a stream .
8918	Read a string .
8919	Read a file .
8920	Update the location of a character .
8921	Move to the back of the stack .
8922	Read the next token .
8923	Return a bytestring containing the bytecode for the given code .
8924	Return a list of bytecode for a given file .
8925	Return the path to the cache file .
8926	Hook imports .
8927	Find a Basilisp module .
8928	Execute cached Basilisp module .
8929	Compile a module .
8930	Execute a module .
8931	Create a new symbol .
8932	Complete the given text with the given keywords .
8933	Get or create a keyword map .
8934	Get a keyword .
8935	Create a chain of PyASTStream and PyASTStream .
8936	Load an attribute .
8937	Decorate a function to generate a Python AST .
8938	Return a PyASTStream for the given form .
8939	Return a new GeneratedPyAST with a location set .
8940	Decorate a function to add location information to it .
8941	Decorate a function to add location information to it .
8942	Check if a variable is dynamic .
8943	Return True if v is redefable .
8944	Convert an AST into an ast . Expr .
8945	Return an ast . FunctionDef for a function .
8946	Return True if we should warn on redef .
8947	Convert a Do node to an AST .
8948	Generate a name for a function .
8949	Convert a list of bindings into an ast . FunctionCall .
8950	Convert a single - arity function into a Python AST .
8951	Convert a multi - arity function into a Python AST .
8952	Convert a function node to a Python AST .
8953	Convert a if statement into a Python AST .
8954	Convert an If node to an AST .
8955	Convert an Invoke node into a Python AST .
8956	Convert a quote node to a Python AST .
8957	Convert a Recur into a Python AST .
8958	Convert a Recur into a Python AST .
8959	Convert a SetBang node to a Python AST .
8960	Convert a Throw node into an AST .
8961	Convert a Try node to an AST .
8962	Convert a local symbol to a Python AST .
8963	Convert a variable name to a Python AST .
8964	Convert a VAR node to a Python AST .
8965	Convert a HostField node to a Python AST .
8966	Converts a MaybeClass node to a Python AST .
8967	Convert a MaybeHostForm node to a Python AST .
8968	Convert a const value to a Python AST .
8969	Convert a collection literal to Python AST .
8970	Generate a Python AST from a Lisp AST .
8971	Yield all module imports .
8972	Return an ast . ImportFrom from a module .
8973	Create a namespace variable .
8974	Create a set from members .
8975	Create a set with the given members .
8976	Visitor for ExceptHandler AST node .
8977	Return an ast . Expr node or None .
8978	Visitor for FunctionDef AST node .
8979	Visitor for While AST node .
8980	Visitor for Try AST node .
8981	Create a new module .
8982	Return the first element of o .
8983	Return the rest of a sequence .
8984	Return the nth occurrence of coll at index i .
8985	Return the nth element of a sequence .
8986	Combine o with seq .
8987	Convert an object to a sequence .
8988	Concatenate sequences .
8989	Associates m with kvs .
8990	Return the conj of coll and xs .
8991	Decorator for partial functions .
8992	Dereferences an object .
8993	Returns True if v1 equals v2 .
8994	Divide x by y .
8995	Sort a sequence .
8996	Returns True if coll contains k .
8997	Get the value of a key .
8998	Convert an object to lisp .
8999	Convert an object to Python .
9000	Return a string representation of o .
9001	Collect arguments from a tuple .
9002	Decorator to turn a function into a trampoline .
9003	Decorate a function with attributes .
9004	Decorate a function with meta data .
9005	Mark a function as a basilisp function .
9006	Resolve an alias .
9007	Resolve a variable .
9008	Add a generated python variable .
9009	Bootstraps a dynamic variable .
9010	Intern a variable .
9011	Intern a variable .
9012	Find a variable in a namespace .
9013	Find a variable in a namespace .
9014	Find a variable in this context .
9015	Add a default import .
9016	Add an alias .
9017	Intern a symbol .
9018	Intern a symbol .
9019	Find a variable by symbol .
9020	Add an import .
9021	Returns the module that imports sym .
9022	Add a reference to a symbol .
9023	Get a reference to a symbol .
9024	Refers all symbols in other_ns_interns .
9025	Refers to another namespace .
9026	Get or create a namespace .
9027	Get or create a namespace .
9028	Get a namespace by name .
9029	Remove a namespace .
9030	Return a completion matcher for the given text .
9031	Given a prefix and an optional name_in_ns find all aliases that match the prefix .
9032	Completes the imports and aliases for the given prefix .
9033	Return a list of interns that match the given value .
9034	Returns a list of all possible completions for the given value .
9035	Complete the given text .
9036	Return a tuple of positional arguments .
9037	Create a list from members .
9038	Create a list from members .
9039	Change the style of a scalar .
9040	Decrypt a token .
9041	Encrypts a JSON string .
9042	Delete an item from the cache .
9043	Return a tuple of selector comparison and argument .
9044	Close the writer .
9045	Parse a FiQL string into an Expression .
9046	Dump a model to a file .
9047	Hook handler for objects .
9048	Decode a date string .
9049	Decode a JSON value .
9050	Encodes an object to JSON .
9051	Validate version string .
9052	Generate a changelog .
9053	Find strongly connected components of a graph .
9054	Robust topological sort .
9055	Set the parent expression .
9056	Return the parent expression .
9057	Add an operator to the expression .
9058	Add an element to the expression .
9059	Create an AND expression .
9060	Create an OR expression .
9061	Decorator for logging functions .
9062	Parse received messages .
9063	Convert a list of tuples into a dictionary .
9064	Check a list of messages for a specific command .
9065	Prepare a message for sending .
9066	Flush the buffer .
9067	Enable a slide .
9068	Save a template to a file .
9069	Load a template .
9070	Get information about a stage .
9071	Increment a file .
9072	Locate package . json .
9073	Parse package JSON .
9074	Handle an API error .
9075	Validate API response .
9076	homogenize two waves
9077	Interpolate the indep vector of a wave .
9078	Get the intersection of two independent variable ranges .
9079	Verify that both waveforms are compatible .
9080	Load the systemjs manifest
9081	Return a namedtuple of pars for a module .
9082	Run a trace .
9083	Shorten a URL .
9084	Expand a short URL .
9085	Get the URL stats for a short URL .
9086	Get a list of DBStats objects .
9087	Get database stats .
9088	Execute a pypkg command .
9089	Echo a command to the terminal .
9090	Log a message .
9091	Decorator to cache the result of a method .
9092	Yield chunks from an iterable .
9093	Wrap a function to process chunks .
9094	Flatten an iterable .
9095	Interrupt the process .
9096	Pretty - print a table .
9097	Create a dummy class .
9098	Create an instance from human readable string .
9099	YOURLS client .
9100	Trace a waveform module .
9101	Write links to dependencies .
9102	Make a common entry .
9103	Make a multi - entry plist .
9104	Convert comparison operators to words .
9105	Yield chunks of noise .
9106	Given a frequency vector and a data matrix chunk the data into a numpy array .
9107	Write touchstone file .
9108	Bound a waveform to a given interval .
9109	Build the units string for a given operation .
9110	Return a copy of the wave with a new dep_vector .
9111	Calculate the running area of a run .
9112	Check that indep_min and indep_max are valid inputs .
9113	Calculate the arccosine of a wave .
9114	Calculate the arccosh of a wave .
9115	Return the arcsin of a wave .
9116	Calculate the arctanh of a wave .
9117	Average a waveform .
9118	Convert a wave to dB
9119	Derivative of a waveform .
9120	Compute the inverse FFT of a wave .
9121	Compute the absolute magnitude of a wave .
9122	Fourier Transform Fourier Transform
9123	Fourier Transform
9124	Return the database for an IFFT wave .
9125	Imagine a wave .
9126	Return the absolute value of the IFFT function .
9127	Ifft phase of wave .
9128	r Compute the IFFT of a wave .
9129	Create an integral waveform .
9130	Calculate the group delay of a wave .
9131	Return the logarithm of a wave .
9132	Naverage a waveform .
9133	Return the integral of a waveform .
9134	Return the maximum value of a waveform .
9135	Return the minimum value of a waveform .
9136	Phase a wave .
9137	Round a wave to a number of decimals .
9138	Return the square root of a wave .
9139	Sub - waveform waveform .
9140	Return the complex representation of a wavevector .
9141	Convert complex to float
9142	Convert complex to integer .
9143	Return the weighted value of the given independent variable .
9144	Return a list of paths that match the given path .
9145	Get a short description from a long description .
9146	Build an expression .
9147	Return the next item after pos .
9148	Get a list of functions from a string .
9149	Pair left and right delimiters .
9150	Parse an expression .
9151	Remove consecutive delimiters from expression .
9152	Split a string by a given separator .
9153	Convert number to engineering notation .
9154	Return a string with no exponent .
9155	Format a number in Peng format .
9156	Convert a string to a float .
9157	Return the fractional part of a peng number .
9158	Convert a string to a float .
9159	Convert peng power to EngPower .
9160	Return the power of a suffix .
9161	Remove extra delimiters from an expression .
9162	Convert a number to a scientific string .
9163	Convert number to scientific tuple .
9164	Find a sourcemap comment in a file .
9165	Returns True if the JS extension needs to be loaded .
9166	Bundle the application .
9167	Get the trace for a given app .
9168	Return True if hashes in dep_tree are the same .
9169	Format a hexdump string .
9170	Parse a docstring .
9171	Return a list of valid identifiers .
9172	Add an action to a module .
9173	Split a line into parts .
9174	Check that all contexts are initialized .
9175	Return help text for builtin function .
9176	Find a function in the context .
9177	Return a list of all functions defined in the given context .
9178	Check if an argument is a flag .
9179	Process command line arguments .
9180	Extract a value for an argument .
9181	Invoke a function .
9182	Invoke a command .
9183	Invoke a string .
9184	Parse a parameter declaration .
9185	Parse a return declaration .
9186	Classify a section .
9187	Classify a line .
9188	Join multiple paragraphs .
9189	Wrap the maindoc and format it .
9190	Convert a value to a type .
9191	Convert a binary value to a Python object .
9192	Get the size of a type .
9193	Format a value .
9194	Raise ArgumentError if type is invalid .
9195	Check if a type is known .
9196	Split a typename into base and subtypes .
9197	Instantiate a complex type .
9198	Get a type by name .
9199	Check if a format is known .
9200	Inject a type into the registry .
9201	Load types from a module .
9202	Return True if the spec is filled .
9203	Add a parameter .
9204	Defines a typed return value .
9205	Set a custom return value .
9206	Match a short - name .
9207	Returns the type name of a parameter .
9208	Return a signature for this function .
9209	Format a return value .
9210	Convert a positional argument .
9211	Check that the spec is valid .
9212	Convert an argument to a type .
9213	Format the error message .
9214	Return a dictionary representation of the exception .
9215	Check and execute a function .
9216	Parse a list of validators into a list of tuples .
9217	Find all objects in a container .
9218	Return a tuple of the module name and a context object .
9219	Return the help text for a function .
9220	Decorator for parameters .
9221	Decorator to register a function as a return value .
9222	Mark a function as a return type .
9223	Mark a class as a context .
9224	Decorator to annotate a function .
9225	Mark a function as annotated .
9226	Return a short description of a function .
9227	Load cron modules
9228	Install cronjobs .
9229	Print a list of all registered tasks .
9230	Uninstall Crontab .
9231	Create a new handler .
9232	Load project configs from directory .
9233	Save projects config to file .
9234	Define a singleton property .
9235	Return a list of projects that depend on this project .
9236	Decorate a function to post - process its result .
9237	Initialize the project .
9238	Set a key - value pair .
9239	Set the value of a field .
9240	Create an instance of this class from an iterable .
9241	Set the value of a state .
9242	Set multiple values at once .
9243	Return a modifier that applies the given function to the state .
9244	Return a function that collects n arguments .
9245	Raise NotImplementedError .
9246	Apply f to pure and state .
9247	View the current fold .
9248	Convert this Fold to a list of lists .
9249	Apply a function over this set .
9250	Set a value in the state .
9251	Iterate over an iterable .
9252	Return the kind of an option .
9253	Main entry point .
9254	Return a new vector that is a step towards another vector .
9255	Handle input .
9256	Move robots towards the player .
9257	Ends the game .
9258	Enter a player move .
9259	Play the game .
9260	Make a move .
9261	The winner of the game .
9262	Yields all potential wins .
9263	Process an item .
9264	Open a spider .
9265	Upload a chunk of data to S3 .
9266	Create a bio file object .
9267	Get the state of an account .
9268	Get the state of an asset .
9269	Get a block by hash .
9270	Get the hash of a block .
9271	Get the system fee for a block .
9272	Get the contract state of a script .
9273	Get raw transaction data .
9274	Get storage data for a script .
9275	Get a transaction output .
9276	Invoke a script .
9277	Invoke a function .
9278	Invoke a script .
9279	Send a raw transaction .
9280	Validate an address .
9281	Call a JSON - RPC method .
9282	Return True if the given string is a hash256 string .
9283	Check if a string is a valid hash160 .
9284	Encodes a list of invocation parameters .
9285	Decode an invocation result .
9286	Decorator for functions that don t have default arguments .
9287	Apply a transformation to dttm with a timezone .
9288	Apply this date to a timezone .
9289	Save the template to a file .
9290	Render the barcode .
9291	Calculate checksum .
9292	Render code .
9293	Connect to the KVS server .
9294	Main entrypoint .
9295	Download a file from S3 .
9296	Upload a file to S3 .
9297	Downsync a S3 bucket .
9298	Diff the contents of a section .
9299	Parse an environment variable .
9300	Set basic credentials .
9301	Set the API key .
9302	Get JSON content from folder .
9303	Return a dictionary of all available schemas .
9304	Get the JSON schema for this schema .
9305	Return a RefResolver for this schema .
9306	Validate an object against this schema .
9307	Return a list of valid examples .
9308	Return a list of invalid examples .
9309	Returns the URL for a user .
9310	Process an auth url .
9311	Get an authentication token .
9312	Get the ID of the user .
9313	List files in a folder .
9314	Create a folder .
9315	Add a comment to an object .
9316	Decode an object .
9317	Set the drop target for this object .
9318	Start drag and drop opperation
9319	Set the default TTL .
9320	Inspect an object .
9321	Show a shell .
9322	Migrates font name to sans serif .
9323	Load a page .
9324	Get a parameter from a tag .
9325	Send a message to the user .
9326	Create a wellcome tip window .
9327	Mouse down event handler
9328	Called when a mouse is moved .
9329	Handle resize event
9330	Handle key press .
9331	Delete selected objects
9332	Duplicate selected objects
9333	Refresh the image .
9334	Calculate the best position for a widget .
9335	Retrieves the PyData for the given item .
9336	Sets the data for the given item .
9337	Find the data for a particular PyData .
9338	Delete an item from the list .
9339	Delete all items .
9340	Clear all columns .
9341	Set the current selection .
9342	Get string selection
9343	Set client data .
9344	Append a string to the list .
9345	Return a string representation of an object .
9346	Get a GUI object by name .
9347	Create a copy of this object .
9348	Add a child to the sizer .
9349	Set the parent of this component .
9350	Draw the tile background .
9351	Emulates background erase .
9352	Callback for paint event .
9353	Find modules in a directory .
9354	Return a list of column headings
9355	Resets the view .
9356	Updates the grid values .
9357	Update column attributes .
9358	Sorts a column .
9359	Clear the grid .
9360	Create a combobox .
9361	Begins editing .
9362	Ends editing this cell .
9363	Returns True if the given key is accepted .
9364	Starting key event handler
9365	Register a type handler .
9366	Enable a menu item .
9367	Checks if this item is enabled .
9368	Enables the menu .
9369	Checks if the menu is enabled .
9370	Removes a menu .
9371	Submit a form .
9372	Set object tag .
9373	Replace text nodes in autosummary table .
9374	Get the documenter class for an object .
9375	Mangle a signature .
9376	Import a module by its name .
9377	Create an object role .
9378	Show an alert dialog .
9379	Prompts the user for a text entry .
9380	Select a font .
9381	Show a color dialog .
9382	Show a dialog to choose a directory .
9383	Find a dialog .
9384	Sets whether the item has children .
9385	Set the icon .
9386	Show the window .
9387	Parse a resource file .
9388	Save rsrc to filename .
9389	Build a window from a dictionary .
9390	Build a GUI object from a dictionary .
9391	Connect a component to a controller .
9392	Convert a property name to its Python equivalent .
9393	Set the clipboard data .
9394	Find autosummary in docstring .
9395	Load an application .
9396	Inspects an object
9397	Activate a child item
9398	Update the name of an object
9399	Show the context menu .
9400	Return a representation of the image .
9401	Decorator for registering an expression filter .
9402	Decorator for registering a node filter .
9403	Assert that the current path resolves to the given path .
9404	Fail if there is no current path .
9405	Assert that the current path exists .
9406	Assert that there is no current path .
9407	Select an option .
9408	Apply the filter .
9409	Get a browser object for the given browser name .
9410	Return the XPath expression for this expression .
9411	Return True if the node matches the filters .
9412	Switch to a frame .
9413	Accepts an alert dialog .
9414	Accepts a confirmation dialog .
9415	Dismiss a confirm dialog .
9416	Accepts a prompt .
9417	Dismiss a prompt .
9418	Save a page to disk .
9419	Save a screenshot .
9420	Raise server error .
9421	Return True if the given value matches this filter .
9422	Checks if a field is checked .
9423	Verifies that the element identified by locator has no checked attribute .
9424	Checks if a field is unchecked .
9425	Check if element has no unchecked field .
9426	Assert a text query .
9427	Assert that no text is provided .
9428	Assert that the given title is valid .
9429	Assert that the given title does not exist .
9430	Assert that the page has the given title .
9431	Assert that the document has no title .
9432	Find all documents matching the query .
9433	Find the first item in the collection .
9434	Return the inner content of a node .
9435	Return the inner text of a node .
9436	Normalize a URL .
9437	Decorate a function as a setter .
9438	Decorator for synchronizing a function .
9439	Check if an error should be caught .
9440	Compare the number of results in the result cache .
9441	Cache at least size results .
9442	Returns True if the given options are None .
9443	Create a failure message .
9444	Returns True if count matches options .
9445	Normalize text .
9446	Normalize whitespace .
9447	Convert text to regex .
9448	Returns True if the actual path resolves to the expected path .
9449	Resize the window .
9450	Start the server .
9451	Setter for fcgetter .
9452	Setter for instance method .
9453	Sets the class method .
9454	Return a formatted traceback string .
9455	Return the source code for an object .
9456	Get the logger for an instance .
9457	Setter for logger .
9458	Call API .
9459	List channels .
9460	List users .
9461	Make a message .
9462	Translate a slack message .
9463	Send a slack message .
9464	Read a channel .
9465	Run the Slack client .
9466	Run the client .
9467	Return the differences between two dictionaries .
9468	Colorize a message .
9469	Called when a task starts .
9470	Run the v2 runner .
9471	Prints the stats on the v2 playbook .
9472	Called when a task is skipped .
9473	Convert a prefix to an address mask .
9474	Decorator to check that value is not empty .
9475	Add a model .
9476	Get a dictionary of all elements in the tree .
9477	Load a dictionary .
9478	Convert to a dictionary .
9479	Parse the config file .
9480	Parse the state of the device .
9481	Translate a configuration file .
9482	Load all JINJA filters
9483	Find yang file .
9484	Convert a model to a dictionary .
9485	Return the differences between f and s .
9486	Perform an HTTP POST request .
9487	Build authorization code URI .
9488	Get a token .
9489	Extract query parameters from a URL .
9490	Dequery a URL .
9491	Build a URL .
9492	Handle an exception .
9493	Create a response object .
9494	Make a redirect error response .
9495	Make a JSON response .
9496	Get authorization code .
9497	Refresh a refresh token .
9498	Get a token .
9499	Get an authorization code from a URI .
9500	Get token from POST data .
9501	Returns an authorization object .
9502	Open the device for the specified bus .
9503	Read a single byte from the bus .
9504	Read a number of bytes from the bus .
9505	Read a single byte from the bus .
9506	Write bytes to the bus .
9507	Write a byte data to the bus .
9508	Write a block of data to an i2c bus .
9509	Return the CDN URL for this asset .
9510	Copy a file .
9511	Create a local copy of a file .
9512	Create a remote copy of a file .
9513	Construct a file from a file_info dict .
9514	Upload a file .
9515	Upload a file from a URL .
9516	Upload a file from a URL synchronously .
9517	Returns a list of cdn urls for this group .
9518	Construct a group from a group info dictionary .
9519	Create a group .
9520	Make a request to the storage .
9521	Yields all UUIDs in the sequence .
9522	List API resources .
9523	Print a progress bar .
9524	Make an uploading request .
9525	Get home mode status .
9526	List all available cameras .
9527	Get camera information .
9528	Get a snapshot of a camera .
9529	Disable a camera .
9530	Get a motion setting for a camera .
9531	Save a camera event .
9532	Update the motion settings .
9533	Return True if li is the last li in the list .
9534	Yields a list node for a single list .
9535	Get the ilvl value of a li element .
9536	Get the vMerge element .
9537	Returns the grid span of the given tc .
9538	Return the td at the given index .
9539	Return True if style is false .
9540	Return True if the paragraph is bold .
9541	Return True if italics are present in the document .
9542	Return True if the document is underlined .
9543	Return True if p is a title .
9544	Yield text run content data .
9545	Return a dictionary of relationship information .
9546	Get document data from a zip file .
9547	Get ordered list type .
9548	Build a list .
9549	Build a tr element .
9550	Build a table element .
9551	Return the content of a T tag .
9552	Remove tag from tree .
9553	Find a dataset .
9554	Load MNIST data .
9555	Load cifar10 data .
9556	Plot a list of images .
9557	Plot a list of weights .
9558	Plot the given filters .
9559	Generate batches of arrays .
9560	Encodes a string into a list of bytes .
9561	Generate batches of training data .
9562	Predict a sequence of sequences .
9563	Add weights to the filter .
9564	Encodes x using the encoder .
9565	Decodes z with the given layer .
9566	Find the output of a layer .
9567	Compute the autoencoder score .
9568	Predict the maximum value of the output .
9569	Predict the proba of the last layer .
9570	Predict logit .
9571	Return the score of the given data .
9572	Create a batch of features and labels .
9573	Returns a random sample of the input sequences .
9574	Load a network from a file .
9575	Generate a random matrix .
9576	Generate a random vector .
9577	Yields tuples of output name and expression .
9578	Given a list of layers and a list of patterns yield tuples of parameter names and parameters .
9579	Create regularizers from keyword arguments .
9580	Returns a list of variables .
9581	Compute the accuracy of the model .
9582	Perform a scan .
9583	Build an activation .
9584	Reservoir function .
9585	Set loss .
9586	Iterates over training data .
9587	Train the model .
9588	Return a hash of the layers and losses .
9589	Build a computation graph .
9590	Return a list of input layers .
9591	Returns a list of variables in this loss .
9592	Find the layer with the given parameter .
9593	Compute the feed forward function .
9594	Predict the output of the last layer .
9595	Return the score of the given data .
9596	Save the model to a file .
9597	Load a model from a file .
9598	Calculate the loss of the graph .
9599	Return a list of updates for this graph .
9600	The output size of the layer .
9601	Connect inputs to outputs .
9602	Bind to the graph .
9603	Resolve input shapes .
9604	Resolve output shapes .
9605	Log this layer .
9606	Log the number of parameters .
9607	Format a string .
9608	Resolve the shape of a layer .
9609	Find a parameter by name .
9610	Add a bias vector .
9611	Return a dictionary representation of this form .
9612	Loggabor transformation
9613	Loggabor image .
9614	Add a tier .
9615	Remove a tier .
9616	Get a tier by name .
9617	Convert to EAF .
9618	Add a point to the list of intervals .
9619	Add an interval .
9620	Remove an interval .
9621	Remove a point .
9622	Yields a list of intervals
9623	Return a list of all intervals in this tier .
9624	Indent an element .
9625	Add an annotation to a tier .
9626	Add a CV entry to the controlled vocabulary .
9627	Add a description to a controlled vocabulary .
9628	Add an external reference .
9629	Add a language .
9630	Add a lexicon reference .
9631	Add a linguistic type .
9632	Add a linked file descriptor .
9633	Add a locale .
9634	Add a secondary linked file descriptor .
9635	Add a tier .
9636	Remove all time slots from the timeslot dictionary .
9637	Extract a subset of the annotation data from the EAF .
9638	Generate a random annotation id .
9639	Generate a unique timestamp .
9640	Returns a list of child tiers for the given id_tier .
9641	Get the full time interval .
9642	Get the annotation data for a given time .
9643	Get the annotation data before a given time .
9644	Returns a list of tier ids for a given linguistic type .
9645	Merge multiple tiers .
9646	Removes all annotations from a tier .
9647	Remove a description from a controlled vocabulary .
9648	Remove a license .
9649	Remove all linked files .
9650	Remove a property .
9651	Remove a reference annotation .
9652	Remove secondary linked files .
9653	Remove a tier .
9654	Remove a list of tiers .
9655	Rename a tier .
9656	Shifts the annotations by a given time .
9657	Main entry point .
9658	Pretty - print storage .
9659	Return the base level of text .
9660	Get embedding levels .
9661	Return a list of embedding levels and overrides .
9662	Calculate the runs for a level .
9663	Resolve weak types .
9664	Resolve neutral types .
9665	Reverse a contiguous sequence .
9666	Reorders the embedding levels of a string .
9667	Process the current file .
9668	Convert a list of lines into a list of strings .
9669	Add a new attribute to an object .
9670	Parse command line options .
9671	Maintain backwards compatibility .
9672	Show the current GUI .
9673	Return a Pyblish GUI instance .
9674	Deregister host .
9675	Add an entry to the filemenu .
9676	Context manager to change the current selection .
9677	Context manager to temporarily change the current time .
9678	Show no GUI .
9679	Setup the types list .
9680	Returns a generator that yields cumulative data .
9681	Get the values of a single axis .
9682	Draw a constant line .
9683	Load transform parameters .
9684	Reverse a mapping .
9685	Generate a range of floats .
9686	Add data to the dataset .
9687	Add dropshadow filters to defs .
9688	Add data to the configuration .
9689	Burn the graph .
9690	Calculate left margin .
9691	Calculate the right margin .
9692	Calculate top margin .
9693	Add a popup .
9694	Calculate bottom margin .
9695	Draw the graph .
9696	Make a text element for a datapoint .
9697	Draw x labels .
9698	Draw y labels .
9699	Draw x - axis guidelines .
9700	Draw y - axis guidelines .
9701	Draw the graph titles .
9702	Render inline styles .
9703	Create SVG element .
9704	Return a list of stylesheet resources for this resource .
9705	Run a bot .
9706	Send data to the socket .
9707	Connect to the server .
9708	Send a message to a channel .
9709	Return a tuple of patterns to be used for dispatching .
9710	Create a new nick .
9711	Handle a ping message .
9712	Handle a registered server .
9713	Enter event loop .
9714	Register with Boss .
9715	Task runner .
9716	Decorate a callback to require a boss .
9717	A list of command patterns that should be used to run the worker .
9718	Register a success message .
9719	Execute a task .
9720	Add a nick to the queue .
9721	Send validation email .
9722	Send a password reset notification .
9723	Validate password strength .
9724	Verify a token .
9725	Delete a user .
9726	Only allow POST requests .
9727	Return a thread pool executor .
9728	Return a docker API client .
9729	Return a tuple of tls_cert and tls_key .
9730	The name of the service .
9731	Call a docker method
9732	Execute a docker command .
9733	Poll Docker for running tasks .
9734	Stop the Docker service .
9735	Filter the queryset based on the value .
9736	Update a user s password .
9737	Update a user s password .
9738	Validate email address .
9739	Create a new token .
9740	Delete a token .
9741	Make sure that the user is logged in .
9742	Send confirmation email .
9743	Update the expiry time of the object .
9744	Return the context for a password reset email .
9745	Email handler .
9746	Handle password reset email .
9747	Custom validation email handler .
9748	Authenticate a user .
9749	Authenticate the given credentials .
9750	Show a notebook .
9751	Process hv plots .
9752	Create a custom JavaScript callback for the given change .
9753	Get a widget for a parameter .
9754	Render a function .
9755	Create a TextInput widget .
9756	Return a list of named objects .
9757	Get the owner of a method .
9758	Assigns the HTTP Auth credentials to this object .
9759	Ping the server .
9760	Get information about this account .
9761	Check the health of the cluster .
9762	Convert bytes to readable format .
9763	Total CPU load .
9764	Memory size in bytes .
9765	Returns the total number of transactions in the network .
9766	Return a list of volume IDs
9767	Get a volume by ID .
9768	Returns the total size of a volume .
9769	Return percentage of used volume .
9770	Get average disk temperature for a volume .
9771	Get the maximum disk temperature for a volume .
9772	Get a disk by ID .
9773	Login to the API .
9774	Make a request to the given url .
9775	Execute a GET request .
9776	Update the system information .
9777	Returns a SynoUtilization object .
9778	Returns a synonym storage object .
9779	Create a context for a request .
9780	Get the tenant token .
9781	Build attributes for this widget .
9782	Set the INSTALLED_APPS setting .
9783	Return an instance with the specified apps removed .
9784	Return a dictionary of global settings .
9785	Handle GET requests .
9786	Get a value from the config .
9787	Change the value of a key .
9788	Migrate config file .
9789	Start the webserver .
9790	Wait for a response .
9791	Get new access information .
9792	Check if token is present .
9793	Set access credentials .
9794	Refresh OAuth2 tokens .
9795	Create a manifest table .
9796	Split a path into bucket and prefix .
9797	Check if a bucket is in Glacier .
9798	Extract run_id from key .
9799	Clean a dictionary .
9800	Add run_id to manifest .
9801	Check if a run is in the manifest .
9802	Extract a schema from a schema URI .
9803	Fix a schema .
9804	Parse a list of contexts into a list of tuples
9805	Parse an unstructured event .
9806	Transform a line into a good event .
9807	Convert event to JSON format .
9808	Return template name and template object .
9809	Print a context block .
9810	Print a list of variables .
9811	Format a SQL string as HTML .
9812	Pretty - format a Django context .
9813	Format a dictionary as HTML .
9814	Style text .
9815	Format a Python object .
9816	Format an object .
9817	Get a token from a string .
9818	Get a list of latex nodes from a string .
9819	Convert latex string to text .
9820	Sets the input directory .
9821	Read an input file .
9822	Convert latex to text .
9823	Convert a unicode string to UTF - 8 .
9824	Unescape a string .
9825	Get organisation information .
9826	Get a list of boards .
9827	Get a list of members
9828	Update an organisation .
9829	Remove a member .
9830	Add a member to a group .
9831	Add a member .
9832	Fetches information about a list .
9833	Add a card to your account .
9834	Get information about a label .
9835	Fetches a list of items .
9836	Update a label .
9837	Update a label .
9838	Get the authorisation URL .
9839	Get card information .
9840	Get a board .
9841	Get a list of lists .
9842	Get a list of checklists .
9843	Add a comment .
9844	Add an attachment .
9845	Add a new checklist .
9846	Add a label from a dictionary .
9847	Add a label from a class .
9848	Add a member to a group .
9849	Fetches member information .
9850	Get a list of cards .
9851	Get a list of organisations .
9852	Create a new board .
9853	Decorator for singledispatch methods .
9854	Get information about this board .
9855	Get a list of lists
9856	Get a list of labels .
9857	Get a specific card .
9858	Returns a list of Checklists
9859	Get an organisation .
9860	Update a board .
9861	Add a list .
9862	Add a label .
9863	Get checklist information .
9864	Get a card .
9865	Returns a list of ChecklistItems
9866	Update a checklist .
9867	Add a new item to the list .
9868	Removes a check item .
9869	Update the name of a checklist .
9870	Update the state of a checklist .
9871	Add authorisation parameters to query parameters .
9872	Raises Unauthorised or ResourceUnavailable errors .
9873	Build a Trello URI .
9874	Fetches a JSON response from the server .
9875	Create an organisation .
9876	Create a new board .
9877	Create a label .
9878	Create a list .
9879	Create a new card .
9880	Create a new checklist .
9881	Create a new member .
9882	Get an organisation .
9883	Get a board .
9884	Get a list .
9885	Get a card .
9886	Get a checklist .
9887	Create a new member .
9888	Create a domain from a URL .
9889	Convert text to markupless .
9890	Convert text to raw text .
9891	Convert text to raw text pairs .
9892	Set the password for a user .
9893	Split text with locations .
9894	Mark a regex as split .
9895	Mark the beginning and end of a regex .
9896	Main entry point .
9897	Create an AES cipher .
9898	Get the cipher mode .
9899	Return the priority of this package .
9900	Check that the encryption scheme is valid .
9901	Publish a message .
9902	Make a unique id .
9903	Connect to the broker .
9904	Handle a CONNECTIONACK packet .
9905	Encodes a string .
9906	Decodes a string .
9907	Encodes a 16 - bit integer into a bytearray .
9908	Encodes a length into a byte string .
9909	Decodes a length encoded string .
9910	Encodes the packet .
9911	Encodes the packet .
9912	Decode a packet .
9913	Encodes the session into a string .
9914	Decode a packet .
9915	Decode a packet .
9916	Encodes the message .
9917	Encodes the message .
9918	Decodes a packet .
9919	Encodes the message .
9920	Encodes the payload .
9921	Decode a packet .
9922	Decode a packet .
9923	Get the URL for a method .
9924	Make a request to the API .
9925	Refresh the blocks .
9926	Format data .
9927	Fit data and return transformed data .
9928	Fit KMeans to data .
9929	Fit MeanShift to data .
9930	Fit the classifier .
9931	Predict clusters from data .
9932	Map a set of clusters .
9933	Sort clusters according to their contents .
9934	Get a date from a string .
9935	Returns the total number of points in a dictionary .
9936	Get the total time span of a dictionary .
9937	Display a unit picker .
9938	Pretty - print an element .
9939	Convert analyte to namemass
9940	Convert analyte to massname
9941	Collate data from a directory .
9942	Enumerates a boolean array .
9943	Convert a list of tuples into a boolean array .
9944	Smooth a numpy array .
9945	Fast gradient computation .
9946	Find the minimum of x and y .
9947	Cluster data by meanshift .
9948	KMeans clustering .
9949	Cluster data using DBSCAN .
9950	Get a list of defined SRMs
9951	Read configuration file .
9952	Read latools . cfg file .
9953	Print all currently defined LAtools configurations .
9954	Copy a SRM file to a directory .
9955	Create a config file .
9956	Change the default configuration .
9957	Exclude downholes from a filter .
9958	Defrag a numpy array with a given threshold .
9959	Despike the signal .
9960	Plot the autorange plot .
9961	Create a list of numpy arrays with the number of traces and the number of samples
9962	Calculate ratio of analytes .
9963	Calibrate the data .
9964	Sample stats from analytes .
9965	A dictionary of ablation times
9966	Filter analyte with a threshold .
9967	Filter gradients with a threshold .
9968	Calculate the correlation between two images .
9969	Calculate correlation filter .
9970	Add a new filter .
9971	Return a dictionary of parameters for this filter .
9972	Plot histograms of data .
9973	Calculate the summary statistics for the given data .
9974	Load reference data .
9975	Looks up a TypeClass for the given type .
9976	Group elements by atomic weight .
9977	Calculate the mass of a molecule .
9978	Generate a namedtuple of ANSISequences .
9979	Annihilate a stack of elements with a predicate .
9980	Deduplicates a stack .
9981	Gauss - weighted stats calculation
9982	Gauss correlation coefficient .
9983	Return the standard deviation of a numpy array .
9984	Return a list of samples for the given subset .
9985	Despike the data .
9986	Calculate the weighted mean of the background .
9987	Calculate a 1D interpolation of the background .
9988	Perform background subtraction .
9989	Calculate ratios for background subtraction .
9990	Make a subset of the analysis .
9991	Apply a percentile threshold to each sample .
9992	Fit a classifier .
9993	Apply a classifier .
9994	Filter the data using correlation filter .
9995	Filter by analyte .
9996	Apply a filter to each sample .
9997	Print the status of the filter .
9998	Apply a defragment filter to each sample .
9999	Print the number of removed samples .
10000	Plot a gradient histogram of analytes .
10001	Plot the gradients of the input analytes .
10002	Plot a series of histograms .
10003	Draws trace plots of all analyses .
10004	Draws gradient plots of all analyses .
10005	Filter a set of samples .
10006	Sample stats .
10007	Return a pandas DataFrame with statistics for each sample .
10008	Export a minimal reproduction dataset .
10009	Export traces to a directory .
10010	Save the analysis log .
10011	Export minimal reproduction dataset .
10012	Split a file by regex .
10013	Return a new Functor with the result of applying f to each element of a Functor .
10014	Plot PCA components .
10015	Bayes scale of s
10016	Return the median scaler of s .
10017	Despike a signal .
10018	ExpDecay despike detector .
10019	Add a component .
10020	Remove a set or index .
10021	Clear the internal data structures .
10022	Remove unused components .
10023	Return the key that matches fuzzkey .
10024	Make a numpy array from a key .
10025	Given a filter key or a dictionary of filter keys and analyte return a boolean array .
10026	Return a string describing the components .
10027	Decorator to log a function .
10028	Write a log file .
10029	Read a log file .
10030	Wrap a function with timeout .
10031	Get information about the device .
10032	Send a message .
10033	Parse a file or string .
10034	Return a URL for a notebook viewer .
10035	Return the thumbnail div .
10036	Return the code div as a string .
10037	Code example .
10038	Return the URL of the notebook .
10039	Get output file name .
10040	Process the notebook .
10041	Create a notebook using nbconvert .
10042	Download a list of files .
10043	Create a thumbnail .
10044	Returns a tuple of the header and the description
10045	Resize an image .
10046	Save a thumbnail of the image .
10047	Copy the thumbnail figure to disk .
10048	Get the URL for a notebook .
10049	Given a field name and a list of db_table_fields yield a list of language codes .
10050	Return the default value for a field .
10051	Process a thumbnail file .
10052	Pre - save the file .
10053	Refresh the cache .
10054	Get all thumbnails .
10055	Create a thumbnail .
10056	Delete a thumbnail .
10057	Create a thumbnail .
10058	Get a thumbnail for a source .
10059	Delete a thumbnail .
10060	Handle a received message .
10061	Register a callback for a given number .
10062	Return a set of states for this message .
10063	Register a provider .
10064	Send a message .
10065	Create a receiver blueprint for a provider .
10066	Return a dictionary of receiver blueprints .
10067	Receive a message .
10068	Receive a status message .
10069	Wraps a function to return a JSON response .
10070	Forward an object to one or more clients .
10071	Signs a web3 transaction .
10072	Estimate the gas amount of a transaction .
10073	Estimate gas needed to execute a transaction .
10074	Write to the output buffer .
10075	Read a line from the serial device .
10076	Send a message .
10077	Return the message as a string .
10078	Check if the message has bad headers .
10079	Attach a new attachment .
10080	Register services .
10081	Create a Config object from a module .
10082	Register resources .
10083	Raise ValueError if key is empty .
10084	Raise an exception .
10085	Setup the data manager .
10086	Return the number of non - zero bands in a given wavelength .
10087	Calculate the cauchy equation
10088	Initialize the authentication process .
10089	Login to the backend .
10090	Get a list of domains .
10091	Get all items from the backend .
10092	Patch an object .
10093	Delete an endpoint .
10094	Check if two paths are on the same volume .
10095	Create a directory .
10096	Initialize the logger .
10097	Raise UsageError .
10098	Claim a set of VCF files .
10099	Create a new column header based on MuTect metaheader .
10100	Claim a set of VCF files .
10101	Initialize population stats .
10102	Claim unclaimed file readers .
10103	Split data into multiple lines .
10104	Find the prefix of a line terminator .
10105	Return the suffix line terminator for the given data .
10106	Seek to the next line .
10107	Seek to the previous line .
10108	Return the last n lines of a file .
10109	Return the first n lines of a file .
10110	Follow the file .
10111	Claim a set of VCF files .
10112	Parse a VCF record .
10113	Return a dictionary of sample tag values .
10114	Return a set of tags for this VCFRecord .
10115	Join info fields .
10116	Format the field name .
10117	Return the field name for a sample .
10118	Return a string representation of the VCF .
10119	Add a sample tag value .
10120	Add or replace a filter .
10121	Return a list of available categories for a user .
10122	Returns a subclass of _ProductsForm .
10123	Create a form for staff products .
10124	Add a product error .
10125	Memoise a function .
10126	Return a form factory for a model .
10127	List items pending or purchased .
10128	Send an email .
10129	Iterates over OSM stream .
10130	Parse an OSM file .
10131	Iterate over OSM notes .
10132	Return True if the condition passes .
10133	Check if the given user meets the criteria .
10134	Return the quantity remaining for the given user .
10135	Pre - filter the queryset .
10136	Pre - filter the queryset .
10137	Filter out items that have been reserved beyond the limits .
10138	Filter out cancelled proposals .
10139	Pre - filter conditions .
10140	Decorator to mark a function as modified .
10141	Create a cart for a user .
10142	Auto extend the reservation .
10143	Add a voucher to the cart .
10144	Validate the cart .
10145	Fix simple errors .
10146	Recalculate the discounts for the cart .
10147	Add a discount to the cart .
10148	Create a report view .
10149	Yields all rows of a given content type .
10150	Create a form instance .
10151	Render data .
10152	List all reports .
10153	List items sold .
10154	Summary of all sales made .
10155	Get all payments .
10156	View credit note refunds .
10157	List product status .
10158	List usage by discount .
10159	List product line items .
10160	List invoices paid at a given date .
10161	View credit notes .
10162	List invoices .
10163	List attendees .
10164	Display a list of available speaker registrations .
10165	Show a manifest for a given product .
10166	Return a list of categories that are missing .
10167	Return the number of credit notes available for this invoice .
10168	Check if the user has sold out and unregistered .
10169	Guided registration page .
10170	Edit a profile .
10171	Handle a profile request .
10172	List products for a given category .
10173	Handles the products form .
10174	Handle a voucher .
10175	Checkout a cart .
10176	Redirect to the invoice view .
10177	Show a single invoice .
10178	Manage manual payment .
10179	Refund an invoice .
10180	Applies a credit note to an invoice .
10181	Amend registration form .
10182	Extend a user s reservation .
10183	Create an invoice mailout .
10184	List badges .
10185	Render a badge .
10186	Return a list of available discounts for a user .
10187	Annotate queryset with past uses .
10188	Returns a list of available products .
10189	Apply payment to invoice .
10190	Set the cancellation fee for this invoice .
10191	Generate a random access code .
10192	A lazy evaluation decorator .
10193	Get an object by name .
10194	Create a new invoice for a cart .
10195	Create a manual invoice .
10196	Generate line items from a cart .
10197	Apply credit notes to invoice .
10198	Check if the user can view this invoice .
10199	Refresh invoice data .
10200	Validate that the invoice is allowed to pay .
10201	Update invoice status .
10202	Mark invoice as paid .
10203	Check if the invoice matches the cart .
10204	Update the validity of the invoice .
10205	Marks the invoice as void .
10206	Refund the invoice .
10207	Send email to user .
10208	Update an annotation .
10209	Flatten a field .
10210	Print downloads .
10211	Download a file from GRR .
10212	Get data for a project .
10213	Returns a list of processor objects
10214	Print processor inputs .
10215	Run data .
10216	Upload a file to a processor .
10217	Upload a file .
10218	Download a list of data objects .
10219	Get all subclasses of a class .
10220	Get repo and project .
10221	Get variant phenotypes with suggested changes .
10222	Get variant phenotypes with suggested changes .
10223	Search variants by coordinates .
10224	Bulk search variants by coordinates .
10225	Update this element .
10226	Uniqify a sequence .
10227	Authenticate with Asana .
10228	Prompt the user to select a list .
10229	Get saved issue data .
10230	Move a saved issue to another namespace .
10231	Get saved task data .
10232	Get a task by id .
10233	Save data to file .
10234	Apply value to key .
10235	Decorate a function with a transport task .
10236	Flush the queue .
10237	Create a task .
10238	Format task numbers with links .
10239	Create a missing task .
10240	Return a list of data types for this project .
10241	Log EKM Meter Debug Message
10242	Initialize the serial port .
10243	Sets the polling values .
10244	Combine V4 and V3 definitions .
10245	Render JSON reads since a given timestamp .
10246	Set the context string .
10247	Calculate the FPF for a given position .
10248	Set maximum demand period
10249	Set meter password .
10250	Unpack data into a struct .
10251	Convert MeterData to a string .
10252	Render a serial block in JSON format .
10253	Check CRC of meter data .
10254	Split an Ekm date into a namedtuple .
10255	Get the months buffer .
10256	Set legal CT ratio .
10257	Assigns a schedule to the simulation .
10258	Assign a schedule to a season .
10259	Set the season schedules .
10260	Assign a holiday date .
10261	Read schedules .
10262	Given a schedule and a period extract the data for a given schedule and period .
10263	Read month tariffs .
10264	Extract a month tariff .
10265	Read Holiday Dates .
10266	Extracts the holiday date from the meter data .
10267	Read settings .
10268	Write a command message .
10269	Authenticates a password .
10270	Update all observers .
10271	Initialize the LCD lookup .
10272	Perform a request .
10273	Request A .
10274	Request a BDS packet .
10275	Make A and B fields .
10276	Calculate the fields of the block .
10277	Set the LCD display list .
10278	Set the relay state .
10279	Send termination string .
10280	Set the input ratio of a pulse .
10281	Set zero resettable KWH .
10282	Set the LCD password .
10283	Iterate over fields in a schema .
10284	Iterate over a schema .
10285	Generate paragraphs .
10286	Generate random text .
10287	Return a summary of the results .
10288	Colorize text .
10289	Show text .
10290	Return a summary of a result .
10291	Parse command line arguments .
10292	Setup ivoire .
10293	Run the example .
10294	Run the runner .
10295	Transform a describe node .
10296	Transform a describe body .
10297	Transform an example .
10298	Transform an example body .
10299	Returns an astroid . Arguments node .
10300	Register a file finder .
10301	Convert source code to Python code .
10302	Apply an argument parser to the command line .
10303	Load a module by its name .
10304	Load a module from a path .
10305	Discover all files in a directory .
10306	Return a checker for a given location .
10307	Return a function that checks if a file is a new message .
10308	Add a command to the config .
10309	Remove a file .
10310	Restart a place .
10311	Call a function .
10312	Create a new process monitor .
10313	Create a procmon service .
10314	Refreshes the session .
10315	Remove expired nodes .
10316	Remove a node from the cluster .
10317	Get the last time a node was updated .
10318	Get all nodes in the cluster .
10319	Refresh the session .
10320	Increment the number of times modified .
10321	Dereferences this node .
10322	Return a list of values separated by delimiter .
10323	Check if a path is bad .
10324	Merge two Status objects .
10325	Check if a token exists .
10326	Return a Query object for the given value .
10327	Return a constant function .
10328	Splat a function .
10329	Unsplat a function .
10330	Run a process .
10331	Make a service .
10332	Completely parse a reader .
10333	Create a parser for a literal .
10334	Create an optional parser .
10335	Repetition 1 parser .
10336	Create a repetition parser .
10337	Repetition 1 separator parser .
10338	Repetition separator parser .
10339	Check the state of a location .
10340	Close the call .
10341	Check if the state is valid .
10342	Add a heart service .
10343	Wrap a service in a multi - service .
10344	Freeze graph from checkpoint .
10345	Freeze the model .
10346	Save a graph only .
10347	Save graph only from checkpoint .
10348	Save weights from checkpoint .
10349	Restore from checkpoint .
10350	Parse a tag .
10351	Render the tag .
10352	Validate the arguments for a tag .
10353	Returns the context data for this tag .
10354	Parse a template tag .
10355	Get the context data for this field .
10356	Convert caffe to TensorFlow session .
10357	Freeze a graph .
10358	Save graph only .
10359	Make a list of rows from a sequence .
10360	Group an iterable into n sized chunks .
10361	Yields every item in an iterable .
10362	Remove duplicates from an iterable .
10363	Peek at the first element of iterable .
10364	Yields the first element of an iterable that satisfies a predicate .
10365	Partition items into bins .
10366	Return an iterable of items .
10367	Suppress exceptions from a list of callables .
10368	Return a list of tuples with duplicates in each group .
10369	Assert that iterable is ordered .
10370	Swap before and after items on miss .
10371	Partition a dictionary by key .
10372	Get first n queues .
10373	Reset the iterator .
10374	Parse as variable .
10375	Decorator to register a template tag .
10376	Get a descendant public keychain .
10377	Fetch sqlite master record list .
10378	Iterate over an object .
10379	Return True if selector matches obj .
10380	Parse a selector .
10381	Parse a selector production .
10382	Return the parents of lhs and rhs .
10383	Return the ancestors of lhs and rhs .
10384	Return the siblings of lhs and rhs .
10385	Parse nth - child production .
10386	Return a list of nodes matching the given validators .
10387	Send ICMP ping to dst .
10388	Make a request to the API .
10389	Expire the cache .
10390	Set the value of a key .
10391	Get the value of a key .
10392	Return True if k is in the store .
10393	Check if a beacon chain is valid .
10394	Create a NistBeaconValue from a JSON string .
10395	Load a NistBeaconValue from XML .
10396	Minify the response content .
10397	Execute a function on the file .
10398	Get a list of rows .
10399	Validate a token .
10400	Return a cryptography engine .
10401	Validate a token .
10402	Create a new token .
10403	Return a counter between a and b .
10404	Calculate a counter value between a and b .
10405	Given a total duration and a number of visits calculate the average duration .
10406	Add outputs to the routing hash .
10407	Setup sources
10408	Send an event to a source .
10409	Start a watchdog for each source .
10410	Parse a format string .
10411	Parse a log line .
10412	Validate that the field has a valid expiration date .
10413	Raise ValidationError if the message is missing .
10414	Verify a token .
10415	The name of the device .
10416	Warn user about nonlocal images .
10417	Connect receivers .
10418	Create a secret link .
10419	Send an accept notification .
10420	Send confirmation notifications .
10421	Send email validation notification .
10422	Send a rejected notification .
10423	Send email notification .
10424	Create a new secret link .
10425	Validate a token .
10426	Revoke the link .
10427	Create a new request .
10428	Get a request by receiver .
10429	Confirm email .
10430	Accept the request .
10431	Reject this request .
10432	Create a secret link .
10433	Generate a SHA512 hash of the given data .
10434	Verify a signature .
10435	Check if a record is embargoed .
10436	Access request handler .
10437	Confirm email address .
10438	Return an instance of SSHCommandClientEndpoint .
10439	Reverse a column .
10440	Return the selected option .
10441	Return a list of items in the query .
10442	Get the version of the package .
10443	Set a new version number .
10444	Initialize SSH configuration .
10445	Start timer .
10446	Tick the event loop .
10447	List secret links .
10448	Create a client .
10449	Stop the connection .
10450	Empty the queue .
10451	Add events to the queue .
10452	Create a client .
10453	Create Elasticsearch client .
10454	Encode an Event protobuf .
10455	Encodes a list of events into a protobuf message .
10456	Decodes a protobuf message .
10457	Send a list of events .
10458	Generate file previews .
10459	Retrieve a preview .
10460	Send a dict to RabbitMQ .
10461	Main message loop .
10462	Return True if we are in a hot loop .
10463	Respond to a challenge .
10464	Abort the SASL authentication .
10465	Perform SASL mapping .
10466	Admin footer tag .
10467	Build payment parameters .
10468	Build payment parameters for register credit card .
10469	Pay with an alias .
10470	Get the version string .
10471	Constructs the widget .
10472	Post - construction hook .
10473	Configure shortcuts .
10474	Activates the item at the given index .
10475	Called when the user selects an item .
10476	Navigates to the specified location .
10477	Finalizes the options .
10478	Run pyside - rcc .
10479	Clean the resource directory .
10480	Fetches all children .
10481	Re - fetch children .
10482	Returns the icon for the item at the given index .
10483	Call a process .
10484	Get the maximum file descriptor .
10485	Close a file descriptor .
10486	Close all open fds .
10487	Redirect stream to target .
10488	Set widget attributes .
10489	Import an app module .
10490	Import project modules .
10491	Include a template .
10492	Get the URL for a gravatar .
10493	Get a gravatar image .
10494	Check if path is a valid file system location .
10495	Check if the given URL is a valid S3 location .
10496	Get the absolute path to a template file .
10497	List the contents of a bucket .
10498	Build a JSON representation of the workflow .
10499	Execute the GBDX API .
10500	Archive a folder .
10501	Create a directory recursively .
10502	List all files matching a pattern .
10503	Restore a folder .
10504	Create a new API client .
10505	List files in a folder .
10506	Download a file .
10507	Check if a storage path exists .
10508	Get the parent entity for a given path .
10509	Create a folder .
10510	Uploads a local file .
10511	Delete a file or folder .
10512	Validate a storage path .
10513	Create a new client .
10514	Create a new storage instance .
10515	Get details about an entity .
10516	Set the metadata for an entity .
10517	Get metadata for an entity .
10518	Update metadata for an entity .
10519	Delete metadata for an entity .
10520	List projects .
10521	Get project details .
10522	Create a project .
10523	Delete a project .
10524	Create a folder .
10525	Get details about a folder .
10526	Delete a folder .
10527	Uploads a file .
10528	Copy the content of a file .
10529	Download a file .
10530	Get the signed URL for a file .
10531	Emit a record .
10532	Returns a copy of this request with the specified service and version .
10533	Return a new request with the specified headers .
10534	Return a new instance with the specified parameters .
10535	Throws an exception .
10536	Returns a list of field names to display .
10537	Create a map job .
10538	Run GATK GenotypeGVCFs .
10539	Run Oncotator .
10540	Sort the list by a function .
10541	Return a list of timestamps in seconds .
10542	Load data . json from folder .
10543	Shift the time series by t
10544	Return the sum of the raw data .
10545	Return a list of rfxcom commands .
10546	Create a new user .
10547	Parse VN results .
10548	Parse release results .
10549	Parse the production staff results .
10550	Parse character results .
10551	Parse tag results .
10552	Parse user results .
10553	Write a list of files to a tar file .
10554	Forall all files in a list of paths .
10555	Copies a file to a directory .
10556	Make spark parameters .
10557	Return a list of docker parameters to pass to Spark master .
10558	Refresh the metadata .
10559	Run MuTect .
10560	Create a new file .
10561	Return a list of streams in this directory .
10562	Export the device to a directory .
10563	Search VNDDB .
10564	Parse search results .
10565	Add a stream to the dataset .
10566	Reset the API key .
10567	List users
10568	Run BWA index
10569	Connect to the server .
10570	Add a stream to the database .
10571	Add a stream to the database .
10572	Insert a datapoint into the cache .
10573	Sync the database .
10574	Start syncing .
10575	Stop the sync thread .
10576	Download a URL .
10577	Upload a file to S3 .
10578	List labels in ontology .
10579	Show the hierarchy of the ontology .
10580	Get the mean size of a bam .
10581	Get the current Docker container ID .
10582	Run star indexing .
10583	Create a new schema .
10584	Export the stream to a directory .
10585	Return a Device object for this path .
10586	Get the labels of an ontology .
10587	Get the hierarchy of an ontology .
10588	Run the wrapper .
10589	Populates an argument parser from a dictionary .
10590	Get the empty config file .
10591	Get the path to the mounted volume .
10592	Add an option to an argument parser .
10593	Create an argument parser .
10594	Create a pipeline command .
10595	Set the authentication credentials .
10596	Handle a server response .
10597	Ping the server .
10598	Create a new resource .
10599	Update a resource .
10600	Delete a resource .
10601	Subscribe to a stream .
10602	Create a new user .
10603	Return a list of devices
10604	Run cutadapt .
10605	Run samtools faidx
10606	Run samtools index .
10607	Mark a BAM as duplication .
10608	Run samblaster .
10609	Mark duplicates in bam bai .
10610	Sort a BAM file .
10611	Run BaseRecalibrator .
10612	Run Kallisto Fusion
10613	Run RSEM on a BAM file .
10614	Get user affinity for a test .
10615	Send a command to the server .
10616	Subscribe to a stream .
10617	Connect to the websocket .
10618	Reconnect to the server .
10619	Resubscribes to all subscriptions .
10620	Called when a websocket is opened
10621	Called when a websocket is closed
10622	Called when an error occurs .
10623	Process a websocket message .
10624	Ping the websocket if necessary .
10625	Use GATK SelectVariants to select variants .
10626	Run GATK variant filtration .
10627	Run GATK variant recalibration .
10628	Apply variant recalibration .
10629	Combine variants with GATK .
10630	Quick check a bam file .
10631	Load handlers from a dictionary .
10632	Write configuration to disk .
10633	Get the configuration file .
10634	Get a term from an ontology .
10635	Search ontology by name .
10636	Suggest an ontology .
10637	Iterate over the descendants of an ontology .
10638	Iterate over the descendants of an ontology .
10639	Iterate over the labels in the ontology .
10640	Iterate over terms in a given ontology .
10641	Run fastqc .
10642	Add a stream to the query .
10643	Create a Flask application .
10644	Start Spark master container .
10645	Start Spark .
10646	Start the datanode
10647	Stop the worker .
10648	Check the status of the container .
10649	Base tokenizer .
10650	Lookup a zone .
10651	Fetch the configuration of a zone .
10652	Merge a list of resource record sets into one .
10653	Validate a changeset .
10654	Return a list of members with the best fitness score .
10655	Returns the fitness score of the cluster .
10656	Return the average cost function value for each member .
10657	Return the median cost_fn_val of all members .
10658	Returns a dictionary of parameters .
10659	Return a list of all members of this process .
10660	Add a parameter .
10661	Generate a new population .
10662	Normalize keys .
10663	Get all environment variables .
10664	Returns True if callable throws an exception .
10665	Transform a list of hits into a list of packages
10666	Transform result to string .
10667	Convert HTML to XHTML .
10668	Convert xhtml to HTML .
10669	Convert a document to HTML .
10670	Open in browser .
10671	Drop tree .
10672	Drop this tag .
10673	Get element by id .
10674	Return a CSSSelector with the given expression .
10675	Return a namedtuple of loghandler members .
10676	Get counts from environment variables .
10677	Returns True if the module is a single class .
10678	Returns True if there is only one module .
10679	Check that all parameters are valid .
10680	Check that the ID is correct .
10681	Decode a file system path .
10682	Escape a list of arguments .
10683	Return the codec name for the given encoding .
10684	Detects the encoding of the file .
10685	Get the remote address of a proxy .
10686	Convert an amount to a Decimal .
10687	Parse data from a string .
10688	Parse an XML file .
10689	Convert a BeautifulSoup tree to HTML .
10690	Get the current traceback .
10691	Return a string representation of the exception .
10692	Render a summary .
10693	Yields a plaintext traceback .
10694	Return a list of lines annotated with a function definition .
10695	Render the source table .
10696	Check if egg_info matches the search_name and link .
10697	Get the locations of the index URLs for a project .
10698	Find all versions of a project .
10699	Find a requirement .
10700	Sort a list of links .
10701	Get the content type of a URL .
10702	Return a generator of Link objects .
10703	Return True if this link is verifiable .
10704	Find data files for a package .
10705	Exclude data files from a package .
10706	Parse a requirements file .
10707	Join all lines in an iterator .
10708	Ignore comments in an iterator .
10709	Compile a marker .
10710	Visitor for environment markers .
10711	visit an Attribute node by returning a fresh instance of it
10712	Coerce a string to a number .
10713	Copy the current request context .
10714	Push this context onto the stack .
10715	Pop an app context .
10716	Return a copy of this instance .
10717	Match the current request .
10718	Push the current request context onto the stack .
10719	Make path relative .
10720	Check if a distribution is editable .
10721	Register a function to preprocess URL values .
10722	Add a function to the blueprint s url defaults list .
10723	Register an error handler .
10724	Stream a generator or a function .
10725	Make a response .
10726	Generate a URL for a given endpoint .
10727	Join a directory with a filename .
10728	Return the absolute path to the root directory of an import .
10729	Return a FileSystemLoader for the template folder .
10730	Run completion script .
10731	Get the cookie domain .
10732	Generate a cache key for a link .
10733	Determine if a wheel is purelib .
10734	Yield paths to uninstallation files .
10735	Check that the given version is compatible with this wheel .
10736	Build a single wheel .
10737	Iterate over all symbols in code .
10738	Decorate a method to ensure fresh rates .
10739	Add egg - info files .
10740	Write a delete marker file .
10741	Return True if we are running in a virtualenv .
10742	Get the user name .
10743	Install a distutils scheme .
10744	Parse cache - control headers .
10745	Return True if the request is in the cache .
10746	Cache the response .
10747	Update the zipimporter cache .
10748	Load template file .
10749	Install site . py .
10750	Save paths to file .
10751	Convert a value to another type .
10752	Add filters to filterer .
10753	Configure handler .
10754	Add handlers to logger .
10755	Common logger configuration .
10756	Execute a file .
10757	Temporarily override the temporary directory .
10758	Replace git + ssh with git + ssh
10759	Get an item from an object .
10760	Generate a source file .
10761	Compile Jinja templates .
10762	Get the default cache directory .
10763	Find all eggs in a zip file .
10764	Yield distributions on a path .
10765	Declare a package as a namespace .
10766	Return the mro of cls .
10767	Find the adapter for the given object .
10768	Ensure a directory exists .
10769	Iterate over all entry points in a group .
10770	Return True if this package can be added to the distribution .
10771	Find the best match for req .
10772	Evaluate a marker .
10773	Evaluate text using markerlib .
10774	Format a log record .
10775	Format a number as a currency .
10776	Parse a number pattern .
10777	Returns a decimal quantum for the given precision .
10778	Return the decimal precision of a number .
10779	Scientific notation elements .
10780	Return the total number of seconds since epoch .
10781	Parse requirements from a string .
10782	Return the patched class .
10783	Raise DistutilsSetupError if value is invalid .
10784	Fetch a build egg .
10785	Roll a dice .
10786	Convert an object to a Price class .
10787	Price validator .
10788	Validate the request .
10789	Get a specific method
10790	Apply a method to a resource .
10791	The blueprint module .
10792	Get the blueprint name .
10793	Attach a multidict to the request .
10794	Make an abstract distribution .
10795	Add a requirement .
10796	Walks a list of requirements and applies a handler to each requirement .
10797	Check whether a requirement should be skipped .
10798	Return a list of requirements to install .
10799	Return a list of all namespace packages .
10800	Serialize an object to JSON .
10801	Tokenize a document with an annotation .
10802	Merge two lists of tokens .
10803	Copy annotations from src to dest .
10804	Compress a list of tokens .
10805	Serialize a list of tokens into HTML .
10806	Expand a list of tokens into a list of HTML tokens .
10807	Find an unbalanced end tag .
10808	Given a list of chunks return a list of tokens .
10809	Flatten an element .
10810	Split text into words .
10811	Create a start tag .
10812	Return an HTML closing tag .
10813	Serialize an HTML fragment .
10814	Re - fixup inline tags .
10815	Extract constant from code .
10816	Returns the cache URL for this service .
10817	Autolink an element .
10818	Kill conditional comments .
10819	Create a document from a string .
10820	Decorate a function to return API return values .
10821	Return a TreeWalker for the given tree type .
10822	Export the repository to a directory .
10823	Get the revision number for a given location .
10824	Decorator to mark a function as a setup method .
10825	The name of the module .
10826	Whether to propagate exceptions .
10827	Find the path to the instance .
10828	Update the template context .
10829	Handle HTTP exceptions .
10830	Trap HTTP exceptions .
10831	Handle an exception .
10832	Raise the routing exception .
10833	Dispatch the request .
10834	Make a default OPTIONS response .
10835	Create a URL adapter .
10836	Inject default values for a given endpoint .
10837	Yield unique values from iterable .
10838	Handle package requirements .
10839	Convert a Requirement object to a requirement string .
10840	Convert a pkginfo file to metadata .
10841	Import all modules in this directory .
10842	Yields all classes in this module .
10843	Return a list of method names for this class .
10844	Find the basename of a file .
10845	Check if path is a module path .
10846	Walks the directory tree starting from basedir .
10847	Yields the absolute paths to all modules in this directory .
10848	Dumps the default arguments to a dictionary .
10849	Load default arguments for JSONDecoder .
10850	Set multiple values from a mapping .
10851	Increment the value of a key .
10852	Serialize a Python object .
10853	Build a dictionary of editable options
10854	Populates the link attribute .
10855	Ensure that the source directory exists .
10856	Remove temporary source .
10857	Returns a distribution object .
10858	Get data from the stream .
10859	Get WSGI headers .
10860	Convert an IRI to a URI .
10861	Get the cache directory for a user .
10862	Get the user data directory for a given application .
10863	Get the log directory for a user .
10864	Return the path to the user config directory .
10865	Return a list of site config directories for a given application .
10866	Iterate over all module files .
10867	Restart with reloader .
10868	Convert a string to text .
10869	Return the path to the CA bundle .
10870	Parse an HTML document .
10871	Parse a document from a stream .
10872	Parse a fragment .
10873	Return a sorted list of all transmissions for a given word .
10874	Convert args to tokens
10875	Bind to the server .
10876	Print the report .
10877	Load bytecode from file .
10878	Create a stylesheet param dict from a dictionary .
10879	Run a command .
10880	Get the implementation version string .
10881	Return a list of distributions for a location .
10882	Find external links .
10883	Open a local file .
10884	Process a URL .
10885	Return a list of paths removed from sys . path .
10886	Return a set of directories in sys . path .
10887	Add a package .
10888	Add sitedir to sys . path .
10889	Check if user site is enabled .
10890	Add user - site packages .
10891	Set quit signal .
10892	Alias mbcs .
10893	Set sys . setdefaultencoding .
10894	Force global eggs after local site packages .
10895	Fix sys . path .
10896	A wrapper around subprocess . Popen .
10897	Check if pyrex is installed .
10898	Convert .pyx sources to . c
10899	Run the debug application .
10900	Get a resource .
10901	Return a user agent string .
10902	Return True if name looks like a URL .
10903	Unpack a file url into a local directory .
10904	Download an HTTP URL .
10905	Return the path to the downloaded file .
10906	Register a new currency .
10907	Register an exchange .
10908	Decode data .
10909	Default template context processor .
10910	Render a template .
10911	Render a template .
10912	Render a template string .
10913	Parse a version string .
10914	Check if a variable is declared .
10915	visit a Name node by returning a fresh instance of it
10916	visit an Include node by returning a fresh instance of it
10917	visit a FromImport node by returning a fresh instance of it
10918	Create a wheelfile .
10919	Atomize a function .
10920	Create a service factory .
10921	URL - encode a string .
10922	Return a list of wheels that match a requirement .
10923	Populate a requirement set .
10924	Export Bazaar to location .
10925	Lookup an ASIN .
10926	Iterate over pages .
10927	Return the AmazonBrowseNode object of this node .
10928	A list of browse node objects .
10929	Get element by path .
10930	Get the text of an element .
10931	Get the date of the element .
10932	Price and Currency .
10933	List price .
10934	Send the request to the controller .
10935	Build a response .
10936	Make an attribute getter .
10937	Return a title from a string .
10938	Sorts a value .
10939	Group values by attribute .
10940	Perform a map operation .
10941	Create a logger .
10942	Compare two values in constant time .
10943	Verify a signature .
10944	Derive a key from the secret key .
10945	Generate a signature for the given value .
10946	Signs the given value .
10947	Verify a signature .
10948	Unsign a signed value .
10949	Signs the given value .
10950	Validate a signed value .
10951	Serialize an object to a string .
10952	Server error handler .
10953	Find all packages matching where .
10954	Return a generator that yields packages that require parents .
10955	Yields all directories in base_path .
10956	Prepare a cached response .
10957	Unsign a wheelfile .
10958	Unpack a wheel file .
10959	Install wheel scripts .
10960	Rearrange the graph .
10961	Redraw the canvas .
10962	Get a node by ID .
10963	Change the connection between all graphs .
10964	On edges event handler .
10965	Called when a component has changed .
10966	Handle left click .
10967	Called when a diagram canvas has changed .
10968	Clear the diagram canvas .
10969	Called when a domain model has changed .
10970	Map the domain model .
10971	Remove all elements from a model .
10972	Map new element to diagram node
10973	Set node attributes .
10974	Parse xdot data .
10975	Set font size .
10976	Process an ellipse .
10977	Process a polygon .
10978	Process a polyline .
10979	Process text .
10980	Process an image .
10981	Render a GridFS file .
10982	Save an object to a dot file .
10983	Load the dot file .
10984	Check if a point is in the image .
10985	Draw the bounds .
10986	Create a new dot graph wizard .
10987	Start the database layer .
10988	Parse dot code .
10989	Create a new graph
10990	Open a file dialog .
10991	Save the model to a file .
10992	Saves the model to a file .
10993	Configure the graph .
10994	Configure nodes .
10995	Configure edges .
10996	Godot dialog .
10997	Add a node to the graph .
10998	Add an edge .
10999	Add a subgraph .
11000	Add a cluster .
11001	Request a graph .
11002	Show options dialog .
11003	Configure dot code .
11004	Exit Godot .
11005	Move components to the origin .
11006	Save the object to a file - like object .
11007	Load from a file - like object .
11008	Save to a file .
11009	Load an object from a file .
11010	Alias a property .
11011	Parse a text file .
11012	Return a list of start words .
11013	Add a chain .
11014	Remove a chain .
11015	Build a chain .
11016	Generate a sentence .
11017	Create a graph .
11018	Add a node to the graph .
11019	Delete a node
11020	Get a node by ID .
11021	Delete an edge between two nodes .
11022	Add an edge to the graph .
11023	Add a subgraph to the graph .
11024	Called when a program has changed .
11025	Set the node lists of all edges .
11026	Parse a dot file .
11027	Parse a dot file .
11028	Build the top graph .
11029	Build a graph from a list of tokens .
11030	Get the units and multiplier for a given number of seconds .
11031	Format a duration in seconds .
11032	Update name and graph
11033	Create the graph editor interface .
11034	Split a sequence into n elements .
11035	Split an iterable into multiple windows .
11036	Main entry point .
11037	Get the children of an object .
11038	Append child to object .
11039	Insert a child into an object .
11040	Delete a child .
11041	Called when a node is replaced .
11042	Called when the children of an object have changed .
11043	Get the label for an object .
11044	Set the label of an object .
11045	Called when the label has changed .
11046	Initialize the widget .
11047	Update the editor .
11048	Add listeners to the graph editor .
11049	Called when a node is replaced .
11050	Called when a node has changed .
11051	Add nodes to the graph .
11052	Called when an edge has been replaced .
11053	Called when an edge has changed .
11054	Add edges to the graph .
11055	Parse an Xdot directive .
11056	Handle drawing events .
11057	Create a new node .
11058	Create a godot . edge . Edge from a table editor .
11059	Initialize a MongoEngineProxy .
11060	Parse xdot drawing directive .
11061	Parse a label directive .
11062	Called when a drawing has changed .
11063	Called when position changes .
11064	Called when component position changes .
11065	Normal right down event handler
11066	Show information about a particular style .
11067	Draw the main layer .
11068	Check if a point is in the polygon .
11069	Draw the main layer .
11070	Handle an event .
11071	Run the event loop .
11072	Returns a full page url .
11073	Render the previous and next links .
11074	Render the seo links .
11075	Return True if candidate matches pattern .
11076	Select the best matching content type .
11077	Rewrite a URL .
11078	Remove URL authentication .
11079	Create a URL identifier .
11080	Normalize host .
11081	Discover modules in directory .
11082	Discover modules in directory .
11083	Return a list of all modules in a module .
11084	List all classes in a module .
11085	List all classes in a module .
11086	Ensure a directory exists .
11087	Store a text blob .
11088	Check if a card number is a luhn number .
11089	Get the git version .
11090	Load a module .
11091	Add a path to the list of paths .
11092	Find a module by name .
11093	Split a line into two lines .
11094	Remove namespaces from the root element .
11095	Check that the current version is consistent with the desired version .
11096	Create a new instance from a dictionary .
11097	Merge another dictionary with this one .
11098	Execute all actions
11099	Create an instance from a YAML file .
11100	Add details to a message .
11101	Emit a record to the email .
11102	Set image_rendition to original .
11103	Log account attempt .
11104	Add URL to queue .
11105	Start the workers .
11106	Set a key value pair .
11107	Get the value of a key .
11108	Get the value of a key .
11109	Get the index for a key .
11110	Delete a key .
11111	Plot heatmap .
11112	Add a number of months to the current date .
11113	Add months to a date .
11114	Return True if this is a Christmas period .
11115	Use a music service .
11116	Use a storage service .
11117	Load data from a CSV file .
11118	Return a list of lists from a JSON file .
11119	Write data to JSON file .
11120	Filter by label .
11121	Average the values of a given label .
11122	Return feature importance report .
11123	Restore data from a dictionary .
11124	Merge two dictionaries .
11125	Decorator for dispatch functions .
11126	Decorator to mark a function as a method .
11127	Find all blocks for all apps .
11128	Verify that the given block is valid .
11129	Register a block .
11130	Unregister a block .
11131	Convert a file to MP3 .
11132	Return a string describing a reasonable version .
11133	Handle SSL redirect .
11134	Initialize celery task .
11135	Queue an email .
11136	Parse Accept header value .
11137	Parse a Cache - Control header value .
11138	Parse a content type string .
11139	Parse a forwarded header value .
11140	Parse a comma separated list .
11141	Parse a parameter list .
11142	Resize an image to fit the given width .
11143	Add a value .
11144	Download a file .
11145	Connect to Google Music .
11146	Upload a file .
11147	Connect to the music folder .
11148	Write sky parameters to txt file .
11149	Update filenames .
11150	Read AHPI from file
11151	Scale a_phi by scale_parameter
11152	Read pure water absorption from file .
11153	Read pure water scattering from file .
11154	Read iop from file
11155	Write iop to file .
11156	Build the b
11157	Build total absorption
11158	Build total attenuation C
11159	Build all b and c from IOPs
11160	Batch parameters .
11161	Read a parameter file into a dictionary .
11162	Convert a string to a list of floats .
11163	Read a PR report .
11164	Set a signal handler .
11165	Handle a signal .
11166	Default signal handler .
11167	Pause the process .
11168	Abort the process .
11169	Process a status signal .
11170	Unregisters an event from the specified list .
11171	Fetch metric data .
11172	Return a sorted list of metrics .
11173	Collect n elements from an iterable .
11174	Pretty print an item .
11175	Pretty - print an iterable .
11176	Get the signature of a function .
11177	Get the signature from a partial .
11178	Return a copy of argv with new positional and keyword arguments .
11179	Return True if filename should be ignored .
11180	Return the key for a file .
11181	Convert a VLQ encoded string to an integer .
11182	Read a table .
11183	Parse the user data header .
11184	Convert seconds to a duration string .
11185	Print details about the game .
11186	Get the data from the GUI .
11187	Search file result .
11188	Write a batch to a file .
11189	Data processing .
11190	Display the graphic connection .
11191	Print graphic information .
11192	Display error message .
11193	Hides the error message .
11194	Run planarrad
11195	Cancel planarrad .
11196	Quit the program .
11197	Saves the current figure .
11198	Opens the log file .
11199	Open documentation page .
11200	Prerequisite actions .
11201	Click event handler
11202	Mouse move event handler
11203	Display the target graphic .
11204	Create a lockset for signing a genesis block .
11205	Sign the message .
11206	Hash the message .
11207	Return True if this node is valid .
11208	Issue funds .
11209	Get the lock for the last round .
11210	Return the block proposal that was last voted .
11211	Return the last valid lockset .
11212	Get the amount of time to wait before timing out .
11213	Called when a proposal is received .
11214	Generate a list of private keys .
11215	Delay a packet .
11216	Deliver packet to sender .
11217	Create a NAC proxy .
11218	Return the native contract class for the given address .
11219	Register a native contract .
11220	Update the filter .
11221	Receives a list of transactions
11222	Convert from VGG to RGB
11223	Convert image to VGG
11224	Returns the function for the given layer .
11225	Get layer output .
11226	Get the features of a layer .
11227	Create a new key file .
11228	Finish the job .
11229	Load a table from a file .
11230	Put items into the batch .
11231	Release this bulk load .
11232	Returns a list of table names .
11233	Fix compilation errors .
11234	Find the Teradata home directory .
11235	Get the value of a key .
11236	Set a configuration value .
11237	Display a table .
11238	Execute a command .
11239	Get the value of a key .
11240	Write a default configuration file .
11241	Set the columns to be filtered .
11242	Write a TeradataEncoder to an archive .
11243	Return the settings as a string .
11244	Convert string to float with multiplier .
11245	Parse a specific gain string .
11246	Parse a device settings string .
11247	Wrap text with indent .
11248	Detect Soapy devices .
11249	Set the center frequency .
11250	Calculate the PSD result .
11251	Wait for a result .
11252	Update the PSD .
11253	Read data from file .
11254	Write data to file .
11255	Submits a function to the queue .
11256	Return the number of repeats for a given number of bins .
11257	Calculate frequency plan .
11258	Create a buffer .
11259	Setup the stream .
11260	Stop the stream .
11261	Tune the device to the specified frequency .
11262	Sweep a frequency series .
11263	Set the slave address .
11264	Run CMake .
11265	Return a list of datetimes that are less than or equal to number .
11266	Return a new datetime with the same hour minute second and microsecond .
11267	Mask a date to a specific weekday .
11268	Return a list of datetimes that should be kept .
11269	Return a list of datetimes that should be deleted .
11270	Return a set of dates to keep .
11271	Return a list of dates to delete .
11272	Get SPI control byte .
11273	Read a single bit .
11274	Write a single bit .
11275	Get the bit number of a given bit pattern .
11276	Watch a port for interrupts .
11277	Handle events .
11278	Bring interrupt to userspace .
11279	Set the interrupt edge .
11280	Wait until a file exists .
11281	Register a pin function map .
11282	Deregisters a function map .
11283	Enable interrupts on the GPIO pin .
11284	Send bytes to the SPI .
11285	Render the accordion group .
11286	Return True if the form has any errors .
11287	Render a link to the form .
11288	Extract the version of a package .
11289	Add a pack parameter to the form .
11290	Check the status of the response .
11291	Make a GET request .
11292	Download a file .
11293	Upload a link to a folder .
11294	Upload a file .
11295	Upload a remote file .
11296	Get the status of a remote upload .
11297	List a folder .
11298	List running conversions .
11299	Calculate humidity from temperature and dewpoint .
11300	Calculate dewpoint from temp and humidity .
11301	Publish a message .
11302	Calculate the CRC of the given data .
11303	Verify checksum of data .
11304	Unpack Storm date .
11305	Determine if we should use B archive .
11306	Wakeup device .
11307	Send a command to the weather station .
11308	Send DMPAFT command .
11309	Get the newest archive fields .
11310	Parse the loop fields .
11311	Update weather data .
11312	Initialize logging .
11313	Return a list of pub services
11314	Get wind gust .
11315	Set parameters for PWS .
11316	Set arguments .
11317	Publish the configuration file .
11318	Decorate a function to accept a request .
11319	Initialize the application .
11320	Return True if all requirements are satisfied .
11321	Push override onto the stack .
11322	Pop an override context from the stack .
11323	Override the current context .
11324	Push additional context onto the stack .
11325	Pop an additional context from the stack .
11326	Add additional items to the stack .
11327	Remove duplicate field names .
11328	Interpret the results of a query .
11329	Extract params from query .
11330	Run a query .
11331	Returns a pandas . DataFrame with the current state of the object .
11332	Get the graph of the results .
11333	Plot a pie chart .
11334	Plot the data .
11335	Plot a bar chart .
11336	Write results to a CSV file .
11337	Check if a user has permission .
11338	Return the context data for this widget .
11339	Returns a list of tuples with widget name and widget instance sorted by position .
11340	Returns a list of widgets that need to be updated .
11341	Register a widget .
11342	Unregister a widget class .
11343	Get the last update for this widget .
11344	Get a widget setting .
11345	Save a setting .
11346	Check if we should update .
11347	Convert an array to a numpy array .
11348	Return an array of the same shape as this array .
11349	Concatenate two bolt arrays .
11350	Checks whether any of the given arguments is a SparkContext .
11351	Format axes .
11352	Wrap a function in a BoltArraySpark .
11353	Align the array with the given axes .
11354	Convert to a Spark DataFrame .
11355	Return a tordd array .
11356	Stack a RDD into a new RDD .
11357	Apply a function to each element of the RDD .
11358	Chunk the RDD .
11359	Apply a function to each element of this RDD .
11360	Apply a function to each element of the RDD .
11361	Get the plan for the given axes .
11362	Remove padding from value .
11363	Get the number of chunks in a plan .
11364	Return a list of slices for a plan .
11365	Return a boolean mask for the given indices .
11366	Repartition the RDD .
11367	Return a stacked version of this RDD .
11368	Align the data along the specified axis .
11369	Return the first element of this RDD .
11370	Return the statistics of this RDD .
11371	Return the mean along an axis .
11372	Return the variance of the data .
11373	Standard deviation along specified axis .
11374	Sum along an axis .
11375	Return the maximum along an axis .
11376	Return the minimum along an axis .
11377	Return a chunk of this RDD .
11378	Swap kaxes and vaxes .
11379	Transpose the matrix .
11380	Swap two axes .
11381	Reshape this BoltArray to a new shape .
11382	Reshape the key and values to the given shape .
11383	Squeeze the array along the specified axis .
11384	Return a new RDD with a new dtype .
11385	Clip this RDD to a specified range .
11386	Convert to numpy array .
11387	Convert an argument to a tuple .
11388	Convert any iterable into a tuple .
11389	Raise ValueError if shape is not in axes .
11390	Return True if a and b are all close .
11391	Listify a list of integers .
11392	Slicify a slice .
11393	Check that new and old axes are consistent .
11394	Check that new and old are reshapeable .
11395	Concatenate all stacked values .
11396	Return an expanded version of arry .
11397	Zip the RDD with index .
11398	Wrap a function so that it can be used as a decorator .
11399	Lookup a constructor .
11400	Reshape this RDD to a new shape .
11401	Transpose a BoltArray .
11402	Reshape this RDD to a new shape .
11403	Transpose the array .
11404	Return a new array with the specified shape and dtype .
11405	Return an array of zeros of the specified shape .
11406	Concatenate multiple arrays along an axis .
11407	Compute the discrete likelihood of the given data .
11408	Return the alpha value of the most likely likelihood .
11409	alpha = 1 . 0 + log(x - xmin
11410	Find the best alpha value for the given data .
11411	Find the best alpha value for each sample .
11412	Plot a PPF .
11413	Calculate the lognormal distribution
11414	Sanitize turbo tags and attributes .
11415	Configure Yandex Analytics .
11416	Given a list of tags return a list of tuples of the tag name and the tag name .
11417	Return MD5 hash of the key .
11418	Calculate the SHA256 hash of the key .
11419	Return the SHA512 hash of the key .
11420	Parse a long from data .
11421	Decode a base64 encoded key .
11422	Parses and validates options .
11423	Process an RSA key .
11424	Process a DSA key .
11425	Process ECDSA hash data .
11426	Process ed25519 keys .
11427	Parse public key data .
11428	Perform a step .
11429	Step a token .
11430	The list of mechanisms supported by the device .
11431	Store credentials .
11432	Main entry point .
11433	Initialize distributions .
11434	Create an audio file .
11435	H5bp CSS .
11436	Return a normalized version of DJFRONTEND_NORMALIZE .
11437	Generate a fontawesome stylesheet .
11438	Generate a modernizr page .
11439	Return a jQuery version of the DJ frontend .
11440	Return a jQuery UI script .
11441	Include jQuery DataTables .
11442	Return a jQuery . dataTables stylesheet .
11443	Include jquery . dataTables_themeroller stylesheet .
11444	Generate jQuery formset .
11445	Return the jQuery scrollto javascript .
11446	Generate jQuery smooth scroll javascript .
11447	Return a twbs css link .
11448	Returns a JavaScript script tag that can be used to launch Google Analytics .
11449	Render a textarea .
11450	Generate a list of hashes for authentication .
11451	Calculate the expiry time for a given number of minutes .
11452	Generate a user token .
11453	Serialize a user .
11454	Deserialize a profile .
11455	Update a profile .
11456	Auth failed .
11457	Validate a user .
11458	Check if the request is secure .
11459	Get a user s username
11460	Create a new user .
11461	Logs a user in .
11462	Logs out the user .
11463	Login with password or resume token .
11464	Login with password .
11465	Login with a resume token .
11466	Change password .
11467	Forgot password .
11468	Reset password .
11469	Merge two dicts recursively .
11470	Read a file .
11471	Get the AleaIdField for an object .
11472	Given a list of object_ids return a dictionary of object_pk - > object_id
11473	Given a model and a meteor_id return the corresponding object_id .
11474	Given a list of meteor ids return a list of object ids .
11475	Get an object by id .
11476	Set default forwards for a given operation .
11477	Set default reverse .
11478	Truncate the database tables .
11479	Truncate database forwards .
11480	Truncate the database backwards .
11481	Initialize options .
11482	Finalize options for the build command .
11483	Run meteor build .
11484	Convert a path to a directory .
11485	Seed the random number generator .
11486	Return a dictionary of state information .
11487	Generate a random string .
11488	Decorator for API endpoints .
11489	Iterate over all API endpoints of an object .
11490	Clears the API path map cache .
11491	Pretty print a value .
11492	Validate kwargs .
11493	Called when the connection is opened .
11494	Close the connection .
11495	Process a message .
11496	Process DDP frames from a message .
11497	Process a DDP message .
11498	Dispatch a message .
11499	Connect to the server .
11500	Receive a ping message .
11501	Subscribe to a channel .
11502	Unsubscribes from a channel .
11503	Receive a method .
11504	Send a 200 OK response .
11505	Serve the application .
11506	Main entry point .
11507	Print a message .
11508	Stop the postgres greenlet .
11509	Run the postgres greenlet .
11510	Run the database connection .
11511	Poll for NOTIFYs .
11512	Turn greenify on .
11513	Generate a random ID .
11514	Auto - discover DDP APIs .
11515	Return a dict representation of the error .
11516	Get a factory instance .
11517	Emit a record .
11518	Create a middleware that can be used for negotiation .
11519	Add a route context to the application .
11520	Add a resource object .
11521	Run the application .
11522	Send a message .
11523	Send multiple APNs messages .
11524	Fetch inactive APNs registration IDs .
11525	Send gcm message .
11526	Send a bulk message .
11527	Send registration data to GCM .
11528	Send data to the API .
11529	Get a model from a module .
11530	Fast forward selection algorithm .
11531	Search Giphy API .
11532	Translate Giphy terms to GIFs .
11533	Get trending gists .
11534	Retrieve a GIF .
11535	GIPHY screensaver .
11536	Upload a file to Giphy .
11537	Return normalized data .
11538	Fetch data from API .
11539	Translate a GIF .
11540	Get trending images .
11541	Fetch a GIF .
11542	Upload a GIF .
11543	Create an access control element .
11544	Authenticate with YoutuBE .
11545	Upload a video .
11546	Check the upload status of a video .
11547	Update a video .
11548	Delete a video .
11549	Check video availability .
11550	Show a video .
11551	Show a list of videos .
11552	Upload a video .
11553	Upload a video .
11554	Uploads a video .
11555	Remove a video .
11556	Get the entry for this video .
11557	Save the instance .
11558	Delete a video .
11559	Update metadata .
11560	Updates a metadata field .
11561	Update this item .
11562	Parse a string into a list of AST nodes .
11563	Dumps a list of trees to a string .
11564	Load data from a file .
11565	Read a file .
11566	Parse a node from a string .
11567	Create a new node .
11568	Return a newick representation of this node .
11569	Return ascii art .
11570	Return the node with the given label .
11571	Prune the tree .
11572	Resolve polytomies .
11573	Remove all internal names .
11574	Remove leaf names .
11575	Decorator for functions that require authentication .
11576	Disposes a JSON string .
11577	Raise an exception if the setting is not defined .
11578	Get the argument with the given name .
11579	Get a list of values for a parameter .
11580	Decorate a callback to be called asynchronously .
11581	Get a cookie .
11582	Clear a cookie .
11583	Redirect the user to the OpenID endpoint .
11584	Get an authenticated user .
11585	Generate OAuth request parameters .
11586	Redirect the user to the OpenID endpoint .
11587	Make a request to the Facebook API .
11588	Get an authenticated user .
11589	Concatenate a list of arguments into a URL .
11590	Parse a header line .
11591	Add a value to the headers .
11592	Get a list of headers .
11593	Parse a line of text .
11594	Parse headers from a string .
11595	Normalize a header name .
11596	Convert unicode to utf - 8 .
11597	Convert value to unicode .
11598	Convert a value to a basestring .
11599	Recursively convert obj to unicode .
11600	Raise bottle . PluginError if this plugin has conflicting settings .
11601	Iterate over all subclasses of cls .
11602	Select a policy .
11603	Return the number of occupied points .
11604	Write a gro file .
11605	Write a PDB file .
11606	Return a list of molecule numbers .
11607	Resize a PBC for lipids .
11608	Write a rudimentary topology file .
11609	Yield lines from a resource file .
11610	Send a message to a user .
11611	Send a message to a list of users .
11612	Get messages for a user .
11613	Process a response .
11614	Check config file .
11615	Verify that the profile name is valid .
11616	Retrieve data from config .
11617	Retrieve password from config .
11618	Update config data .
11619	Update config password .
11620	Create a config profile .
11621	Display required items
11622	Get data from user
11623	Get auth from user .
11624	Configure a profile .
11625	Write data to a profile .
11626	Write auth data to config file .
11627	Add attachments to the message .
11628	Send the message .
11629	Send a message .
11630	Factory for creating a new message .
11631	Create a credential property .
11632	Validate a property .
11633	Validate input .
11634	Ensure Twilio is valid .
11635	Validate SlackPost .
11636	Validate whatsapp .
11637	Send a coroutine to the server .
11638	Add a message to the queue .
11639	Get body from file .
11640	Cleans up keyword arguments .
11641	Send a message .
11642	Get chat id by username .
11643	Send the message .
11644	Send the message .
11645	Get the SMTP server for the given address .
11646	Generate an email message .
11647	Add headers to the message .
11648	Add the body to the message .
11649	Add attachments to the message .
11650	Get a SMTP session .
11651	Returns a SMTP_SSL instance .
11652	Create a TLS session .
11653	Send the email .
11654	Save tags to file .
11655	Unload the image .
11656	Get a region of the image .
11657	Validate the internal dictionary .
11658	Clear the internal list .
11659	Return a bytes object containing the contents of this tag .
11660	Read data from file .
11661	Delete the file .
11662	Resize the file .
11663	Insert a chunk .
11664	Save the frame to a file .
11665	Delete a file .
11666	Parse a file .
11667	Process a normal line .
11668	Add a block of lines .
11669	Draw a string .
11670	Parse ISO 8601 time string .
11671	Turn a list of words into an HTML line .
11672	Make an HTML word .
11673	Make an HTML paragraph .
11674	Make HTML code .
11675	Make HTML code for a list of items .
11676	Save metadata to a file .
11677	Update parents .
11678	Run the game .
11679	Register a mapping .
11680	Get a registered controller .
11681	Registers a freeform key .
11682	Signs a string with the AWS secret access key .
11683	Return a dict of request headers .
11684	Send a request to the API .
11685	Send a GET request .
11686	Send a POST request .
11687	Send a DELETE request to the API .
11688	Create an APEValue from a string .
11689	Send a request .
11690	Perform an autopaginating API call .
11691	List hosted zones .
11692	Create a hosted zone .
11693	List resource record sets by zone id .
11694	Change a resource record set .
11695	Draw an image .
11696	Draw an image region .
11697	Return the size of the packet .
11698	Replace old pages with new pages .
11699	Find the last page in a stream .
11700	Set a section .
11701	Add markup to the document .
11702	Process content .
11703	Get a markup by tag name .
11704	Create a writer for a hosted zone .
11705	Lock a file .
11706	Insert bytes into a file .
11707	Delete a file .
11708	Convert data to UTF - 8 .
11709	Add a change .
11710	Parse a change info element .
11711	Measure a string .
11712	Return True if this object has been modified .
11713	Delete this resource record set .
11714	Save this record set .
11715	Parse an ID3v1 tag .
11716	Make ID3 v1 format .
11717	Read up to size bytes from the file .
11718	Delete all keys with the given key .
11719	Register a frame .
11720	Update common frames .
11721	Update to v24 .
11722	Unload the sound .
11723	Play a sound .
11724	Set the start and end samples of the loop .
11725	Return a list of glyphs and values
11726	Filter glyph names based on a filter .
11727	Dump an encoding list to a file .
11728	Dump an unsigned array .
11729	NAME postscript . py
11730	Check if a file exists .
11731	Make a list of file paths .
11732	Parse a HostedZone XML element .
11733	Parse a delegation set .
11734	Write a list of blocks into a binary string .
11735	Group blocks by padding .
11736	Delete all metadata blocks .
11737	Save metadata to a file .
11738	Parse a RRset alias .
11739	Parse a list of resource record values .
11740	Parse a resource record set .
11741	Delete this HostedZone .
11742	Add a record to this zone .
11743	Create a new A resource record .
11744	Create an AAAA record .
11745	Create a cname record .
11746	Create MX resource record .
11747	Create a NSResourceRecordSet .
11748	Create a PTR record .
11749	Create a new SPF record .
11750	Create a SRV record .
11751	Create a TXT record .
11752	Registers a TXXX key .
11753	Get the initial values for a change .
11754	Write a change to XML .
11755	Write a change set to XML .
11756	Initialize the logs directory .
11757	Return the item with the given alias .
11758	Freeze a dictionary .
11759	Join HTML attributes .
11760	Initialize the application .
11761	Initialize the bars .
11762	Bind a bar .
11763	Return a dictionary of the command line arguments .
11764	Return the URL for this resource .
11765	Return True if this request is the current request .
11766	Validate metric class .
11767	Get a statistic by name .
11768	Calculate statistics .
11769	Autodiscovers all installed apps .
11770	Return a CSV dump of a metric .
11771	Handle the command .
11772	Get the value of a GET variable .
11773	Get a GET parameter as a boolean .
11774	Get the next colour .
11775	Returns a dictionary of parameters to pass to Gecko
11776	Returns a tuple of the number of weeks and the number of months .
11777	Returns a tuple of the latest count and the title of each metric .
11778	Generate a geckoboard line chart .
11779	Returns the latest geckometer for a given metric .
11780	Returns a list of tuples of the latest count for each metric .
11781	Returns a list of all active stats .
11782	Register gadget .
11783	Get the context data for this widget .
11784	Print a message and exit .
11785	Decorator to validate a function s parameters .
11786	Prompt user for long input .
11787	List input .
11788	Prompts the user for a file name .
11789	Get the schedule for a given year .
11790	The winner of the game .
11791	Season of this date .
11792	List the starters of the game .
11793	Surface of the game .
11794	Coin - toss game .
11795	Get weather information .
11796	Sports ref information .
11797	Schedule games from each month .
11798	Get the standings of the sports .
11799	Get team stats table
11800	Get roy voting data .
11801	Returns the line score of the team .
11802	Return the season of this date .
11803	Get player stats .
11804	Change working directory to dirPath .
11805	Decorator to cache URLs .
11806	Return the key for a class instance .
11807	Memoize a function .
11808	Calculate the age of a person .
11809	Get stats table .
11810	Get stats per game .
11811	Returns a table of the total number of rows .
11812	Get the per - minute stats from the server .
11813	Get stats per 100 percent .
11814	Get the advanced stats table .
11815	Get a summary of the shooting statistics .
11816	Get a summary of the advanced PBP stats .
11817	Get basic game log data .
11818	Get session data
11819	Expand details DataFrame .
11820	Add team and opp columns to features .
11821	Add features for each team .
11822	Initial win prob .
11823	Return a DataFrame of passing playoffs .
11824	Returns a list of awards for a given year .
11825	The name of the team .
11826	Get boxscores for a given year .
11827	Return a pq object for a year .
11828	Get a list of coach IDs for a given year .
11829	Schedule games for a given year .
11830	Return the offensive coordinator for a given year .
11831	Defensive Coordinator .
11832	Return the Stadium link for a given year .
11833	Returns the offensive scheme for a given year .
11834	Defensive Alignment .
11835	Get off splits for a given year .
11836	Get HTML from given URL .
11837	Flatten links in a TD .
11838	Convert a relative URL to an ID .
11839	Convert keyword arguments to a query string .
11840	Read process .
11841	Return a direct put .
11842	Get a read lock .
11843	Close the connection .
11844	Get a batch of examples .
11845	Get the remainder of a batch .
11846	Get a queue from the dataset .
11847	Return a generator that yields rows from a path .
11848	Parse a file or file - like object .
11849	Write objects to a file .
11850	Read varint from file .
11851	Yield objects from the file .
11852	Close the file descriptor .
11853	Write a list of pb2 objects .
11854	Flush the write buffer .
11855	Get the game directory .
11856	Input text with keyboard emulation .
11857	Make a fake movie .
11858	Evaluate traits .
11859	Wait until condition is true .
11860	Wait until all traits are present .
11861	Add a list of exceptions to ignore .
11862	Get the main volume of the system .
11863	Return the source of the given operator .
11864	Send a message .
11865	Get status of NAD .
11866	Power off the device .
11867	Power on .
11868	Set the volume .
11869	Select a source
11870	Deobfuscates a key .
11871	Calculate the CRC32 checksum of plaintext .
11872	Obfuscates a value .
11873	Check for missing songs
11874	Return a list of all links
11875	check if song name is valid
11876	Parse a song .
11877	Generate a URL for a song .
11878	Parse download url .
11879	Parse a song from Google .
11880	Download an HTML page .
11881	Download a file using requests .
11882	Download a file using wget .
11883	Find station codes by city name .
11884	Get a location observation .
11885	Parse an observation response .
11886	Get a station observation .
11887	Return a list of search paths .
11888	Return a list of available compilers .
11889	The mimetype of the file .
11890	Return the mimetype of the compiler result .
11891	Return the compiler format extension .
11892	Register a processor for a mimetype .
11893	Unregister a processor .
11894	A list of paths to search for .
11895	Register the default settings for this extension .
11896	Import QtCore .
11897	Returns a netnode object with the metadata of the settings .
11898	Add a plugin name to the list of available plugins .
11899	Remove a plugin name .
11900	Import settings from config file .
11901	Export settings to ini format .
11902	Returns a DirectoryIDASettings instance .
11903	Iterate over all keys in the database .
11904	Simple error handler .
11905	Get a DynamoDB table .
11906	List DynamoDB tables .
11907	Fetch items for a given category .
11908	Return the ID of a metadata item .
11909	Return the updated_on timestamp of the item .
11910	Fetch the owner team for a crate .
11911	Fetch the owner user for a crate .
11912	Fetch Crate versions
11913	Fetch Crate version downloads
11914	Fetch data from Crate API .
11915	Get a summary of the CATEGORY .
11916	Get a list of crates from the server .
11917	Get raw crate data .
11918	Get raw attribute data for a crate .
11919	Fetch a page of items .
11920	Fetch items from the server .
11921	Fetch items from Kitsune .
11922	Get a list of questions .
11923	Fetch all items of a given category .
11924	Return the updated date of an item .
11925	Return the category of an item .
11926	Get items from ReMo .
11927	Return a list of buffers .
11928	Return the priority of the request .
11929	Close the context .
11930	Submit a list of blocks .
11931	Cancel a block .
11932	Cancel all pending transfers .
11933	Get events .
11934	Fetch all items of a given category .
11935	Get all cells spreadsheet data .
11936	Parse the feed .
11937	Return a list of export formats for the given pid type .
11938	Get the permission factory .
11939	Create blueprint .
11940	Create a URL rule .
11941	Create a record view .
11942	Default view method .
11943	Export a record .
11944	Time a callable .
11945	Close the socket .
11946	Remove a client .
11947	Increment a counter .
11948	Send a timing metric .
11949	Timing since a given time .
11950	Send a gauge metric .
11951	Send a gauge delta request .
11952	Set a metric .
11953	Send data to the server .
11954	Create a batch client .
11955	Return a unit client .
11956	Send all pending batches .
11957	Create a MyPermissionChecker
11958	Create a batch client .
11959	Flush all pending batches .
11960	Create a unit client .
11961	Create a user .
11962	Interprets x as an OpenMath object .
11963	Convert a term to OpenMath .
11964	Convert an object to Python .
11965	Convert an object to OpenMath .
11966	Register a converter to the conversion registry .
11967	Register a conversion function to python .
11968	Initialize the application .
11969	Yield valid choices .
11970	Split kwargs into model fields and fields_agrs .
11971	Register a function as a field type .
11972	Create a value for this field .
11973	Return a tuple of form data and form files .
11974	Decorator to mark a field as required .
11975	Decorator for field choices attribute .
11976	Return data for a decimal field .
11977	Format email field data .
11978	Generate a random date .
11979	Generate data for a datetime field .
11980	Return the data for a float field .
11981	Return a string representation of an integer field .
11982	Generate a random time .
11983	Return the data for a choice field .
11984	Generate data for a multiple choice field .
11985	Return a random choice of the model s choices .
11986	Encode a Python object to bytes .
11987	Publish package .
11988	Tag the repository .
11989	Decorator to check if a field is blank .
11990	Load a Python global .
11991	Build an instance from a state .
11992	Create an OMList .
11993	Return an OMApplication for a tuple .
11994	Decode data into bytes .
11995	Encodes data into a byte string .
11996	Return a fixed value .
11997	Format a number .
11998	Format a number as money .
11999	Convert numpy data to numpy array .
12000	Create a compressed array from a numpy array .
12001	Add a workspace .
12002	Remove a workspace .
12003	List workspaces
12004	Get a WebSocket by name .
12005	Check if a repository exists .
12006	Synchronize workspaces with repositories
12007	Clone a repository .
12008	Check if ndio is available .
12009	Convert an array to a list of voxels .
12010	Create a vector from a list of voxels .
12011	Print a workspace .
12012	Update a repository
12013	Set the console handler .
12014	Execute a command .
12015	Load a PNG file .
12016	Save numpy data to a PNG file .
12017	Save a collection of numpy arrays .
12018	Print the status of a workspace .
12019	Print the status of a repository .
12020	Get the block size for a given token .
12021	Post a cutout without chunking .
12022	Load a Tiff file .
12023	Save numpy data to a PNG file .
12024	Load a multi - layer Tiff file .
12025	Write configuration to file .
12026	Clone a repository .
12027	Get the version of yoda .
12028	Say hello .
12029	Decorator for command line options .
12030	Reserve IDs for a channel .
12031	Merge multiple ids into a channel .
12032	Propagate data to channel
12033	List projects in a dataset .
12034	Get a dataset by name .
12035	List datasets .
12036	Parse command line options .
12037	Show a workspace .
12038	Show a workspace .
12039	Show all workspaces
12040	Return the URL for the given endpoint .
12041	Guess the format from a file extension .
12042	Open a file .
12043	Convert from one format to another .
12044	Build a graph .
12045	Compute invariants for a graph file .
12046	Convert a graph to a given format .
12047	Convert ramons to a dictionary .
12048	Get RAMON type .
12049	Delete a channel .
12050	Add a dataset .
12051	Return a JSON formatted representation of a dataset .
12052	Create a dictionary for a dataset .
12053	Create a channel dictionary .
12054	Create a dictionary for a project .
12055	Identify image dimensions .
12056	post data to ndio
12057	Find the path to a repository .
12058	Returns a list of public tokens .
12059	Get information about a project .
12060	Set metadata .
12061	Make a GET request to the given URL .
12062	Make a POST request to a URL .
12063	Delete a URL .
12064	Load data from a HDF5 file .
12065	Save array to HDF5 file .
12066	Infer gaps in tree .
12067	Recover an IO .
12068	Install jinja translations .
12069	Acquire an exclusive lock .
12070	Calculate the percent of a part .
12071	Get statistics about the cache server .
12072	Get a list of cache slabs
12073	Return a dict with the context data .
12074	Show the status of the memcache server .
12075	Displays a dashboard page .
12076	Show statistics about the memcache server .
12077	List Slabs for a server .
12078	Convert a number of bytes to a human readable string .
12079	Find a Config object from a dictionary of children .
12080	Add a directory to the environment .
12081	Applies an applicator to the config file .
12082	Absolute path to this file .
12083	Read the contents of the file .
12084	Write data to the file .
12085	Configure the logger .
12086	Create the file .
12087	Applies an applicator to this node .
12088	The absolute path to this directory .
12089	Remove the directory .
12090	Prepare all children .
12091	Clean up all children .
12092	Return the path to the given file .
12093	List all files under this directory .
12094	Write data to a file .
12095	Read a file .
12096	Add a file or filename to this file .
12097	Save the configuration to disk .
12098	Load configuration from file .
12099	Remove the temporary directory .
12100	Load plugins from directory .
12101	Update a dictionary recursively .
12102	Return a child node .
12103	Resolve the path to this node .
12104	Get the value of the field .
12105	Update the configuration with data .
12106	Load the configuration file .
12107	Return a string representation of obj .
12108	Build a callback URL .
12109	Process input .
12110	Send output to the socket .
12111	Send an RPC call request .
12112	Read input from a socket .
12113	Write output to socket .
12114	Decorator to raise a RuntimeError if the function is called from a callback .
12115	Get remote settle modes .
12116	Configure the network link .
12117	The source address of the link .
12118	Target address of the link .
12119	Called when a session is closed .
12120	Create a new sender .
12121	Request a sender link .
12122	Create a new receiver .
12123	Register a receiver link .
12124	Called when a link is destroyed .
12125	Close the session .
12126	Process an endpoint event .
12127	Add markers to Markdown .
12128	Close the receiver link .
12129	Called when a receiver has failed .
12130	Get host and port from server address .
12131	Connect to a host and port .
12132	Create a server socket .
12133	Return a tuple of readers and writers that need processing .
12134	Decorator to raise a RuntimeError if the connection is not reentrant .
12135	Process the SASL handshake .
12136	Read data from the network .
12137	Create a sender .
12138	Reject a sender link .
12139	Create a new receiver .
12140	Called when a connection failed .
12141	Called when the connection is active .
12142	Called when the connection is closed .
12143	Handle protocol errors .
12144	Decorator for twilio views .
12145	Return a string representation of the color .
12146	Return a dictionary of fonts .
12147	Set the compression option .
12148	Add a new object .
12149	Write a stream to the output buffer .
12150	Put a stream .
12151	Add a page to the document .
12152	Set the color scheme .
12153	Set the default font .
12154	Add a new page .
12155	Set font size .
12156	Add text .
12157	Add a newline .
12158	Add a pie chart .
12159	Output pages .
12160	Return a list of pages that have changed .
12161	Output font files .
12162	Output images .
12163	Outputs the image to the screen .
12164	Transform the current matrix .
12165	Return the absolute position of a point .
12166	Set font style .
12167	Rotate a point .
12168	Set the information of the object .
12169	Set the display mode .
12170	Closes the document .
12171	Write PDF header .
12172	Write pages to PDF .
12173	Write a resource dictionary .
12174	Put information about the PDF .
12175	Put a catalog .
12176	Write trailer .
12177	Floyd s algorithm .
12178	Yields a sequence of sequences in naive order .
12179	Generator for gosper .
12180	Brent function .
12181	Return True if the x - axis is less than the given length .
12182	True if y_fit is True
12183	Test if x is greater than test_ordinate .
12184	Returns True if y is greater than test_ordinate .
12185	Return a copy of this cursor .
12186	Add x to the x - axis .
12187	Add dy to y .
12188	Draw the table .
12189	Create a tag .
12190	List tags .
12191	Get a label by name .
12192	Update a tag .
12193	Delete a tag .
12194	Create a tag .
12195	List actions .
12196	Returns a list of tags with the given label_sn .
12197	Create a hook .
12198	List hooks .
12199	Update a hook .
12200	Create an alert .
12201	Get alerts of a certain type .
12202	Updates an alert .
12203	Setup sphinx extensions .
12204	Return the path to the themes directory .
12205	Make a POST request .
12206	List host logs
12207	Get a log set .
12208	Find an attacker slider .
12209	Return the duration in seconds
12210	Update the parameters .
12211	Performs the computation .
12212	Binning method .
12213	Free memory .
12214	Read data from the socket .
12215	Yield lines from the buffer .
12216	Yields bytes from the buffer .
12217	Get the status of the connection .
12218	Generate info message .
12219	Generate an info message .
12220	Execute a command .
12221	Return a list of capabilities for a given keyword .
12222	Send a MODE READER command .
12223	Quit the server .
12224	Return the date as a datetime object .
12225	Show help message .
12226	Generate a list of new groups .
12227	Generate new news .
12228	Return a list of new news .
12229	List active newsgroups .
12230	List active times .
12231	List new groups .
12232	List overview format .
12233	List all extensions available on the server .
12234	Return a list of dictionaries .
12235	Return a list of values for a given keyword .
12236	Send a GROUP command .
12237	Get the next article .
12238	Article message .
12239	Head a message .
12240	Get the body of a message .
12241	Send an XGTITLE command .
12242	Send an XHDR command .
12243	Send an XZHDR command .
12244	XOVER command generator .
12245	Generate XPAT instructions .
12246	Return a list of xpaths matching a pattern .
12247	XFEATURE COMPRESS GZIP
12248	Send a POST request .
12249	Return the offset for the given value .
12250	Format a timestamp .
12251	Return a datetime object .
12252	Perform an API POST request .
12253	Perform an API DELETE request .
12254	Perform an API GET request .
12255	List scheduled queries .
12256	List tags for this account .
12257	Get a list of tags by name or ID .
12258	Create a notification .
12259	Delete a tag .
12260	Create a scheduled query .
12261	Create an alert report .
12262	Delete a tag .
12263	Unparse a range string .
12264	Parse a newsgroup line .
12265	Parse a header line .
12266	Unparse headers .
12267	Send a POST request .
12268	Run tests .
12269	Return a docstring for the given defaults .
12270	Decorator that appends default kwargs to a function .
12271	Return a string containing the defaults docstring .
12272	Set the value .
12273	Check that value is of the expected dtype .
12274	Get the value of the variable .
12275	Check that value is a scalar .
12276	Return the symmetric error of the matrix .
12277	Set errors .
12278	Set parameters .
12279	Import metrics .
12280	Extract a dictionary from a list of metrics .
12281	Filter the results .
12282	Call the API .
12283	Parse an expression .
12284	Parse an operator .
12285	Add operator .
12286	Initialize missing properties .
12287	Returns a list of Parameter objects
12288	Get parameter values
12289	Returns an array of parameter errors
12290	Clear all derived parameters .
12291	Setter for method .
12292	Get environment variables .
12293	Get the URL parameters .
12294	Perform a GET request .
12295	Perform a DELETE request .
12296	Perform a POST request .
12297	Perform a PUT request .
12298	Call the API .
12299	Raise WrongSceneNameError if sceneInfo is invalid .
12300	Verify type product .
12301	Get the size of a remote file .
12302	Download the scene .
12303	Validate bands .
12304	Connect to USGS
12305	Return a function that prefixes a name with a given prefix .
12306	Get the timezone for a given time zone .
12307	Normalize the given time to the local timezone .
12308	Join a sequence of strings with a delimiter .
12309	Get the positions of newlines in a string .
12310	Convert a point to a source string .
12311	Dump relay output to text .
12312	Filter relays .
12313	Load a list of fortune files .
12314	Set the chance of a file .
12315	Main entry point .
12316	Parse a rule .
12317	Special handling .
12318	Return the grammar of the input source .
12319	A list of rules defined in the grammar .
12320	The list of comments contained in the grammar .
12321	The list of directives in the document .
12322	Compile and return the compiled source code .
12323	Compile the grammar .
12324	Return the list of import statements .
12325	Return a string defining the token types for the parser .
12326	Return a class definition string .
12327	Get the entry point name .
12328	Return the definition of a rule .
12329	Get the source code for a rule .
12330	Get the transform for a rule .
12331	Convert an expression to ASN .
12332	Convert a node to ASN .
12333	Given a list of operands and a predicate return a list of operands that satisfy the predicate .
12334	Remove grouping groups from an OptreeNode .
12335	Convert an AST node to code .
12336	Convert an AST node to code .
12337	Convert an AST terminal to code .
12338	Convert an ast option group to code .
12339	Convert a repetition group to code .
12340	Convert special handling to code .
12341	Convert an astroid . Alternation node to code .
12342	Convert an astroid . Concat node to code .
12343	Return an astroid . Exclusion node as string .
12344	Return a list of code lines for a repeated operation .
12345	Return a list of code lines to repeat an AST operation .
12346	Find directives that match a predicate .
12347	Return True if child is a child of parent .
12348	Parse directives from a comment .
12349	Handle API results .
12350	Get a new ID .
12351	Remove a hotkey .
12352	Add command line arguments to the parser .
12353	Configure logging .
12354	Check that the arguments are valid .
12355	Convert a list of infix operators to postfix operators .
12356	Convert a list of nodes into an OptreeNode .
12357	Reduce a list of operators .
12358	Add command line arguments to the parser .
12359	Load plugin manifest .
12360	Get a metric definition by name .
12361	Returns a tuple of the length of each field s title and description .
12362	Get the lengths of the display and description columns .
12363	Escape underscores .
12364	Output a Markdown representation of the fields .
12365	Output metrics in Markdown format .
12366	Generate a Markdown representation of the report .
12367	Parse text .
12368	Attempt to consume some text .
12369	Add command specific arguments
12370	Parse a string into a datetime object .
12371	Output a CSV file .
12372	Output a JSON string .
12373	Output a raw JSON string .
12374	Convert a JSON string to XML
12375	Return True if the node is a default node .
12376	Pretty print a terminal .
12377	Repetition extractor .
12378	Get a terminal node .
12379	Extract a repetition .
12380	Try to extract an exclusion .
12381	Count leading whitespace .
12382	Call the given extractor with the given text .
12383	The position of this node .
12384	Return True if this node is empty .
12385	Add ignored items .
12386	Return True if value is a node type .
12387	Return a new ParseNode with flattened children .
12388	Return a new ParseNode with all children trimmed .
12389	Merge another ParseNode into this ParseNode .
12390	Return a new ParseNode with a different type .
12391	Return a new ParseNode with compressed values .
12392	Return the current position in the file .
12393	Return the position of the maxreaded line and column .
12394	Advance to the next character .
12395	Move to the next line .
12396	Move to the previous line .
12397	Return the last line in the file .
12398	Increment the cursor position .
12399	Save the current cursor position .
12400	Restore the current context .
12401	Return a string representation of the function .
12402	Set the name of this signature .
12403	Return the number of variables in this signature .
12404	Return the number of functions in this signature .
12405	Update the statistics counters .
12406	Update this scope .
12407	Union two scopes .
12408	Update this scope with the intersection of two scopes .
12409	Return a new scope with the intersection of this scope and the given signature .
12410	Remove all keys in oset from this scope .
12411	Return a new Scope with sig subtracted from this Scope .
12412	Symmetric difference update .
12413	Return the symmetric difference of this scope with the given signature .
12414	Add a signature to the scope .
12415	Remove a Signature from the set .
12416	Discard a signature .
12417	Return the values of this signature .
12418	Return the first signature in the signature list .
12419	Return the last signature .
12420	Get a signature by key .
12421	Get a scope by symbol name .
12422	Get a signature by symbol name .
12423	Returns True if all return types are polymorphic .
12424	Call the Translator Injector .
12425	Normalize an AST .
12426	Set attributes from othernode .
12427	Return a generator that yields all the values in the tree .
12428	Check if a hit is ok .
12429	Compute the signature of this function .
12430	Resolve this type .
12431	Return a list of resolved names for the given type .
12432	Resolve a type name .
12433	Delete a local file .
12434	Delete a file from S3 .
12435	Delete a file .
12436	Save a local file .
12437	Save a file to S3 .
12438	Save object to file .
12439	Find all files in a bucket in S3 .
12440	Create an Enum type .
12441	Checks the type of a function .
12442	Set a callobject .
12443	Decorator to add a method to a class .
12444	Decorator for registering a hook .
12445	Decorator to register a rule .
12446	Decorator to register a directive .
12447	Decorator to register a class decorator .
12448	Bind src to dst .
12449	Read an eol character .
12450	Push the rule nodes to the stack .
12451	Pop the rule nodes from the stack .
12452	Get the value of a node .
12453	Add a parsed stream .
12454	Begin tag .
12455	End a tag .
12456	Set rules .
12457	Set hooks .
12458	Set directives .
12459	Evaluate a rule .
12460	Evaluate a hook .
12461	Peeks at the given text .
12462	Read one character .
12463	Read a single character .
12464	Read until EOF .
12465	Ignore blank lines .
12466	Set the dtype of the cluster hits .
12467	Set the cluster dtype .
12468	Check that all required fields are present in hits .
12469	Add a rule clause name .
12470	Add a rule to bnf .
12471	Add a rule .
12472	Add sequences to sequences .
12473	Add an alternative to this node .
12474	Add a range to the sequence .
12475	Add a rule to sequence .
12476	Add a capture to the sequence .
12477	Add a bind to the sequence .
12478	Add a hook to the sequence .
12479	Set the value of a parameter .
12480	Parse a string parameter .
12481	Parse a single character .
12482	Handle a param ID .
12483	Set hook name .
12484	Hook parameter .
12485	Return the parsed rules .
12486	Ignore C++ files .
12487	Add a state .
12488	Return a dot representation of the graph .
12489	Write self to a dot file .
12490	Write the image to a PNG file .
12491	Return a string representation of the events .
12492	Return the next state .
12493	Reset all living states .
12494	Infer a block .
12495	Infer a subexpr .
12496	Infer an ID .
12497	Infer a literal .
12498	Dump the local info about the nodes .
12499	Convert a parserrule to an ast . FunctionDef .
12500	Return an ast . Return statement .
12501	Return an ast . If clause .
12502	Visitor for Call AST node .
12503	Visitor for CallTrue AST node .
12504	Visit a Hook node .
12505	Visitor for Rule AST node .
12506	Visitor for Capture AST node .
12507	Visitor for Scope node .
12508	Return an astroid . Alt node as a list .
12509	Visitor for Seq AST node .
12510	Visitor for RepOptional AST node .
12511	Visitor for Rep0N AST node .
12512	visit a Rep1N node by returning a fresh instance of it
12513	Add a newline at the end of a string .
12514	Set the indent of a list .
12515	Convert a list into a string .
12516	Echo a list of nodes .
12517	Populates an edge from a sequence .
12518	Populate a state register from a sequence of sequences .
12519	Build a state tree .
12520	Return True if n == val .
12521	Build a grammar from a string .
12522	Build a grammar from a file .
12523	Parse a string and return a Node .
12524	Parse a file .
12525	Set a node .
12526	Set node value as int .
12527	Get a subnode .
12528	Default serializer .
12529	Get a list of depositions
12530	Dump a deposition to a dictionary .
12531	Return a list of bibrec IDs for a given date .
12532	Return a list of bibrec IDs for a given date .
12533	Import bibdoc file .
12534	Dump a BibDoc file .
12535	Get database check .
12536	Check BibDoc .
12537	Serialize an object to a dictionary .
12538	Get all accounts .
12539	Dump a user to a dictionary .
12540	Get all featured communities .
12541	Return list of modified recids in the database .
12542	Return a list of modified record IDs .
12543	Get collection restrictions .
12544	Get revisions of a record .
12545	Get all collections of a record .
12546	Dump MARCXML to JSON .
12547	Return the number of records matching the given search criteria .
12548	Dump a record .
12549	Dump ra to a dictionary .
12550	Load a common model .
12551	Collect all Things entry points .
12552	Initialize the application context .
12553	Memoize a function .
12554	Get run SQL .
12555	Get connected roles .
12556	Run a query and return the results .
12557	Dump a remote account to a dictionary .
12558	Load a token .
12559	Import a record .
12560	Try to import a config variable .
12561	Dump an object to a dictionary .
12562	Get users from Invenio v1 .
12563	Get users invenio2 .
12564	Dump a User object to a dictionary .
12565	Load deposit .
12566	Create record and pid .
12567	Load a record .
12568	Load records from JSON files .
12569	Inspect records .
12570	Load common dumps .
12571	Load communities .
12572	Load users from sources .
12573	Load a deposit .
12574	Get profiling statistics .
12575	Main entry point .
12576	Finish profiling .
12577	Delete the profile .
12578	Delete the current profile .
12579	Get the status of the server .
12580	Decorator to disable timestamp .
12581	Load user .
12582	Calculate the translations of images in parallel .
12583	Stitch images together .
12584	Add one dimension to arr .
12585	Create a dump .
12586	Create a record .
12587	Update a record .
12588	Create PIDs for a record .
12589	Delete a record .
12590	Create files .
12591	Create a file .
12592	Delete all buckets from a record .
12593	Return a list of pids that are missing .
12594	Prepare revisions .
12595	Prepare files .
12596	Prepares the list of pids to be used by the daemon .
12597	Return True if the document is deleted .
12598	Load community data .
12599	Load a featured community .
12600	Dump a thing .
12601	Check a thing .
12602	Delete this widget
12603	Calculate the magnitude of a vector .
12604	Normalizes a vector .
12605	Transform a list of texcoords into a list of coordinates .
12606	Make sure bones are present .
12607	Set the length of the bone .
12608	Set the parent of this bone .
12609	Calculate pivot point
12610	Start animation .
12611	Set the current state .
12612	Unsets the current state .
12613	Set the state of the bone .
12614	Unsets the state of the bone .
12615	Ensure model data is available for the given object .
12616	Redraw the mesh .
12617	Draw the batch .
12618	Set the model .
12619	Write reports to a file .
12620	Return a string representation of the testsuite .
12621	Add a menu to the window .
12622	Redraw the label .
12623	Redraw the label .
12624	Draws the background .
12625	Delete a widget
12626	Redraw the label .
12627	Register event handlers .
12628	Register event handlers
12629	Add a label to the main window .
12630	Add a ok button .
12631	Exit the dialog .
12632	Add a confirm button
12633	Add a cancel button .
12634	Update progress bar .
12635	Render a 3D mesh .
12636	Render the world in 3D .
12637	Context manager for a step .
12638	Check if a resource exists .
12639	Add a category .
12640	Get the missing texture .
12641	Get a model by name .
12642	Load a model .
12643	Returns the model data for the given name .
12644	Load a model data file .
12645	Add a widget to the container .
12646	Draw the submenu .
12647	Called when the widget is redrawn .
12648	Redraw the scrollbar .
12649	Return True if the mouse is in an AABB .
12650	Return the p - value of this node .
12651	Adds a layer to the stack .
12652	Get a region from a buffer .
12653	Draw the buffers .
12654	Add an action to the action list .
12655	Execute the action .
12656	Register a new name .
12657	Add a layer .
12658	Draw the layers .
12659	Delete all layers .
12660	Return a WatchingList containing the borders of the widget .
12661	Offset the widget .
12662	Get the size of the widget .
12663	Read HDF5 file .
12664	Make a connection matrix .
12665	Set fields .
12666	Add fields to the query .
12667	Check element types .
12668	Return the space of this element .
12669	Return a list of centroids and volumes .
12670	Return angles in degrees .
12671	Compute the edges of the mesh .
12672	Returns a pandas DataFrame with the stats of the mesh .
12673	Convert an element set to a node set .
12674	Convert a node set to a surface .
12675	Convert surface to element sets
12676	Metadata of the fields .
12677	Return a pandas . Series containing metadata about the step .
12678	Make directories if necessary .
12679	Run post - processing .
12680	Run GMSH .
12681	Read history report .
12682	Read a field report .
12683	Convert a list to a string .
12684	Return equation string .
12685	Return an unsorted set of labels .
12686	Parse API response .
12687	Make a HTTP GET request .
12688	Write a XY report .
12689	Write a field report .
12690	List available components .
12691	Return an error message for this field .
12692	Return True if this exception was thrown by a descriptor .
12693	Set the data for this variable .
12694	Get the mode of an axis .
12695	Set the options for this plot .
12696	Create a class .
12697	Cycle through datafeeds .
12698	Try to convert value to float .
12699	Convert a string to a number .
12700	Plot a graph .
12701	Force a unicode string .
12702	Return a cleaned HTML string .
12703	Return True if mime_type is in include_mime_types .
12704	Clean a domain name .
12705	Return the left cuts of a domain name .
12706	Make a hash keyword .
12707	Collects words from a sentence .
12708	Index a stream item .
12709	Invert a hash .
12710	Get the frequency of a set of hashes .
12711	Lookup the stream ids for a hash .
12712	Lookup the stream ids for a given hash .
12713	Make stream items from a ProtoStreamReader .
12714	Create a streamitem from an entry .
12715	Create a content item from a node .
12716	Read a varint from the stream .
12717	Read an object from the stream .
12718	Serialize a StreamItem key .
12719	Serialize and encrypt a streamitem .
12720	Change working directory to path .
12721	Strip prefix from string .
12722	Strip a suffix from a string .
12723	Return True if haystack contains needle .
12724	Return a Cube application .
12725	Run the server .
12726	Shutdown the server .
12727	Decorator for registering a route .
12728	Register an error handler .
12729	Serve a static file .
12730	Returns a callback for the error page .
12731	Add a route .
12732	Resolve a route .
12733	Resolve a non - literal route .
12734	Normalize pattern .
12735	Return the response body .
12736	Add a header .
12737	Set a cookie .
12738	Return a string describing the status of the response .
12739	The content type of the response .
12740	Get all values for a key .
12741	Remove a directory recursively .
12742	Return a list of open file descriptors
12743	Return the file type stats .
12744	Run rejester .
12745	Attempt to fetch a corpus .
12746	Return a list of lines from a file .
12747	Generate a random adjspecies pair .
12748	Generate a random adjspecies pair .
12749	Morph a sentence .
12750	Get the similarity score of a request .
12751	Convert hiragana to Hiragana .
12752	List entities .
12753	Show short summary of a review .
12754	List keywords .
12755	Chronological analysis .
12756	Create a stage .
12757	Create stages from config .
12758	Initialize all stages .
12759	Run a stream .
12760	Run all writers .
12761	Run a list of incremental transforms .
12762	Replace an existing config with a new one .
12763	Create a WSGI application .
12764	Make chains from a list of sentences .
12765	Return True if all target and chain mentions match .
12766	Return True if any of target_mentions matches any of chain_mentions .
12767	Given a rating and a list of tokens return a list of regular expressions that match those tokens .
12768	Match a stream item against a list of sentences .
12769	Create a NER file .
12770	Align a chunk with a NER file .
12771	Terminate the child process .
12772	Multiplies n by p .
12773	Fix email addresses .
12774	Yields sentences from clean_visible .
12775	Make a label index from a stream item .
12776	Make sentences from a stream item .
12777	Convert HTML entities to unicode .
12778	make a cleansed file
12779	Create a NER file .
12780	Clean up a span .
12781	Align a chunk with a NER file .
12782	Make paths absolute .
12783	Instantiate the pipeline configuration .
12784	Generate a chunk of the john smith corpus .
12785	Re - based clean text .
12786	Return a clean HTML string .
12787	Create a clean visible file .
12788	Remove whitespace from a string .
12789	Main entry point .
12790	Try to load a stage by name .
12791	Load external stages from a file .
12792	Load module stages .
12793	Initialize a stage .
12794	Read data from idx_bytes to idx_bytes .
12795	Return True if href is valid .
12796	make a list of labels
12797	Yield paths in input_dir .
12798	Yields a list of tasks
12799	Get random available keys .
12800	Yield tokens from sentence_dom .
12801	Get sentences from ner_dom .
12802	Retry a function .
12803	Verify that md5_expected == md5_recv .
12804	Get a bucket .
12805	Decode data from S3 .
12806	Extract a chunk from a key .
12807	Convert a stream id to a kvlayer key .
12808	Convert a kvlayer key to a stream id .
12809	Generate a key for a stream item .
12810	Main entry point .
12811	Build an argparse parser .
12812	Add xpaths to stream item .
12813	Convert a list of sentences to a list of char tokens .
12814	Convert a list of tokens to character offsets .
12815	Convert a list of char offsets into a list of xpaths .
12816	Add a tag .
12817	Return a piece of xpath .
12818	Return the index of the current text node .
12819	Yield all descendants of elem .
12820	Return a list of elements in source .
12821	Select elements by name .
12822	Select elements that match a pattern .
12823	Return a list of elements with the given name and value .
12824	Return the siblings of elem following elem .
12825	Make pretty text .
12826	Call the inkscape binary .
12827	Export text to Inkscape .
12828	Export SVG to PDF .
12829	Convert SVG file to PNG file .
12830	Returns a Jinja environment for the given file path .
12831	Setup template file .
12832	Fills the file with the given contents .
12833	Save content to a file .
12834	Create a DocType instance from a template file .
12835	Fill the document with SVG code .
12836	Render the image .
12837	Render a PDF file .
12838	Parse an XML source .
12839	Parse HTML source .
12840	Return an HTML fragment from a string .
12841	Insert text at the current position .
12842	Insert node before refNode .
12843	Return a clone of this element .
12844	Execute the command .
12845	Return the string representation of a node .
12846	Insert a child into this element .
12847	Parse config file .
12848	Get Google API credentials .
12849	Create event datetimes .
12850	Create a Google calendar event .
12851	Main entry point .
12852	Get file extension .
12853	Add an extension to a file .
12854	Create a temporary file .
12855	Remove all files with the given extension .
12856	Convert a CSV file to JSON .
12857	Replace a file .
12858	Parse the HTML .
12859	Check the next tag .
12860	Create italic tag .
12861	Create a strong tag .
12862	Create an underline tag .
12863	Parse the attributes of a tag .
12864	Remove linebreaks .
12865	Return the query string for a given href .
12866	Parse an attribute .
12867	Translate key values in a dictionary .
12868	Return a JSON string representation of the object .
12869	Find all files matching a regular expression .
12870	Concatenate strings .
12871	Yields True if full starts with part .
12872	Yields True if full contains part .
12873	Yield the length of a string .
12874	Return a boolean representation of obj .
12875	Iterate over a sequence .
12876	Lookup a key in a table .
12877	Replace special characters in SVG code .
12878	Check that svg_file is a valid SVG file .
12879	Merge two SVG files .
12880	Merge multiple PDF files .
12881	Embed font files to SVG .
12882	Embed font files to SVG .
12883	Check inputs .
12884	Check that the provided function is callable .
12885	Recursive function .
12886	Create an input file from an option list .
12887	Recursive helper function .
12888	Convert an object to a string .
12889	Convert an object to a number .
12890	Convert an object to a boolean .
12891	Serialize the given xp_ast .
12892	Changes the encoding of a file .
12893	Save text into a QR code .
12894	Launch gromacs .
12895	Call a command .
12896	Convert a LaTeX file to PDF .
12897	Return a list of options for the given psy tree .
12898	Transform a geometry .
12899	Create a geometry .
12900	Expand this rectangle with another rectangle .
12901	Intersect two envelopes .
12902	Return True iff both points intersect .
12903	Create a polygon .
12904	Create a new instance from ZNM data .
12905	Write DataFrame to file .
12906	Select rows matching a condition .
12907	Create a Table from a nuclei .
12908	Intersect two tables .
12909	Return a new Table with rows not in another table .
12910	Return a subset of this vector that are odd even .
12911	Return a subset of this list with even odd elements removed .
12912	Returns a copy of this vector with even elements removed .
12913	Return the difference between the DataFrame and the DataFrame .
12914	Return the RMSE of the error .
12915	Calculate the binding energy .
12916	S2N derived variable .
12917	Calculate the s1n statistic
12918	S2P derived parameter .
12919	Calculate the s1p derived value .
12920	Create a derived table .
12921	Executes a function in a db session .
12922	Derive a key from a master password .
12923	Bootstrap a new database .
12924	Search domains by name .
12925	Modify a domain .
12926	Create a new domain .
12927	Extract hbs from a file .
12928	Return the VSI prefix for a path .
12929	The SRID of this authority .
12930	Main entry point .
12931	Initialize logging configuration .
12932	Update a file .
12933	Return a dictionary of available drivers .
12934	Get a driver for a given path .
12935	Convert a geom to a numpy array .
12936	Rasterize a layer .
12937	Open a raster file .
12938	Create a raster from a byte string .
12939	Copy a raster from source to dest .
12940	The list of options in the DMD .
12941	Create a raster file .
12942	Sets the GeoTransform of the raster .
12943	Read an array from the file .
12944	The envelope of the raster .
12945	Get the image driver .
12946	Create a new raster .
12947	Return a masked array .
12948	The nodata value of the series .
12949	Read a raster .
12950	Resample the image .
12951	Save the image to disk .
12952	Sets the projection for this query .
12953	Warp the image to a raster .
12954	Calculate the length of a chunk .
12955	Lookup the alphabet for a given charset .
12956	Encode a chunk .
12957	Convert chunk to long .
12958	Get the chunk at index .
12959	Memoize a function .
12960	Return a compiled regular expression for the given filename .
12961	Normalize date format .
12962	Detect the timezone of the current locale .
12963	Convert this object to a dictionary .
12964	Activate pdb hook .
12965	Emphasis an object .
12966	Handle a worker job .
12967	Main worker function .
12968	Run a worker pool .
12969	Sets the classification of this ProposalLineItem .
12970	Send a message .
12971	Turn on a light .
12972	Turn on a switch .
12973	Turns on a light .
12974	Turn off a device .
12975	Send a message from the queue .
12976	Send a reliable message .
12977	Create an adapter for the given object .
12978	Sets the nature of this ProposalLineItem .
12979	Update from a dictionary .
12980	Reset all options to their default value .
12981	Set the list of config files .
12982	Yield tuples of sct option name and value .
12983	Yields the default values for all options .
12984	Create a config file .
12985	Update a configuration dictionary .
12986	Read configuration file .
12987	Read configuration files .
12988	Return a list of option names .
12989	Return a list of sections for the given command .
12990	Resolve command options for a command .
12991	Add options to a parser .
12992	Build an argparse parser .
12993	Parse command line arguments .
12994	Execute zsh comp command .
12995	Complete a zsh command .
12996	Return a list of command names for the given command .
12997	Complete bash command .
12998	Start a master process .
12999	Called when a new connection is made .
13000	Called when a line is received .
13001	Called when a connection lost .
13002	Called when a job is loaded .
13003	Called when a response is received .
13004	Close the job .
13005	Run a list of jobs .
13006	Close the server .
13007	Change the state of the future .
13008	Add a result .
13009	Wait until the task has changed .
13010	Load the next job .
13011	Complete the job .
13012	Add a result .
13013	Cancel the current job .
13014	Wait until all jobs have completed .
13015	Distribute the jobs to the ready callbacks .
13016	Add a list of jobs to the job set .
13017	Get a job .
13018	Return a job to the pool .
13019	Add a result to a job .
13020	Called when a job is done .
13021	Close the widget .
13022	Remove duplicates from a list .
13023	Return True if obj matches regex .
13024	Get a filtered list of entries .
13025	Get the AWS region .
13026	Filter a list of entries based on a set of filters .
13027	Get host by name
13028	Create a new instance from a dictionary .
13029	Get the value of an attribute .
13030	Sort entries by attribute .
13031	Return a string representation of the table .
13032	Create a new instance from a boto instance .
13033	Return True if _filter matches this element .
13034	Display the public IP address .
13035	Render a list of entries .
13036	Add timestamp to event dict .
13037	Setup logbook .
13038	Create a logger .
13039	Setup Celery application .
13040	Get a worker report
13041	Delete a job .
13042	Create a switch option .
13043	Return a configuration section .
13044	Set a value from a string .
13045	Config command handler .
13046	Create zsh and bash files .
13047	Render a list of columns .
13048	Render a row .
13049	Render a table .
13050	Prepare a list of rows .
13051	Colorize text .
13052	Get a color hash from a string .
13053	Generate a random color .
13054	Get user input .
13055	Check credentials .
13056	Check if a token is valid .
13057	Decorator that ensures that the user has a valid token .
13058	Check if a process is running .
13059	Import a module dynamically .
13060	Get self IP address .
13061	Make a request .
13062	Prepare post parameters .
13063	Serve the application .
13064	Render a template .
13065	Run a command and return its output .
13066	Streams a list of dictionaries into a stream .
13067	Stream commands from a list of dicts .
13068	Workdays between two dates .
13069	Get the path to a command .
13070	Build the SSH command for the given hostname .
13071	Build a scp command .
13072	Copy a list of entries to a remote path .
13073	Copies a list of entries to a remote path .
13074	Run a command on multiple hosts .
13075	Connect to an entry via SSH .
13076	Load a LSI profile .
13077	Create a LSIProfile from command line arguments .
13078	Relates a part to this relationship .
13079	Return a list of related packages .
13080	Load relationships from a string .
13081	Add a part .
13082	Load a part .
13083	Find the value for a given name .
13084	Create a subclass from an element .
13085	Parse a chatl string .
13086	Build a JWT .
13087	Given an ampal object assign the force field to each atom .
13088	Find the maximum rad and npnp of a key .
13089	Make a dictionary of force field parameters .
13090	Return a file - like object containing the contents of this file .
13091	Yields all segments matching the given name .
13092	Copy a directory .
13093	Open a bucket .
13094	Upload a directory to S3 .
13095	Upload a file to a bucket .
13096	Upload an object to a bucket .
13097	List filenames in a directory .
13098	List directory names in a directory .
13099	Create a prefix for a directory .
13100	Delete a file .
13101	Login to the LTD Keeper server .
13102	Return the loud version of the language .
13103	Delete a directory .
13104	Return the home URL .
13105	Decorate a function to silence the namespace .
13106	Breadcrumb for project home page .
13107	Breadcrumbs for the project home page .
13108	Calculate the energy of a list of AMPAL objects .
13109	Calculate the internal energy of an ampal object .
13110	Return a list of hotspots in the tree .
13111	Get a KKeeper token .
13112	Upload data to LTD .
13113	Determine if we should skip a Travis event .
13114	Purge a key .
13115	Register a build .
13116	Confirm a build .
13117	Deep update a dictionary .
13118	Main entry point for ltdconveyor .
13119	Part edit command .
13120	Command for packing a directory .
13121	Split path into drive and path components .
13122	Find a file in a path .
13123	Get the editor for a file .
13124	Process a module node .
13125	Generate a chart .
13126	Generate HTML file .
13127	Serializes data into a chart .
13128	Patch json data
13129	Convert JSON data to HTML .
13130	Convert a dictionary to a pandas DataFrame .
13131	Write html file to folder
13132	Return a chart class for the given chart type .
13133	Encode xfield and yfield .
13134	Create a GitHub user role .
13135	Infer tarball URL from app . json .
13136	Create an app .
13137	Delete an app .
13138	Iterate over an iterable .
13139	Generate a random binary string .
13140	Generate a random IP address .
13141	Generate a random date .
13142	Create a session object .
13143	Make an API request .
13144	Create a build .
13145	Check the status of a build .
13146	Generate a sequence with a prefix .
13147	Decorator to memoize a function .
13148	Decorator that ensures a function is unique .
13149	Register subcommands .
13150	Return the root argument parser .
13151	Get the description of the class .
13152	Return the help string for this command .
13153	Run the command .
13154	Encode a dataset .
13155	List athletes
13156	Get the last n activities .
13157	Request activity list .
13158	Request activity data .
13159	Return the endpoint for a given athlete .
13160	Return the URL for the activity endpoint .
13161	Make a request to GoldenCheetah .
13162	Create a build .
13163	Create a URL with authentication .
13164	Generate a random title .
13165	Generate a random person .
13166	Generate a random last name .
13167	Render the data .
13168	Set the dataset .
13169	Render the chart .
13170	Check type of chart .
13171	Return the URL for this request .
13172	Show this page .
13173	Save the image to a file .
13174	Make a request to the server .
13175	Return a PIL Image object .
13176	Write data to a file .
13177	Calculate the checksum of the file .
13178	Generate a random amount .
13179	Decorator for registering a class as an entity name .
13180	Unprotected and protected claims .
13181	Return signing keys as a JWKS object .
13182	Unpack a metadata statement .
13183	Create a signed metadata statement .
13184	Evaluate a metadata statement .
13185	Corrects the federation usage of a message .
13186	Add metadata statements to the request .
13187	Parse command line arguments .
13188	Add command line arguments to an argparse parser .
13189	Apply logging options .
13190	Log a message in verbose mode .
13191	Return the letter map for a word .
13192	Yield anagrams in a word .
13193	Return a class name and an underscore .
13194	Transform a timeseries into a list of points .
13195	Get the last value from a timeseries .
13196	Validate page number .
13197	Get a page from an iterator .
13198	Change the permissions of a file or directory .
13199	Create an internal signing service .
13200	Create a signing service for the given config .
13201	Sign a request .
13202	Create a new resource .
13203	Update metadata statement .
13204	Update signature .
13205	Yield bundle contents .
13206	Create a bundle .
13207	Returns a list of urls for the given asset type .
13208	Return the HTML tags for the given asset type .
13209	Return a list of HTML tags for each asset type .
13210	Convert a URL to a protocolise URL .
13211	Find links in a given url .
13212	Start listening to AMP server .
13213	Returns a list of module names .
13214	Import service modules .
13215	Convert a date parameter to a tuple of lower and upper dates .
13216	Select fields from a document .
13217	Apply datemap_list to doc .
13218	Print a cursor to stdout .
13219	Print the results of the query .
13220	Given a list of do_tasks and a dependency graph return a topological sort of do_tasks .
13221	Add default dependencies for project .
13222	Add default assets types for a project .
13223	Create default sequences for project .
13224	Add userrnd shot to project .
13225	Post save handler .
13226	Create a shot for a given sequence .
13227	Create all tasks for a given element .
13228	Connect to a peer .
13229	Send a packet to a peer .
13230	Get a value from a section .
13231	Register a function as a nova event .
13232	Register a function as a Cinder event .
13233	Decorate a function to process an event type .
13234	Register a function as a glance event .
13235	Register a function to process a Swift event .
13236	Register a function as a keystone event .
13237	Register a function as a heat event .
13238	Register a factory .
13239	Remove a factory .
13240	Connect to a remote peer .
13241	Receive data from a connection .
13242	Disconnect a connection .
13243	Call a remote command .
13244	Called when a connection has been made .
13245	Called when a new connection is made .
13246	Handle data received locally .
13247	Send data to the device .
13248	Called when a connection is lost .
13249	Returns the local protocol for the given connection identifier .
13250	Remote data received .
13251	Disconnect from the server .
13252	Centered a string .
13253	Print a string on the right .
13254	Return a version number string .
13255	Identify unit framework for target unit .
13256	Raise TraitError if value is not convertable to target unit .
13257	Pads data_to_pad with the specified padding style .
13258	Unpads data .
13259	Sign a message .
13260	Gather metadata statements .
13261	Pretty print anagrams .
13262	Create an argument parser .
13263	Main entry point .
13264	Process incoming data .
13265	Called when a type is unregistered .
13266	Create a stub for a remote function .
13267	Ping a remote call .
13268	Return a regex that matches a command .
13269	Initialize from a string protobuf .
13270	Return a string representation of this AmpList .
13271	Verify the integrity of this metadata statement .
13272	Parse a remote response .
13273	Dump a database to a file .
13274	List databases .
13275	Return a dictionary of local files for a given path .
13276	Syncs a folder .
13277	This decorator ensures that a user is authorized to access a list of services .
13278	Login view .
13279	Build the given package .
13280	Create a readonly connection .
13281	Load a JSON file .
13282	Create a self - signed JWT .
13283	Create a signed JWT .
13284	Decorator to mark a function as a library .
13285	Given a test directory try to discover all modules in that directory .
13286	Main entry point .
13287	Return the score of a letter .
13288	Calculate the score of a word .
13289	Generate a list of wordlists .
13290	Check if a word is a valid scrabble word .
13291	Main entry point .
13292	Entry point for stackoverflow .
13293	Called when a string is received .
13294	Get the command and responder for a command .
13295	Parse request values .
13296	Run the responder .
13297	Write a response to the transport .
13298	Called when a connection lost .
13299	Build a JSONAMPDialectReceiver .
13300	Convert a JWKS into a KeyJar object .
13301	Load a bundle from a JSON string .
13302	Process a customer event .
13303	Process a Cinder customer event .
13304	Process a customer event .
13305	Process an event .
13306	Process a message .
13307	Process a customer event .
13308	Process a heat customer event .
13309	Serve the application .
13310	Print a message to stdout .
13311	Print a message to stderr .
13312	Register a command subclass .
13313	Register a command subclass .
13314	Returns the string representation of the given value .
13315	Create a new argument from a string .
13316	Update completers dictionary .
13317	Connect to Ternya .
13318	Initialize the connection to the broker .
13319	import customer s service modules
13320	Listen for nova notifications .
13321	Listen for cinder notifications .
13322	Initialize the neutron consumer .
13323	Initialize the glance consumer .
13324	Initialize heat notification consumer .
13325	Enables notification for a given OpenStack component .
13326	Get song information .
13327	Download a music file .
13328	Execute instructions .
13329	Load a module by name .
13330	call a function
13331	Dump a database .
13332	Render Ditaa code .
13333	Clean up after application shutdown .
13334	Run the application .
13335	Context manager for cd .
13336	Copy a directory tree .
13337	Run the debugger .
13338	Get the mtime of a file .
13339	Return True if item has changed since last call .
13340	Sync the database .
13341	Clear the cache .
13342	Scrape a feed .
13343	Download the image from the server .
13344	Check if the image has been modified .
13345	Fancy tag compiler .
13346	Find the caller of this function .
13347	Get the defining component of a PE .
13348	Main entry point .
13349	Find a symbol .
13350	Check if a PE is contained in another .
13351	Check if a peptide is global .
13352	Get the name of the data type .
13353	Get the names of the attributes related to the given reference .
13354	Create enum from EDT .
13355	Create a bridge function .
13356	Create an external entity .
13357	Create a function that can be used as a decorator .
13358	Create a constant from a CNST syllable .
13359	Create a class method for an operation .
13360	Create a derived attribute .
13361	Create a class .
13362	Make a simple association .
13363	Create a linked association .
13364	Create an association .
13365	Create a domain from a model .
13366	Work on a call .
13367	Accept the connection .
13368	Reject a call .
13369	Raise an exception .
13370	Send a call to the collector .
13371	Establish a connection to a worker .
13372	Dispatch a reply .
13373	Guess the type name of a value .
13374	Deserializes a string into a Python object .
13375	r LPAREN
13376	r RPAREN = value
13377	Get a feature collection by content id .
13378	Get multiple documents .
13379	Add items to the index .
13380	Delete a document .
13381	Delete all documents from the index .
13382	Delete the index .
13383	Yields a tuple of the id and fc of each hit .
13384	Return a generator that yields the ids of all hits that match the given key ranges .
13385	Return a generator yielding the DID and fc of a prefix .
13386	Return a generator that yields the ids of all documents in a prefix .
13387	Perform a fulltext search .
13388	Get a list of fulltext scan IDs for a query .
13389	Perform a keyword scan .
13390	Yields the ids of all keywords that match the given query .
13391	Return a list of index scan ids for a given feature name and value .
13392	Return a list of feature names .
13393	Return a list of filters for a given range .
13394	Create the index .
13395	Create mappings for this index .
13396	Return a mapping of indexed features to fulltext features .
13397	Returns a list of field types
13398	Return a list of terms that are disjoint from the given feature name .
13399	Return the number of bytes required to encode a feature collection .
13400	Count the number of bytes that match the given filter predicates .
13401	Return a pretty string representation of fc .
13402	handle docopt options
13403	Format an error message .
13404	Convert an instance to a link string .
13405	Format a unique identifier .
13406	Checks the uniqueness constraint of a model .
13407	Check link integrity .
13408	Check the integrity of a subtype .
13409	Return a function that maps feature names to feature indices .
13410	Convert an integer to a string .
13411	Put items into the table .
13412	Delete all tables .
13413	Scan a key range .
13414	Scan a set of keys .
13415	Scan an index .
13416	Get the scan prefix for a given index .
13417	Return a tuple of the index scan prefix and the return key .
13418	Return a list of keys matching a prefix .
13419	Define an index .
13420	Put a key - value pair in the index table .
13421	Put raw data into the index .
13422	Return a list of index keys for a given index .
13423	Get an index by name .
13424	Check the name of a package .
13425	Add a direction .
13426	Get the name of the type .
13427	Get the refered attribute .
13428	Build core type element .
13429	Build XML element for enum type .
13430	Build a complexType element .
13431	Build user type element .
13432	Build a type from a string .
13433	Build a class element .
13434	Build a component element .
13435	Build a schema element .
13436	Pretty - print an XML string .
13437	Fetch bikes .
13438	Set the positional information of a node .
13439	Decorator to mark a function as a production .
13440	r double EQUAL
13441	r t = NOTEQUAL
13442	r RARROW
13443	r r L
13444	r r G
13445	r = EQUAL
13446	r \ .
13447	r r SQBR
13448	r r QBR
13449	r QMARK
13450	r LESSTHAN
13451	r T > = =
13452	r '+'
13453	Create a queue .
13454	Delete a queue .
13455	List queues
13456	List exchanges
13457	Purge a queue .
13458	Create a MIME message .
13459	Read the text cache .
13460	Return True if the text is visible .
13461	NAME xtuml . py
13462	Serialize a value to a string .
13463	Serialize an association .
13464	Serialize a class .
13465	Main entry point .
13466	Return a list of elements matching the given query .
13467	Partition a collection by a condition .
13468	Run the app .
13469	Returns extra context to pass to the backend .
13470	Find a link between inst1 and inst2 .
13471	Formalize this link .
13472	Compute the lookup key for a given instance .
13473	Compute the index key for a given instance .
13474	Return the type of an attribute .
13475	Create a new instance .
13476	Yields all instances of this class .
13477	Define a class .
13478	Send a message .
13479	Receive a message from a socket .
13480	Print dead code .
13481	Parse email addresses .
13482	Decorator for RPC methods .
13483	Return a table of RPC specs for the application .
13484	Normalize postcode .
13485	Get the next value from the stream .
13486	Accept S_SYS .
13487	Accept C_C .
13488	Accept a PE package .
13489	Get the brightness of the image .
13490	Match the value against the pattern .
13491	Find the position of the character at position .
13492	Return a QTextEdit . ExtraSelection for a character .
13493	Called when the cursor position has changed .
13494	Return a tuple of the exception and its traceback .
13495	Create an inputhook for Qt4 .
13496	Get a mapper by name .
13497	Register a function as a URL pattern .
13498	Decorator for registering a function as a URL .
13499	Add a function to the data store .
13500	Add a function to a path .
13501	Call a method .
13502	Execute the command .
13503	Return True if the cursor is up .
13504	Return True if the cursor is down .
13505	Return True if there is a previous edit .
13506	Move to the next history entry .
13507	Handle an execute reply .
13508	Return True if history is locked .
13509	Returns the edited history for the given index .
13510	Set history .
13511	Store the current input buffer .
13512	Called when the user closes the window .
13513	Build the Record Collection
13514	Convert a collection to a pandas DataFrame .
13515	Spin a DataFrame using a method .
13516	Set attributes of the object .
13517	Subscribe to all topics .
13518	Log a message .
13519	Sorts a list of lists in place .
13520	Return an iterator for the given name .
13521	Convert a notebook to this notebook format .
13522	Return the supported platform .
13523	Get the importer for the given path .
13524	Create a StringIO object .
13525	Parse a version string .
13526	Check if setuptools is installed .
13527	Add a distro .
13528	Find all installed plugins .
13529	Get the path to a cached archive .
13530	Parse an entry point from a string .
13531	Return parsed package info .
13532	Compute dependencies for this package .
13533	Parse a filename .
13534	Collapse leading whitespace .
13535	Hides the widget .
13536	Reimplement Qt method
13537	Returns the current text cursor .
13538	Updates the current item .
13539	Register admin site .
13540	Return a list of NT partition objects .
13541	Compute system CPU times .
13542	Get a list of system CPU times .
13543	Read data from stdin without blocking .
13544	Read data from stdin .
13545	Update tab bar visibility .
13546	Create a tab with the current kernel .
13547	Add a tab with a frontend .
13548	Add action to menu .
13549	Create a dynamic magic function .
13550	Populate the all magic menu .
13551	Close event handler
13552	Generate a random password .
13553	Return True if the given password matches the hashed password .
13554	Create an editable boolean cell .
13555	Return a short title for a tree item .
13556	Collects the editable booleans from the list display .
13557	Toggle a boolean .
13558	Check if the user has permission to change this object .
13559	Check if the user has permission to delete the object .
13560	Add n children to G .
13561	Make a bintree graph .
13562	Submit jobs to the graph .
13563	Check that the tree is valid .
13564	Make a color table .
13565	Return a copy of this color scheme .
13566	Add a new color scheme .
13567	Set the active color scheme .
13568	Return the path to the lib directory .
13569	Handle iopub messages .
13570	Handle a stdin request .
13571	Wait for kernel to be running .
13572	Set the style .
13573	Get the format for a given token .
13574	Get the format from the document .
13575	Returns a QTextCharFormat object for the given token .
13576	Find a command in PATH .
13577	Normalize path .
13578	Raise DistutilsSetupError if value is not a package namespace .
13579	Raise DistutilsSetupError if value is invalid .
13580	Return True if the last line is blank .
13581	Return True if the source contains the last two blank lines .
13582	Transform an assignment system line .
13583	Transform assignment magic line to python magic .
13584	Transform a classic prompt into a string .
13585	Transform an IPython prompt into a string .
13586	Push a list of lines onto the stack .
13587	Accepts more input .
13588	Find the indent of a line .
13589	Store lines in the buffer .
13590	Reset source and raw data .
13591	Handle cell magic .
13592	Return True if this is a line mode cell .
13593	Transform a cell .
13594	Push a list of lines onto the stack .
13595	Initialize observers .
13596	Post a notification .
13597	Get the set of observers for a notification .
13598	Register a callback for a notification type .
13599	Create a new job .
13600	Update status lists .
13601	Print a group report .
13602	Flush a group of jobs .
13603	Update the status of the job .
13604	Print the status of the job .
13605	Initialize the background job .
13606	Insert a value at a given index .
13607	Return a copy of this directory .
13608	Declare a special variable .
13609	Declare a list variable .
13610	Declare a special set variable .
13611	Set the working directory .
13612	Move to a new state .
13613	Calculate the energy of a route .
13614	Return a dictionary of default values .
13615	Check that the table exists .
13616	Convert a list into a dictionary .
13617	Render an expression .
13618	Print a warning message .
13619	Parse config file .
13620	Create a table from a list of rows .
13621	Create a link .
13622	Return a javascript file .
13623	Generate a css file .
13624	Create an image tag .
13625	Substract value from arg .
13626	Multiply two numbers .
13627	Divide two numbers .
13628	Return the modulo of value and arg .
13629	Get the model verbose name .
13630	Split a user input line into pre and esc sequences .
13631	Add options to the given parser .
13632	Add a builtin .
13633	Remove a builtin .
13634	Deactivates all builtins .
13635	Find the base name of a requirement .
13636	Yield Link objects with explicit rel links .
13637	Unquote a shell list .
13638	Main entry point for coverage script .
13639	Add a callback action .
13640	Append an action to the parser .
13641	Parse command - line options .
13642	Print a help message .
13643	Handle help .
13644	Check command line options .
13645	Execute the script .
13646	Print debug information .
13647	Unserialize an object .
13648	Set the display hook .
13649	Log uncaught exceptions .
13650	Check if the given URL is a valid TCP or IPC URL .
13651	Validate a URL .
13652	Validate a URL container .
13653	Pull a key from globals .
13654	Select n random ports .
13655	Decorate a function as a remote function .
13656	Create a parallel function .
13657	Map a sequence of sequences .
13658	Get the last n lines of the readline history .
13659	Set auto - indent .
13660	Initialize logstart .
13661	Save sys module state .
13662	Restore the original sys module state .
13663	Register a post - execute function .
13664	Create a new main module .
13665	Cache main module .
13666	Initialize the user namespace .
13667	Return a list of all namespace references .
13668	Reset the history manager to its initial state .
13669	Delete a variable
13670	Remove all keys that match the given regex .
13671	Push variables to the user namespace .
13672	Find an object by name .
13673	Return the info for a property .
13674	Find an object by name .
13675	Inspect an object .
13676	Initialize history manager .
13677	Show traceback .
13678	Show a traceback .
13679	Show traceback .
13680	Show a syntax error .
13681	Pre - process readline .
13682	Complete the text .
13683	Set a custom completer .
13684	Set the current frame .
13685	Run a line magic function .
13686	Find a magic by name .
13687	Define a macro .
13688	Perform a system call .
13689	Auto rewrite input .
13690	Return a dictionary of user variables .
13691	Evaluate user expressions .
13692	Evaluate an expression .
13693	Safe execution of a file .
13694	Run cached cell magic .
13695	Run a cell .
13696	Run ast nodes .
13697	Activate pylab .
13698	Expand a variable expression .
13699	Create a temporary file .
13700	Extracts input lines from a range string .
13701	Find the user s code .
13702	Clean up temporary files .
13703	Broadcast a message .
13704	Send a message to multiple targets .
13705	A decorator that skips a function if it is True .
13706	Decorator to mark a function as known failure .
13707	Decorator to mark a function as deprecated .
13708	List all profiles in a directory .
13709	List all bundled profiles .
13710	Find a distribution by key .
13711	Run a command .
13712	Return the path to a file .
13713	Read the next line from the file .
13714	Send a string to the child .
13715	Send interrupt signal .
13716	Prepare regex pattern .
13717	Expects a list of patterns .
13718	Expect loop .
13719	Prepare regex pattern .
13720	Search for a string in a buffer .
13721	Return the index of the best match .
13722	Create a listener for a progress bar .
13723	Unpack a directory .
13724	Emit a message .
13725	The last error in the log .
13726	Check command output .
13727	Find the source for a file .
13728	Return a sorted list of arcs that have been executed .
13729	Return a list of arcs that are missing .
13730	List of arcs that are unpredicted .
13731	Return a list of branch lines .
13732	Total number of branches .
13733	Return a dictionary of branch arcs that are missing .
13734	Return a dictionary of branch statistics .
13735	Set the precision .
13736	Returns the percentage of covered statements .
13737	Return a string representation of the PC covered .
13738	Highlight text .
13739	Highlight a string .
13740	Highlight words .
13741	Run a function .
13742	Unquote the end of a string .
13743	Indent a string .
13744	Return a marquee string .
13745	Format a screen string .
13746	Dedents text .
13747	Wrap paragraphs .
13748	Find the optimal separator width for a list of rows .
13749	Get a value from a list .
13750	Compute the item matrix of items .
13751	Return a list of fields separated by spaces .
13752	Build kernel command line arguments .
13753	Initialize SSH tunnels .
13754	Pretty print an object .
13755	Pretty print an object .
13756	Get the MRO of an object .
13757	Pretty prints an object .
13758	Factory for creating a sequence printer .
13759	Return a pprinter factory for a dictionary .
13760	Pretty prints the super class .
13761	Pretty print a re pattern .
13762	Pretty prints the object .
13763	Pretty prints a function .
13764	Pretty prints exceptions .
13765	Return a function for the given type .
13766	Return a function that can be used to print a type by name .
13767	Write a string .
13768	Write a breakable line .
13769	End a group .
13770	Flush the output buffer .
13771	Pretty prints an object .
13772	Return a ColorSchemeTable with the exception colors .
13773	Write a row into an ODS file .
13774	Get text from the clipboard .
13775	Get OSX clipboard text .
13776	Get text from the clipboard .
13777	Get the prefix for the build directory .
13778	Rekey a dictionary .
13779	Extract dates from an object .
13780	Squash dates in an object .
13781	Convert datetime to ISO8601 .
13782	Convert an object to JSON .
13783	Make sure we can write to site dir .
13784	Write a script to the install directory .
13785	Sleep for t seconds .
13786	Create a parser for the given subcommand .
13787	Convert pyx sources to c
13788	Main entry point .
13789	Build a PackageFinder instance .
13790	Change the log level .
13791	Create a default logger .
13792	Called when flags have changed .
13793	Print alias help .
13794	Print the help for all flags .
13795	Print the subcommands .
13796	Print help for this command .
13797	Print examples .
13798	Update the config with the given config .
13799	Initialize a subcommand .
13800	Flatten a list of flags into a dict .
13801	Parse command line .
13802	Load a config file .
13803	Generate the configuration file .
13804	Downsample an array to k samples .
13805	Format an info dictionary .
13806	Write a message to the output .
13807	Called when a config has changed .
13808	Return a help string for this class .
13809	Return the help text for a trait .
13810	Return a section of the configuration file .
13811	Clear the instance of this class .
13812	Return an instance of this class .
13813	Format a failure .
13814	Logs a crash handler .
13815	Flushes the channel .
13816	Emits the started_channels signal .
13817	Read data from a file .
13818	Read data from a file without blocking .
13819	Process a command and return its output .
13820	Split a string into tokens .
13821	Compress a dhist .
13822	Register magics class .
13823	Record a magic function .
13824	Decorator to mark a function as a method .
13825	Decorator to mark a function as a magic function .
13826	Return a dictionary of lsmagic documentation for each type .
13827	Register a list of magic objects .
13828	Register a function .
13829	Format a string for LaTeX .
13830	Parse command line options .
13831	Set a default option .
13832	Display a Guiref page .
13833	Create a task with a callable .
13834	Get information about a task .
13835	Return the callable object for this task .
13836	Calculate the next run .
13837	Submit a task .
13838	Run the task .
13839	Run asap .
13840	Run a task for a given number of iterations .
13841	Run the given callable once .
13842	Find the actual controller key file .
13843	Binds the IPython kernel to the specified port .
13844	Run all steps of a given test .
13845	Create an interrupt event .
13846	Listen for multiple objects .
13847	Filter a namespace .
13848	List all objects in a namespace .
13849	Raise ValueError if options are mutually exclusive .
13850	Draw the current active figure if it is interactive .
13851	Flush all active figures .
13852	Send a figure .
13853	Load an extension .
13854	Unload an extension .
13855	Generate random ports .
13856	Initialize the notebook web application .
13857	Handle SIGINT signal .
13858	Confirm user to exit
13859	Shutdown all kernels
13860	Calculate the price options .
13861	Replace multiple occurrences of a string in a dictionary .
13862	Render the shell .
13863	Build a kernel launch command .
13864	Create a zip file .
13865	Fix metadata . txt version .
13866	Return True if obj is a tuple or list .
13867	Get a partition of a sequence .
13868	Monkey - patch pexpect . spawn .
13869	Run a file .
13870	Run a source script .
13871	Report coverage data .
13872	Create an XML file .
13873	Download a file from supercomputing . org .
13874	Reduce the frequencies of a list of frequencies
13875	Compute the n - digit frequency of a text file .
13876	Yield digits from a txt file .
13877	Calculate the frequency of a list of digits .
13878	Calculate the frequency of a list of digits .
13879	Calculate the n - digit frequency of a list of digits .
13880	Plot two digit frequencies .
13881	Plot one digit frequency plot .
13882	Print a debug message .
13883	Reverse a view .
13884	Return True if prefix is private .
13885	Create a suite of DocFileTests .
13886	Debug a source code .
13887	Run a debug script .
13888	Debug a module .
13889	Return a dictionary of all files in a hash
13890	Compress all files under hashroot .
13891	Return a list of keys matching globpat .
13892	Allow or deny a record .
13893	Return True if record matches any of matchers .
13894	Format an error .
13895	Embed an interactive shell .
13896	Main loop .
13897	Create a new CSV writer .
13898	Prepare locale directories .
13899	Write PO entries .
13900	Write a header file .
13901	Subscribe to a user .
13902	Initialize the command line parser .
13903	Run a Python module .
13904	Run a Python file .
13905	Compile a Python source file .
13906	Make a Python code object from a . pyc file .
13907	Return an HTML table from a matrix .
13908	Set the current value .
13909	Cancel completion .
13910	Select a row and column .
13911	Select the item up .
13912	Select the down index .
13913	Move to the left .
13914	Move to the right .
13915	Update the list .
13916	Return the frequency of words in text .
13917	Pretty - print word frequencies .
13918	Return a string representation of the element .
13919	Write to a file .
13920	Validate a pin .
13921	Send a pin to a list of topics .
13922	Delete a shared pin .
13923	Send a pin to a user .
13924	Delete a user pin .
13925	Subscribe to a topic .
13926	List subscriptions for a user .
13927	Monitor a function .
13928	Begins a progress bar .
13929	Start a task .
13930	Context manager for a subtask .
13931	Update the progressbar .
13932	Register a submonitor .
13933	Update the progress bar .
13934	Page a string .
13935	Move package to new location .
13936	Load a set of pyconfig files .
13937	Load configuration file .
13938	Load a config file as a dict .
13939	Load flag from config .
13940	Decodes a list of arguments .
13941	Load configuration from argv .
13942	Load the configuration file .
13943	Parse command - line arguments .
13944	Convert parsed data to a Config object .
13945	Find a module by name .
13946	Add a function to the list of stop callbacks .
13947	Notify that the process started .
13948	Notify that the process has stopped .
13949	Interrupt and then kill the process .
13950	Return a list of arguments to pass to the MPI program .
13951	Start the MPILauncher .
13952	Send local file to remote
13953	Fetch a file from a remote machine .
13954	Return the number of engines in the configuration .
13955	Start n engines .
13956	Start a job .
13957	Return default context .
13958	Parse job id from output .
13959	Write batch script .
13960	Start a batch script .
13961	Make a context menu .
13962	Appends a JPG file .
13963	Appends a PNG file .
13964	Appends a SVG element .
13965	Add an image to the document .
13966	Copies an image to the clipboard .
13967	Returns the image resource with the given name .
13968	Insert an image .
13969	Insert an SVG .
13970	Save an image .
13971	Called when the process has changed .
13972	Initialize the environment .
13973	Auto rewrite input .
13974	Ask the user to exit .
13975	Set the next input .
13976	Read a config file .
13977	Get a list of values in a section .
13978	Get a list of lines in a section .
13979	Read environment variables .
13980	Set attributes from keyword arguments .
13981	Load configuration from a file .
13982	Set attribute from config option .
13983	Expand a user path .
13984	Set the delimiter expression .
13985	Split a line by delimiter .
13986	Return a list of keywords that match the given text .
13987	Return a list of attributes that match the given text .
13988	Greedy splitter changed
13989	Return a list of strings that match text .
13990	Return a list of aliases that match text .
13991	Return a list of matches for the given text .
13992	Return the default arguments for an object .
13993	Complete the text .
13994	Prompt the user for input .
13995	Return True if rec matches one of the tests .
13996	Return a list of records that match the given check .
13997	Extract subdict from rec .
13998	Return True if the user has entered a prompt .
13999	Write the output prompt .
14000	Write a dictionary of format data .
14001	Log output from the shell .
14002	Raise an InvalidOperationException if the object is freezed .
14003	Convert a string to a timestamp .
14004	Called when an event loop has changed .
14005	Dispatch a control message .
14006	Dispatch a message .
14007	Start the shell .
14008	Perform one iteration .
14009	Publish a pyin message .
14010	Abort a request .
14011	Clear a request .
14012	Convert a topic to a string .
14013	Send shutdown message .
14014	Add modules to the stack .
14015	Remove sys modules from the stack .
14016	Return the absolute path to a directory .
14017	Return True if the given path is a file .
14018	Return True if obj is a class .
14019	Check if path is a package .
14020	Return the package name of a module .
14021	Create a line with a label .
14022	Return the last key that matches a regex .
14023	Transplant a function to a module .
14024	Return a class that is a subclass of cls .
14025	Get system CPU times .
14026	Get the command line for this process .
14027	Return a list of open file tuples .
14028	Get a list of connection objects for this process .
14029	Check if a user has a group .
14030	Resolve a class .
14031	Return a percentage of the total usage .
14032	Memoize a function .
14033	Decorator to mark a function as deprecated .
14034	Login to Google Docs .
14035	Get GDocs key .
14036	Make sure the temp path exists .
14037	Clear temporary files .
14038	Uploads a file to Google Docs .
14039	Synchronize local and GDocs .
14040	Download data from GDocs .
14041	Upload po files to ODS .
14042	Clear the docs .
14043	Create a new qtconsole
14044	Check if a URL is accessible from this machine .
14045	Check if url has contents .
14046	Get the response code from a URL .
14047	Compare the content type of a given URL .
14048	Return True if the response code is equal to the given code .
14049	Validate data .
14050	Clear output .
14051	Find the absolute path to a command .
14052	Create a list of CodeUnits from a list of morfs .
14053	Return the root name of the directory .
14054	Get the source file for this coverage .
14055	Return True if the file should be Python .
14056	Return the total number of seconds since epoch .
14057	Get the result .
14058	Wait for this message to complete .
14059	Get a dict of the results from the server .
14060	Abort this message .
14061	Return the elapsed time in seconds since the epoch .
14062	Wait for all tasks to complete .
14063	Publish a displaypub message
14064	Wait until all outputs are ready .
14065	Wait for a message to arrive .
14066	Return absolute path to file .
14067	Prepare a list of patterns .
14068	Return the separator of a string .
14069	Find Python files in a directory .
14070	Return a relative filename .
14071	Return the canonical filename for filename .
14072	Get data from a zip file .
14073	Return True if the given path matches this directory .
14074	Return True if fpath matches one of the patterns in self . pats .
14075	Map a path to its canonical form .
14076	Loop Qt4 .
14077	The main event loop .
14078	Loop on Tkinter .
14079	Start the gtk loop .
14080	Cocoa loop integration .
14081	Enable the given GUI .
14082	r Calculates the GOE of a point .
14083	Compute the absolute difference between the center eigenvalue and the eigenvalue of a matrix .
14084	Compute the difference between the center eigenvalue and the ensemble .
14085	Initialize this step .
14086	Parse a YAML file .
14087	Parse a step configuration .
14088	Initialize the crash handler .
14089	Load config file .
14090	Initialize the profile directory .
14091	Stage the default config file .
14092	Write the file to disk .
14093	Erases the file .
14094	Return a dictionary of line names and lists of lists of line names .
14095	A dictionary of arc names sorted by frequency .
14096	Write data to a file .
14097	Read a file .
14098	Read data from a file .
14099	Read a file .
14100	Combine parallel data .
14101	Add line data to the file .
14102	Add arc data .
14103	Add lines and arcs to hash .
14104	Return a summary of the lines .
14105	Get pasted lines .
14106	Main loop .
14107	Replace the readline history with a multiline history .
14108	Prompt the user for input .
14109	Edit a syntax error .
14110	Return True if we should recompile .
14111	Prompts the user to exit .
14112	Returns a tuple of the URL and the revision number .
14113	Create a new frontend master .
14114	Initialize the colors for this widget .
14115	Return a tuple of identity url pub_url location .
14116	Convert RObject to numpy array .
14117	Find the source code for an object .
14118	Sets the current color scheme .
14119	Toggles the color scheme .
14120	Return a string representation of the traceback .
14121	Format a structured traceback .
14122	Format a list .
14123	Format an exception only .
14124	Show exception only .
14125	Run the debugger .
14126	Set the format mode .
14127	Decorator for views that require that the user be a member of a group .
14128	Import a module from a list .
14129	Add a line to the code .
14130	Add a section .
14131	Get a function by name .
14132	Return the code for the given expression .
14133	Render the template .
14134	Do dots .
14135	Render a template .
14136	Return a dictionary of default formatter classes .
14137	Return a function for the given type .
14138	Return a function that can be used to print a type .
14139	Called when float precision has changed .
14140	Return a list of user config files .
14141	Configure this command .
14142	Configure logging .
14143	Set the working directory .
14144	Dumb page .
14145	Page a string .
14146	Page a file .
14147	Get pager command .
14148	Get pager start string .
14149	Print a snipped string .
14150	Print a basic unicode string .
14151	Print a LaTeX string in PNG format .
14152	Print a string in a PNG format .
14153	Return True if o can be printed as LaTeX .
14154	Print a LaTeX string .
14155	Add options to the plugin .
14156	Validate a list of strings .
14157	Validate that all keys and values in a dict are strings .
14158	Run the IOLoop .
14159	Handle a received message .
14160	Execute a code .
14161	Send a complete request .
14162	Get information about an object .
14163	Send a history request .
14164	Shutdown the server .
14165	Flush all buffered data .
14166	Send an input message .
14167	Start channels .
14168	Stop all channels .
14169	Return True if all channels are running .
14170	Load connection file .
14171	Write connection file .
14172	Start a kernel .
14173	Shutdown the kernel .
14174	Restart the kernel .
14175	Kills the kernel .
14176	Interrupt the kernel .
14177	Send a signal to the kernel .
14178	Check if the kernel is running .
14179	Get the shell channel .
14180	Return a sub - channel .
14181	Return a new hb channel .
14182	Bind a kernel to the IPython notebook .
14183	Log a message at the debug level .
14184	Return a list of extension classes .
14185	Pre - step hook .
14186	Call post_step on all registered extensions .
14187	Finalize the extension .
14188	Walk an egg directory .
14189	Scan a module .
14190	Launch a new IPController instance .
14191	Save connection dictionary to file .
14192	Load config from JSON .
14193	Load secondary config .
14194	Execute a cell in parallel .
14195	Enable autopx .
14196	Disable autopx .
14197	Run a cell .
14198	Run a heartbeat .
14199	Run a task .
14200	Remove a task .
14201	Patch protocol for agent .
14202	Patch an attribute of an object if missing .
14203	Accept a connection .
14204	Reject a connection .
14205	Returns an instance of the proxy agent .
14206	Called when a form is valid .
14207	Delete the object .
14208	Make sure user is authenticated .
14209	Report a coverage report .
14210	Check all modules .
14211	Open the specified file .
14212	Fix error editor .
14213	Get the clipboard contents .
14214	Add a function to the chain .
14215	Get metadata for a module .
14216	Configure the logger .
14217	Import an item from a package .
14218	Try passwordless SSH .
14219	Try passwordless openssh .
14220	Try to connect to a server using paramiko .
14221	Create a tunnel connection .
14222	Open a tunnel .
14223	Stop scheduling tasks .
14224	Unwrap an exception .
14225	Register an engine
14226	Unregister an engine .
14227	Handle an ExecuteReply message .
14228	Send all pending notifications .
14229	Flush the results queue .
14230	Send control frames to the client .
14231	Flush ignored control messages .
14232	Process iopub messages .
14233	Spin every interval seconds .
14234	Stop spinning thread .
14235	Spawns a new thread .
14236	Wait for jobs to complete .
14237	Send an apply request to the client .
14238	Send an execute_request message .
14239	Get a result from the hub .
14240	Get the status of a queue .
14241	Purge results from the engine .
14242	Get the history of a hub .
14243	Perform a database query .
14244	Return a set of opcodes for the given names .
14245	Get the byte parser .
14246	Return a set of lines matching the given regexes .
14247	Parse the text .
14248	Return the first line of the given line .
14249	Return a set of first lines in a list of lines .
14250	Parse Python source .
14251	Return a list of arcs in the file .
14252	Return a dictionary mapping line numbers to exit counts .
14253	Return a list of child parsers .
14254	Yields bytes and line numbers .
14255	Find all of the statements in this code .
14256	Return a string representation of a block stack .
14257	Split the code into chunks .
14258	Check that chunks are valid .
14259	Yield arcs from the trace function .
14260	Return a list of all chunks of this parser .
14261	Return a set of all arcs in this parser .
14262	Add options to the coverage report .
14263	Start coverage .
14264	Report the coverage report .
14265	Return True if the file should be included .
14266	Interpret a distribution name .
14267	Open a URL with authentication .
14268	Fetch a distribution .
14269	Return the parent of obj .
14270	The name of the root topic .
14271	Render a template .
14272	Configure the plugin .
14273	Format an error .
14274	Split data by num elements .
14275	Convert a notebook to this notebook format .
14276	Convert hex color to RGB .
14277	Get colors for a given stylename .
14278	Return a QFont object for the given family .
14279	Handle an execute reply .
14280	Handle a history reply .
14281	Handle a pyout message .
14282	Handle display data .
14283	Called when the widget is started .
14284	Execute a file .
14285	Process an execute error message .
14286	Process an execute payload .
14287	Set the default color scheme .
14288	Edit a file .
14289	Make an in prompt .
14290	Make a continuation prompt .
14291	Called when the style sheet has changed .
14292	Called when a syntax style has changed .
14293	Handle API response .
14294	Signs the given url parameters .
14295	Transform data into a dict .
14296	Virtual memory information .
14297	Get system CPU times .
14298	Return a list of process UIDs .
14299	Get the gids of this process .
14300	Return a list of process threads
14301	Return a list of open files for this process .
14302	Get the commit hash for a package .
14303	Return information about a package .
14304	Get system information .
14305	Return the number of CPU cores on the system .
14306	Return the number of CPUs on the system .
14307	Get the next set of results .
14308	Fetch a single row .
14309	Fetch many rows .
14310	Fetch all rows .
14311	Connect to multiple peers .
14312	Read a notebook from a JSON string .
14313	Read a notebook from a string .
14314	Reads a text file .
14315	Write nb to a file .
14316	Write nb to fp .
14317	Convert IPynb files to metadata .
14318	Load from a dictionary .
14319	Return True if the given name matches this filter .
14320	Return True if the class is wanted .
14321	Return True if the directory is wanted .
14322	Return True if file should be loaded .
14323	Determine if a function is wanted .
14324	Return True if the given method should be used .
14325	Determine if a module is wanted .
14326	Return a list of lines from a file .
14327	list commands
14328	Print a list of lines .
14329	Pdef
14330	Calculate the conversion factor between two currencies .
14331	Convert a currency from one currency to another .
14332	Compute the return value for a given rate .
14333	Get the encoding of a stream .
14334	Return the encoding to use when reading from stdin .
14335	Write connection file .
14336	Initialize the heartbeat channel .
14337	Log connection information .
14338	Initialize the session .
14339	Initialize IO streams .
14340	Initialize the kernel .
14341	Initialize the connector .
14342	Register with the controller .
14343	Convert HTML to text .
14344	Convert Markdown to plain text .
14345	Convert a domain to a FQDN .
14346	Add options to the given parser .
14347	Configure NoseExclude .
14348	Check if a directory should be excluded
14349	Return True if the extension links to a dynamic library .
14350	Call a list of functions .
14351	Call each function in reversed order .
14352	Append a function to the list .
14353	Insert a function into the list .
14354	Format the usage string .
14355	Initialize the application .
14356	Write the current process ID to a pid file .
14357	Remove the pid file .
14358	Get the PID from a pid file .
14359	Construct a parser for the given magic function .
14360	Return the real name of a magic function .
14361	Highlight a block .
14362	Rehighlight a block .
14363	Set the format .
14364	Copies the current selection to the clipboard .
14365	Execute a shell command .
14366	Called when the prompt has finished .
14367	Return True if tab is pressed .
14368	Make a context menu .
14369	Filter a key press event .
14370	Insert a continuation prompt .
14371	Handle a complete reply .
14372	Register a callback to be called when a command is executed .
14373	Handle exec callback .
14374	Handle an execute reply .
14375	Handle input request .
14376	Handle kernel died .
14377	Handle an object info reply .
14378	Handle a pyout message .
14379	Handle a stream message .
14380	Handle a shutdown reply .
14381	Execute a file .
14382	Interrupt the kernel process .
14383	Reset the kernel .
14384	Restarts the kernel .
14385	Show a call tip .
14386	Sends a completion request to the kernel .
14387	Process an execute error message .
14388	Process an execute message .
14389	Handle document contents changes .
14390	Add a plugin .
14391	Execute the chain of plugins .
14392	Yields the results of each plugin .
14393	Simple wrapper for plugins .
14394	Configure plugins .
14395	Load all loaded plugins .
14396	Load builtin plugins .
14397	Convert latex to PNG .
14398	Convert latex to HTML .
14399	Convert a string to an image .
14400	Check if requirements file exists .
14401	Return an iterator that yields Process instances .
14402	Calculate the percentage of CPU usage .
14403	Return a dictionary representation of this object .
14404	Get the process name .
14405	Get the executable for this process .
14406	Get the children of this process .
14407	Get CPU percent .
14408	Returns the percentage of memory available on the system .
14409	Returns a list of memory maps .
14410	Check if the process is running .
14411	Suspend the current process .
14412	Resume the current process .
14413	Kill the current process .
14414	Wait for the process to finish .
14415	Wire up the kernel .
14416	hijack gtk main and main_quit
14417	Return True if the IP is shadowed .
14418	Initialize all registered transformers .
14419	Register a transformer .
14420	Unregister a transformer .
14421	Initialize checkers .
14422	Register a checker .
14423	Unregister a checker .
14424	Initialize handlers .
14425	Register a handler .
14426	Unregister a handler .
14427	Prefilter line_info .
14428	Find handler for line_info .
14429	Transform a line .
14430	Prefilter a line .
14431	Prefilter lines .
14432	Check if this is an auto filter .
14433	Check if a line is valid .
14434	Check if a line is valid .
14435	Check if the given line_info is valid .
14436	Handle a line .
14437	Process a line of code .
14438	Handle a line .
14439	Handle the magic command .
14440	Handle a single line .
14441	Handle a line .
14442	Reimplement Qt method to hide the call tip widget .
14443	Hide the call tip widget .
14444	Paints the call tip widget .
14445	Show call info .
14446	Show a call tip .
14447	Called when the cursor position has changed .
14448	Create a proxied attribute .
14449	Canonicalize a path .
14450	Validate an instance against a schema .
14451	Return a masked version of this dictionary .
14452	Return True if there is no no - global site packages .
14453	Calculate the frequency of a list of words .
14454	Decorate a function as a view .
14455	Return a list of aliases for the kernel .
14456	Soft define an alias .
14457	Define an alias .
14458	Validate that an alias is valid .
14459	Call an alias .
14460	Transform an alias .
14461	Expand aliases .
14462	Autohelp directive .
14463	Reset all attributes to default values
14464	Split a string into ANSI or special sequences .
14465	Return a QColor object for the given color .
14466	Returns a QtGui . QTextCharFormat object .
14467	Generate a JWT .
14468	Decorator Wrapper
14469	Clean expired JWTs .
14470	Return True if the token is already used .
14471	Validate a JWT .
14472	Acquire a semaphore .
14473	Return common prefix of items .
14474	Filter event .
14475	Returns the size hint for this widget .
14476	Check if we can cut .
14477	Returns True if the user can paste the clipboard .
14478	Clear the screen .
14479	Cut the text .
14480	Execute the prompt .
14481	Get the input buffer .
14482	Sets the input buffer .
14483	Set font .
14484	Paste the clipboard .
14485	Print the dialog .
14486	Move to the top of the prompt .
14487	Reset font .
14488	Appends input to the buffer .
14489	Appends html to the end of the dialog .
14490	Appends an HTML fragment containing plain text .
14491	Appends a plain text message .
14492	Clears the temporary buffer .
14493	Complete with items .
14494	Fill the temporary buffer .
14495	Checks if a key is down .
14496	Create the underlying control .
14497	Create the page control .
14498	Filter a page key event .
14499	Get the plain text representation of a block .
14500	Returns the end cursor .
14501	Return the column number of the cursor .
14502	Return the input buffer cursor line .
14503	Get the cursor position .
14504	Get selection cursor .
14505	Insert a continuation prompt .
14506	Insert an HTML document .
14507	Insert the given HTML into the editor .
14508	Insert plain text .
14509	Keep cursor in buffer .
14510	Quit the keyboard .
14511	Page text .
14512	Called when a prompt is started .
14513	Read a line from the widget .
14514	Set the continuation prompt .
14515	Set the top cursor .
14516	Show a prompt .
14517	Adjust scrollbars .
14518	Main entry point .
14519	Copies a config file to the current location .
14520	Create a profile directory .
14521	Find a profile directory by name .
14522	Convert a comparison function to a key .
14523	Read a file .
14524	Read multiple lines from stdin .
14525	Create a temporary file .
14526	Close the stream .
14527	Write data to the file .
14528	Add a new heartbeat handler .
14529	Add a new heart failure handler .
14530	Handle a pong message .
14531	Return a list of batches from a sequence .
14532	Convert a path to a filename .
14533	Walk a directory .
14534	Display a percentage of the number of loops .
14535	Returns a tuple of the elapsed time unit and the average time unit
14536	Extracts a Wininst configuration file .
14537	Uncaches a zip directory .
14538	Quote a string .
14539	Check for conflicts .
14540	Set fetcher options .
14541	Create the home directory .
14542	Determine if a file is an archive file .
14543	Make obj mutable .
14544	Create a readonly proxy .
14545	Create a new heading cell .
14546	Create a new notebook node .
14547	Create a new author node .
14548	Return True if path is writable .
14549	Unquote a filename .
14550	Return the filename of a Python file .
14551	Find a file in a directory .
14552	Get the home directory .
14553	Get the XDG configuration directory .
14554	Get the IPython installation directory .
14555	Get the path to the IPython package directory .
14556	Get the path to an IPython module .
14557	Check if a target is outdated
14558	Return the hash of a file .
14559	Check for old IPython configuration files .
14560	Update suggestions dictionary for a given object .
14561	Returns a list of suggestions for the given object .
14562	Returns a list of suggestions for the given object .
14563	Relative path to this directory .
14564	Return a list of strings matching a glob pattern .
14565	Return a list of lines from the file .
14566	Return the MD5 hash of the file .
14567	Begin profiling .
14568	Print a profiler report .
14569	Cleans up the profiler .
14570	Handle the command .
14571	Enable a wx application .
14572	Disable event loop .
14573	Disable Qt4 .
14574	Enable interactive mode .
14575	Enable a Tkinter application .
14576	Enable Pyglet .
14577	Save a wave signal .
14578	Initialize the database .
14579	Run SQL .
14580	Get information about a particular session .
14581	Get the last n lines .
14582	Get a range by string .
14583	Get the name of the history file .
14584	Set a session name .
14585	Reset the history .
14586	Get a range session .
14587	Store the output of a line .
14588	Writeout cache .
14589	Stop the simulation .
14590	Get the number of CPUs on the system .
14591	Get system CPU times .
14592	Return a list of disk partitions
14593	Return a list of process IDs
14594	Return a nicely formatted pair .
14595	Format a list of statements and lines .
14596	Return a short version of the stack .
14597	Decorator that checks the cache .
14598	Join a list of regexes .
14599	Remove a file .
14600	Update the MD5 hash of v .
14601	Update cluster profiles
14602	Start a cluster .
14603	Stop a cluster .
14604	Find the path to a command .
14605	Process a system command .
14606	Find all code units in the coverage data .
14607	Run report_fn on each file in morfs .
14608	Raises the given exceptions .
14609	Set the current trace .
14610	A decorator that raises an exception if the decorated function exceeds the specified time limit .
14611	Load IPython extensions
14612	Initialize shell code .
14613	Run code from IPythonApp . exec_lines .
14614	Run startup files .
14615	Run all files in IPythonApp . exec_files .
14616	Run code given at command line .
14617	Run the module .
14618	Decorator to add a method that will be called for the given types
14619	Return the filename of a static file .
14620	Read data from a file .
14621	Escape a string .
14622	Report the coverage report .
14623	Make local static report files .
14624	Write html to file .
14625	Calculate the hash of a file .
14626	Write the index . html file .
14627	Read coverage data from a directory .
14628	Write coverage report to directory .
14629	Compares two lists .
14630	Get a slice of a sequence .
14631	Chops a sequence into smaller chunks .
14632	Read configuration file .
14633	Read MANIFEST . in .
14634	Convert a glob pattern to a regular expression .
14635	Return True if filename matches any of patterns .
14636	Return a list of versioned files .
14637	Start a kernel .
14638	Shutdown a kernel .
14639	Kill a kernel .
14640	Get kernel by kernel id .
14641	Get the ports for a kernel .
14642	Get the notebook for a kernel .
14643	Start a kernel .
14644	Shutdown kernel .
14645	Interrupt a kernel .
14646	Restart a kernel .
14647	Create an iopub stream for a kernel .
14648	Create shell stream for kernel .
14649	Create a hb stream .
14650	Reset this instance to its initial state .
14651	Export HTML to a file .
14652	Export an XHTML file .
14653	Ensure image tag is utf8 .
14654	Fix an HTML string .
14655	Export the document .
14656	Return a unique instance of the given class .
14657	Given a list of tokenized terms and a list of search fields and a list of search fields and a list of search fields and a list of search fields and a list of search fields and a list of search fields and a list of search fields and a list of search fields and a list of search fields and a list of search fields and a list of search fields and a list of search fields and a list of search fields and a list of search fields and a list of search fields and a list of search fields and a list of search fields and a list of search fields and a list of search fields and a list of search fields and a
14658	Build a text query from a string .
14659	Returns a query that returns a date greater than a given date .
14660	Build a date less query .
14661	Returns a combined null or blank query .
14662	Set case insensitive fields .
14663	Add options to the parser .
14664	Validate that the specified attribute is acceptable .
14665	Return True if the given method is a valid method .
14666	Rotate the ring .
14667	Patch pyzmq to work with older versions .
14668	Create a parser from a WSDL schema .
14669	Get websocket URL .
14670	Reserializes a list of messages .
14671	Injects a cookie message .
14672	Start a heartbeat .
14673	Start the hb timer .
14674	Stop the heartbeat .
14675	Load data from file .
14676	Get the index of the block .
14677	Seek to the given block index .
14678	Edit a block .
14679	Show the block at the given index .
14680	Show all blocks .
14681	Run a method on a collection .
14682	Batch method .
14683	Run a function in a thread .
14684	Run a parallel process .
14685	Decorator to wrap a function with an object .
14686	Decorate a function with some object attributes .
14687	Return the source code of a traceback .
14688	Return a list of lines that can be inspected .
14689	Displays a progress bar .
14690	Clean up the controller .
14691	Pre - call hook .
14692	Set the ignore state .
14693	Return the result of f .
14694	Sync the results of a function .
14695	Execute a function and spin after it .
14696	Get a list of messages from the queue .
14697	Get a message from the queue .
14698	Decorator for property functions .
14699	Get only the given fields .
14700	Parse environment configuration .
14701	Return a list of modules in a directory .
14702	Get the list of root modules
14703	Quick completer .
14704	Return a list of modules that can be imported .
14705	Completer for magic_run .
14706	Return a list of directory completions .
14707	Quote an attribute .
14708	Configure the plugin .
14709	Write the error report to a file .
14710	Add an error .
14711	Add a failure .
14712	Add a successful test .
14713	Generate a random twobin .
14714	Return the index of the weighted load .
14715	Register an engine .
14716	Unregister an engine .
14717	Handle stranded tasks .
14718	Dispatch a task submission .
14719	Audit the timeouts of dependent jobs .
14720	Fail an unreachable message .
14721	Given a job attempt to run it .
14722	Mark a job as unmet .
14723	Submit a task .
14724	Dispatch a result message .
14725	Handle a result message .
14726	Handle unmet dependencies .
14727	Update the dependency graph .
14728	Start logging .
14729	Print the current log state .
14730	Write a log line .
14731	Write data to the log .
14732	Stop logging .
14733	Create a new notebook node .
14734	Add a string to the chain .
14735	Add a regex to the dispatcher .
14736	Given a key return a generator of objects that match that key .
14737	Return a flat list of values for a key .
14738	Called when a notebook dir has changed .
14739	Return a list of notebooks
14740	Create a new notebook id .
14741	Delete a notebook .
14742	Check if a notebook exists .
14743	Find the path to a notebook .
14744	Get the path to a notebook file .
14745	Get a notebook .
14746	Get a notebook object .
14747	Save a new notebook .
14748	Save a notebook .
14749	Save a notebook object .
14750	Delete a notebook .
14751	Create a new notebook .
14752	Copy a notebook .
14753	Given a list of tokens return a list of tokens .
14754	Generate a list of lines from a source string .
14755	Load the default config file .
14756	Return a list of default classes for this application .
14757	Parse command line .
14758	Initialize the application .
14759	Initialize the shell .
14760	Initialize the banner .
14761	Return a string representation of an object .
14762	Parse notifier name .
14763	Set the default value for this trait .
14764	Add or remove notifiers .
14765	Return a dict of traits defined in a class .
14766	Get the metadata for a trait .
14767	Validate the value .
14768	Get the default value for this field .
14769	Return True if all items are in the set .
14770	Return True if the job is unreachable .
14771	Return a dictionary representation of the dependencies .
14772	Return the depth of n in tree .
14773	Print a Bintree tree .
14774	Disambiguate a DNS URL .
14775	Return the result of applying f to each element of the sequence .
14776	Validate targets .
14777	Dispatch a monitor traffic message .
14778	Dispatch a query .
14779	Handle a new heart .
14780	Handle a heart failure .
14781	Save a task request .
14782	Save a task result .
14783	Save an iopub message .
14784	Handle a connection request .
14785	register a new engine
14786	Unregister an engine .
14787	Finish a registered engine .
14788	Send a shutdown request .
14789	Purge results from the database .
14790	Extract data from a record .
14791	Get results for a message .
14792	Get a history message .
14793	Query the database .
14794	Change working directory .
14795	Decodes the output of a completed command .
14796	Run a command under the root directory .
14797	Execute the script .
14798	Dispatch a message .
14799	Return True if the message is from this session .
14800	Report morfs to a directory .
14801	Annotate a file .
14802	Get the installed version of a package .
14803	Squash unicode strings .
14804	Extract a header from a message .
14805	Check packers .
14806	Create a message .
14807	Sign a list of messages .
14808	Serialize a message .
14809	Send a message to a stream .
14810	Send a message to a stream .
14811	Receive a multipart message .
14812	Feed identities from a message list .
14813	Unserialize a message .
14814	Save a SVG document .
14815	Convert SVG string to clipboard .
14816	Convert an SVG string to an image .
14817	Return a dictionary of information about an object .
14818	Get the docstring of an object .
14819	Return the source of an object .
14820	Get the argspec of an object .
14821	Return a tuple of call line and docstring .
14822	Find the absolute path of an object .
14823	Find the line number of the source of an object .
14824	Get the definition of a function .
14825	Return the head color for the given header .
14826	Print no info message .
14827	Print the definition of an object .
14828	Print the documentation of an object .
14829	Show the source of an object .
14830	Print the contents of a file .
14831	Format a list of fields .
14832	Print information about an object .
14833	Search for a pattern in a namespace .
14834	Start a threaded reactor .
14835	Decorator to mark a function as a deferred .
14836	Find the best string match .
14837	Convert to a string .
14838	Convert to XML .
14839	Load all modules in packages .
14840	Invert a dictionary .
14841	Merge two dictionaries .
14842	Convert an object to a primitive .
14843	Format a string .
14844	Get a list of figures .
14845	Print a matplotlib figure .
14846	Return a function that can be used as a mpl runner .
14847	Set the format of the figure .
14848	Find the GUI and backend to use .
14849	Activate matplotlib .
14850	Configure inline support .
14851	Activate a matplotlib - based Python environment .
14852	Log a trace event .
14853	Start tracing .
14854	Stop tracing .
14855	Start tracing .
14856	Install the real tracer .
14857	Start the collector .
14858	Stop this Collector .
14859	Pause all tracers .
14860	Resume all registered tracers .
14861	Return a dict of line data .
14862	Collect exceptions from a list or a dictionary .
14863	Render the traceback .
14864	Start coverage process .
14865	Return the canonical directory for a MOC .
14866	Return the source code for a file .
14867	Return a tuple of a filename and a reason .
14868	Return True if we should trace .
14869	Log a warning .
14870	Check if any of our source packages have been imported .
14871	Start the analysis .
14872	Clean up after shutdown .
14873	Exclude a regex .
14874	Return the regular expression that should be used for exclusion .
14875	Save data to file .
14876	Combine parallel data .
14877	Harvest data .
14878	Perform the analysis .
14879	Return a tuple of filename statements excluded and missing statements .
14880	Analyzes a code unit .
14881	Report results to a file .
14882	Annotates a set of Morfs with a directory .
14883	Generate HTML report .
14884	Report coverage data to an XML file .
14885	Display objects .
14886	Display a list of objects as HTML .
14887	Display a list of objects as SVG .
14888	Display a list of images .
14889	Display a list of images .
14890	Display a list of objects in LaTeX format .
14891	Display a list of objects in JSON format .
14892	Display a list of JavaScript objects .
14893	Reloads the data .
14894	Find the path to a command .
14895	Execute a system command .
14896	Forward read events from a pipe .
14897	Run the IOLoop .
14898	Find launcher class .
14899	Start the cluster .
14900	Build a launcher class .
14901	Start the IPython cluster .
14902	Start the cluster .
14903	Get a wx application .
14904	Check if wx is running in event loop .
14905	Start event loop in wx
14906	Return an instance of the Qt4 QApplication .
14907	Return True if QT4 is running in event loop .
14908	Start event loop .
14909	Create a blank canvas .
14910	Draw a cross .
14911	Draw a line between two points .
14912	Set the text at the specified position .
14913	Create an AnnotatedImage from a grayscale image .
14914	Generate a UUID .
14915	Generate a unique key from a GET dictionary .
14916	Get the domain of a given URL .
14917	Get arguments from a URL .
