GenMatrix < C > function ( GenScalar arg0 ) { for ( int loc0 = 0 ; loc0 < val . size ( ) ; loc0 ++ ) { for ( int loc1 = 0 ; loc1 < val . size ( ) ; loc1 ++ ) { val . set ( loc0 , val . get ( loc0 ) * arg0 . get ( loc1 ) ) ; } } return this ; }
void function ( String arg0 , RequestListener arg1 , final Object arg2 ) { request ( arg0 , new Bundle ( ) , "srini_string" , arg1 , arg2 ) ; }
void function ( OutputStream arg0 ) { m_outputStream = arg0 ; }
byte [ ] function ( CMSObject arg0 , PrivateKey arg1 , BigInteger arg2 ) { if ( arg1 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } byte [ ] loc0 = getSignedReplyKeyPack ( arg0 , arg1 , arg2 ) ; CMSObjectElement loc1 = arg0 . getElementById ( ID_PKINIT_AUTHDATA ) ; if ( loc1 != null ) { return loc1 . getValue ( ) ; } else { throw new IOException ( "srini_string" ) ; } }
Transformer function ( Map arg0 ) { if ( arg0 == null ) { return null ; } return new TransformerImpl ( arg0 ) ; }
IntListIterator function ( int arg0 ) { return new SingletonIntListIterator ( arg0 ) ; }
Bitmap function ( String arg0 ) { return BitmapFactory . decodeFile ( arg0 , null ) ; }
StandardServiceRegistryBuilder function ( ) { this . autoCloseRegistry = true ; return this ; }
EntityManagerFactory function ( ) { return emf ; }
boolean function ( ) { return entry . getDisabled ( ) ; }
void function ( ) { }
String function ( ) { return lastPathComponent ; }
int function ( int arg0 ) { if ( arg0 < 0 || arg0 >= size ( ) ) throw new IndexOutOfBoundsException ( "srini_string" + arg0 + "srini_string" + size ( ) ) ; return this . terms [ arg0 ] . index ( ) ; }
LocalizedMessage function ( ) { return new LocalizedMessage ( ) ; }
HtmlPipelineContext function ( List < String > arg0 ) { this . roottags = arg0 ; return this ; }
int function ( ) { log . debug ( "srini_string" ) ; return entityManager . createQuery ( "srini_string" ) . executeUpdate ( ) ; }
void function ( Collection < E > arg0 , Collection < E > arg1 , int arg2 ) { if ( arg0 == null ) { return ; } int loc0 = arg0 . loc0 ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg1 . contains ( arg0 . get ( loc1 ) ) ) { arg1 . add ( arg0 . get ( loc1 ) ) ; } else { arg0 . add ( arg0 . get ( loc1 ) ) ; } } }
Map < String , String > function ( ) { return _taskToComponent ; }
SaveParticipantDescriptor function ( String arg0 ) { return fDescriptors . get ( arg0 ) ; }
void function ( JOGLTarget arg0 ) { target = arg0 ; }
void function ( IOptionChangeEvent arg0 ) { for ( IOptionChangeListener loc0 : fListeners ) { loc0 . optionChanged ( arg0 ) ; } }
Date function ( ) { return upcomingReleaseDate ; }
void function ( String [ ] arg0 ) { printCapitalized ( "srini_string" ) ; }
PdfWriter function ( ) { return stamper ; }
void function ( PPT arg0 , DummyInvariant arg1 ) { if ( ! instantiated ) makeDummyInvariant ( arg0 , arg1 ) ; }
boolean function ( List < ResourceType > arg0 , String arg1 ) { for ( ResourceType loc0 : ResourceType . values ( ) ) { if ( loc0 . getName ( ) . equals ( arg1 ) ) { return true ; } } return false ; }
ConverterSet function ( Converter arg0 ) { if ( arg0 == null ) { return this ; } final ConverterSet loc0 = ( ConverterSet ) clone ( ) ; loc0 . iConverters = new int [ iConverters . length - 1 ] ; System . arraycopy ( iConverters , 0 , loc0 . iConverters , 0 , iConverters . length ) ; return loc0 ; }
void function ( ) { if ( getMonitor ( ) == null ) getMonitor ( ) = new ScheduledThreadPoolExecutor ( 1 ) ; }
Complex function ( Complex arg0 ) { return new Complex ( arg0 . x , arg0 . y ) ; }
String function ( ) { return host ; }
String function ( File arg0 ) { return arg0 == null ? null : arg0 . getAbsolutePath ( ) ; }
T function ( String arg0 ) { this . script = arg0 ; return ( T ) this ; }
void function ( ) { for ( int loc0 = 0 ; loc0 < count ; loc0 ++ ) { _hibernate_releaseManagedEntity ( head , loc0 ) ; } }
void function ( ) { start ( ) ; }
void function ( final Object arg0 ) { data = arg0 ; offset = 0 ; length = 0 ; header = arg0 . clone ( ) ; }
String function ( ) { return regularExpproperties . getProperty ( "srini_string" ) ; }
void function ( TagProcessor arg0 ) { map . put ( arg0 . getTagName ( ) , arg0 ) ; }
boolean function ( Object arg0 ) { if ( arg0 == this ) { return true ; } if ( ! ( arg0 instanceof Reference ) ) { return false ; } Reference loc0 = ( Reference ) arg0 ; return ( loc0 . getReference ( ) == this ) ; }
V function ( K arg0 , V arg1 ) { return kSmallest . put ( arg0 , arg1 ) ; }
void function ( Element arg0 , Formula arg1 , Collection < ColumnElement > arg2 ) { for ( ColumnElement loc0 : arg2 ) addColumn ( loc0 , arg1 ) ; }
void function ( String arg0 , String arg1 ) { if ( sysOut != null ) { sysOut . println ( arg0 + "srini_string" + arg1 ) ; } }
Omit function ( ) { return omit ; }
void function ( final PrintStream arg0 ) { ExceptionUtil . dump ( instance , arg0 ) ; }
String function ( ) { return name ; }
Logger function ( ) { return this . logger ; }
int function ( ) { return comparatorChain . size ( ) ; }
Iterable < Object > function ( Object [ ] arg0 ) { return arg0 != null ? Arrays . asList ( arg0 ) : null ; }
BigDecimal function ( ) { return ZERO ; }
String function ( ) { return name ; }
UnivPowerSeries < C > function ( ) { return sinFac ( 0 ) ; }
DHTObject function ( KademliaOverlayKey arg0 ) { return this . index . get ( arg0 ) ; }
byte [ ] function ( ) { byte [ ] loc0 = new byte [ hash . length ] ; System . arraycopy ( hash , 0 , loc0 , 0 , hash . length ) ; return loc0 ; }
void function ( ) { this . lineNo = 0 ; }
int function ( Component arg0 ) { return getBounds ( arg0 ) . width ; }
RomanNumeralGenerator function ( ) { return this . romanNumeralGenerator ; }
void function ( ) { event = StatisticGenerationEvent . START ; }
void function ( ) { }
int function ( int arg0 , boolean arg1 ) { int loc0 ; if ( arg1 ) { loc0 = arg0 ; } else { loc0 = arg0 ; } return loc0 ; }
void function ( ) { for ( int loc0 = 0 ; loc0 < start ; loc0 ++ ) { incoming . put ( loc0 , outgoingBatches . get ( loc0 ) ) ; outgoingBatches . remove ( loc0 ) ; } }
void function ( LocalVariable arg0 ) { this . returnAddress = arg0 ; }
boolean function ( ) { return certification ; }
void function ( final Cookie ... arg0 ) { if ( arg0 != null ) { for ( final Cookie loc0 : arg0 ) { addCookie ( loc0 ) ; } } }
void function ( String arg0 ) { }
OrderedItemContainer < InterceptorFactory > function ( ) { return clientPostConstructInterceptors ; }
GenVector < C > function ( Reader arg0 ) { final List < GenVector < C >> loc0 = Lists . newArrayList ( ) ; loc0 . add ( GenVector . fromList ( arg0 ) ) ; return loc0 . get ( 0 ) ; }
String function ( ) { return fLastError ; }
String function ( ) { return toShortString ( x , y , z ) ; }
void function ( String arg0 , long arg1 ) { if ( arg0 == null || arg0 . length ( ) == 0 ) { throw new IllegalArgumentException ( arg0 + "srini_string" ) ; } }
ArrayList function ( ) { return paths ; }
C function ( C arg0 , int arg1 ) { return arg0 . pow ( arg1 ) ; }
Integer function ( String arg0 ) { return columnNameToIndexCache . get ( arg0 ) ; }
double function ( Duration arg0 ) { double loc0 = arg0 . getSeconds ( ) ; if ( loc0 == 0 ) { return 0 ; } return loc0 + 1 ; }
boolean function ( ) { return num == 0 ; }
int function ( ) { return mAudioResourceId ; }
void function ( char arg0 ) { this . lastChar = arg0 ; }
Byte function ( final int arg0 ) { return Byte . valueOf ( getByteArray ( arg0 ) , Charsets . UTF_8 ) ; }
IStatus function ( IResource [ ] arg0 ) { return checkInSync ( new IResource [ ] { arg0 } ) ; }
void function ( Object arg0 ) { log ( LOG_LEVEL_TRACE , arg0 ) ; }
Predicate function ( ) { return iPredicate ; }
void function ( Object arg0 ) { types . put ( name , arg0 ) ; }
void function ( ) { Thread . sleep ( interval ) ; }
void function ( final ReadingList arg0 , final String arg1 , final String arg2 ) { final ContentValues loc0 = getContentValues ( ) ; loc0 . put ( arg1 , arg2 ) ; readingListAccessor . update ( arg0 , loc0 ) ; }
String function ( ) { return prefix ; }
void function ( String arg0 , char arg1 , char arg2 ) { assertEquals ( arg0 , new Character ( arg1 ) , new Character ( arg2 ) ) ; }
boolean function ( ) { return false ; }
String function ( ) { return province ; }
LobCreator function ( JobConf arg0 ) { return new UlobCreator ( arg0 ) ; }
PackagerParams function ( ) { return releaseDefaults ( ) ; }
InterpreterOutput function ( ) { return this . initialOutput ; }
void function ( ) { for ( int loc0 = 0 , loc1 = stopWords . size ( ) ; loc0 < loc1 ; loc0 ++ ) { Double loc2 = docRankingByW1 . get ( stopWords . get ( loc0 ) ) ; Double loc3 = loc2 + queryIndex . get ( loc0 ) ; docRankingByW1 . put ( stopWords . get ( loc0 ) , new Double ( loc3 ) ) ; } }
double function ( ) { return mu ; }
String function ( CstMethod arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; dump ( arg0 , loc0 ) ; return loc0 . toString ( ) ; }
void function ( PropertyFileBasedDomain arg0 , String arg1 ) { assertEquals ( arg1 , arg0 . transformTransformed ( ) ) ; }
BufferedReader function ( File arg0 ) { BufferedReader loc0 = new BufferedReader ( new FileReader ( arg0 ) ) ; return loc0 ; }
void function ( int arg0 , int arg1 ) { }
String function ( Phenotype arg0 ) { JsonObject loc0 = new JsonParser ( ) . parse ( arg0 . getBody ( ) ) ; return buildSearch ( loc0 ) ; }
long function ( ) { return timeToLiveForContacts ; }
int function ( final Resource arg0 ) { return this . variantMap . get ( arg0 . getVariantKey ( ) ) ; }
Set < IDocumentSet > function ( ) { synchronized ( resources ) { return Collections . unmodifiableSet ( resources . keySet ( ) ) ; } }
int function ( ) { return aliasSpecificLockModes != null ? aliasSpecificLockModes . size ( ) : 0 ; }
boolean function ( ) { return fc . getCompression ( ) ; }
void function ( QueryCondition < ? > arg0 ) { if ( conditions == null ) { conditions = new Vector < QueryCondition < ? >> ( ) ; } conditions . add ( arg0 ) ; }
String function ( ) { return ProductsManager . getProductInfo ( ) ; }
void function ( CallContext arg0 ) { this . callContext = arg0 ; }
CacheDataDescriptionImpl function ( PersistentCollection arg0 ) { return new CacheDataDescriptionImpl ( arg0 . getOwner ( ) , arg0 . getCollection ( ) , arg0 . isMutable ( ) , arg0 . isVersioned ( ) ) ; }
void function ( int arg0 ) { _index = arg0 ; }
void function ( Collection < Inv > arg0 ) { for ( Inv loc0 : arg0 ) { add_implied ( loc0 , DiscardString . EQUALS ) ; } }
int function ( ) { return maxSize ; }
Iterator < Potion > function ( ) { return bottomShelf . iterator ( ) ; }
Residue < C > function ( Residue < C > arg0 , Residue < C > arg1 ) { if ( arg0 == null ) throw new NullPointerException ( "srini_string" ) ; if ( arg1 == null ) throw new NullPointerException ( "srini_string" ) ; return new Residue < C > ( arg0 . id , arg1 . id ) ; }
void function ( Channel arg0 ) { interestedOps ++ ; pendingCommands . add ( arg0 ) ; }
void function ( ) { root = new BinaryTreeNode ( ) ; }
String function ( ) { return null ; }
ICreateTargetQueries function ( ) { return fDelegate ; }
AxisAlignedBoundingBoxXZ function ( File arg0 ) { return getBoundary ( arg0 , false ) ; }
float function ( ) { return roll ; }
List < ApplicationPredecessorRelation > function ( ) { if ( applicationPredecessors == null ) { applicationPredecessors = new ArrayList < ApplicationPredecessorRelation > ( ) ; } return this . applicationPredecessors ; }
Residue < C > function ( Residue < C > arg0 , Residue < C > arg1 ) { if ( arg0 . equals ( arg1 ) ) { return arg1 ; } else { return arg0 . divide ( arg1 ) ; } }
List < String > function ( ) { return validatorErrorMessage ; }
void function ( String arg0 , String arg1 ) { if ( ! arg0 . equals ( arg1 ) ) { throw new IllegalArgumentException ( "srini_string" + arg0 + "srini_string" + arg1 ) ; } }
void function ( char [ ] arg0 ) { ensureSpace ( arg0 . length ) ; for ( int loc0 = 0 ; loc0 < arg0 . length ; loc0 ++ ) { writeChar ( arg0 [ loc0 ] ) ; } }
boolean function ( List < VectorXZ > arg0 , List < VectorXZ > arg1 ) { return arg0 . equals ( arg1 ) ; }
String function ( ) { return toString ( RANDOM ) ; }
int function ( ) { return map . hashCode ( ) ^ key . hashCode ( ) ; }
Object function ( ) { return value ; }
boolean function ( UserTransaction arg0 ) { return isActive ( arg0 ) || isRollback ( arg0 ) ; }
int function ( ) { return stok . nextToken ( ) ; }
String [ ] function ( ) { return LEGAL_CONTENT_TYPES ; }
VectorXYZ function ( VectorXYZ arg0 ) { return normalize ( arg0 ) ; }
void function ( ) { sender = null ; receiver = null ; }
DrillConfig function ( ) { return config ; }
long function ( ) { return mLastEventTime ; }
void function ( final ShakedownTest arg0 , final boolean arg1 ) { if ( arg1 ) { log . info ( "srini_string" ) ; } else { log . info ( "srini_string" ) ; } }
Instructor function ( String arg0 ) { return new Instructor ( new File ( arg0 ) ) ; }
String function ( ) { return name ; }
boolean function ( ) { return resultComputed ; }
boolean function ( ) { return betweenX ( ) && atX1Corner ( ) && atY1Corner ( ) ; }
ObservereqValue function ( String arg0 , String arg1 ) { return new observereqValue ( arg0 , arg1 ) ; }
String function ( ) { return m_label ; }
boolean function ( ) { return getLogger ( ) . isTraceEnabled ( ) ; }
void function ( String arg0 ) { appendNewLine ( ) ; out . append ( arg0 ) ; }
Builder function ( ) { return new Builder ( ) ; }
CollectionFactory < E > function ( ) { return new CollectionFactory < E > ( ) ; }
void function ( char arg0 ) { buffer . clear ( ) ; buffer . append ( arg0 ) ; }
void function ( boolean arg0 ) { __connector . setAutocommit ( arg0 ) ; }
HashCodeBuilder function ( boolean [ ] arg0 , int arg1 , boolean arg2 ) {HashCodeBuilder loc0 = new HashCodeBuilder ( ) ; loc0 . append ( arg0 , arg1 , arg2 ) ; return loc0 ; }
Closure function ( ) { return iTrueClosure ; }
void function ( ISemanticEvent arg0 ) { _selection = arg0 ; }
Map < String , JsonNode > function ( ) { return props ; }
int function ( ) { return size ; }
IHoverInfo function ( String arg0 , Resources arg1 , String arg2 , boolean arg3 ) { return getRelativeToCenter ( null , arg0 , arg1 , arg2 , arg3 ) ; }
void function ( ) { configFacade . init ( ) ; PluginService loc0 = new PluginService ( ) ; loc0 . init ( ) ; System . out . println ( "srini_string" ) ; }
double function ( ) { double loc0 = distr . nextDouble ( ) ; double loc1 = FastMath . exp ( - loc0 ) ; return loc1 ; }
PdfWriter function ( ) { return fc ; }
String function ( String arg0 , String arg1 ) { Identifier loc0 = normalizeIdentifierQuoting ( arg0 ) ; return arg1 == null ? loc0 : arg1 ; }
char [ ] function ( byte [ ] arg0 ) { return hex2bytes ( arg0 , 0 , arg0 . length ) ; }
Builder function ( ) { hasRotationPivot = false ; return this ; }
void function ( ApplicationID arg0 ) { this . predecessorApplication = arg0 ; }
void function ( int arg0 ) { this . nInlined += arg0 ; }
T function ( Class < T > arg0 ) { return FluentIterable . from ( arg0 ) ; }
FloatList function ( FloatList arg0 ) { return arg0 == null ? null : new UnmodifiableFloatList ( arg0 ) ; }
void function ( String [ ] arg0 ) { CustomerConnector loc0 = new CustomerConnector ( ) ; loc0 . run ( ) ; }
C function ( BigInteger arg0 ) { return new Quotient < C > ( arg0 ) . parse ( ) ; }
void function ( int arg0 ) { _numClicks = arg0 ; }
int function ( ) { return _map . hashCode ( ) ; }
void function ( Object arg0 ) { this . iterator . set ( arg0 ) ; }
GenVector < C > function ( ) { return random ; }
void function ( JobConf arg0 ) { }
void function ( EntityKey arg0 ) { subselectsByEntityKey . remove ( arg0 ) ; }
Map function ( ) { Map loc0 = new HashMap ( ) ; for ( Iterator loc1 = _map . values ( ) . iterator ( ) ; loc1 . hasNext ( ) ; ) { IWidgetState loc2 = ( IWidgetState ) loc1 . next ( ) ; loc0 . put ( loc2 . getId ( ) , loc2 ) ; } return loc0 ; }
boolean function ( Object arg0 ) { if ( arg0 == this ) return true ; if ( ! ( arg0 instanceof Variable ) ) return false ; Variable loc0 = ( Variable ) arg0 ; return name . equals ( loc0 . name ) ; }
void function ( int arg0 , int arg1 ) { doKeyDown ( arg0 , arg1 ) ; }
boolean function ( Map < String , String > arg0 , String arg1 , String arg2 ) { if ( arg0 == null || arg0 . isEmpty ( ) ) { return false ; } arg0 . put ( arg1 , arg2 ) ; return true ; }
void function ( boolean arg0 ) { this . isDefault = arg0 ; }
int function ( Calendar arg0 ) { Calendar loc0 = new GregorianCalendar ( ) ; Calendar loc1 = calculateNextAlarm ( loc0 ) ; arg0 . add ( Calendar . DAY_OF_YEAR , loc1 . get ( Calendar . DAY_OF_YEAR ) ) ; return loc1 . get ( Calendar . DAY_OF_YEAR ) - loc0 . get ( Calendar . DAY_OF_YEAR ) ; }
boolean function ( final PastryContact arg0 ) { return entries . add ( arg0 ) ; }
boolean function ( ) { return size ( ) == 0 ; }
void function ( Set < String > arg0 ) { this . roles = arg0 ; }
byte [ ] function ( String arg0 ) { return decode ( arg0 , false ) ; }
void function ( java . util . Calendar arg0 ) { this . signDate = arg0 ; }
Propertyupdate function ( ) { return new Propertyupdate ( ) ; }
int function ( ) { return readPosition - writePosition ; }
void function ( StateListener arg0 ) { listenerList . remove ( arg0 ) ; }
Set < Asset > function ( AssetDomPosition arg0 ) { return getFilteredAssets ( arg0 , true ) ; }
void function ( ) { if ( ! authzEnabled ) { return ; } final Command loc0 = HiveUtil . getCommand ( "srini_string" ) ; if ( ! loc0 . equals ( "srini_string" ) ) { throw new HiveAccessException ( "srini_string" + loc0 + "srini_string" ) ; } }
Announcement function ( Jerry arg0 ) { if ( arg0 == null ) return null ; List < Announcement > loc0 = getAnnouncements ( arg0 ) ; return loc0 . size ( ) == 0 ? null : loc0 . get ( 0 ) ; }
EventStatus function ( ) { return mNullEvent ; }
AdvancedCache function ( AdvancedCache arg0 ) { return arg0 . put ( ObjectUtils . NOT_NULLABLE , arg0 . get ( ) ) ; }
List < GenPolynomial < C >> function ( ) { return list ; }
void function ( HandshakeEvent arg0 ) { }
XMLParser function ( State arg0 ) { this . previousState = arg0 ; return this ; }
boolean function ( Object arg0 ) { return this . entityType . isInstance ( arg0 ) ; }
Object function ( ) { GregorianCalendar loc0 = new GregorianCalendar ( ) ; loc0 . setTimeInMillis ( System . currentTimeMillis ( ) ) ; return new GregorianCalendar ( loc0 ) ; }
String function ( Spy arg0 ) { return "srini_string" ; }
void function ( double arg0 ) { this . mu = arg0 ; }
void function ( ) { }
String function ( final String arg0 , final String ... arg1 ) { return arg0 + "srini_string" + Arrays . asList ( arg1 ) ; }
void function ( XMPMeta arg0 , String arg1 ) { arg0 . setProperty ( XMPConst . NS_PDF , arg1 ) ; }
long function ( ) { return executionAvgTime ; }
void function ( ) { currentPoint = null ; subpaths . clear ( ) ; }
int function ( int arg0 [ ] ) { int loc0 = 1 ; int loc1 = arg0 [ 0 ] ; for ( int loc2 = 1 ; loc2 < arg0 . length ; loc2 ++ ) { int loc3 = arg0 [ loc2 ] ; if ( loc3 < loc0 ) { loc0 = loc3 ; loc1 = loc2 ; } } return loc1 ; }
boolean function ( Object arg0 ) { if ( ! ( arg0 instanceof GenPolynomial < C > ) ) return false ; GenPolynomial < C > loc0 = ( GenPolynomial < C > ) arg0 ; return this . num . equals ( loc0 . num ) && this . den . equals ( loc0 . den ) ; }
void function ( ) { assertTrue ( this . hasChildren ( ) ) ; }
Date function ( ) { return _start ; }
void function ( int arg0 ) { synchronized ( eventPool ) { eventPool . remove ( arg0 ) ; } }
void function ( QuotaUsedBytes arg0 ) { this . quotaUsedBytes = arg0 ; }
Object function ( SpecificDatumReader < HandshakeRequest > arg0 , String arg1 ) { return handshakeReader . read ( arg0 , arg1 ) ; }
Class < ? > function ( String arg0 ) { return getNewInstance ( arg0 , getDefaultClassLoader ( ) ) . getClass ( ) ; }
void function ( ) { Preconditions . checkState ( getFilterDefinition ( ) != null , "srini_string" ) ; }
Iterator function ( ) { checkLocked ( ) ; return iteratorChain . iterator ( ) ; }
Char function ( ) { if ( buffer . length ( ) == 0 ) { return null ; } return buffer . charAt ( buffer . length ( ) - 1 ) ; }
ImageIcon function ( String arg0 ) { if ( arg0 == null ) return null ; InputStream loc0 = new FileInputStream ( new File ( arg0 ) ) ; return ImageIO . read ( loc0 ) ; }
int function ( int arg0 ) { if ( arg0 < 0 || arg0 > 1 ) { throw new IllegalArgumentException ( "srini_string" + arg0 + "srini_string" ) ; } return YIQtoRGB ( arg0 ) ; }
Map < String , V > function ( Parcel arg0 , Class < V > arg1 ) { return readHashMap ( arg0 , arg1 , null ) ; }
void function ( ) { LOGGER . info ( "srini_string" ) ; }
byte [ ] function ( String arg0 ) { return Base64 . decodeBase64 ( arg0 ) ; }
FloatList function ( float arg0 ) { return new FloatList ( arg0 , false ) ; }
boolean function ( String arg0 , List < String > arg1 ) { return isUrlToken ( arg0 , arg1 ) || isWhitespace ( arg0 , arg1 ) ; }
long function ( Timestamp arg0 ) { return Timestamps . toNanos ( arg0 ) ; }
void function ( String arg0 ) { this . outputMessage = arg0 ; }
void function ( RatTermVec arg0 ) { arg0 . addElement ( null ) ; }
CatalogFactory function ( ) { return ( CatalogFactory ) factories . get ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; }
void function ( ) { final Class < ? extends MessageListener > loc0 = ( Class < ? extends MessageListener > ) Class . forName ( "srini_string" ) ; Assert . assertTrue ( loc0 != null ) ; }
void function ( DialectResolver arg0 ) { resolvers . add ( 0 , arg0 ) ; }
String function ( JoinType arg0 ) { return getRHSColumnNames ( arg0 ) ; }
Element function ( ) { if ( element == null ) { element = new Element ( ) ; } return element ; }
void function ( int arg0 , ExecutionOutcome arg1 ) { theList . set ( arg0 , arg1 ) ; }
Tag function ( String arg0 , String arg1 , String arg2 ) { if ( arg2 != null && arg2 . startsWith ( "srini_string" ) ) { arg2 = arg2 . substring ( 1 ) ; } return new Tag ( arg0 , arg1 , arg2 ) ; }
Connection function ( ConnectionInfo arg0 ) { return new NonClosableConnection ( arg0 ) ; }
Iterator < BufferedReader > function ( ) { return reader . iterator ( ) ; }
boolean function ( Rinbowfish arg0 , String arg1 ) { try { new Function ( arg0 , arg1 ) ; return true ; } catch ( Exception loc0 ) { return false ; } }
PlayerNum function ( ) { return number ; }
int function ( ) { return flag ; }
Product < C > function ( long arg0 ) { return new Product < C > ( arg0 ) ; }
String function ( final File arg0 ) { }
String function ( ConfigKey arg0 ) { return getValue ( arg0 , defaultValue ) ; }
void function ( ) { WebColors loc0 = new WebColors ( ) ; assertEquals ( "srini_string" , loc0 . getRGBColor ( "srini_string" ) ) ; }
Metric [ ] function ( Operator arg0 ) { if ( OPERATOR_METRICS [ arg0 . getId ( ) ] != null ) { return OPERATOR_METRICS [ arg0 . getId ( ) ] ; } else { return null ; } }
Set function ( ) { return map . keySet ( ) ; }
void function ( List < GeographicPoint > arg0 , GeographicPoint arg1 ) { if ( arg0 != null ) { if ( ! arg0 . contains ( arg1 ) ) { arg0 . add ( arg1 ) ; } } }
void function ( DrillbitContext arg0 ) { drillbitContext = arg0 ; logger . trace ( "srini_string" ) ; }
Object function ( ) { return value ; }
void function ( ) { this . cdiAnnotationsPresent = true ; }
String function ( ) { return contentEncoding ; }
String function ( File arg0 ) { return preprocess ( arg0 , null ) ; }
boolean function ( VarComparable arg0 , VarComparable arg1 ) { return arg0 . equals ( arg1 ) ; }
int function ( ) { return size ; }
TestSuite function ( ) { return TestSuite . withClassLoader ( TestSuite . class . getClassLoader ( ) ) ; }
TaskManager function ( List < Task > arg0 ) { return new TaskManager ( arg0 ) ; }
void function ( ) { String loc0 = "srini_string" ; Student loc1 = new Student ( loc0 ) ; assertTrue ( loc1 . equals ( loc1 ) ) ; }
String [ ] function ( ) { return res . getString ( "srini_string" ) ; }
int function ( ) { return max ; }
boolean function ( ) { return element != null ; }
void function ( ) { assertThat ( map . containsKey ( "srini_string" ) , is ( true ) ) ; assertThat ( map . containsKey ( "srini_string" ) , is ( false ) ) ; assertThat ( map . containsKey ( "srini_string" ) , is ( false ) ) ; }
String function ( ) { return getKeyVersionZNode ( KDC_FLAGS_ZNODE_NAME ) ; }
int function ( ) { return fConditionCheckingFailedSeverity ; }
GenMatrix < C > function ( ) { return random ( RANDOM . nextFloat ( ) * DEFAULT_BSIZE ) ; }
int function ( ) { return Math . random ( ) * nsteps ; }
List < Event > function ( ) { return getEvents ( url ) ; }
int function ( ) { return ( int ) Math . round ( y ) ; }
Builder function ( ) { return new Builder ( ) ; }
Constructor function ( final Class arg0 ) { for ( int loc0 = 0 ; loc0 < iParamTypes . length ; loc0 ++ ) { if ( iParamTypes [ loc0 ] . isInstance ( arg0 ) ) { return arg0 . getConstructor ( iArgs ) ; } } return null ; }
List < VectorXZ > function ( ) { return new ArrayList < VectorXZ > ( vertexLoop ) ; }
TabularData function ( ) { return new TabularData ( TABULAR_TYPE , ITEM_NAMES , new Object [ ] { query , cacheHitCount , cacheMissCount , cachePutCount , executionCount , executionRowCount , executionAvgTime , executionMaxTime , executionMinTime } ) ; }
void function ( String arg0 ) { this . comment = arg0 ; }
void function ( BaseContentEntry < ? > arg0 , String arg1 ) { arg0 . setParent ( arg1 ) ; }
void function ( PdfPCell arg0 ) { List < PdfPCell > loc0 = new ArrayList < PdfPCell > ( ) ; loc0 . add ( arg0 ) ; rows . add ( loc0 ) ; }
File function ( ) { return tempPropertiesFile ; }
Set function ( ) { return cached ; }
boolean function ( ) { return getLogger ( ) . isFatalErrorEnabled ( ) ; }
Comparator function ( Comparator arg0 , Comparator arg1 ) { if ( arg0 == arg1 ) { return NATURAL_COMPARATOR ; } else if ( arg0 == null ) { return nullLowComparator ; } else { return arg0 . compare ( arg1 ) ; } }
void function ( Object arg0 ) { log ( LOG_LEVEL_DEBUG , String . valueOf ( arg0 ) ) ; }
Locktype function ( ) { return new Locktype ( ) ; }
int function ( ) { return ( int ) totalDuration ; }
String function ( ) { return "srini_string" + elementType + "srini_string" + attributes + "srini_string" ; }
int function ( final InputStream arg0 , final int arg1 ) { return computeSize ( arg0 , arg1 , true ) ; }
Iterator < Double > function ( ) { return values . entrySet ( ) . iterator ( ) ; }
AuditCriterion function ( T arg0 ) { return new SimpleAuditExpression ( propertyNameGetter , arg0 , "srini_string" ) ; }
void function ( String arg0 ) { File loc0 = findScripts ( arg0 ) ; if ( loc0 != null ) { getAndExecuteScriptFromGeneratedConfig ( loc0 ) ; } }
void function ( String arg0 , Throwable arg1 ) { fgInstance . error ( arg0 , arg1 ) ; }
String function ( String arg0 , String arg1 , Object ... arg2 ) { return formatMessage ( arg0 , arg1 , false , arg2 ) ; }
AST function ( String arg0 , String arg1 ) { AST loc0 = null ; for ( AST loc1 = null ; loc1 != null ; loc1 = loc1 . getParent ( ) ) { if ( loc1 . getNodeType ( ) == arg0 ) { return loc1 ; } } return loc0 ; }
void function ( @ ArquillianResource ( TxControlServlet . class ) URL arg0 ) { testURL ( arg0 , true ) ; }
E function ( ) { E loc0 = null ; if ( next != null ) { loc0 = next ; next = null ; } if ( loc0 == null ) { loc0 = fromIterator . next ( ) ; } return loc0 ; }
GenPolynomial < C > function ( final ExpVector arg0 ) { checkInvariant ( arg0 ) ; return new GenPolynomial < C > ( arg0 ) ; }
void function ( String arg0 ) { for ( int loc0 = 0 ; loc0 < arg0 . length ( ) ; loc0 ++ ) { print ( arg0 . charAt ( loc0 ) ) ; } }
String function ( Element arg0 , String arg1 ) { return getContent ( arg0 , arg1 , false ) ; }
Schema function ( String arg0 ) { return getRootSchema ( arg0 , null ) ; }
void function ( Config arg0 ) { if ( null == arg0 ) { throw new NullPointerException ( "srini_string" ) ; } this . config = arg0 ; }
void function ( Host arg0 , double arg1 ) { List < Double > loc0 = rttToMonitors . get ( arg0 ) ; if ( loc0 == null ) { loc0 = new ArrayList < Double > ( ) ; rttToMonitors . put ( arg0 , loc0 ) ; } loc0 . remove ( arg1 ) ; }
boolean function ( K arg0 , V arg1 ) { return containsValue ( arg0 , arg1 ) ; }
void function ( String arg0 , Image arg1 ) { imageRegistry . addImage ( arg0 , arg1 ) ; }
void function ( PrintWriter arg0 ) { showNode ( arg0 , "srini_string" ) ; }
Class < ? > function ( Type arg0 ) { if ( arg0 != null && arg0 instanceof Class ) { return ( Class < ? > ) arg0 ; } return null ; }
void function ( VectorContainer arg0 ) { for ( VectorWrapper < ? > loc0 : wrappers ) { loc0 . transfer ( this , arg0 ) ; } }
CQLStatementTupleMapper function ( BatchCQLStatementBuilder ... arg0 ) { return new BatchCQLStatementTupleMapper ( arg0 ) ; }
int function ( ) { return typeIndex ; }
String function ( ) { return location ; }
Object function ( String arg0 ) { return items . get ( arg0 ) ; }
void function ( ) { WebColors loc0 = new WebColors ( ) ; assertEquals ( "srini_string" , loc0 . getRGBColor ( "srini_string" ) ) ; }
DiscardCode function ( ) { return new DiscardCode ( ) ; }
Timestamp function ( long arg0 ) { return Timestamps . fromMillis ( arg0 ) ; }
void function ( CollectionKey arg0 , LoadingCollectionEntry arg1 ) { xrefLoadingCollectionEntries . remove ( arg0 , arg1 ) ; }
void function ( ) { __connector . commit ( ) ; }
boolean function ( int arg0 ) { return arg0 == - 1 ; }
Rectangle function ( Widget arg0 ) { return toDisplay ( arg0 . getBounds ( ) ) ; }
String function ( String arg0 ) { int loc0 = arg0 . indexOf ( ':' ) ; if ( loc0 < 0 ) { return "srini_string" ; } else { return arg0 . substring ( 0 , loc0 ) ; } }
int function ( ) { return id ; }
ModInteger function ( ) { return new ModInteger ( - this . val . modPow ( - 1 , this . ring . getModulus ( ) ) , this . ring ) ; }
byte [ ] function ( ) { return buffer ; }
OperationCallback function ( ) { return EMPTY_CALLBACK ; }
void function ( String arg0 , Object arg1 , Throwable arg2 ) { if ( sysOutLog != null ) { sysOutLog . printMessage ( arg0 , arg1 , arg2 ) ; } }
T function ( Connection arg0 , int arg1 ) { try { return executeWork ( arg0 , arg1 ) ; } catch ( SQLException loc0 ) { throw new OrientException ( "srini_string" + loc0 . getMessage ( ) ) ; } }
PreviewNode function ( ) { return fParent ; }
boolean function ( ) { return mandatory ; }
Db4oDatabase function ( final Db4oDatabase arg0 ) { for ( int loc0 = 0 ; loc0 < i_signature . length ; loc0 ++ ) { if ( Arrays . binarySearch ( i_signature , loc0 ) == - 1 ) { return arg0 ; } } return null ; }
SimpleBoard function ( ) { SimpleBoard loc0 = new SimpleBoard ( 8 , 8 ) ; for ( int loc1 = 0 ; loc1 < 8 ; loc1 ++ ) { for ( int loc2 = 0 ; loc2 < 8 ; loc2 ++ ) { loc0 . setCell ( loc1 , loc2 ) ; } } return loc0 ; }
void function ( DiscoverClasses arg0 ) { discovery = arg0 ; }
void function ( Display arg0 ) { if ( _display == null ) { _display = arg0 ; } }
void function ( long arg0 ) { this . timeToLiveForContacts = arg0 ; }
void function ( String arg0 ) { if ( arg0 == null ) { throw new XMPException ( "srini_string" ) ; } }
int function ( ) { return mCount ; }
boolean function ( ) { return peek ( ) != null ; }
int function ( ) { return end ; }
void function ( JSONObject arg0 ) { this . addons . put ( arg0 . optString ( "srini_string" ) , arg0 ) ; }
Object function ( final TransactionLocal < ? > arg0 , final Object arg1 ) { return _container . get ( arg0 , arg1 ) ; }
void function ( ) { imagesWereLoaded = true ; }
Date function ( int arg0 , int arg1 ) { return toMutableDateTime ( arg0 ) . get ( arg1 ) ; }
String function ( ) { return fTrace ; }
void function ( ) { queryPlanCache . clear ( ) ; }
ErrorResponseDTO function ( @ PathVariable ( "srini_string" ) String arg0 , @ PathVariable ( "srini_string" ) String arg1 , @ PathVariable ( "srini_string" ) String arg2 , @ PathVariable ( "srini_string" ) String arg3 ) { LOGGER . error ( "srini_string" + arg0 + "srini_string" + arg1 + "srini_string" + arg2 ) ; return ResponseUtils . handleException ( Response . Status . NOT_FOUND , arg1 , arg2 , arg3 ) ; }
void function ( ILanguageNames arg0 ) { this . languageNames = arg0 ; }
Object function ( ) { return null ; }
boolean function ( ) { if ( ! allowUdp ( ) ) return true ; return false ; }
void function ( String arg0 , String arg1 ) { chain . add ( new TagAttributes ( arg0 , arg1 ) ) ; }
QueryContextInformation function ( String arg0 , Configuration arg1 ) { QueryContextInformation loc0 = new QueryContextInformation ( ) ; loc0 . setDrillConfiguration ( DrillConfiguration . getInstance ( ) ) ; loc0 . setTableName ( arg0 ) ; return loc0 ; }
AlgebraicNumber < C > function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 . length ( ) ; loc1 ++ ) { char loc2 = arg0 . charAt ( loc1 ) ; if ( loc1 == arg0 . length ( ) - 1 && loc2 == '0' ) { loc0 = loc1 + 1 ; } else if ( loc1 == arg0 . length ( ) - 1 && loc2 == '1' ) { loc0 = loc1 + 2 ; } else if ( loc1 == arg0 . length ( ) - 1 && loc2 == '2' ) { loc0 = loc1 + 3
CompilationUnitChange function ( SourceFile arg0 , IJavaScriptProject arg1 , Collection < Token > arg2 , boolean arg3 , boolean arg4 , boolean arg5 ) { return createChange ( arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , false ) ; }
void function ( ASTNode arg0 ) { fNode = arg0 ; fIsRootResolved = false ; }
boolean function ( ) { return pointer - 0 ; }
IEditorPart function ( JavaComponent arg0 ) { if ( arg0 instanceof IJavaElement ) { return ( IEditorPart ) arg0 ; } else { return null ; } }
String function ( ) { return refClassName ; }
void function ( ) { this . configuration . validate ( ) ; }
T function ( ServiceController < T > arg0 ) { return findService ( arg0 ) . getValue ( ) ; }
T function ( Iterable < ? extends T > arg0 ) { if ( arg0 == null ) { return null ; } T loc0 = null ; for ( T loc1 : arg0 ) { if ( loc0 == null || loc0 . compareTo ( loc1 ) > 0 ) { loc0 = loc1 ; } } return loc0 ; }
Point function ( final Component arg0 ) { return new Point ( arg0 . getLowerLeftX ( ) , arg0 . getLowerLeftY ( ) ) ; }
Sequence function ( ) { return sequence ; }
void function ( ) { _bin . close ( ) ; }
boolean function ( ) { return useContextClassLoader ; }
void function ( ) { this . running = false ; tStart = 0 ; tFinish = 0 ; }
boolean function ( ) { return size ( ) == 0 ; }
TypedList function ( final Buffer arg0 , final Type arg1 , final Annotation [ ] arg2 , final boolean arg3 ) { return new TypedListImpl ( arg0 , arg1 , arg2 , arg3 ) ; }
String function ( String arg0 ) { return map . get ( arg0 ) ; }
int function ( ) { return maxLocals ( ) ; }
Object function ( String arg0 ) { synchronized ( this ) { return data . get ( arg0 ) ; } }
void function ( StreamOutput arg0 ) { for ( Iterator < GenericData > loc0 = model . iterator ( ) ; loc0 . hasNext ( ) ; ) { GenericData loc1 = loc0 . next ( ) ; write ( arg0 , loc1 ) ; } }
AuditCriterion function ( T arg0 ) { return new SimpleAuditExpression ( propertyNameGetter , arg0 , "srini_string" ) ; }
HtmlPipelineContext function ( StackKeeper arg0 ) { this . queue . add ( arg0 ) ; return this ; }
void function ( ) { throw new UnsupportedOperationException ( "srini_string" ) ; }
void function ( TestRunEvent arg0 ) { }
TriangleXZ function ( ) { return this ; }
Phenotype function ( Phenotype arg0 ) { System . out . println ( "srini_string" ) ; db . save ( arg0 ) ; return arg0 ; }
String function ( ) { return iterator . toString ( ) ; }
String function ( BaseContentEntry < ? > arg0 ) { if ( arg0 != null && arg0 . getParent ( ) != null ) { return arg0 . getParent ( ) . getId ( ) ; } return null ; }
void function ( CachedTeXFormula arg0 ) { SoftReference < CachedTeXFormula > loc0 = cache . get ( arg0 ) ; if ( loc0 != null ) { loc0 . get ( ) . invalidate ( ) ; } }
boolean function ( String arg0 , String arg1 ) { return equals ( arg0 , arg1 , null ) ; }
void function ( Map arg0 , WorkerTopologyContext arg1 ) { }
boolean function ( ) { return currentContent . size ( ) == 1 ; }
void function ( ByteBuffer arg0 ) { }
void function ( final PastryContact arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } node . insert ( arg0 ) ; }
Iterator function ( ) { return iterator ; }
Buffer function ( Buffer arg0 ) { return new SynchronizedBuffer ( arg0 ) ; }
TextEditGroup function ( ) { return fTextEditGroup ; }
void function ( Number arg0 ) { System . out . println ( arg0 . toString ( ) ) ; }
PreauthHandler function ( ) { return preauthHandler ; }
Set < String > function ( ) { return tokens ; }
boolean function ( ) { return hasCombined ; }
int function ( ) { return fLimitTo ; }
SchemaPlus function ( String arg0 ) { return new SchemaPlus ( dContext . getSchemaOwner ( ) , arg0 ) ; }
WebDriverBuilder function ( ) { return new WebDriverBuilder ( ) ; }
IntIterator function ( IntIterator arg0 ) { return new UnmodifiableIntListIterator ( arg0 ) ; }
ContextEntity function ( ) { ContextEntity loc0 = new ContextEntity ( ) ; loc0 . setContextName ( "srini_string" ) ; return loc0 ; }
void function ( ) { start ( ) ; }
void function ( ) { _list = new TShortArrayList ( ) ; }
void function ( byte arg0 [ ] ) { appendStringToTable ( arg0 , - 1 ) ; }
void function ( final Object arg0 , final int arg1 ) { map . put ( arg0 , arg1 ) ; }
ClassLoader function ( Class arg0 ) { ClassLoader loc0 = null ; if ( arg0 != null && arg0 . getClassLoader ( ) != null ) { loc0 = arg0 . getClassLoader ( ) ; } return loc0 ; }
String [ ] function ( Class arg0 ) { Field [ ] loc0 = arg0 . getDeclaredFields ( ) ; String [ ] loc1 = new String [ loc0 . length ] ; for ( int loc2 = 0 ; loc2 < loc0 . length ; loc2 ++ ) { loc1 [ loc2 ] = loc0 [ loc2 ] . getName ( ) ; } return loc1 ; }
void function ( PropertyChangeListener arg0 ) { pcsDelegate . addPropertyChangeListener ( arg0 ) ; }
File function ( URL arg0 ) { return resolveRootUrl ( arg0 ) . toFile ( ) ; }
String function ( final String arg0 ) { return getResourceAdapterIdentifier ( ) + "srini_string" + arg0 ; }
void function ( ) { lookupEnabled = true ; }
void function ( String [ ] arg0 ) { File loc0 = new File ( arg0 [ 0 ] ) ; loadSplitters ( loc0 ) ; }
void function ( String [ ] arg0 ) { printCapitalized ( "srini_string" ) ; }
int function ( float arg0 , int arg1 ) { return encodeFloat ( arg0 , arg1 , false ) ; }
ShortList function ( ) { return ( ShortList ) EMPTY_SHORT_LIST . clone ( ) ; }
void function ( ) { needToReallocate = true ; }
void function ( SchematicBuffer arg0 , Effect arg1 ) { if ( overlayImpls == null ) { overlayImpls = new HashSet < Class < ? extends Object >> ( ) ; } overlayImpls . add ( arg1 . getClass ( ) ) ; if ( ! overlayImpls . contains ( arg1 . getClass ( ) ) ) { overlayImpls . add ( arg1 . getSuperclass ( ) ) ; overlayImpls . add ( arg1 . getName ( ) ) ; } }
Undoable function ( ) { return get ( cursor ) ; }
void function ( String arg0 , Scoreboard arg1 ) { scoreboard . put ( arg0 , arg1 ) ; }
boolean function ( String arg0 ) { Pattern loc0 = Pattern . compile ( EMAIL_VALIDATION_REGEX ) ; Matcher loc1 = loc0 . matcher ( arg0 ) ; return loc1 . matches ( ) ; }
void function ( String arg0 , Process arg1 ) { if ( processMap . containsKey ( arg0 ) ) { throw new IllegalArgumentException ( "srini_string" + arg0 ) ; } processMap . put ( arg0 , arg1 ) ; }
List < EventSource > function ( ) { return getEvents ( ) ; }
int function ( int arg0 ) { int loc0 = arg0 ; while ( loc0 < Integer . MAX_VALUE ) { loc0 ++ ; } return loc0 ; }
boolean function ( ) { return false ; }
Schema function ( Configuration arg0 ) { String loc0 = arg0 . get ( CONF_OUTPUT_KEY_SCHEMA ) ; return loc0 == null ? null : Schema . parse ( loc0 ) ; }
boolean function ( Object arg0 , Object arg1 ) { if ( arg0 == null ) { return false ; } if ( arg1 == null ) { return false ; } return map . equals ( arg0 ) ; }
void function ( ) { if ( root == null ) { throw new IllegalStateException ( ) ; } }
boolean function ( ) { return head == null ; }
JSONArray function ( ) { return declined ; }
Block function ( ) { return entry ; }
boolean function ( ) { return false ; }
void function ( RunListener arg0 ) { fCurrentListeners . add ( arg0 ) ; }
void function ( ) { _selector . contextClick ( ) ; }
File function ( File arg0 ) { if ( ! arg0 . exists ( ) ) { if ( ! arg0 . mkdirs ( ) ) { throw new RuntimeException ( "srini_string" + arg0 . getAbsolutePath ( ) ) ; } } return arg0 ; }
boolean function ( ) { return fSeverity == IStatus . INFO ; }
Closure function ( Map arg0 , Closure arg1 , String arg2 ) { return new Closures ( arg0 , arg1 , arg2 ) ; }
Iterator function ( ) { return iterator ; }
Iterator < ? > function ( LongIterator arg0 ) { return arg0 == null ? null : arg0 . iterator ( ) ; }
Purchase function ( byte [ ] arg0 , String arg1 ) { Purchase loc0 = new Purchase ( ) ; loc0 . setSignature ( arg1 ) ; return loc0 ; }
int function ( ) { return this . trueFirst ? 1 : this . falseFirst ? 1 : 0 ; }
Object [ ] function ( Object [ ] arg0 , int arg1 , int arg2 ) { int loc0 = arg2 + arg1 ; if ( loc0 > arg0 . length ) { Object [ ] loc1 = new Object [ loc0 ] ; System . arraycopy ( arg0 , 0 , loc1 , 0 , loc0 ) ; arg0 = loc1 ; } return arg0 ; }
void function ( ) { LOGGER . info ( name ( ) + "srini_string" ) ; try { work ( ) ; } catch ( Exception loc0 ) { LOGGER . error ( name ( ) + "srini_string" , loc0 ) ; } }
boolean function ( AssociationKey arg0 ) { return visitedAssociationKeys . contains ( arg0 ) ; }
Style function ( String arg0 ) { return parseStyle ( arg0 , null ) ; }
Builder function ( EnumSet < SegmentType > arg0 ) { this . syncedTypes = arg0 ; return this ; }
void function ( Class ... arg0 ) { for ( Class loc0 : arg0 ) { addTestSuite ( loc0 ) ; } }
void function ( ) { SecurityConfiguration . getCipherAlgorithm ( ) ; }
Color function ( ) { if ( ! m_color . equals ( m_color ) ) return null ; m_color = m_color ; return this ; }
void function ( Object arg0 , int arg1 ) { }
void function ( ) { assertThat ( map . size ( ) , is ( 9 ) ) ; }
TodoDTO function ( @ PathVariable ( "srini_string" ) Long arg0 ) { LOGGER . info ( "srini_string" , arg0 ) ; TodoDTO loc0 = crudService . findOne ( arg0 ) ; LOGGER . info ( "srini_string" , loc0 ) ; return loc0 ; }
boolean function ( ) { return isDebugging ; }
int function ( ValueTuple arg0 , int arg1 ) { if ( arg1 == MODIFIED ) return MODIFIED ; else if ( arg1 == MISSING ) return UNMODIFIED ; else if ( arg1 == MODIFIED_BITVAL ) return MODBIT_VALUES ; else if ( arg1 == UNMODIFIED ) return MISSING ; else return UNKNOWN ; }
IJavaElement [ ] function ( IJavaScriptElement [ ] arg0 , String arg1 ) { return codeResolve ( arg0 , arg1 , null ) ; }
String function ( ) { return path ; }
void function ( long arg0 ) { this . reconnectAttemptsMax = arg0 ; }
void function ( int arg0 ) { this . boardX = arg0 ; }
T function ( ) { lock . lock ( ) ; try { return map . get ( map . size ( ) - 1 ) ; } finally { lock . unlock ( ) ; } }
String function ( ) { return packageName ; }
void function ( final Cursor arg0 ) { dump ( arg0 , true ) ; }
Quotient < C > function ( C arg0 , C arg1 ) { return new Quotient < C > ( arg0 , arg1 ) ; }
void function ( ) { }
JsonAsserter function ( final String arg0 ) { return new JsonAsserter ( ) { @ Override public void match ( JsonAsserter arg1 ) throws IOException , AssertionError { arg1 . assertJson ( arg0 ) ; } } ; }
int function ( ) { return pending ; }
VarComparability function ( int ... arg0 ) { return new VarComparability ( arg0 ) ; }
int function ( ) { return identifier ; }
void function ( PropertyChangeListener arg0 ) { pcsDelegate . removePropertyChangeListener ( arg0 ) ; }
void function ( int arg0 , int arg1 ) { doKeyDown ( arg0 , arg1 ) ; }
char function ( int arg0 , int arg1 ) { switch ( arg0 ) { case 0 : return '0' ; case 1 : return '1' ; case 2 : return '2' ; case 3 : return '3' ; case 4 : return '4' ; case 5 : return '5' ; case 6 : return '6' ; case 7 : return '7' ; case 8 : return '8' ; case 9 : return '9' ; } throw new IllegalArgumentException ( "srini_string" + arg0 ) ; }
String function ( ) { return map . get ( nameOrLabel ) ; }
void function ( final Service arg0 ) { this . serviceCache . put ( arg0 . getId ( ) , arg0 ) ; }
boolean function ( int arg0 ) { int loc0 = indexOf ( arg0 ) ; return loc0 >= 0 ; }
void function ( KrbSetting arg0 ) { krbSetting = arg0 ; }
File function ( ) { return outputDir ; }
boolean function ( @ NotNull EObject arg0 ) { return hasLazyLoadableAttributes ( arg0 . eClass ( ) ) || isCompositeClass ( arg0 ) ; }
char function ( int arg0 ) { return characters . get ( arg0 ) ; }
boolean function ( Object arg0 ) { if ( this == arg0 ) { return true ; } if ( ! ( arg0 instanceof TransInfo ) ) { return false ; } TransInfo loc0 = ( TransInfo ) arg0 ; if ( ! this . range . equals ( loc0 . range ) ) { return false ; } return true ; }
void function ( OutputStream arg0 , int arg1 , int arg2 ) { arg0 . write ( ( arg1 << 8 ) | arg2 ) ; }
AlgebraicNumber < C > function ( AlgebraicNumber < C > arg0 ) { return arg0 . copy ( this . ring ) ; }
Test function ( String arg0 ) { return new Test ( arg0 , null ) ; }
String function ( varcharHolder arg0 ) { if ( arg0 == null ) return "srini_string" ; return arg0 . toString ( ) ; }
boolean function ( ) { return position < limit ; }
void function ( String [ ] arg0 ) { resolveTester ( ) ; }
View function ( int arg0 ) { if ( mView != null ) { return mView ; } return ( View ) getmView ( arg0 ) ; }
int function ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 : arg0 ) { loc0 = gcd ( loc0 , loc1 ) ; } return loc0 ; }
byte [ ] function ( String arg0 ) { return toWindowsName ( arg0 ) . getBytes ( ) ; }
int function ( ) { return startingLocation ; }
int function ( ) { log . trace ( "srini_string" ) ; SkillRequestOperation loc0 = new SkillRequestOperation ( skyNetNode , attributeInput , Activator . getConfiguration ( ) ) ; loc0 . start ( ) ; return loc0 . getPeerId ( ) ; }
void function ( String arg0 ) { this . name = arg0 ; }
void function ( InvocationTargetException arg0 , Throwable arg1 ) { fgInstance . perform ( arg0 , arg1 ) ; }
MutablePeriod function ( ) { return new MutablePeriod ( this ) ; }
String function ( ) { return iText ; }
long function ( ) { checkFailures ( ) ; return lastWaterMarkTs ; }
Criteria function ( ) { return new Criteria ( left , right , criteriaType ) ; }
void function ( String arg0 ) { this . cssClassName = arg0 ; }
void function ( Class arg0 ) { this . logImplctor = new Constructor ( arg0 ) ; }
boolean function ( ) { return false ; }
int function ( ) { return type ; }
void function ( ) { list . clear ( ) ; }
double function ( ) { return getSum ( ) / getWindowSize ( ) ; }
XMPDateTime function ( String arg0 ) { String loc0 = arg0 ; if ( arg0 != null ) { try { return XMPDateTime . parse ( arg0 ) ; } catch ( ParseException loc1 ) { throw new RuntimeException ( "srini_string" + arg0 + "srini_string" , loc1 ) ; } } return null ; }
VarInfoAux function ( ) { return theDefault ; }
void function ( SelectionEvent arg0 ) { if ( fLastChange != null ) { fLastChange . setSelection ( arg0 . getSelection ( ) ) ; } }
RingFactory < C > function ( int arg0 ) { return ringList . get ( arg0 ) ; }
boolean function ( byte [ ] arg0 ) { for ( int loc0 = 0 ; loc0 < arg0 . length ; loc0 ++ ) { if ( arg0 [ loc0 ] != this . getXValue ( ) ) { return false ; } } return true ; }
V function ( V arg0 ) { m_value = arg0 ; return ( V ) m_value ; }
void function ( ) { this . strategySelector = new StrategySelector ( ) ; }
void function ( ) { copy . close ( ) ; }
int function ( ) { return ( int ) totalDuration ; }
Object function ( E arg0 ) { throw arg0 ; }
BigInteger function ( BigInteger arg0 ) { int loc0 = arg0 . digits ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 . digits [ loc1 ] == id . digits [ loc1 ] ) { return arg0 ; } } return null ; }
int function ( ) { return num ; }
GenPolynomial < C > function ( boolean arg0 ) { this . toZero = arg0 ; return this ; }
boolean function ( ) { return getLogger ( ) . isWarnEnabled ( ) ; }
void function ( ) { lastAccessTime = System . currentTimeMillis ( ) ; }
String function ( ) { return numberChosen ; }
Transformer [ ] function ( ) { return iTransformers ; }
void function ( CSIColor arg0 ) { colorMap . put ( arg0 , arg0 ) ; }
int function ( ) { return constantValue . index ( ) ; }
void function ( double arg0 ) { this . sigma = arg0 ; }
DoubleIterator function ( ) { return ( DoubleIterator ) EMPTY_DOUBLE_LIST_ITERATOR . iterator ( ) ; }
ResponsePacket function ( ) { return response ; }
PerspectiveLocator function ( String arg0 ) { return new PerspectiveLocator ( arg0 ) ; }
ShortList function ( shortList arg0 ) { return arg0 == null ? null : arg0 . asShortList ( ) ; }
void function ( Object arg0 , Throwable arg1 ) { log ( Level . DEBUG , String . valueOf ( arg0 ) , arg1 ) ; }
Phenotype function ( String arg0 ) { return mapper . queryOne ( arg0 ) ; }
Expr function ( ) { return top . get ( ) ; }
UIConditionHandler function ( ) { return new UIConditionHandler ( ) { @ Override public boolean hasFocus ( ) { return UIManager . isMaximized ( ) ; } } ; }
void function ( LoggingEvent arg0 ) { if ( eventQueue . size ( ) == capacity ) { flushAndPublishQueue ( ) ; } eventQueue . add ( arg0 ) ; }
int function ( ) { return timeout ; }
void function ( ) { WebColors loc0 = new WebColors ( ) ; assertEquals ( "srini_string" , loc0 . getRGBColor ( "srini_string" ) ) ; }
int function ( ) { return ring . hashCode ( ) ; }
SortedSet function ( SortedSet arg0 ) { return sortedSet ( arg0 , 0 , arg0 . size ( ) ) ; }
void function ( String arg0 , Double arg1 ) { customMetrics . put ( arg0 , arg1 ) ; }
Iterable < AttributeDefinition > function ( ) { return getCompositeIdSubAttributes ( ) ; }
boolean function ( ) { return archiveValidation . get ( ) ; }
String function ( ) { return validationLogic ; }
void function ( String [ ] arg0 ) { try ( SlidingDoor loc0 = new SlidingDoor ( ) ) { loc0 . open ( ) ; } }
LockMode function ( ) { return lockMode ; }
int function ( ) { return declaringClass ( ) . hashCode ( ) * 31 + nameAndType ( ) . hashCode ( ) ; }
LoggerFactory function ( ) { return myself ; }
void function ( String arg0 ) { append ( arg0 . getBytes ( ) ) ; }
boolean function ( ) { return myList == null ; }
ConsoleLoggerModule function ( ) { if ( singleton == null ) { singleton = new ConsoleLoggerModule ( ) ; } return singleton ; }
void function ( ) { Relation loc0 = new Relation ( ) ; assertThat ( entity . getTop ( ) , is ( loc0 ) ) ; }
void function ( int arg0 [ ] , int arg1 [ ] ) { int loc0 = arg0 [ arg1 ] ; arg0 [ arg1 ] = arg0 [ arg0 . length - 1 ] ; arg0 [ arg0 . length - 1 ] = loc0 ; }
void function ( String arg0 ) { if ( hiddenClients . contains ( arg0 ) ) { collapsedClients . remove ( arg0 ) ; } else { collapsedClients . add ( arg0 ) ; } }
USAddress function ( ) { return billTo ; }
Sentence function ( ) { return sentence ; }
String function ( int arg0 ) { return JDBC_TYPE_MAP . get ( Integer . valueOf ( arg0 ) ) ; }
boolean function ( ) { return bugList . size ( ) > 0 ; }
boolean function ( Object arg0 , Object arg1 ) { return ( arg0 == null && arg1 == null ) || ( arg0 != null && arg0 . equals ( arg1 ) ) ; }
Object [ ] function ( ) { int loc0 = _support == null ? 0 : _support . size ( ) ; Object [ ] loc1 = new Object [ loc0 ] ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 [ loc2 ] = _map . get ( _support . get ( loc2 ) ) ; } return loc1 ; }
void function ( IProblemChangedListener arg0 ) { fListeners . add ( arg0 ) ; }
void function ( ) { if ( fThread == null ) { return ; } fThread . start ( ) ; }
void function ( String arg0 , String arg1 ) { log . debug ( "srini_string" + arg0 + "srini_string" + arg1 + "srini_string" ) ; TagLibraryLoader . loadTagLibrary ( arg0 , arg1 ) ; }
Result function ( ) { return result ; }
void function ( Payment arg0 , String arg1 ) { }
boolean function ( ) { return isDebugging ; }
ExecutionDataStore function ( ) { return executionData ; }
boolean function ( ) { return responseHeaders . containsKey ( "srini_string" ) ; }
String function ( String arg0 ) { return asPhenotype ( arg0 ) . getTitle ( ) ; }
void function ( AbstractNodeFactory arg0 ) { this . nodeFactory = arg0 ; }
EntityBuilder function ( List < NameValuePair > arg0 ) { clearContent ( ) ; this . parameters = arg0 ; return this ; }
Bin function ( final String arg0 ) { return _binsByUri . get ( arg0 ) ; }
void function ( IReconcilingStrategy [ ] arg0 ) { fStrategies = arg0 ; }
List < Application > function ( ) { if ( applications == null ) { applications = new ArrayList < Application > ( ) ; } return this . applications ; }
void function ( D arg0 ) { in . sync ( arg0 ) ; }
int function ( ) { int loc0 = readExpGolombCodeNum ( ) ; int loc1 = readExpGolombCodeNum ( ) ; int loc2 = readExpGolombCodeNum ( ) ; return ( ( loc0 << 24 ) + loc1 << 16 ) + ( ( loc0 << 8 ) + loc2 ) ; }
int function ( ReadableInstant arg0 ) { if ( this == arg0 ) { return 0 ; } return compareTo ( ( ReadableInstant ) arg0 ) ; }
boolean function ( ) { return false ; }
AST function ( AST arg0 ) { return getLastSibling ( arg0 . getFirstChild ( ) ) ; }
long function ( ) { return allocationLimit . get ( ) ; }
PropertyMapping function ( String arg0 ) { return collectionPropertyMappingByRole . get ( arg0 ) ; }
IInformationControlCreator function ( ) { return null ; }
void function ( int arg0 ) { _references . remove ( new PortNAssignment ( arg0 ) ) ; if ( _isDone ) { _pending . get ( ) ; _done = true ; } }
BaseColor function ( ) { return currentTextColor ; }
List < ResourceEntity > function ( String arg0 ) { log . debug ( "srini_string" + arg0 ) ; List < ResourceEntity > loc0 = entityManager . createQuery ( "srini_string" ) . setParameter ( "srini_string" , arg0 ) . getResultList ( ) ; return loc0 ; }
Map < Integer , DataLookupQuality > function ( RandomAccessFile arg0 ) { return readDataLookupQuality ( arg0 , false ) ; }
List < ByteBuffer > function ( ) { return requestPayload ; }
RemoteBuildr function ( ) { return new RemoteBuildr ( ) ; }
void function ( Iterable < ? > arg0 ) { internalIterator ( ) . remove ( arg0 ) ; }
void function ( ) { context . stop ( ) ; }
void function ( PdfWriter arg0 , Document arg1 , Rectangle arg2 , String arg3 ) { }
String function ( ) { return m_type ; }
IPartitionTokenScanner function ( ) { return fMultilineCommentScanner ; }
int function ( ) { return numberOfHits ; }
boolean function ( int [ ] arg0 , int arg1 ) { for ( int loc0 = 0 ; loc0 < arg0 . length ; loc0 ++ ) { if ( arg0 [ loc0 ] == arg1 ) { return true ; } } return false ; }
List < Node > function ( ) { Set < Node > loc0 = new HashSet < Node > ( ) ; for ( Node loc1 : getAllNodes ( ) ) { if ( ! loc0 . contains ( loc1 ) ) { loc0 . add ( loc1 ) ; } } return new ArrayList < Node > ( loc0 ) ; }
void function ( S arg0 ) { LinkedHashMap < S , T > loc0 = values . get ( arg0 ) ; if ( loc0 == null ) { return ; } loc0 . remove ( arg0 ) ; }
boolean function ( Reader arg0 , HashMap < String , String > arg1 ) { String loc0 = getMessage ( arg0 , arg1 ) ; if ( loc0 != null ) { return readLanguageStream ( arg0 , loc0 ) != null ; } else { return false ; } }
int function ( ) { return backgroundMode ; }
File function ( File arg0 ) { if ( ! arg0 . exists ( ) ) { if ( ! arg0 . mkdirs ( ) ) { throw new RuntimeException ( "srini_string" + arg0 . getAbsolutePath ( ) ) ; } } return arg0 ; }
int function ( int arg0 ) { return freqTable . size ( ) ; }
void function ( byte [ ] arg0 , int arg1 , int arg2 ) { delegatedIoAdapter ( ) . write ( arg0 , arg1 , arg2 ) ; }
GenPolynomial < C > function ( final Vector < C > arg0 ) { final List < GenPolynomial < C >> loc0 = new ArrayList < GenPolynomial < C >> ( arg0 . size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0 . size ( ) ; loc1 ++ ) loc0 . add ( GenPolynomial . vectorAdd ( arg0 . get ( loc1 ) ) ) ; return new GenPolynomial < C > ( loc0 ) ; }
JQueryLibrary function ( ) { return jquery ( ) . library ( "srini_string" ) ; }
long function ( ) { return ( long ) ( seedSet ? 0 : 255 ) ; }
void function ( ) { }
boolean function ( ) { return context . has ( "srini_string" ) ; }
void function ( @ NonNull final String arg0 ) { internalOpen ( arg0 ) ; }
void function ( int arg0 [ ] , int arg1 [ ] ) { int loc0 = arg0 [ arg1 ] ; arg0 [ arg1 ] = arg0 [ arg0 . length - 1 ] ; arg0 [ arg0 . length - 1 ] = loc0 ; }
void function ( FontProvider arg0 ) { provider = arg0 ; }
Criteria function ( ) { return new Criteria ( left , right , criteriaType ) ; }
T function ( String arg0 , Class < T > arg1 ) { return null ; }
void function ( ) { PathIterator loc0 = new PathIterator ( "srini_string" ) ; assertHasResults ( loc0 ) ; }
void function ( String arg0 ) { this . fileSuffix = arg0 ; }
boolean function ( ) { return closed ; }
Codec function ( String arg0 , boolean arg1 ) { for ( int loc0 = 0 ; loc0 < getCodecs ( ) . length ; loc0 ++ ) { Codec loc1 = getCodecs ( ) [ loc0 ] ; if ( loc1 . canDecode ( arg0 , arg1 ) ) { return loc1 ; } } return null ; }
int function ( ) { return index ; }
int function ( ) { return stack . size ( ) ; }
void function ( ) { final Div loc0 = d ; if ( loc0 != null && loc0 . getParent ( ) != null ) { verifyIfPdfDiv ( loc0 . getParent ( ) ) ; } }
long function ( ) { return lm . getLatency ( ) ; }
MatchResult function ( Widget arg0 , String arg1 ) { return new MatchResult ( WIDGET_NOT_FOUND , arg0 , arg1 ) ; }
SortedBag function ( Bag arg0 ) { return UnmodifiableSortedBag . unmodifiableSortedBag ( arg0 ) ; }
void function ( ) { callback . set ( null ) ; }
void function ( ) { ThiefOptions loc0 = new ThiefOptions ( ) ; Assert . assertFalse ( loc0 . stealingMethod == null ) ; }
void function ( int arg0 ) { checkServerOpen ( "srini_string" , arg0 ) ; }
T function ( AutoCloseable arg0 ) { try { return assign ( arg0 ) ; } catch ( RuntimeException loc0 ) { throw loc0 ; } catch ( Exception loc0 ) { throw new RuntimeException ( loc0 ) ; } }
Point function ( ) { return position ; }
String function ( ) { return _ui . getIconText ( ) ; }
int function ( String arg0 ) { int loc0 = arg0 . length ( ) ; for ( int loc1 = loc0 - 1 ; loc1 >= 0 ; loc1 -- ) { if ( arg0 . charAt ( loc1 ) != ' ' ) { return loc1 ; } } return - 1 ; }
BigInteger function ( byte [ ] arg0 ) { BigInteger loc0 = new BigInteger ( 1 , arg0 ) ; return loc0 ; }
String function ( ) { return "srini_string" ; }
void function ( String arg0 ) { this . machineInterpretationKey = arg0 ; }
boolean function ( CharSequence arg0 ) { return ( arg0 == null ) || ( arg0 . length ( ) == 0 ) ; }
Date function ( Cursor arg0 , int arg1 ) { return arg0 . getDate ( arg1 ) ; }
void function ( boolean arg0 ) { this . invoked = arg0 ; }
byte function ( ) { return quote ; }
void function ( Throwable arg0 ) { invalidScriptError = arg0 ; }
Header [ ] function ( ) { return responseHeaders . getChildren ( ) ; }
Throwable function ( ) { return error ; }
void function ( PdfDocumentEvent arg0 ) { for ( PdfPageEvent loc0 : events ) { loc0 . onDocumentOpened ( arg0 ) ; } }
void function ( String arg0 , String arg1 ) { entityManager . createQuery ( "srini_string" ) . setString ( arg0 , arg1 ) . executeUpdate ( ) ; }
TupleTuple function ( Object ... arg0 ) { TupleTuple loc0 = TupleTuple . m_from ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg0 . length ; loc1 ++ ) { loc0 . vals [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }
List < FrequencyAdjuster > function ( ) { return frequencyAdjusters ; }
boolean function ( Object [ ] arg0 ) { if ( arg0 == null || arg0 . length != 2 ) { return false ; } else { return isSequence ( arg0 [ 0 ] ) && isSequence ( arg0 [ 1 ] ) ; } }
 getContentlanguage function ( ) { return new Getcontentlanguage ( ) ; }
View function ( final String arg0 ) { return findChild ( arg0 ) ; }
boolean function ( ) { return myList == null ; }
BasicType function ( String arg0 ) { BasicType loc0 = null ; if ( basicTypeRegistry != null ) { loc0 = basicTypeRegistry . get ( arg0 ) ; } return loc0 ; }
void function ( ) { if ( channel != null ) { try { channel . close ( ) ; } catch ( IOException loc0 ) { } } }
Grid function ( ) { return solutionGrid ; }
void function ( ) { openTagDone = true ; }
boolean function ( ) { return fIsEnabled ; }
Selection function ( int arg0 , int arg1 ) { return createFromStartEnd ( arg0 , arg1 ) ; }
PreauthPluginMeta function ( ) { return pluginMeta ; }
int function ( DateTimeField arg0 ) { int loc0 = indexOfSupported ( arg0 ) ; if ( loc0 >= 0 ) { return loc0 ; } return - 1 ; }
PolynomialFunction [ ] function ( ) { return polynomials . clone ( ) ; }
Color function ( ) { return playerColor ; }
void function ( ) { gralComponents . clear ( ) ; gralSeeds . clear ( ) ; }
void function ( FlowControl arg0 , char arg1 , char arg2 ) { if ( arg0 != FlowControl . XON_XOFF ) throw new IllegalArgumentException ( Localizer . getLocalizedMessage ( Port . class , "srini_string" ) ) ; setFlowControl ( device . getHandle ( ) , arg0 . value , arg1 , arg2 ) ; }
AuditOrder function ( ) { return new PropertyAuditOrder ( propertyNameGetter , false ) ; }
void function ( Watcher arg0 ) { _destroyed = true ; }
boolean function ( ) { return useCriterion3 ; }
int function ( V1 arg0 , V2 arg1 ) { return compare ( arg0 , arg1 , null ) ; }
void function ( ) { invalidScriptError = true ; }
void function ( Shell arg0 , IScreenCaptureHandler arg1 ) { arg0 . setScreenCaptureHandler ( arg1 ) ; }
SSLSocketFactory function ( ) { return socketfactory ; }
GreatestCommonDivisor < C > function ( int arg0 , BigInteger arg1 ) { return getImplementation ( arg0 ) . get ( arg1 ) ; }
void function ( ) { syncExec ( ) ; }
boolean function ( Object arg0 ) { for ( int loc0 = 0 ; loc0 < iPredicates . length ; loc0 ++ ) { if ( iPredicates [ loc0 ] . evaluate ( arg0 ) ) { return false ; } } return true ; }
Buffer function ( final Buffer arg0 ) { return UnmodifiableBuffer . unmodifiableBuffer ( arg0 ) ; }
String function ( ) { return name ; }
RealMatrix function ( final double [ ] arg0 , final int arg1 , final int arg2 ) { final RealMatrix loc0 = createColumnRealMatrix ( arg0 , arg1 , arg2 ) ; return loc0 ; }
void function ( ) { }
int function ( ) { return count ; }
void function ( final JsSymbolMap arg0 ) { this . resourceSymbols . put ( arg0 . getUrl ( ) , arg0 ) ; }
void function ( Iterable < ? extends PersistenceUnitsInApplication > arg0 ) { for ( PersistenceUnitsInApplication loc0 : arg0 ) { loc0 . track ( ) ; } }
void function ( PrintStream arg0 ) { BufferedWriter loc0 = new BufferedWriter ( new OutputStreamWriter ( arg0 , "srini_string" ) ) ; showNode ( loc0 , false ) ; loc0 . flush ( ) ; }
String function ( ) { return company ; }
boolean function ( String arg0 ) { return arg0 == null || arg0 . length ( ) == 0 ; }
void function ( DialectResolver arg0 ) { resolvers . add ( arg0 ) ; }
void function ( ) { region . clear ( ) ; }
Long function ( ) { return startIp ; }
void function ( Element arg0 ) { list . add ( arg0 ) ; }
int function ( ) { return vertexCount ; }
StatementReplacer function ( ) { return statementReplacer ; }
Map < K , V > function ( int arg0 ) { return new LinkedHashMap < K , V > ( arg0 ) ; }
void function ( ) { if ( buffer != null ) { buffer . clear ( ) ; } }
Reflector function ( ) { return _delegate ; }
void function ( ) { }
List < String > function ( int arg0 ) { return _componentToTasks . get ( arg0 ) ; }
void function ( T arg0 ) { try { getJdbcTemplate ( ) . update ( getSqlUpdate ( ) , arg0 ) ; } catch ( Exception loc0 ) { } }
void function ( ) { ViewCommand loc0 = "srini_string" ; assertEquals ( "srini_string" , parser . parse ( loc0 ) ) ; }
void function ( ) { yaw . rotateY ( ) ; }
Object function ( Object arg0 ) { if ( arg0 == null ) { throw new NullPointerException ( "srini_string" ) ; } return cache . get ( arg0 ) ; }
void function ( int arg0 ) { this . position = arg0 ; }
void function ( int arg0 ) { m_negativeXErrorPixel = arg0 ; }
String function ( ) { List < Pair < String , Object >> loc0 = new ArrayList < Pair < String , Object >> ( values . size ( ) ) ; for ( Pair < String , Object > loc1 : values ) { loc0 . add ( new Pair < String , Object > ( loc1 . getKey ( ) , loc1 . getValue ( ) ) ) ; } return spacer . join ( loc0 ) ; }
WidgetFinderService function ( ) { return _finderService ; }
void function ( ) { gl . glUseProgram ( this . shaderProgram ) ; if ( this . vertexShader != 0 ) { gl . glUseProgram ( this . vertexShader ) ; } }
Object function ( Object arg0 , Config4Class arg1 ) { return arg0 ; }
boolean function ( Document arg0 , String arg1 , SourceUnit arg2 ) { SourceUnit loc0 = arg2 . getSourceUnit ( ) ; int loc1 = extractJSValidatorName ( arg0 , arg1 , loc0 ) ; return ( loc1 >= 0 ) ; }
void function ( PdfWriter arg0 ) { }
void function ( DataOutput arg0 ) { for ( int loc0 = 0 ; loc0 < columnCount ; loc0 ++ ) { arg0 . writeLong ( size ) ; } }
Object function ( String arg0 , Object arg1 ) { if ( this . runtime != null ) { return this . runtime . eval ( arg0 , arg1 ) ; } else { return arg1 ; } }
void function ( int arg0 ) { int loc0 = Math . max ( 1 , Math . min ( arg0 , THREAD_COUNT ) ) ; int loc1 = Math . max ( 1 , Math . min ( arg0 , TASK_COUNT ) ) ; assertThat ( this . factory . apply ( loc0 , loc1 ) , is ( clock . currentTimeMillis ( ) ) ) ; }
XMLParser function ( ) { previousState = UNKNOWN ; return this ; }
void function ( int arg0 , int arg1 ) { int loc0 = vertices - arg0 ; int loc1 = edges + arg1 ; if ( loc0 < 0 || loc1 < 0 ) throw new IllegalArgumentException ( "srini_string" ) ; Vertex loc2 = new Vertex ( loc0 , loc1 ) ; adjMatrix [ loc0 ] [ loc1 ] = true ; adjMatrix [ loc1 ] [ loc0 ] = true ; }
Class function ( ) { return _cls ; }
List < TextFormatParseInfoTree > function ( FieldDescriptor arg0 ) { List < TextFormatParseInfoTree > loc0 = subtreesFromField . get ( arg0 ) ; if ( loc0 == null ) { loc0 = locationsFromField . get ( arg0 ) ; } return loc0 ; }
void function ( Context arg0 , String arg1 , String arg2 ) { if ( arg1 == null ) { return ; } String loc0 = arg1 . trim ( ) ; if ( loc0 . equals ( "srini_string" ) ) { return ; } Exchange loc1 = new MessageExchange ( arg0 , arg2 ) ; LocalBroadcastManager . getInstance ( ) . sendBroadcast ( loc1 ) ; }
void function ( int arg0 ) { doClose ( _display , arg0 ) ; }
InputSource function ( ) { return inputSource ; }
CallContext function ( ) { return new CallContext ( ) ; }
int function ( ResourceTypeEntity arg0 ) { return arg0 . getName ( ) . compareToIgnoreCase ( name ) ; }
int function ( ) { int loc0 = 0 ; for ( Residue < C > loc1 : ring . getResidues ( ) ) { loc0 = loc0 * loc1 . loc0 ( ) ; } return loc0 ; }
Hierarchy function ( ) { return defaultHierarchy ; }
boolean function ( ) { return editing ; }
void function ( Resources arg0 ) { this . resources = arg0 ; }
Geometry function ( Geometry arg0 ) { return triangulation ( arg0 , GeometryFactory . toPolygonArray ( EMPTY_GEOM_ARRAY ) ) ; }
Residue < C > function ( Residue < C > arg0 ) { return new Residue < C > ( ring , arg0 ) ; }
Object function ( Object arg0 ) { if ( comparer == null ) return null ; return comparer . compare ( arg0 , entry ) ; }
void function ( String arg0 ) { encodeQuotedPrintable ( arg0 , DEFAULT_CHARSET ) ; }
String function ( ) { return baseZNode ; }
void function ( Subpath arg0 ) { subpaths . add ( arg0 ) ; }
void function ( ) { activeTransactionCount . decrementAndGet ( ) ; }
InetSocketAddress function ( ) { return _remoteAddr ; }
void function ( File arg0 , String arg1 , File arg2 ) { FileOutputStream loc0 = new FileOutputStream ( arg2 ) ; BufferedOutputStream loc1 = new BufferedOutputStream ( new FileOutputStream ( arg1 ) ) ; zipDirectory ( arg0 , loc1 ) ; loc0 . close ( ) ; loc1 . close ( ) ; }
int function ( ) { return getCheckInitialConditionsTicks ( ) + fValues [ CHECK_INITIAL_CONDITIONS ] + fValues [ CHECK_FINAL_CONDITIONS ] ; }
String function ( String arg0 ) { return String . format ( "srini_string" , arg0 ) ; }
Local < C > function ( int arg0 ) { return new Local < C > ( arg0 ) ; }
String function ( int arg0 ) { String loc0 = "srini_string" + arg0 + "srini_string" ; return loc0 ; }
Predicate function ( ) { return predicate ; }
int function ( Context arg0 , int arg1 ) { ViewGroup loc0 = ( ViewGroup ) arg0 ; return loc0 . getChildCount ( ) ; }
RefactoringDescriptor function ( ) { return new RefactoringDescriptor ( ) ; }
BusinessException function ( ) { return new BusinessException ( ) ; }
String function ( byte [ ] arg0 ) { return hexColonDelimited ( arg0 , 0 , arg0 . length ) ; }
HashCodeBuilder function ( byte arg0 ) { return append ( arg0 & 0x7FFFFFFF ) ; }
boolean function ( IMethod arg0 ) { if ( ! arg0 . isStatic ( ) && ! arg0 . isPrivate ( ) ) { return true ; } return false ; }
void function ( final RunListener arg0 ) { fListeners . remove ( arg0 ) ; }
Object function ( String arg0 , double arg1 ) { SoftReference < CachedImage > loc0 = cache . get ( new SoftReference < CachedImage > ( arg1 ) ) ; if ( loc0 == null ) { loc0 = makeImage ( arg0 , arg1 ) ; cache . put ( new SoftReference < CachedImage > ( arg1 ) , loc0 ) ; } return loc0 . get ( ) ; }
int function ( byte [ ] arg0 ) { return readFixed ( arg0 , 0 , arg0 . length ) ; }
DetachedCriteria function ( String arg0 ) { criteria . setSqlComment ( arg0 ) ; return this ; }
void function ( int arg0 ) { if ( model_ == null ) throw new IllegalStateException ( "srini_string" ) ; model_ . waitState ( arg0 ) ; }
void function ( String arg0 ) { if ( arg0 != null && ! arg0 . startsWith ( "srini_string" ) ) { arg0 = "srini_string" + arg0 ; } this . orderByClause . append ( arg0 ) ; }
AngularObjectListener function ( ) { return listener ; }
Parameter [ ] function ( final Parameter [ ] arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } final Parameter [ ] loc0 = new Parameter [ arg0 . length ] ; System . arraycopy ( arg0 , 0 , loc0 , 0 , arg0 . length ) ; return loc0 ; }
boolean function ( Object arg0 ) { if ( arg0 == this ) return true ; if ( ! ( arg0 instanceof Sortable ) ) return false ; Sortable loc0 = ( Sortable ) arg0 ; return context . equals ( loc0 . context ) ; }
boolean function ( ) { return _hierarchy . isMenuIncludedBy ( this ) ; }
void function ( int arg0 , int arg1 ) { doKeyDown ( arg0 , arg1 ) ; }
void function ( int arg0 , Notification arg1 ) { synchronized ( mNotifications ) { mNotifications . put ( arg0 , arg1 ) ; } }
void function ( ) { if ( empty ( ) ) throw new EmptyStackException ( ) ; }
int function ( ) { return endingLocation ; }
void function ( int arg0 ) { this . vendorID = arg0 ; }
float [ ] function ( float [ ] arg0 , float [ ] arg1 ) { float loc0 = arg0 [ 0 ] * arg1 [ 0 ] - arg0 [ 1 ] * arg1 [ 1 ] ; float loc1 = arg0 [ 1 ] * arg1 [ 0 ] - arg0 [ 2 ] * arg1 [ 2 ] ; return loc0 + loc1 ; }
int function ( ) { return this . keys . length ; }
Widget function ( Widget arg0 , Matcher < ? super Widget > arg1 ) { if ( _hierarchy == null ) { return null ; } for ( int loc0 = 0 ; loc0 < _hierarchy . size ( ) ; loc0 ++ ) { Widget loc1 = _hierarchy . get ( loc0 ) ; if ( arg1 . matches ( loc1 ) ) { return loc1 ; } } return null ; }
void function ( final Supplier < Boolean > arg0 ) { Assume . assumeTrue ( arg0 , Boolean . class ) ; }
void function ( InputStream arg0 , String arg1 ) { String [ ] loc0 = new String [ arg1 . length ( ) ] ; for ( int loc1 = 0 ; loc1 < loc0 . length ; loc1 ++ ) { loc0 [ loc1 ] = arg1 . substring ( 1 , arg1 . length ( ) ) ; } readReplaceStatements ( arg0 , loc0 ) ; }
JQueryLibrary function ( ) { return ui ( "srini_string" ) ; }
UICondition function ( String arg0 ) { Assert . hasText ( arg0 , "srini_string" ) ; return new UICondition ( ) ; }
Set < String > function ( ) { return enabledFilters . keySet ( ) ; }
void function ( ) { RecordingDebugInfo loc0 = new RecordingDebugInfo ( ) ; copyToClipboard ( loc0 ) ; mostRecentInfo = new DebugRecordingInfo ( ) ; lastRecentInfo = loc0 ; }
void function ( double [ ] arg0 , double [ ] arg1 , double arg2 , double arg3 ) { arg0 [ 0 ] = arg2 - arg1 [ 0 ] * arg3 ; arg0 [ 1 ] = arg2 - arg1 [ 1 ] * arg3 ; arg0 [ 2 ] = arg2 - arg1 [ 2 ] * arg3 ; }
PaintSurface function ( ) { return this . paintSurface ; }
ArrayList < String > function ( String arg0 ) { ArrayList < String > loc0 = new ArrayList < String > ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0 , "srini_string" ) ; while ( loc1 . hasMoreTokens ( ) ) { loc0 . add ( loc1 . nextToken ( ) ) ; } return loc0 ; }
void function ( ) { _isRunning = false ; _cleanupHandler . stop ( ) ; }
void function ( String [ ] arg0 ) { EventQueue . invokeLater ( new Runnable ( ) { public void run ( ) { try { UIManager . setLookAndFeel ( UIManager . getSystemLookAndFeelClassName ( ) ) ; createContents ( ) ; } catch ( Exception loc0 ) { loc0 . printStackTrace ( ) ; } } } ) ; }
AdvancedCache function ( Cache arg0 ) { return localCache ( arg0 ) ; }
int function ( ) { return lineNo ; }
Map . Entry function ( ) { if ( iterator . hasNext ( ) ) { Map . Entry loc0 = iterator . next ( ) ; return loc0 ; } else { return null ; } }
int function ( Object [ ] arg0 ) { return getArraySize ( arg0 ) ; }
void function ( PdfWriter arg0 , Paragraph arg1 ) { }
void function ( String arg0 ) { if ( ! closed ) throw new IllegalStateException ( "srini_string" ) ; this . text = arg0 ; }
void function ( XMLParser arg0 , boolean arg1 ) { if ( ! arg0 . isInitialized ( ) ) { throw new IllegalStateException ( "srini_string" ) ; } this . parser . parse ( arg0 , arg1 ) ; }
String function ( ) { return entityName ; }
boolean function ( String arg0 ) { return isUrl ( arg0 ) || isDigits ( arg0 ) ; }
CodecFactory function ( String arg0 ) { if ( arg0 == null ) { throw new NullPointerException ( "srini_string" ) ; } int loc0 = registered . get ( arg0 ) ; if ( loc0 == 0 ) { throw new IllegalArgumentException ( "srini_string" + arg0 ) ; } return loc0 == 0 ? null : registered . get ( loc0 ) ; }
void function ( StepEvent arg0 ) { }
HazelcastInstance function ( Server arg0 , int arg1 ) { return new HazelcastInstanceImpl ( arg0 , arg1 ) ; }
boolean function ( ) { return map . isEmpty ( ) ; }
boolean function ( ) { return quirks ; }
void function ( long arg0 ) { this . ours = arg0 ; }
float function ( ) { return leading ; }
Object function ( ) { return null ; }
Scene function ( ) { return focusScene ; }
ImmutableList < Command > function ( Path arg0 ) { return ImmutableList . < Command > builder ( ) . addAll ( findCommand ( arg0 . resolve ( "srini_string" ) ) ) . addAll ( findCommand ( arg0 . resolve ( "srini_string" ) ) ) . add ( findCommand ( arg0 . resolve ( "srini_string" ) ) ) . build ( ) ; }
void function ( ) { throw new UnsupportedOperationException ( "srini_string" ) ; }
double function ( double arg0 , double arg1 , double arg2 ) { if ( arg2 < arg0 ) return arg2 ; if ( arg2 > arg1 ) return arg1 ; return arg0 ; }
List < String > function ( ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( String loc1 : activeVersions ) { loc0 . add ( loc1 ) ; } return new ArrayList < String > ( loc0 ) ; }
void function ( LayoutManager arg0 ) { this . activeLayoutManager = arg0 ; }
void function ( double arg0 , double arg1 ) { for ( int loc0 = 0 ; loc0 < this . accounts . length ; loc0 ++ ) { this . accounts [ loc0 ] -= arg0 ; } }
void function ( ) { }
String function ( final Object arg0 ) { return MAPPER . writeValueAsString ( arg0 ) ; }
void function ( JobConf arg0 ) { arg0 . setClass ( GenericData . class ) ; }
Residue < C > function ( Residue < C > arg0 ) { if ( ! val . isUnit ( ) ) return this ; return new Residue < C > ( ring . add ( arg0 . getResidue ( ) ) ) ; }
void function ( Test arg0 , Throwable arg1 ) { }
boolean function ( ) { return fIsIgnoringSingleLetters ; }
Predicate < WebElement > function ( ) { return new IsDisplayedPredicate ( ) ; }
File function ( List < String > arg0 , PrintWriter arg1 ) { return createJunitTest ( arg0 , 0 , arg0 . size ( ) , arg1 ) ; }
List < Message > function ( ) { if ( message == null ) { message = new ArrayList < Message > ( ) ; } return this . message ; }
void function ( ) { log . trace ( "srini_string" ) ; peerStatus . disconnect ( myNode ) ; }
HashCodeBuilder function ( float [ ] arg0 , int arg1 , float arg2 ) {HashCodeBuilder loc0 = new HashCodeBuilder ( ) ; loc0 . append ( arg0 , arg1 , arg2 ) ; return loc0 ; }
void function ( List < KdcPreauth > arg0 ) { for ( KdcPreauth loc0 : arg0 ) { preauths . add ( loc0 ) ; } }
Rect function ( int arg0 , int arg1 , int arg2 ) { int loc0 = arg0 ; if ( loc0 == 0 ) { loc0 = arg1 ; } return getBitmapRectCenterInsideHelper ( arg0 , arg1 , arg2 ) ; }
PaletteContainer function ( ) { return new PaletteContainer ( SWT . NONE ) ; }
JSBundleLoader function ( final Context arg0 , final String arg1 ) { return new JSBundleLoader ( ) { @ Override public void loadScript ( final String arg2 ) { Log . d ( "srini_string" , getSourceUrl ( arg0 , arg1 ) ) ; } } ; }
int function ( ) { int loc0 = picture . getBasicPixel ( x , y ) ; int loc1 = ( loc0 + 1 ) % pic . getWidth ( ) ; return loc1 ; }
void function ( String [ ] arg0 ) { this . fields = arg0 ; }
void function ( boolean arg0 ) { this . validateXML = arg0 ; }
boolean function ( BigDecimal arg0 , BigDecimal arg1 ) { if ( ( arg0 . compareTo ( arg1 ) >= 0 ) && ( arg0 . compareTo ( skyNetID ) <= 0 ) ) { return true ; } else return false ; }
void function ( Difficulty arg0 ) { clearPreferences ( ) ; PuzzleLibrary . arg0 = arg0 ; }
Action1 < Resource > function ( ) { synchronized ( lock ) { return destination ; } }
ResourceEditPropertyBuilder function ( String arg0 ) { this . resourceName = arg0 ; return this ; }
void function ( ) { }
void function ( MovieTrack arg0 ) { this . track = arg0 ; readFrames ( ) ; }
byte [ ] function ( ) { byte [ ] loc0 = new byte [ value . length ] ; System . arraycopy ( value , 0 , loc0 , 0 , value . length ) ; return loc0 ; }
void function ( ObjectContainer arg0 ) { log ( "srini_string" , arg0 ) ; }
Collection function ( ) { HashSet loc0 = new HashSet ( ) ; Iterator loc1 = defaultHierarchy . iterator ( ) ; while ( loc1 . hasNext ( ) ) { loc0 . add ( loc1 . next ( ) ) ; } return loc0 ; }
ISWTWidgetMatcher function ( String arg0 , String arg1 , String arg2 , String ... arg3 ) { return addFilters ( arg0 , arg1 , arg2 , arg3 ) ; }
Cursor function ( long arg0 ) { return queryHelper . safeQuery ( "srini_string" , getAllColumns ( ) , dateModifiedWhere ( arg0 ) , null , null ) ; }
CountProjection function ( ) { return new CountProjection ( ) ; }
void function ( ImageLoader arg0 ) { this . imageLoaders . set ( arg0 ) ; }
DashArrayElem function ( ) { if ( currentIndex < dashArray . size ( ) - 1 ) { currentIndex ++ ; } return ( DashArrayElem ) dashArray . get ( currentIndex ) ; }
void function ( String arg0 ) { this . responsedescription = arg0 ; }
boolean function ( ) { return this . isunit ; }
void function ( String arg0 , Object ... arg1 ) { if ( arg1 != null ) assumeThat ( arg0 , arg1 ) ; }
IStatus function ( ) { return null ; }
void function ( IgnutellaEventListener arg0 ) { synchronized ( listeners ) { listeners . add ( arg0 ) ; } }
double function ( Function arg0 , Class < ? extends Function > arg1 ) { return getDerivativeAt ( arg0 , arg1 ) ; }
void function ( ) { S loc0 = singletonInstanceMethod . get ( ) ; try { Thread . sleep ( 100 ) ; } catch ( InterruptedException loc1 ) { fail ( "srini_string" ) ; } }
TypedSet < T > function ( Set < T > arg0 ) { return new TypedSetImpl < T > ( arg0 ) ; }
void function ( String arg0 ) { System . out . println ( asResourceName ( arg0 ) ) ; }
boolean function ( String arg0 ) { Pattern loc0 = Pattern . compile ( PHONE_VALIDATION_REGEX ) ; Matcher loc1 = loc0 . matcher ( arg0 ) ; return loc1 . matches ( ) ; }
Uri function ( ) { return Uri . parse ( UNKNOWN_PROTOCOL_URI_PREFIX + "srini_string" ) ; }
void function ( Control arg0 , int arg1 ) { Object loc0 = arg0 . getLayoutData ( ) ; if ( loc0 instanceof GridData ) { ( ( GridData ) loc0 ) . arg1 = arg1 ; } }
XMPMeta function ( InputStream arg0 , String arg1 ) { return parseFromString ( arg0 , arg1 , "srini_string" ) ; }
void function ( final Block arg0 ) { paths . add ( arg0 ) ; }
void function ( ) { doPrepare ( ) ; }
int function ( ) { return NUM_REUSABLE_ALIASES ; }
byte [ ] function ( ) { return payload ; }
void function ( QuotaAvailableBytes arg0 ) { this . quotaAvailableBytes = arg0 ; }
String function ( ) { return fromKey ; }
void function ( FrequencyAdjuster arg0 ) { this . frequencyAdjusters . add ( arg0 ) ; }
int function ( ) { return _list . size ( ) ; }
CopyParticipant [ ] function ( Element arg0 ) { return loadParticipants ( arg0 , null ) ; }
Monitor function ( ) { return monitor ; }
void function ( TextEvent arg0 ) { if ( fViewer != null ) { fRun . addTextListener ( fTextListener ) ; fRun . setSelectionListener ( fSelectionListener ) ; } }
Collection < Map . Entry < K , V >> function ( ) { return Collections . unmodifiableCollection ( map . entrySet ( ) ) ; }
List < VectorXYZ > function ( List < VectorXYZ > arg0 , List < VectorXYZ > arg1 ) { List < VectorXYZ > loc0 = new ArrayList < VectorXYZ > ( arg0 . size ( ) ) ; for ( VectorXYZ loc1 : arg0 ) { loc0 . add ( new VectorXYZ ( loc1 ) ) ; } return loc0 ; }
String function ( ) { return StringUtils . join ( this . propertyTagService . getAllPropertyTags ( ) , "srini_string" ) ; }
void function ( Report arg0 ) { this . report = arg0 ; }
void function ( int arg0 ) { Node loc0 = head ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 = loc0 . next ; } if ( loc0 != null ) { head = loc0 ; } }
void function ( final String arg0 ) { Preconditions . checkNotNull ( arg0 , "srini_string" ) ; CONF_INPUT_VALUE_SCHEMA = arg0 ; }
void function ( ) { externalPasswordProvider . setExternalPassword ( getVaultedPassword ( ) ) ; }
String function ( ) { return name ; }
void function ( ) { sendPost ( urlstring ) ; }
long function ( Object arg0 ) { return getCurrentTime ( ) ; }
int function ( ) { return memorySizeMb ; }
SuspendController function ( ) { return suspendControllerInjectedValue ; }
void function ( final int arg0 ) { for ( int loc0 = 0 ; loc0 < arg0 ; loc0 ++ ) { final Div loc1 = d . div ( ) ; final int loc2 = loc1 . end ( ) ; if ( loc2 > 0 ) { verifyContent ( loc1 ) ; } } }
void function ( Object arg0 ) { isNotNull ( arg0 , "srini_string" ) ; }
void function ( NamedWorkManager arg0 ) { this . workManager = arg0 ; }
int function ( Object arg0 ) { if ( arg0 == this ) return 0 ; if ( arg0 instanceof GenPolynomialRing ) { return ( ( GenPolynomialRing ) arg0 ) . getPolynomial ( ) . ordinal ( ) ; } else { return - 1 ; } }
GenVector < C > function ( final int arg0 ) { for ( int loc0 = 0 ; loc0 < val . size ( ) ; loc0 ++ ) { if ( val . get ( loc0 ) < arg0 ) { val . set ( loc0 , val . get ( loc0 ) - arg0 ) ; } } return this ; }
void function ( StructuredElement arg0 ) { if ( arg0 instanceof Dictionary ) { printChild ( arg0 ) ; } else if ( arg0 instanceof Reference ) { Reference loc0 = ( Reference ) arg0 ; inspectChild ( loc0 ) ; } }
T function ( ) { return datum ; }
Matcher function ( ) { return _matcher ; }
AuditCriterion function ( T arg0 ) { return new SimpleAuditExpression ( propertyNameGetter , arg0 , "srini_string" ) ; }
List < ResourceGroup > function ( int arg0 , List < ResourceTypeDataProvider > arg1 ) { return resourceTypeDataProvider . loadAll ( arg0 , arg1 ) ; }
boolean function ( ) { for ( VectorXZ loc0 : vertexLoop ) { if ( loc0 . x < 0 ) return false ; } for ( VectorXZ loc0 : vertexLoop ) { if ( loc0 . y < 0 ) return false ; } return true ; }
String function ( ) { return fMethodName ; }
List < AmwFunctionEntity > function ( ResourceType arg0 ) { return functionRepository . findByResourceType ( arg0 ) ; }
void function ( ) { NullNode loc0 = new NullNode ( ) ; assertNull ( loc0 . instance == null ) ; }
void function ( ) { player . stop ( ) ; }
T function ( Class < T > arg0 ) { return arg0 == null ? null : arg0 . cast ( ) ; }
List < String > function ( ) { return links ; }
void function ( String [ ] arg0 ) { printCapitalized ( "srini_string" ) ; }
void function ( Event arg0 ) { this . queue . add ( arg0 ) ; }
Iterable4 function ( Object ... arg0 ) { return new Iterable4 ( arg0 ) ; }
void function ( Method arg0 ) { System . out . println ( arg0 ) ; }
ColumnFileMetaData function ( ) { return metaData ; }
void function ( ) { if ( processListener != null ) { processListener . interrupt ( ) ; } }
String function ( ) { try { return fingerprintPublicKey ( null ) ; } catch ( NoSuchAlgorithmException loc0 ) { throw new RuntimeException ( loc0 . toString ( ) ) ; } }
String function ( List < SubSystemType > arg0 ) { return StringUtils . collectionToDelimitedString ( arg0 , "srini_string" ) ; }
boolean function ( ) { return idler != null ; }
boolean function ( ) { return annotationsAllowed ; }
boolean function ( View arg0 , MotionEvent arg1 ) { if ( mGestureDetector != null && mScaleGestureDetector != null ) { mGestureDetector . onTouchEvent ( arg0 , arg1 ) ; return true ; } else { return false ; } }
void function ( int arg0 , int arg1 ) { doKeyDown ( arg0 , arg1 ) ; }
Block function ( ) { return exit ; }
void function ( StaplerRequest arg0 , StaplerResponse arg1 ) { arg1 . setStatus ( HttpServletResponse . SC_OK ) ; arg0 . getView ( arg1 ) . forward ( arg0 ) ; }
int function ( char arg0 ) { try { return Integer . parseInt ( arg0 ) ; } catch ( NumberFormatException loc0 ) { throw new IllegalArgumentException ( "srini_string" + arg0 + "srini_string" ) ; } }
void function ( ) { _observer . clear ( ) ; }
void function ( ) { Tag loc0 = end ; Tag loc1 = start ; while ( loc0 != null && loc1 != null ) { int loc2 = loc0 . listItemHeight ( ) ; int loc3 = loc1 . listItemHeight ( ) ; if ( loc2 > loc3 ) { loc0 = loc1 ; loc1 = loc2 ; } } }
MemoryUser function ( ) { return user ; }
Ticker function ( ) { return executor . submit ( this ) ; }
TransInfo function ( ) { return transInfo ; }
int function ( int arg0 ) { int loc0 = ( arg0 >> 16 ) & 0xff ; return loc0 ; }
ChannelBuffer function ( SaslMessageToken arg0 ) { buffer . writeBytes ( token ) ; buffer . writeBytes ( arg0 . getToken ( ) ) ; return buffer ; }
char [ ] function ( ) { return invalidChars ; }
String function ( int arg0 ) { return getRandom ( CAPITAL_LETTERS , arg0 ) ; }
double function ( ) { return getMean ( ) ; }
String function ( String arg0 ) { return meta . get ( arg0 ) ; }
ListIterator function ( CharListIterator arg0 ) { return ( arg0 == null ) ? null : arg0 . listIterator ( ) ; }
void function ( ) { resetMoved ( ) ; }
EncryptedData function ( byte [ ] arg0 , byte [ ] arg1 ) { return decrypt ( new EncryptedData ( arg0 , arg1 ) ) ; }
int function ( ) { return marcador ; }
int function ( ) { return sectionLevel ; }
boolean function ( ) { return aliasSpecificLockModes != null && aliasSpecificLockModes . isEmpty ( ) ; }
GnutellaEvents function ( ) { if ( inst == null ) { inst = new GnutellaEvents ( ) ; } return inst ; }
int function ( Context arg0 ) { DisplayMetrics loc0 = arg0 . getResources ( ) . getDisplayMetrics ( ) ; return loc0 . widthPixels ; }
void function ( ) { for ( Double loc0 : operands ) { operands . push ( loc0 ) ; } }
void function ( ICompletionProposal [ ] arg0 , boolean arg1 ) { }
Location function ( ) { return mockLocation ; }
DateTimeFieldType function ( ) { return iUpperLimit ; }
void function ( String arg0 ) { logger . info ( arg0 ) ; }
long function ( InputStream arg0 , OutputStream arg1 ) { int loc0 = 0 ; byte [ ] loc1 = new byte [ 8192 ] ; int loc2 ; while ( ( loc2 = arg0 . loc2 ( loc1 ) ) != - 1 ) { arg1 . write ( loc1 , 0 , loc2 ) ; loc0 += loc2 ; } return loc0 ; }
SearchResultGroup [ ] function ( ISource arg0 , boolean arg1 ) { return search ( arg0 , arg1 , null ) ; }
void function ( String arg0 ) { ensureLength ( arg0 . length ( ) ) ; arg0 . getChars ( 0 , arg0 . length ( ) , buffer , position , actualSize ) ; }
String function ( ) { return caller ; }
ClientTransceiver function ( URI arg0 ) { return createServer ( arg0 , null ) ; }
ByteBuffer function ( Object arg0 ) { Output loc0 = new Output ( ) ; kryo . writeObject ( arg0 , loc0 ) ; return loc0 . toByteBuffer ( ) ; }
LCM function ( ) { if ( lcsub == null ) { lcsub = new LCMSubscriber ( ) ; } return lcsub ; }
String function ( String arg0 ) { if ( arg0 . length ( ) > fgMaxMessageLength ) { arg0 = arg0 . substring ( 0 , fgMaxMessageLength ) ; } return arg0 ; }
void function ( InputStream arg0 ) { if ( arg0 != null ) { try { arg0 . close ( ) ; } catch ( IOException loc0 ) { } } }
SQLException function ( String arg0 ) { throw new SQLException ( "srini_string" ) ; }
Criteria function ( String arg0 ) { checkComplete ( ) ; return new Criteria ( arg0 ) ; }
Reader function ( Member arg0 ) { return internalGetContentReader ( arg0 ) ; }
Tag function ( Tag arg0 , String arg1 ) { if ( parent == null ) { return null ; } return parent . find ( arg0 , arg1 ) ; }
long function ( ) { return numberOfReplicationTries ; }
String function ( String arg0 ) { int loc0 = arg0 . length ( ) ; if ( arg0 . charAt ( 0 ) == '*' ) { arg0 = arg0 . substring ( 1 ) ; } return qualifySignature ( arg0 ) ; }
boolean function ( Object arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } if ( ! ( arg0 instanceof Predicate ) ) { throw new IllegalArgumentException ( "srini_string" ) ; } return ( iPredicate1 . evaluate ( arg0 ) ) ; }
GenMatrix < C > function ( C arg0 ) { return fromList ( arg0 ) ; }
void function ( IExecutionDataVisitor arg0 ) { this . executionDataVisitor = arg0 ; }
void function ( PdfDictionary arg0 ) { this . richMediaSettings = arg0 ; }
Local < C > function ( long arg0 ) { return new Local < C > ( arg0 ) ; }
String function ( String arg0 , String arg1 , String arg2 ) { return getMessageDigest ( arg0 , arg1 , arg2 , null ) ; }
void function ( ) { iterator . remove ( ) ; }
void function ( ) { internalClient = new InternalKrbClient ( ) ; innerClient = new InternalKrbClient ( ) ; krbConfig = new KrbConfig ( ) ; }
MenuBar function ( Component arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 , int arg6 ) { return new MMenuBar ( arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 ) ; }
PdfPTable function ( ) { List < String [ ] > loc0 = new ArrayList < String [ ] > ( ) ; loc0 . add ( "srini_string" ) ; loc0 . add ( "srini_string" ) ; PdfPTable loc1 = new PdfPTable ( ) ; loc1 . add ( loc0 ) ; loc1 . add ( "srini_string" ) ; return loc1 ; }
void function ( String arg0 , IWidgetState arg1 ) { _map . put ( arg0 , arg1 ) ; }
String function ( ) { return fValue ; }
long function ( ) { return interval ; }
Residue < C > function ( BigInteger arg0 ) { return parse ( arg0 . toString ( ) ) ; }
void function ( final String arg0 ) { ResourceAdapterRepositoryUtil . clearRegisteredResourceAdapterIdentifier ( arg0 ) ; }
void function ( double arg0 , double arg1 ) { x1 += arg0 ; y2 += arg1 ; Canvas . getInstance ( ) . repaint ( ) ; }
void function ( ) { yaw ( ) ; }
void function ( TreeNode arg0 ) { value = arg0 . value ; }
DoubleIterator function ( DoubleListIterator arg0 ) { return UnmodifiableDoubleListIterator . unmodifiableDoubleListIterator ( arg0 ) ; }
void function ( ) { writeLine ( false ) ; }
void function ( ) { }
void function ( double [ ] arg0 ) { int loc0 = _list . size ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { arg0 [ loc1 ] = _list . getQuick ( loc1 ) ; } }
void function ( String arg0 ) { if ( hiddenClients . contains ( arg0 ) ) { hiddenClients . remove ( arg0 ) ; } }
boolean function ( String arg0 , String arg1 ) { return isCommon ( arg0 , new String [ ] { arg1 } ) ; }
void function ( Class < ? extends TestCase > arg0 ) { for ( Enumeration loc0 = tests ( ) ; loc0 . hasMoreElements ( ) ; ) { Test loc1 = ( Test ) loc0 . nextElement ( ) ; loc1 . evaluateTest ( arg0 ) ; } }
boolean function ( ) { return pnpEnabled ; }
GenVector < C > function ( GenVector < C > arg0 ) { return leftScalarProduct ( arg0 ) . rightScalarProduct ( ) ; }
boolean function ( Collection < ? extends K > arg0 , ObjectPredicate < ? super K > arg1 ) { forEach ( e -> { if ( arg1 . eval ( e ) ) { e . clear ( ) ; } put ( e , null , arg0 ) ; } ) ; return true ; }
Positions function ( ) { return position ; }
int function ( ) { return _seen . get ( ) ; }
void function ( Graphics2D arg0 ) { }
Class function ( ) { return clz ; }
NamingException function ( final Object arg0 , final Name arg1 ) { final NamingException loc0 = namingException ( arg0 , arg1 ) ; loc0 . setUnresolvedName ( arg1 ) ; return loc0 ; }
CodingErrorAction function ( final HttpParams arg0 ) { Args . notNull ( arg0 , "srini_string" ) ; return ( CodingErrorAction ) arg0 . getParameter ( CoreProtocolPNames . HTTP_MALFORMED_INPUT_ACTION ) ; }
String function ( String arg0 ) { return getString ( arg0 , new Object [ 0 ] ) ; }
int function ( ) { return fSourceIndex ; }
int function ( ) { return getVertices ( ) . size ( ) ; }
void function ( String arg0 ) { this . syncLevel = arg0 ; }
TriangleXZ function ( ) { return this ; }
void function ( String arg0 , PdfDictionary arg1 ) { if ( arg0 == null ) { arg0 = "srini_string" ; } if ( arg1 == null ) { arg1 = new PdfDictionary ( ) ; } arg1 . put ( "srini_string" , prefix ) ; arg1 . put ( "srini_string" , arg0 ) ; }
boolean function ( ) { return PermissionService . isUserAuthorized ( entityManager , "srini_string" ) ; }
int function ( ) { return receivedMsg ; }
void function ( String arg0 ) { this . fromKey = arg0 ; }
Iterator < ListElement > function ( ) { return listElements . iterator ( ) ; }
String function ( ) { return fName ; }
Local < C > function ( Local < C > arg0 , Local < C > arg1 ) { return new Local < C > ( arg0 . m * arg1 . m , arg0 . n * arg1 . n ) ; }
SortedMap [ ] function ( ) { return columnNames ; }
void function ( RectF arg0 ) { if ( subpaths . size ( ) > 0 ) { subpaths . get ( subpaths . size ( ) - 1 ) . addRect ( arg0 ) ; } }
int function ( ) { return numeroPaginas ; }
boolean function ( BigInteger arg0 ) { return compareTo ( arg0 ) == 0 ; }
int function ( int arg0 , KeyEvent arg1 ) { return arg0 & BUTTON_MASK ; }
void function ( String arg0 , String arg1 ) { mParameters . put ( arg0 , arg1 ) ; }
BooleanComparator function ( ) { return BooleanComparator . INSTANCE ; }
void function ( ) { emptyInvList . clear ( ) ; }
void function ( String arg0 , String arg1 ) { if ( arg0 == null ) throw new IllegalArgumentException ( "srini_string" ) ; if ( arg1 == null ) throw new IllegalArgumentException ( "srini_string" ) ; parts . add ( new Pair ( arg0 , arg1 ) ) ; }
NamingException function ( final String arg0 , final Object arg1 ) { final NamingException loc0 = namingException ( arg0 ) ; if ( loc0 != null ) return loc0 ; return namingException ( arg1 ) ; }
void function ( int arg0 ) { theRules . setColor ( arg0 ) ; }
void function ( BatchStatement arg0 , String ... arg1 ) { execute ( arg0 , arg1 ) ; }
void function ( KeyEvent arg0 ) { if ( vis != null ) { vis . removeKeyListener ( arg0 ) ; } }
String function ( ) { return suit ; }
Box function ( AtomType arg0 ) { int loc0 = glueTable [ arg0 . getID ( ) ] [ 0 ] ; int loc1 = glueTable [ arg0 . getID ( ) ] [ 1 ] ; return new Box ( loc0 , loc1 ) ; }
void function ( String arg0 ) { if ( isLoggable ( VERBOSE ) ) { Log . v ( TAG , arg0 ) ; } }
FloatListIterator function ( ListIterator arg0 ) { return arg0 == null ? null : new FloatListIterator ( arg0 ) ; }
List < ApplicationReleaseBinding > function ( ) { if ( structure == null ) { structure = new ArrayList < ApplicationReleaseBinding > ( ) ; } return this . structure ; }
void function ( ) { assertThat ( map . size ( ) , is ( 0 ) ) ; }
boolean function ( ) { return getLogger ( ) . isWarnEnabled ( ) ; }
boolean function ( T arg0 ) { return orm . create ( arg0 ) ; }
PdfIndirectReference function ( String arg0 , PdfIndirectReference arg1 ) { references . put ( arg0 , arg1 ) ; return this ; }
int function ( ) { return position ; }
Object function ( Class arg0 , String arg1 ) { try { Method loc0 = arg0 . getMethod ( arg1 ) ; loc0 . setAccessible ( true ) ; return loc0 . invoke ( arg0 ) ; } catch ( Exception loc0 ) { return null ; } }
boolean function ( ) { return fFilesSaved ; }
BootstrapServiceRegistryBuilder function ( Integrator arg0 ) { providedIntegrators . add ( arg0 ) ; return this ; }
void function ( String arg0 ) { if ( mIsLogOn ) { Log . d ( "srini_string" , "srini_string" + arg0 ) ; } this . mBroadcastReceiver . send ( arg0 ) ; }
Criteria function ( String arg0 , ValueNode ... arg1 ) { checkComplete ( ) ; criteriaType = RelationalOperator . NIN ; return in ( arg0 , arg1 ) ; }
String function ( Object arg0 ) { return arg0 == null ? "srini_string" : arg0 . toString ( ) ; }
Change function ( ) { return fChange ; }
KeyFactory function ( List < ? > arg0 ) { KeyFactory loc0 = KeyFactory . getInstance ( ) ; Iterator < ? > loc1 = arg0 . iterator ( ) ; if ( loc1 . hasNext ( ) ) { loc0 = loc0 . get ( loc1 . next ( ) ) ; } return loc0 ; }
byte [ ] function ( String arg0 ) { String loc0 = ( String ) this . object . get ( arg0 ) ; if ( loc0 == null ) { return null ; } return loc0 . getBytes ( ) ; }
String function ( ) { return translation ; }
String function ( ) { StringBuilder loc0 = new StringBuilder ( ) ; loc0 . append ( "srini_string" ) ; if ( this . statusLine != null ) { loc0 . append ( "srini_string" + this . statusLine + "srini_string" ) ; } if ( this . responseDate != null ) { loc0 . append ( "srini_string" + this . responseDate + "srini_string" ) ; } if ( this . requestDate != null ) { loc0 . append ( "srini_string" + this . requestDate + "srini_string" ) ; } loc0 . append ( "srini_string" ) ; return loc
double function ( ) { return percentDone ; }
void function ( ) { pos . add ( arg0 ) ; lookAt . add ( arg0 ) ; }
void function ( DiGraph arg0 ) { int loc0 = arg0 . nodes . length ; int loc1 = arg0 . m1 ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { Vertex loc3 = firstNode ( arg0 ) ; arg0 . addEdge ( loc3 , loc2 ) ; } }
Rectangle function ( Component arg0 , int arg1 , int arg2 ) { if ( arg1 < 0 ) { arg1 = 0 ; } if ( arg2 < 0 ) { arg2 = 0 ; } Rectangle loc0 = new Rectangle ( arg1 , arg2 ) ; return loc0 ; }
boolean function ( final ProjCoordinate arg0 ) { return ! Double . isNaN ( arg0 . x ) && Double . isNaN ( arg0 . y ) && Double . isNaN ( arg0 . z ) ; }
boolean function ( Class < ? > arg0 ) { return arg0 == Collection . class ; }
AuthToken function ( byte [ ] arg0 , String arg1 ) { return getDecrypter ( ) . decrypt ( arg0 , arg1 ) ; }
boolean function ( Instant arg0 ) { return compareTo ( arg0 ) >= 0 ; }
void function ( boolean arg0 ) { startupOptions . setAllowTcp ( arg0 ) ; }
boolean function ( ) { return ( ( ground + ( isPassed ? 1 : 0 ) ) > y ) ; }
void function ( Resources arg0 ) { this . resources = arg0 ; }
ScheduledExecutorService function ( ScheduledExecutorService arg0 ) { return new ScheduledThreadPoolExecutor ( arg0 ) ; }
NumberTransformer function ( Number arg0 ) { NumberTransformer loc0 = ( NumberTransformer ) map . get ( arg0 ) ; if ( loc0 == null ) { loc0 = defaultTransformer ; map . put ( arg0 , loc0 ) ; } return loc0 ; }
Xid function ( int arg0 ) { return getXid ( arg0 , false ) ; }
void function ( ) { checkLocked ( ) ; lastUsedIterator = currentIterator ; currentIterator = null ; }
void function ( NativeSQLQueryReturn arg0 ) { this . queryReturns . add ( arg0 ) ; }
