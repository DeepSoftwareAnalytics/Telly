void function ( ) { Preconditions . checkState ( ! canRead ( ) , "srini_string" ) ; }
void function ( String arg0 ) { dvdProperties . remove ( arg0 ) ; cdProperties . remove ( arg0 ) ; bookProperties . remove ( arg0 ) ; }
Map < SpringConfig , String > function ( ) { return mSpringConfigMap ; }
File function ( File arg0 ) { if ( ! arg0 . exists ( ) ) { Log . e ( "srini_string" , "srini_string" + arg0 . getAbsolutePath ( ) ) ; return null ; } return arg0 ; }
boolean function ( ) { return coalescing ; }
void function ( String arg0 , Object arg1 ) { ServerInvocationContext loc0 = ( ServerInvocationContext ) context ; loc0 . setUsername ( arg0 ) ; }
void function ( Object arg0 , Throwable arg1 ) { if ( isTraceEnabled ( ) ) { getLogger ( ) . log ( FINE , arg0 , arg1 ) ; } }
Object function ( ) { return instance ; }
boolean function ( ) { return true ; }
void function ( final int arg0 ) { markAsOverriden ( "srini_string" ) ; this . evictionWakeUpInterval = arg0 ; }
IProduct function ( ) { return product ; }
String function ( ASN1Primitive arg0 ) { return getExtensionValue ( arg0 , "srini_string" ) ; }
int function ( final InputStream arg0 ) { final byte [ ] loc0 = new byte [ 2 ] ; arg0 . read ( loc0 ) ; final int loc1 = arg0 . read ( loc0 ) & 0xFF ; final int loc2 = arg0 . read ( loc0 ) & 0xFF ; final int loc3 = arg0 . read ( loc0 ) & 0xFF ; return ( loc1 << 24 ) | ( loc2 << 16 ) | ( loc3 << 8 ) ; }
boolean function ( ClassDoc arg0 , String arg1 ) { return find_enabled ( arg0 , arg1 ) ; }
LongList function ( ) { return getEmptyLongList ( 0 ) ; }
Getcontentlanguage function ( ) { return getcontentlanguage ; }
void function ( String arg0 [ ] ) { KerberosAuthenticator loc0 = new KerberosAuthenticator ( ) ; loc0 . init ( ) ; }
NameParts function ( String arg0 ) { Preconditions . checkEmptyString ( arg0 , "srini_string" ) ; return new NameParts ( arg0 ) ; }
Location function ( Element arg0 ) { return input . getLocation ( arg0 ) ; }
boolean function ( ) { return _display . isShowing ( ) ; }
void function ( String arg0 , String arg1 ) { if ( arg1 == null ) { throw new XMPException ( "srini_string" + arg0 + "srini_string" + arg1 ) ; } }
void function ( ) { m_trace = null ; }
String function ( ) { return reason ; }
boolean function ( Object arg0 ) { return false ; }
int function ( ) { return count ; }
boolean function ( ) { return isLastBatch ; }
boolean function ( ) { return false ; }
long function ( ) { return cacheHitCount ; }
Dialog function ( Activity arg0 , String arg1 ) { return ( new AlertDialog . Builder ( arg0 ) ) . setTitle ( arg1 ) . setMessage ( arg1 ) . setNeutralButton ( android . R . string . ok , null ) . create ( ) ; }
Section function ( int arg0 ) { ensureNotBuilt ( ) ; Section loc0 = sections . get ( arg0 ) ; if ( loc0 == null ) { loc0 = new Section ( ) ; sections . add ( arg0 , loc0 ) ; } return loc0 ; }
Product function ( ) { return new Product ( ) ; }
FigureInfo function ( boolean arg0 ) { FigureInfo loc0 = new FigureInfo ( ) ; loc0 . arg0 = arg0 ; return loc0 ; }
Integer function ( Cursor arg0 , int arg1 ) { return arg0 . getInt ( arg1 ) ; }
ProvidedPort function ( ) { return new ProvidedPort ( ) ; }
boolean function ( String arg0 ) { if ( StringUtils . isNotBlank ( arg0 ) && ! arg0 . startsWith ( "srini_string" ) ) { return false ; } return true ; }
int function ( ProtocolVersion arg0 ) { return this . protocol . compareTo ( arg0 . protocol ) ; }
void function ( Fum arg0 ) { this . fum = arg0 ; }
void function ( byte [ ] arg0 ) { }
void function ( ) { SecurityConfiguration . getCipherKey ( ) ; }
int function ( ) { return root . size ( ) ; }
void function ( Point2D arg0 ) { this . startPoint = arg0 ; }
int function ( String [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 . length ; loc1 ++ ) { loc0 = gcd ( loc0 , arg0 [ loc1 ] ) ; } return loc0 ; }
void function ( String [ ] arg0 ) { System . out . println ( getImplementation ( ) ) ; System . out . println ( getSpecification ( ) ) ; System . out . println ( getSpecification ( ) ) ; System . out . println ( getSpecification ( ) ) ; }
void function ( String arg0 , Object arg1 ) { }
void function ( Collection < ? > arg0 , Collection < ? > arg1 , Comparator < ? super E > arg2 , int arg3 ) { for ( int loc0 = 0 ; loc0 < arg3 ; loc0 ++ ) { if ( arg2 . compare ( arg1 , arg0 . iterator ( ) ) < 0 ) { arg1 . add ( arg0 ) ; } } }
long function ( ) { return timestamp ; }
String function ( ) { return name ; }
Piece function ( int arg0 ) { return pieces [ arg0 ] ; }
String function ( String arg0 ) { try { return getText ( arg0 , null ) ; } catch ( MissingResourceException loc0 ) { return "srini_string" ; } }
void function ( ISourceFileLocator arg0 ) { add ( arg0 , tabWidth ) ; }
void function ( double arg0 , double arg1 , double arg2 ) { if ( arg2 < arg1 ) { throw new IllegalArgumentException ( "srini_string" + arg2 + "srini_string" + arg1 ) ; } }
Integer function ( ) { return repeated ; }
Description function ( Description arg0 ) { fChildren . add ( arg0 ) ; return arg0 ; }
byte [ ] function ( short arg0 ) { byte [ ] loc0 = new byte [ 2 ] ; loc0 [ 0 ] = ( byte ) ( arg0 >>> 8 ) ; loc0 [ 1 ] = ( byte ) ( arg0 ) ; return loc0 ; }
Criteria function ( ) { return new Criteria ( ) ; }
StandardServiceRegistryBuilder function ( Map arg0 ) { this . settings . putAll ( arg0 ) ; return this ; }
Integer [ ] function ( int [ ] arg0 ) { Integer [ ] loc0 = new Integer [ arg0 . length ] ; for ( int loc1 = 0 ; loc1 < arg0 . length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }
String function ( char arg0 ) { return loadKeyStrokeMap ( ) . get ( arg0 ) ; }
double function ( ) { return this . n ; }
ValidatorConfiguration function ( String arg0 , String arg1 ) { properties . put ( arg0 , arg1 ) ; return this ; }
void function ( ) { validateChain ( ) ; }
CookieAttributeHandler function ( final String arg0 ) { return this . attribHandlerMap . get ( arg0 ) ; }
void function ( ) { dispatcher . dispatch ( this ) ; }
void function ( String [ ] arg0 ) { Shells . run ( Shells . getApplication ( ) , arg0 ) ; }
void function ( String arg0 ) { this . className = arg0 ; }
int function ( Comparable arg0 , Comparable arg1 ) { return compareTo ( arg0 ) . compareTo ( arg1 . compareTo ( arg1 ) ) ; }
void function ( ) { lookingForCustomer = true ; }
String function ( final int arg0 , final String arg1 , final String arg2 , final String arg3 , final String arg4 , final String arg5 , final String arg6 , final String arg7 , final String arg8 , final String arg9 , final String arg10 , final String arg11 ) { String loc0 = getObjectById ( arg0 , arg1 , arg2 ) ; if ( loc0 == null ) { return null ; } if ( loc0 . equals ( arg3 ) ) { return arg4 ; } if ( loc0 . equals ( arg5 ) ) { return arg6 ; } return loc0 ; }
String function ( ) { return responseHeaders . get ( responseCode ) ; }
GenMatrix < C > function ( ) { return new GenMatrix < C > ( val . size ( ) , val , false ) ; }
void function ( ) { resetObstaclePosition ( ) ; }
AuditCriterion function ( AuditCriterion arg0 , AuditCriterion arg1 ) { return new LogicalAuditExpression ( arg0 , arg1 , "srini_string" ) ; }
T function ( final T arg0 , final MethodParameter arg1 ) { notNull ( arg0 , "srini_string" ) ; notNull ( arg1 , "srini_string" ) ; return arg0 ; }
void function ( @ Nullable MessageType arg0 ) { myTopType = arg0 ; }
PlanNode function ( Quadrant arg0 ) { return ( PlanNode ) arg0 . getChild ( this ) ; }
void function ( String arg0 ) { this . fcKey = arg0 ; }
Integer function ( ) { return xValue ; }
void function ( ) { _maxSize = _size ; _free = 0 ; }
Rectangle2D . Float function ( ) { return new Rectangle2D . Float ( getWidth ( ) , getHeight ( ) ) ; }
Long function ( ) { return idCounter ; }
String [ ] [ ] function ( String arg0 ) { if ( collectionPropertyMappingByRole . containsKey ( arg0 ) ) { return collectionPropertyMappingByRole . get ( arg0 ) ; } return null ; }
List < ? extends Table > function ( List < String > arg0 ) { return null ; }
void function ( ) { }
UnivPowerSeries < C > function ( ) { return ONE ; }
EditPartFactory function ( ) { return editorSite . getEditorPartFactory ( ) ; }
void function ( boolean arg0 ) { fResolveBindings = arg0 ; }
Interaction function ( Node arg0 , Body arg1 ) { return new HG ( arg0 , arg1 ) ; }
void function ( PastryContact arg0 ) { removeAndSubstitute ( arg0 ) ; cwNodes . remove ( arg0 ) ; ccwNodes . remove ( arg0 ) ; }
boolean function ( ) { return hasNext ( ) || hasNext ( ) ; }
DateTimeFieldType function ( int arg0 ) { return getField ( arg0 ) . getType ( ) ; }
ActiveLock function ( ) { return new ActiveLock ( ) ; }
Product < C > function ( Reader arg0 ) { return parse ( arg0 , nCopies ) ; }
void function ( File arg0 , File arg1 ) { try { if ( arg0 . exists ( ) && arg1 . exists ( ) ) { arg0 . copy ( arg1 ) ; } } catch ( IOException loc0 ) { LOG . error ( "srini_string" , loc0 ) ; } }
boolean function ( ) { return pdfxConformance != PdfWriter . PDF_X1_2001 ; }
boolean function ( ) { return anyUnsavedChanges0 ( ) ; }
void function ( ) { if ( fFilesSaved ) { fSaveMode = SAVE_REFACTORING ; } }
double function ( GraphWindow arg0 , GraphWindow ... arg1 ) { double loc0 = 0 ; double loc1 = 0 ; for ( GraphWindow loc2 : arg1 ) { loc0 += computeWindowDotProduct ( loc2 , arg0 ) ; } return loc1 ; }
void function ( ) { }
void function ( String arg0 , int arg1 , Collection < ? > arg2 ) { if ( ! testContains ( arg0 , arg1 , arg2 ) ) return ; throw failure ( arg0 , arg1 , arg2 ) ; }
Collection < EvaluationListener > function ( ) { return this . evaluationListeners ; }
Callable < T > function ( ) { return ( t ) -> { StackTraceElement [ ] loc0 = getStackContext ( ) ; for ( int loc1 = 0 ; loc1 < loc0 . length ; loc1 ++ ) { loc0 [ loc1 ] = findRootCause ( loc0 [ loc1 ] ) ; } return decorate ( t , loc0 ) ; } ; }
boolean function ( BigInteger arg0 ) { return compareTo ( arg0 ) == 0 ; }
Event [ ] function ( ) { return null ; }
int function ( Context arg0 , int arg1 ) { TypedArray loc0 = arg0 . getTheme ( ) . obtainStyledAttributes ( new int [ ] { arg1 } ) ; int loc1 = loc0 . getDimensionPixelSize ( 0 ) ; return loc1 ; }
H2Schema function ( String arg0 ) { return new H2SchemaImpl ( arg0 ) ; }
String [ ] function ( ) { return columnNames ; }
Closure function ( Closure arg0 , Iterator < ? extends T > arg1 ) { return new Closure ( ) { public void put ( T arg2 , Closure arg3 ) { arg0 . call ( arg2 , arg3 ) ; } } ; }
void function ( double arg0 ) { if ( Double . isNaN ( arg0 ) || arg0 == 0.0 ) { throw new IllegalArgumentException ( "srini_string" + arg0 + "srini_string" ) ; } }
boolean function ( ) { return vid != null ; }
void function ( int arg0 ) { this . sampleEncryptionDataLength = arg0 ; sampleEncryptionDataNeedsFill = true ; }
void function ( int arg0 ) { value -= arg0 ; }
boolean function ( ) { return onlineCheckingAllowed ; }
int function ( PlanIndex arg0 ) { return this . childRanges [ arg0 . getChildIndex ( ) ] ; }
void function ( long arg0 , int arg1 ) { if ( arg1 == 0 ) { throw new IllegalArgumentException ( "srini_string" ) ; } if ( arg1 == 1 ) { throw new IllegalArgumentException ( "srini_string" ) ; } if ( arg1 == 2 ) { throw new IllegalArgumentException ( "srini_string" ) ; } if ( arg1 == 3 ) { throw new IllegalArgumentException ( "srini_string" ) ; } if ( arg1 == 4 ) { throw new IllegalArgumentException ( "srini_string" ) ; } }
boolean function ( Collection < ? extends K > arg0 ) { return putAll ( arg0 , null ) ; }
void function ( ) { loadAndResizeSprite ( ) ; }
TemplateContextType function ( ) { return fContextType ; }
void function ( float arg0 ) { list . add ( arg0 ) ; }
void function ( Object arg0 ) { if ( myList == null ) throw new IndexOutOfBoundsException ( ) ; myList . set ( arg0 ) ; }
JdbcTemplateBean function ( ) { return entityManagerFactory ( ) . createTemplate ( ) ; }
IWidgetLocator function ( Object arg0 ) { if ( arg0 == null ) { throw new NullPointerException ( ) ; } return new WidgetLocator ( arg0 ) ; }
ReflectConstructorSpec function ( ) { return new ReflectConstructorSpec ( ) ; }
void function ( ) { pos = 0 ; }
byte [ ] function ( Object arg0 ) { if ( arg0 == null ) { return null ; } return toByteArray ( arg0 . toString ( ) ) ; }
Optional < JobStatus > function ( JobId arg0 ) { return Optional . ofNullable ( jobStatuses ( arg0 ) ) ; }
Codec [ ] function ( final int arg0 ) { return getCodecs ( ) ; }
void function ( int arg0 ) { this . weight = arg0 ; }
int [ ] function ( ) { return aVueltas ; }
PdfDictionary function ( PdfDictionary arg0 ) { PdfDictionary loc0 = new PdfDictionary ( ) ; if ( richMediaSettings != null ) { loc0 . put ( PdfName . CONF , richMediaSettings ) ; } if ( views != null ) { loc0 . put ( PdfName . VIEW , views ) ; } return loc0 ; }
void function ( final Set < IResource > arg0 ) { this . resources = arg0 ; }
String function ( ) { return "srini_string" + this . _size + "srini_string" + this . _xDirection + "srini_string" + this . _topDistance + "srini_string" ; }
void function ( double arg0 ) { numericalZero = arg0 ; }
void function ( KeyEvent arg0 ) { doKeyUp ( arg0 ) ; }
void function ( String arg0 ) { this . city = arg0 ; }
String function ( String arg0 ) { StringBuilder loc0 = new StringBuilder ( "srini_string" ) ; loc0 . append ( m_Key ) ; loc0 . append ( "srini_string" ) ; loc0 . append ( m_Format ) ; return loc0 . toString ( ) ; }
String function ( ) { return nodeInfo . getId ( ) ; }
Map < String , ByteBuffer > function ( ) { return responseCallMeta ; }
ColumnFileMetaData [ ] function ( ) { return columns ; }
String function ( String arg0 ) { int loc0 = arg0 . indexOf ( CODE_DELIMITERS ) ; if ( loc0 >= 1 ) { arg0 = arg0 . substring ( 0 , loc0 ) ; } return arg0 ; }
long function ( Duration arg0 ) { return nanosToMicros ( arg0 , NANOS_PER_SECOND ) ; }
String function ( Object arg0 ) { Element loc0 = curRootNode . createElement ( "srini_string" ) ; writeBackToXML ( loc0 , arg0 ) ; return loc0 . getText ( ) ; }
void function ( ) { checkForFreeRunways ( ) ; }
void function ( BigInteger arg0 ) { this . nresults = arg0 ; }
long function ( ) { return System . nanoTime ( ) ; }
AccessibilityGraph function ( final DeploymentUnit arg0 ) { final AccessibilityGraph loc0 = new AccessibilityGraph ( ) ; loc0 . add ( arg0 . getDeploymentUnit ( ) ) ; loc0 . add ( arg0 . getTestClass ( ) ) ; loc0 . add ( arg0 . getBeanDeploymentArchive ( ) ) ; loc0 . add ( arg0 . getEemoduleDescriptor ( ) ) ; return loc0 ; }
ITracePoint2D function ( ) { return m_previousPoint ; }
Object function ( ) { return this . value ; }
List < Integer > function ( ) { return initialAvailableNumer ; }
ModInteger function ( ) { if ( ring . isEmpty ( ) ) return new ModInteger ( - 1 ) ; return getModul ( modul , - 1 ) ; }
String function ( ) { return name ; }
float function ( Vector3f arg0 , Vector3f arg1 ) { float loc0 = arg0 . x - arg1 . x ; float loc1 = arg0 . y - arg1 . y ; float loc2 = arg0 . z - arg1 . z ; return ( float ) Math . sqrt ( loc0 * loc0 + loc1 * loc1 + loc2 * loc2 ) ; }
boolean function ( int arg0 , int arg1 ) { return fContent . contains ( arg0 , arg1 ) ; }
GenMatrix < C > function ( Reader arg0 ) { final int loc0 = Integer . parseInt ( arg0 . readLine ( ) ) ; final int loc1 = Integer . parseInt ( arg0 . readLine ( ) ) ; final GenMatrix < C > loc2 = new GenMatrix < C > ( loc0 , loc1 ) ; loc2 . initialize ( this ) ; return loc2 ; }
boolean function ( ) { return ( this . type == NUMBER ) ; }
byte [ ] function ( ByteBuffer arg0 , int arg1 , int arg2 ) { return getBytes ( arg0 , arg1 , arg2 , - 1 ) ; }
String function ( ) { return ( this . toString ( ) ) ; }
LinkedList function ( CFGNode arg0 ) { LinkedList loc0 = new LinkedList ( ) ; CFGNode loc1 = arg0 ; while ( loc1 != null ) { CFGNode loc2 = loc1 . getParent ( ) ; if ( loc2 != null ) { loc0 . add ( loc2 ) ; } loc1 = loc1 . getParent ( ) ; } return loc0 ; }
String function ( ) { return "srini_string" ; }
ModuleList < C > function ( final int arg0 , final int arg1 ) { return pairList ( arg0 , arg1 , new PairListModule ( ) ) ; }
List function ( ) { return ones ; }
String function ( ) { return this . entityName ; }
void function ( final ClassInfo arg0 ) { if ( arg0 == null ) { throw new NullPointerException ( ) ; } if ( DEBUG ) { System . err . println ( "srini_string" + arg0 . name + "srini_string" ) ; } interfaces [ arg0 . name ] = arg0 ; }
BatchCQLStatementTupleMapper function ( BatchCQLStatementBuilder ... arg0 ) { return new BatchCQLStatementTupleMapper ( arg0 ) ; }
void function ( String arg0 ) { files . add ( arg0 ) ; }
int [ ] function ( int [ ] arg0 ) { return redHistogram ( arg0 , true ) ; }
void function ( String arg0 , IConnection arg1 ) { connections . put ( arg0 , arg1 ) ; }
void function ( ) { IntArrayWorker loc0 = new IntArrayWorker ( ) ; int [ ] [ ] loc1 = { { 1 , 1 , 1 } , { 2 , 2 , 2 } } ; loc0 . setMatrix ( loc1 ) ; int loc2 = loc0 . getColTotal ( ) ; assertEquals ( 4 , loc2 ) ; }
URL function ( String arg0 ) { String loc0 = extractToTempLocation ( arg0 ) ; if ( loc0 == null ) { return null ; } URL loc1 = new URL ( loc0 ) ; return loc1 ; }
boolean function ( ) { return isField ; }
void function ( Shell arg0 ) { arg0 . drawToTop ( ) ; }
String function ( String arg0 ) { return getNameLabel ( arg0 , null ) ; }
Menu function ( ) { return mMenuPopup ; }
ResourceEditPropertyBuilder function ( String arg0 ) { this . propertyComment = arg0 ; return this ; }
void function ( int arg0 ) { if ( arg0 > 0 ) { stack . remove ( arg0 ) ; } }
WorkerContextImpl function ( ) { return context . get ( ) ; }
HealthCheckEnvironment function ( ) { return new HealthCheckEnvironment ( ) ; }
String function ( ) { StringBuffer loc0 = new StringBuffer ( ) ; loc0 . append ( "srini_string" ) ; loc0 . append ( fMethodName ) ; loc0 . append ( "srini_string" ) ; return loc0 . toString ( ) ; }
String function ( String arg0 ) { System . out . print ( arg0 ) ; System . out . println ( "srini_string" + arg0 + "srini_string" ) ; String loc0 = "srini_string" + arg0 + "srini_string" ; String loc1 = loc0 + "srini_string" + arg0 + "srini_string" ; String loc2 = loc1 + "srini_string" + arg0 + "srini_string" + loc0 ; executeQuery ( loc2 ) ; return loc2 ; }
OSMElement function ( ) { return objectWithTags ; }
PartitionOutgoingBatch function ( int arg0 ) { for ( Partitioner loc0 : partitioners ) { if ( loc0 . getPartitionIndex ( ) == arg0 ) { return loc0 ; } } return null ; }
void function ( Object arg0 , Throwable arg1 ) { log ( Level . WARN , arg0 , arg1 ) ; }
boolean function ( ) { return false ; }
void function ( Object arg0 ) { log ( Level . ERROR , String . valueOf ( arg0 ) , null ) ; }
URI function ( ) { return uri ; }
void function ( ) { if ( debug ) { logger . debug ( "srini_string" ) ; } }
List < Integer > function ( FileDescriptor arg0 ) { return arg0 . getSupportedAbis ( ) ; }
CRL function ( ASN1ObjectIdentifier arg0 ) { if ( arg0 instanceof X509Certificate ) { return getCRL ( ( X509Certificate ) arg0 ) ; } return null ; }
void function ( ) { double loc0 = items . length ; for ( int loc1 = 0 ; loc1 < size ; loc1 ++ ) { items [ loc1 ] = null ; } }
State function ( ) { return state ; }
boolean function ( int arg0 ) { return mNotifications . containsKey ( arg0 ) ; }
ResourceEditPropertyBuilder function ( boolean arg0 ) { this . isTesting = arg0 ; return this ; }
double function ( double arg0 , double arg1 , double arg2 , double arg3 ) { return bracket ( arg0 , arg1 , arg2 , arg3 , true ) ; }
String function ( ) { return "srini_string" + getInstantMillis ( ) + "srini_string" + getChronology ( ) . getMillis ( ) + "srini_string" ; }
ObjectContainer function ( String arg0 ) { return openFileLocked ( arg0 , "srini_string" ) ; }
RawFragmentBatch function ( Allocator arg0 ) { return new RawFragmentBatch ( arg0 ) ; }
String function ( String arg0 ) { return fAttributes . get ( arg0 ) ; }
List < T > function ( Collection < T > arg0 ) { return Collections . unmodifiableList ( new ArrayList < T > ( arg0 ) ) ; }
int function ( ) { return stmt . getSequentialNumber ( ) ; }
void function ( ImageWriter arg0 , int arg1 ) { if ( workerContextImpl != null ) { workerContextImpl . verifyStackOwner ( arg0 , arg1 ) ; } }
MSG_TYPE function ( ) { return msgType ; }
String function ( String arg0 ) { return map . get ( arg0 ) ; }
void function ( ) { receivedBytes = 0 ; }
Element function ( Node arg0 , String arg1 ) { NodeList loc0 = arg0 . getElementsByTagName ( arg1 ) ; if ( loc0 . getLength ( ) == 1 ) { return ( Element ) loc0 . item ( 0 ) ; } return null ; }
int function ( final int [ ] arg0 , final int [ ] arg1 ) { final int loc0 = arg0 . length ; final int loc1 = arg1 . length ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) if ( arg0 [ loc2 ] != arg1 [ loc2 ] ) return loc2 ; return 0 ; }
String function ( String arg0 ) { return getSignature ( arg0 , false ) ; }
String function ( final Name arg0 ) { return arg0 . getLastElement ( ) ; }
ConsumedPort function ( ) { return new ConsumedPort ( ) ; }
String function ( String arg0 ) { HostAndPort loc0 = hosts . get ( arg0 ) ; if ( loc0 != null ) { return loc0 . getIp ( ) ; } return arg0 ; }
void function ( ) { Display . getDefault ( ) . dispose ( ) ; }
void function ( ) { final Class < ? > loc0 = Class . forName ( "srini_string" ) ; Assert . assertTrue ( loc0 . isAssignableFrom ( Rar . class ) ) ; }
void function ( Socket arg0 ) { arg0 . setSocket ( this ) ; this . socket = arg0 ; this . open = true ; }
void function ( ) { Session loc0 = readSession ( ) ; writeSession ( loc0 ) ; }
void function ( IFile arg0 ) { deleteIndex ( arg0 ) ; }
Request function ( Class < ? > arg0 ) { return new MockRequest ( arg0 ) ; }
void function ( ) { appendNewLine ( ) ; }
void function ( View arg0 ) { releaseCapture ( ) ; }
int function ( boolean arg0 ) { return 1 ; }
File function ( ) { return file ; }
Date function ( Date arg0 ) { if ( DATE_CLEANUP_PATTERN_WRONG_TIMEZONE . matcher ( arg0 . format ( DATE_CLEANUP_PATTERN_WRONG_TIMEZONE ) ) . matches ( ) ) { arg0 . setTime ( arg0 . getDate ( ) . getTime ( ) ) ; } return arg0 ; }
ArrayList < Byte > function ( Random arg0 ) { byte [ ] loc0 = new byte [ 32768 ] ; arg0 . nextBytes ( loc0 ) ; return Arrays . asList ( loc0 ) ; }
String function ( ) { return this . charset ; }
Phenotype function ( String arg0 , String arg1 ) { try { return mapper . getSinglePhenotype ( arg0 , arg1 ) ; } catch ( IOException loc0 ) { throw new IOException ( SolrException . ErrorCode . BAD_REQUEST , loc0 . getMessage ( ) , loc0 ) ; } }
void function ( Context arg0 , Name arg1 ) { arg0 . rebind ( arg1 ) ; }
void function ( byte [ ] arg0 ) { append ( arg0 , 0 , arg0 . length ) ; }
void function ( Person arg0 ) { allPersons . remove ( arg0 ) ; }
boolean function ( Object arg0 ) { if ( arg0 instanceof RoutingTableEntry ) { RoutingTableEntry < T > loc0 = ( RoutingTableEntry < T > ) arg0 ; return ( loc0 != null && loc0 . getRoutingTable ( ) == this ) ; } return false ; }
void function ( String arg0 ) { sharedPrefs . edit ( ) . putLong ( LOG_TAG , arg0 ) . commit ( ) ; }
WidgetLocator function ( String arg0 ) { WidgetLocator loc0 = null ; if ( _register != null ) { loc0 = _register . remove ( arg0 ) ; } return loc0 ; }
void function ( Host arg0 , Double arg1 ) { CumulateRTTStrategy loc0 = rttToMonitors . get ( arg0 ) ; if ( loc0 == null ) { loc0 = new CumulateRTTStrategy ( ) ; rttToMonitors . put ( arg0 , loc0 ) ; } loc0 . updateRTT ( arg1 ) ; }
boolean function ( int arg0 , int arg1 ) { for ( int loc0 = 0 ; loc0 < arg0 ; loc0 ++ ) { for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { if ( board [ loc0 ] . equals ( pieces [ loc1 ] ) ) { return true ; } } } return false ; }
SAXParser function ( ) { return new SAXParser ( ) ; }
void function ( int arg0 ) { iterations = arg0 ; }
QuadTree function ( Square arg0 , Square arg1 , Square arg2 ) { return this . child ( arg0 , arg1 , arg2 , true ) ; }
AbstractGaloisine < C > function ( AbstractGaloisine < C > arg0 , AbstractGaloisine < C > arg1 ) { return new GroebnerBase < > ( arg0 , arg1 ) ; }
ValidationContext function ( ) { return new ValidationContext ( ) ; }
Set < String > function ( ) { return Collections . unmodifiableSet ( namedDescriptorMap . keySet ( ) ) ; }
SpringConfig function ( Map < String , ? > arg0 ) { return new SpringConfig ( ) . put ( "srini_string" , arg0 ) ; }
URI function ( ) { throw new UnsupportedOperationException ( ) ; }
void function ( Permission arg0 ) { checkPermissionAndFireCheckedException ( ) ; permissionService . checkPermission ( arg0 ) ; }
boolean function ( final String arg0 ) { return userFunctions . containsKey ( arg0 ) ; }
VectorXZ function ( double arg0 ) { return new VectorXZ ( x * arg0 , y * arg0 , z * arg0 ) ; }
String function ( Element arg0 , String arg1 ) { return VALUE . getAttribute ( arg0 , arg1 ) ; }
void function ( ) { if ( isEmpty ( ) ) throw new RuntimeException ( "srini_string" ) ; size -- ; first = null ; }
void function ( String arg0 ) { this . inputInfo = arg0 ; }
void function ( Bundle arg0 ) { Validate . notNull ( arg0 , "srini_string" ) ; Validate . notNull ( arg0 . getString ( BUNDLE_EXTRA_STRING_MESSAGE ) , BUNDLE_EXTRA_STRING_MESSAGE ) ; }
long function ( ) { return kdcOptions . now ( ) ; }
Date function ( ) { return date -> period . endDate ( ) ; }
Quotient < C > function ( C arg0 , C arg1 ) { return new Quotient < C > ( arg0 , arg1 ) ; }
Variable function ( int arg0 ) { return ind_var ( arg0 ) ; }
UnivPowerSeries < C > function ( int arg0 ) { return random . nextInt ( arg0 ) ; }
Durations function ( Duration arg0 , Duration arg1 ) { Durations loc0 = new Durations ( ) ; loc0 . add ( arg0 , arg1 ) ; return loc0 ; }
AnnotationView function ( ) { if ( instance == null ) { synchronized ( AnnotationView . class ) { if ( instance == null ) { instance = new AnnotationView ( ) ; } } } return instance ; }
boolean function ( Object [ ] arg0 ) { return arg0 != null && arg0 . length > 0 ; }
HazelcastInstance function ( ) { return hazelcastInstance ; }
boolean function ( java . math . BigInteger arg0 ) { return getVal ( ) . equals ( arg0 . getValue ( ) ) ; }
String function ( ) { return messageSource . getMessage ( ) ; }
Optional < Section > function ( ) { return Optional . empty ( ) ; }
boolean function ( ) { return this . timespan > this . timespan ; }
boolean function ( ) { return size == 0 ; }
void function ( SimpleBookmark arg0 ) { fc . setBookmarks ( arg0 ) ; }
void function ( PdfName arg0 ) { this . lineJoinStyle = arg0 ; }
int function ( ) { return red . length ( ) + green . length ( ) + white . length ( ) ; }
void function ( ISemanticEvent arg0 ) { }
void function ( int arg0 ) { if ( arg0 < 0 || arg0 > 255 ) { throw new IllegalArgumentException ( "srini_string" ) ; } setSystemBrightness ( arg0 ) ; }
void function ( ) { if ( releaseMap == null ) { releaseMap = new HashMap < > ( ) ; } }
Date function ( ) { return Instant . ofEpochMilli ( getInstant ( ) ) ; }
boolean function ( ) { return escapeText ; }
boolean function ( ) { return settings . getBoolean ( "srini_string" , false ) ; }
BasicDevice function ( String arg0 ) { return this . devices . get ( arg0 ) ; }
void function ( TLinkable arg0 ) { _next = arg0 ; }
void function ( ) { try { _serializerFactory . reset ( ) ; } catch ( Exception loc0 ) { log . error ( "srini_string" , loc0 ) ; } }
TagState function ( ) { return tagState ; }
String function ( ) { return keyTypeZNode ; }
void function ( PropertyChangeListener arg0 ) { pcsDelegate . addPropertyChangeListener ( arg0 ) ; }
void function ( T arg0 ) { lock . writeLock ( ) . lock ( ) ; try { map . put ( arg0 ) ; } finally { lock . writeLock ( ) . unlock ( ) ; } }
void function ( TestRunSession arg0 ) { exportTestRunSession ( arg0 , JUNIT4_CONTAINER_PATH ) ; }
void function ( ) { this . iterator . add ( this . next ) ; }
boolean function ( ) { return fCheckable ; }
float function ( Context arg0 ) { return CornerUtils . getBorderWidth ( arg0 , true ) ; }
void function ( String arg0 , String arg1 , Map < String , FreeMarkerProperty > arg2 ) { if ( properties != null ) { properties . put ( arg0 , arg1 , arg2 ) ; } }
boolean function ( ) { return ( type == NAME ) ; }
void function ( ) { throw new RuntimeException ( "srini_string" ) ; }
void function ( ) { MyListener . setInvocationCount ( 0 ) ; SLSBBMT loc0 = lookup ( "srini_string" , SLSBBMT . class ) ; this . doCMTTest ( loc0 , 1 ) ; }
void function ( int arg0 ) { sleep ( arg0 , "srini_string" ) ; }
void function ( String arg0 ) { this . caller = arg0 ; }
CtField [ ] function ( CtField [ ] arg0 , String arg1 ) { for ( int loc0 = 0 ; loc0 < arg0 . length ; loc0 ++ ) { if ( arg1 . equals ( arg0 [ loc0 ] . getType ( ) ) ) { return arg0 ; } } return null ; }
Region function ( ) { return fTagPosition ; }
GenPolynomial < C > function ( final double arg0 , final double arg1 ) { return new ColorPolynomial < C > ( arg0 , arg1 ) ; }
void function ( ) { }
void function ( ImagePanel arg0 ) { window . removeImagePanel ( arg0 ) ; }
Block function ( String arg0 ) { return paths ( ) . get ( arg0 ) ; }
void function ( String arg0 , Object arg1 ) { if ( arg1 instanceof File ) { writeParameter ( arg0 , arg1 ) ; } else { writeParameter ( arg0 , arg1 . toString ( ) ) ; } }
Object function ( Class < ? > arg0 , Class < ? > [ ] arg1 , Map < String , ExceptionReader > arg2 , ExceptionReader arg3 ) { ExceptionReader loc0 = exceptionMap . get ( arg0 ) ; if ( loc0 == null ) { loc0 = new ExceptionReader ( ) ; exceptionMap . put ( arg0 , loc0 ) ; } return loc0 . read ( arg0 , arg1 , arg2 , arg3 ) ; }
void function ( ) { String loc0 = "srini_string" ; try { dao . deleteCustomer ( loc0 ) ; } catch ( Exception loc1 ) { fail ( loc1 . getMessage ( ) ) ; } }
boolean function ( ) { return valid ; }
List < String > function ( List < String > arg0 , String arg1 ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( String loc1 : arg0 ) { if ( loc1 . startsWith ( arg1 ) ) loc0 . add ( loc1 ) ; } return loc0 ; }
AlgebraicNumber < C > function ( Reader arg0 ) { AlgebraicNumber < C > loc0 = new AlgebraicNumber < C > ( ) ; loc0 . parse ( arg0 ) ; return loc0 ; }
float function ( Element arg0 , String arg1 ) { return Float . parseFloat ( arg0 . getAttribute ( arg1 ) ) ; }
Sequence function ( ) { return run_cmd ( "srini_string" ) ; }
PartyIdentification32 function ( ) { return new PartyIdentification32 ( ) ; }
XMLParser function ( State arg0 ) { if ( arg0 == null ) { throw new NullPointerException ( "srini_string" ) ; } this . currentState = arg0 ; return this ; }
boolean function ( ) { return isField ; }
String function ( String arg0 ) { if ( StringUtils . hasText ( arg0 ) ) { return escapeExtraString ( arg0 ) ; } return arg0 ; }
String [ ] function ( ) { return keyAliases ; }
int function ( ) { return list . peek ( ) ; }
void function ( ) { synchronizerDelegate . start ( ) ; }
boolean function ( ) { return fEnabled ; }
Control function ( Composite arg0 , int arg1 , int arg2 ) { return createEmptySpace ( arg0 , arg1 , arg2 , 1 ) ; }
BigDecimal function ( int arg0 ) { if ( arg0 < 0 ) throw new IllegalArgumentException ( "srini_string" + arg0 + "srini_string" ) ; if ( arg0 == 0 ) return new BigDecimal ( 1 , BigDecimal . ROUND_HALF_UP ) ; else return new BigDecimal ( 1 , val . intValue ( ) ) ; }
void function ( final Map < String , Object > arg0 , final String arg1 , final Object arg2 ) { synchronized ( arg0 ) { add ( arg0 , arg1 , arg2 ) ; } }
void function ( TreeHandlerDelegator arg0 ) { this . treeHandlerDelegator = arg0 ; calculateResponsibilityInterval ( ) ; }
void function ( ) { if ( _selector != null ) { _selector . click ( ) ; } }
Type function ( ) { return superclass ; }
EnterpriseArchive function ( ) { return DEPENDENDEE ; }
void function ( Node arg0 , String arg1 ) { if ( this . index > 0 ) { DFS . serialize ( arg0 , arg1 ) ; } }
ClassLoader function ( ) { ClassLoader loc0 = Thread . currentThread ( ) . getContextClassLoader ( ) ; if ( loc0 == null ) { loc0 = ClassLoader . getSystemClassLoader ( ) ; } return loc0 ; }
void function ( Collection < Writable > arg0 ) { synchronized ( queue ) { queue . addAll ( arg0 ) ; } }
GenVector < C > function ( int arg0 ) { return random . nextInt ( arg0 ) ; }
int function ( ) { return marcador ; }
MathUtil function ( ) { return instance ; }
void function ( ) { tx . start ( ) ; }
Change function ( Change arg0 , ClasspathFixProposal [ ] arg1 ) { ClasspathFixProposal loc0 = new ClasspathFixProposal [ arg1 . length ] ; System . arraycopy ( arg1 , 0 , loc0 , 0 , arg1 . length ) ; return arg0 ; }
void function ( Interpolator arg0 ) { if ( ! isAnimating ) { FacesContext . getCurrentInstance ( ) . getExternalContext ( ) . getRequestMap ( ) . put ( "srini_string" , arg0 ) ; }
int function ( ) { return entry . getKey ( ) ; }
int function ( ) { return index ; }
Map < K , V > function ( final String arg0 , final Map < K , V > arg1 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } if ( arg1 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } return parseKeyValueMap ( arg0 , arg1 , DEFAULT_KEY_AND_VALUE_PAIR_SEPARATOR ) ; }
StringBuilder function ( StringBuilder arg0 , char arg1 , char arg2 ) { arg0 . append ( arg1 ) ; arg0 . append ( arg2 ) ; return arg0 ; }
void function ( ) { probes = false ; }
Map < String , ArrayList < String >> function ( ) { return values ; }
ArrayList < String > function ( ) { return getVariables ( ) ; }
String function ( String arg0 ) { int loc0 = arg0 . length ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( ! isValidBase64Byte ( arg0 . charAt ( loc1 ) ) ) { arg0 = arg0 . replace ( arg0 . charAt ( loc1 ) , '_' ) ; } } return arg0 ; }
void function ( ) { synchronized ( globalMutex ) { currentReaderCount = 0 ; } }
void function ( float arg0 ) { this . offset = arg0 ; }
boolean function ( ) { return false ; }
Dialog function ( ) { return createRefactoringStatusDialog ( SWT . NONE ) ; }
String function ( ) { return "srini_string" ; }
DocumentWrapper function ( DocumentWrapper arg0 ) { DocumentWrapper loc0 = ( DocumentWrapper ) arg0 . clone ( ) ; loc0 . setRowId ( arg0 . getRowId ( ) ) ; return loc0 ; }
T function ( Class < T > arg0 ) { return ( T ) new ConstructorDescriptor ( arg0 ) . newInstance ( ) ; }
boolean function ( String arg0 ) { if ( ( viewerPreferences != null ) && ( viewerPreferencesMask != 0 ) ) return ( viewerPreferences . containsKey ( arg0 ) ) ; return false ; }
Local < C > function ( String arg0 ) { return parse ( arg0 , null ) ; }
SortedBag < T > function ( final SortedBag < T > arg0 ) { Validate . notNull ( arg0 , "srini_string" ) ; return new TypeSafeSortedBag < T > ( arg0 ) ; }
boolean function ( ) { return enabledMetrics != null && ! enabledMetrics . isEmpty ( ) ; }
void function ( GUIRunner arg0 ) { this . runner = arg0 ; }
ISDVInfo function ( ) { return new ISDVInfo ( ) ; }
void function ( ) { collectData ( m_trace ) ; }
Icon function ( String arg0 , String arg1 ) { return getIcon ( arg0 , arg1 , null ) ; }
void function ( OutputStream arg0 ) { try { if ( executionData != null ) { arg0 . write ( executionData . serialize ( ) ) ; } } finally { arg0 . close ( ) ; } }
Residue < C > function ( ) { return new Residue < C > ( val , isunit ) ; }
byte [ ] function ( ) { return byteArray ; }
void function ( int arg0 ) { balance -= arg0 ; }
Dialog function ( ) { return createRefactoringStatusDialog ( SWT . NONE ) ; }
boolean function ( ) { return useThetaStyle ; }
void function ( Phrase arg0 , Phrase arg1 ) { if ( reader != null ) { reader . read ( arg0 , arg1 ) ; } }
boolean function ( ) { return id != null ; }
DateTime function ( ) { return ( DateTime ) toMutableDateTime ( ) . withZone ( getZone ( ) ) ; }
C function ( C arg0 ) { return Math . sqrt ( Math . pow ( arg0 . num , 2 ) ) ; }
boolean function ( Object arg0 , Object arg1 ) { return ( arg0 == null ) || ( arg1 == null ) ; }
Limit function ( ) { return new Limit ( ) ; }
IHoverInfo function ( @ Nonnull final String arg0 , @ Nonnull final IHoverInfo arg1 ) { return new WidgetHoverInfo ( arg0 , arg1 ) ; }
int function ( ) { return ( int ) Math . round ( x ; }
boolean function ( Block arg0 ) { if ( arg0 . y + Block . HEIGHT > y ) { if ( arg0 . x + Block . WIDTH == x ) { return true ; } } return false ; }
void function ( String arg0 ) { rowData = arg0 ; }
int function ( ) { return previous ; }
void function ( ) { Assert . assertTrue ( "srini_string" , slsb . isInjected ( ) ) ; }
Iterator < Float > function ( FloatIterator arg0 ) { if ( arg0 == null ) { return null ; } else { return arg0 . iterator ( ) ; } }
void function ( TokenProvider arg0 ) { this . tokenProvider = arg0 ; }
Header function ( ) { return myHeader ; }
int function ( ) { return tagNo ; }
byte [ ] function ( byte [ ] arg0 ) { byte [ ] loc0 = new byte [ arg0 . length ] ; System . arraycopy ( arg0 , 0 , loc0 , 0 , arg0 . length ) ; return loc0 ; }
Iterator < D > function ( ) { return Collections . unmodifiableList ( data ) . iterator ( ) ; }
void function ( Composite arg0 , ImageDescriptor arg1 , boolean arg2 ) { fComposite = arg0 ; fClearButton = arg1 ; updateClearButtonVisibility ( ) ; if ( fgUseNativeSearchField ) { fClearButton . setFilter ( arg2 ) ; } else { fClearButton . setFilter ( fgDisabledClearIconDescriptor ) ; } }
JoinSequence function ( SessionFactoryImplementor arg0 , AssociationType arg1 , CollectionType arg2 , String arg3 , String [ ] arg4 ) { JoinSequence loc0 = createJoinSequence ( arg0 , arg1 , arg2 , arg3 , arg4 ) ; loc0 . setUseThetaStyle ( true ) ; return loc0 ; }
void function ( @ ArquillianResource ( TxControlServlet . class ) URL arg0 ) { testURL ( arg0 , null ) ; }
void function ( String [ ] arg0 ) { Shells . run ( Shells . getApplication ( ) , arg0 ) ; }
Exception function ( ) { return error ; }
void function ( int arg0 ) { this . conditionVarition = arg0 ; }
byte [ ] function ( final Bitmap arg0 , final int arg1 ) { return BitmapFactory . decodeByteArray ( arg0 . getByteArray ( ) , arg1 ) ; }
void function ( Closable arg0 ) { try { if ( arg0 != null ) { arg0 . close ( ) ; } } catch ( IOException loc0 ) { } }
void function ( boolean arg0 , String arg1 ) { if ( arg0 ) { throw new IllegalArgumentException ( arg1 + "srini_string" ) ; } }
Residue < C > function ( Reader arg0 ) { try { return parse ( arg0 , isField ) ; } catch ( Exception loc0 ) { return null ; } }
float function ( ) { return rise ; }
byte [ ] function ( String arg0 ) { return StringUtils . getBytesUnchecked ( arg0 , CharEncoding . UTF_16 ) ; }
void function ( ) { for ( int loc0 = 0 ; loc0 < grid . length ; loc0 ++ ) { for ( int loc1 = 0 ; loc1 < grid [ 0 ] . length ; loc1 ++ ) { grid [ loc0 ] [ loc1 ] = 0 ; } } }
Student function ( String arg0 ) { return readStudent ( new FileInputStream ( arg0 ) ) ; }
int function ( ) { return this . state ; }
void function ( boolean arg0 ) { this . payloadSizeEstimatedWhenAdding = arg0 ; }
void function ( List < Integer > arg0 ) { takeLock . lock ( ) ; try { notEmpty . put ( arg0 ) ; } finally { takeLock . unlock ( ) ; } }
long [ ] function ( ) { return _list . toArray ( ) ; }
int function ( ) { return type ; }
void function ( IStyleSheet arg0 , Tag arg1 ) { prepareTag ( arg0 , arg1 , true ) ; }
boolean function ( C arg0 ) { return arg0 . num == 1 ; }
String function ( File arg0 ) { try { return IOUtils . toString ( new FileInputStream ( arg0 ) ) ; } catch ( IOException loc0 ) { throw new UnexpectedException ( loc0 ) ; } }
UUID function ( byte [ ] arg0 ) { if ( ! isPsshAtom ( arg0 ) ) { return null ; } String loc0 = new String ( arg0 , "srini_string" ) ; return UUID . fromString ( loc0 ) ; }
List function ( ) { return list ; }
void function ( Component arg0 ) { this . component = arg0 ; }
Pipeline < ? > function ( ) { return next ; }
String function ( ) { return "srini_string" + getVersionString ( ) ; }
PMML function ( InputStream arg0 ) { return new PMML ( arg0 ) ; }
int function ( ) { return classInfo . hashCode ( ) ; }
boolean function ( IProject arg0 ) { return _exists ; }
void function ( String arg0 ) { this . style = arg0 ; }
void function ( final HttpParams arg0 , final boolean arg1 ) { Args . notNull ( arg0 , "srini_string" ) ; arg0 . setBooleanParameter ( CoreConnectionPNames . SO_KEEPALIVE , arg1 ) ; }
void function ( int arg0 , int arg1 , int arg2 , int arg3 ) { Shark loc0 = new Shark ( ) ; loc0 . arg0 = arg0 ; loc0 . arg1 = arg1 ; loc0 . arg2 = arg2 ; loc0 . arg3 = arg3 ; gridData [ 0 ] [ 0 ] = loc0 ; }
Set < ResourceGroupEntity > function ( String arg0 ) { return resourceGroupService . findAllByResourceType ( arg0 ) ; }
void function ( ListElement arg0 ) { this . listElements . add ( arg0 ) ; }
SortedMap [ ] function ( ) { return columnNames ; }
void function ( Class < E > arg0 , Handler < E > arg1 ) { if ( arg0 == null ) { throw new NullPointerException ( "srini_string" ) ; } handlers . put ( arg0 , arg1 ) ; }
void function ( boolean arg0 ) { this . useCriterion4 = arg0 ; }
void function ( String arg0 ) { if ( arg0 != null ) { this . addAuthor ( new Creator ( arg0 ) ) ; } }
boolean function ( ) { boolean loc0 = true ; if ( _total == 0 ) { loc0 = false ; } return loc0 ; }
String function ( ) { if ( overwritingChildFunction == null ) { return "srini_string" ; } return "srini_string" + name + "srini_string" + id + "srini_string" + resourceType ; }
Identifier function ( Object arg0 , String arg1 ) { return new Identifier ( determineCollectionTableName ( arg0 ) , determinePrimaryTableName ( arg0 ) , determineJoinTableName ( arg0 ) , determineIdentityColumnName ( arg0 ) , determineListIndexColumnName ( arg0 ) ) ; }
void function ( ) { if ( sClipboardQueue != null ) { sClipboardQueue . clear ( ) ; } }
String function ( ) { return values . toString ( ) ; }
ITypeHierarchy function ( IType arg0 ) { return findTypeHierarchyInCache ( arg0 ) ; }
void function ( ) { fIsHashCached = false ; }
double function ( ListNode arg0 , ListNode arg1 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 . size ( ) ; loc1 ++ ) { loc0 += arg0 . get ( loc1 ) . getValue ( ) ; } return loc0 ; }
void function ( ) { Display loc0 = Display . getCurrent ( ) ; if ( loc0 != null ) { loc0 . syncExec ( ) ; } }
void function ( double arg0 , double arg1 , double arg2 ) { if ( arg0 < arg1 ) { throw new IllegalArgumentException ( "srini_string" ) ; } if ( arg0 > arg2 ) { throw new IllegalArgumentException ( "srini_string" ) ; } this . leftBound = arg0 ; this . rightBound = arg1 ; this . isDirty = true ; }
List < Tag > function ( Tag arg0 ) { List < Tag > loc0 = new ArrayList < Tag > ( ) ; while ( arg0 != null ) { if ( arg0 . getParent ( ) != null ) { loc0 . add ( arg0 . getParent ( ) ) ; } arg0 = arg0 . getParent ( ) ; } return loc0 ; }
boolean function ( ) { return li . getClass ( ) == OrderedUnorderedListItem . class ; }
void function ( Collection < ? > arg0 , String arg1 ) { assertContainsOnly ( arg0 , arg1 ) ; }
String function ( String arg0 , int arg1 ) { return getMessages ( ) . get ( arg0 ) . get ( arg1 ) ; }
int function ( ASTNode arg0 ) { if ( fStart == fExclusiveEnd ) { return INTERSECTS ; } else { return fStart ; } }
void function ( ) { started_ = true ; }
IJavaSearchScope function ( IJavaScriptElement arg0 ) { return RefactoringScopeFactory . create ( arg0 , true ) ; }
Object function ( BigInteger arg0 ) { TransactionalState loc0 = _curr . get ( arg0 ) ; if ( loc0 != null ) return loc0 . getState ( ) ; else return null ; }
Response function ( final String arg0 , final Map < String , String > arg1 ) { final HttpGet loc0 = new HttpGet ( getURI ( arg0 ) + "srini_string" + arg1 . get ( IF_NONE_MATCH ) ) ; return mapper . readValue ( loc0 . getBody ( ) , Response . class ) ; }
void function ( ) { TopLevelBean loc0 = lookup ( "srini_string" , TopLevelBean . class ) ; loc0 . induceCreationViaJNDILookup ( ) ; }
void function ( String arg0 ) { try { delete ( arg0 ) ; } catch ( JSONException loc0 ) { loc0 . printStackTrace ( ) ; } }
String function ( ) { return id ; }
long function ( ) { return allocationLimit . get ( ) ; }
int function ( ) { return hops ; }
ColumnFileMetaData function ( ) { return metaData ; }
Residue < C > function ( ) { return new Residue < C > ( val , isunit ) ; }
String function ( ) { return baseID ; }
Set < Asset > function ( Set < Asset > arg0 ) { Set < Asset > loc0 = new HashSet < > ( ) ; for ( Asset loc1 : arg0 ) { if ( loc1 . isVendor ( ) ) { loc0 . add ( loc1 ) ; } } return loc0 ; }
String function ( ) { return catalogKey ; }
RDD < MatchableEntity > function ( JavaRDD < String > arg0 ) { return arg0 . map ( new Function < String , MatchableEntity > ( ) { @ Override public MatchableEntity apply ( String arg1 ) { return MatchableEntity . fromString ( arg1 ) ; } } ) ; }
void function ( Figure arg0 ) { _message . removeObserver ( arg0 ) ; }
IntListIterator function ( ListIterator arg0 ) { return new IntListIterator ( arg0 ) ; }
Closure function ( Closure arg0 ) { return new Closure ( ) { @ Override public Object invoke ( Closure arg1 ) { return arg0 . call ( arg1 ) ; } } ; }
int function ( ) { return val . size ( ) ; }
boolean function ( final HttpServerExchange arg0 , final Date arg1 ) { return isResponseFresh ( arg0 , arg1 ) ; }
InputStream function ( InputStream arg0 , byte [ ] arg1 , int arg2 , int arg3 ) { return new ByteArrayInputStream ( arg1 , arg2 , arg3 ) ; }
boolean function ( ) { return instantiated ; }
List < Integer > function ( ) { checkConfigure ( ) ; return keyPopularity ; }
Hessian2Deserializer < Hessian2Input , Hessian2Output > function ( boolean arg0 ) { return new Hessian2Deserializer < > ( arg0 , _serializerFactory , _defaultSerializerFactory ) ; }
WidgetReference < T > function ( T arg0 ) { adapters . put ( arg0 . getClass ( ) , arg0 ) ; return this ; }
void function ( double arg0 ) { if ( arg0 <= 0 ) { this . numHosts = 1 ; } else { this . numHosts = arg0 ; } }
Record function ( String arg0 , Record arg1 ) { if ( arg1 == null ) { arg1 = new Record ( ) ; } arg1 . setID ( arg0 ) ; return arg1 ; }
void function ( Object arg0 ) { if ( is12 ) { getLogger ( ) . log ( FQCN , ( Priority ) Level . TRACE , arg0 , null ) ; } else { getLogger ( ) . log ( FQCN , Level . DEBUG , arg0 , null ) ; } }
int function ( ) { int loc0 = 0 ; for ( int loc1 = langTable . length - 1 ; loc1 >= 0 ; loc1 -- ) { if ( ( ( char ) langTable [ loc1 ] ) == 'A' || ( ( char ) langTable [ loc1 ] ) == 'E' || ( ( char ) langTable [ loc1 ] ) == 'I' || ( ( char ) langTable [ loc1 ] ) == 'O' ) ) { loc0 ++ ; } } return loc0 ; }
void function ( String arg0 ) { this . fileName = arg0 ; }
Throwable function ( ) { return state . get ( ) ; }
boolean function ( T arg0 ) { return arg0 . touch ( ) ; }
List < Tag > function ( String arg0 ) { List < Tag > loc0 = new ArrayList < Tag > ( ) ; for ( Tag loc1 : this . getParentTree ( ) ) { if ( arg0 . equals ( loc1 . getTagName ( ) ) ) { loc0 . add ( loc1 ) ; } } return loc0 ; }
void function ( ) { Assert . assertTrue ( "srini_string" , this . slsb . isValidatorInBean ( ) ) ; Assert . assertTrue ( "srini_string" , this . slsb . isValidatorInBean ( "srini_string" ) ) ; }
Collection function ( ) { return bag ; }
double function ( ) { return accounts . length ; }
void function ( String arg0 ) { StringTokenizer loc0 = new StringTokenizer ( arg0 , "srini_string" ) ; }
void function ( int arg0 , KeyEvent arg1 ) { doKeyDown ( arg0 , arg1 ) ; }
Result function ( Closure arg0 ) { return transform ( arg0 , true ) ; }
int function ( ) { return coveredBranches ; }
AlgebraicNumber < C > function ( ) { return new AlgebraicNumber < C > ( this ) ; }
T function ( ) { T loc0 = extractMin ( 0 ) ; return loc0 ; }
void function ( final ClassContainer < ? > arg0 ) { arg0 . addClass ( XACMLSecurityPolicies . class ) ; }
LinearLayout function ( String arg0 ) { LinearLayoutBuilder loc0 = new LinearLayoutBuilder ( ) ; String loc1 = "srini_string" + arg0 + "srini_string" ; return new LinearLayout ( loc0 , loc1 ) ; }
MessageSource function ( ) { return messageSourceMock ; }
boolean function ( String arg0 , Object arg1 ) { return ( _register . containsKey ( arg0 ) ) ; }
Integer function ( ) { return precision ; }
void function ( String arg0 , String arg1 ) { Assert . assertEquals ( arg0 , arg1 ) ; }
void function ( Color arg0 ) { color = arg0 ; Canvas . getInstance ( ) . repaint ( ) ; }
List < PropertyDeclaration > function ( ) { if ( properties == null ) { properties = new ArrayList < PropertyDeclaration > ( ) ; } return this . properties ; }
void function ( org . omg . CORBA . TypeCode arg0 ) { writeSimpleType ( arg0 ) ; }
String function ( ) { return baseZNode + IDENTITIES_ZNODE_NAME ; }
void function ( KeyStore arg0 , String arg1 ) { rethrowIfNeeded ( arg0 , arg1 , false ) ; }
CQLStatementTupleMapper function ( Tuple arg0 , FieldSelector arg1 ) { return CQLMapper . DefaultCqlMapper . forField ( arg0 , arg1 ) ; }
byte function ( int arg0 ) { if ( arg0 < 0 || arg0 >= size ( ) ) throw new IndexOutOfBoundsException ( "srini_string" + arg0 + "srini_string" + size ( ) ) ; return list . getByte ( arg0 ) ; }
void function ( ) { doreupdate = true ; snapshot = null ; }
void function ( ) { existingCustomer . delete ( ) ; new Customer ( existingCustomer ) ; }
boolean function ( ) { return percentage ; }
boolean function ( ) { return getImplementation ( ) . isConnectedToSession ( ) ; }
WidgetLocatorLocator < T > function ( T arg0 ) { return new WidgetLocator < T > ( arg0 ) ; }
List < Integer > function ( MVariable arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( MStatement loc1 : statements ) { if ( loc1 . getStatementID ( ) == arg0 ) { loc0 . add ( loc1 . getStatementID ( ) ) ; } } return loc0 ; }
String function ( ) { return ( this . body . evaluate ( ) ) ; }
void function ( ) { initialContext . doSetup ( ) ; }
void function ( ) { local_var_descr = null ; }
TemplateDocument function ( ) { return updateBuffer ( true ) ; }
void function ( IResource arg0 , IResource arg1 ) { String loc0 = arg0 . getName ( ) ; String loc1 = arg1 . getName ( ) ; if ( loc0 == null || loc1 == null ) { return ; } if ( loc0 . endsWith ( CVSFILTER . EXCLUDE_SUFFIX ) ) { loc1 = loc0 . substring ( 0 , loc0 . length ( ) - CVSFILTER . EXCLUDE_SUFFIX . length ( ) ) ; } if ( loc1 . endsWith ( CVSFILTER . EXCLUDE_PREFIX ) ) { loc1 = loc0 . substring ( 0 , loc0 . length ( ) - CVSFILTER . EXCLUDE_PREFIX . length (
Rectangle2D function ( ) { return new Rectangle2D . Float ( startPoint . x , startPoint . y , endPoint . x , endPoint . y ) ; }
void function ( ) { final File loc0 = new File ( this . testFolder . getRoot ( ) , "srini_string" ) ; assertFalse ( loc0 . exists ( ) ) ; }
Context function ( ) { return new Context ( ) ; }
ASN1 function ( byte [ ] arg0 ) { return decode ( arg0 ) ; }
Duration function ( Timestamp arg0 , Duration arg1 ) { return Durations . ceiling ( arg1 . getValue ( ) , arg0 ) ; }
void function ( int arg0 , String arg1 ) { weights . put ( arg0 , arg1 ) ; }
Object function ( ) { return debug ; }
ContextEntity function ( ContextEntity arg0 ) { if ( arg0 == null ) { return globalContext ; } return arg0 ; }
String function ( ) { return classInfo . name ; }
byte [ ] function ( ) { return Arrays . copyOfRange ( consumedData , consumedLength , consumedLength ) ; }
int function ( ) { return ( this . instance != null ? this . instance . hashCode ( ) : 0 ) ; }
Token [ ] function ( ) { return new Token [ ] { getIssuedTokens ( ) } ; }
void function ( boolean arg0 ) { fStatementsRecovery = arg0 ; }
boolean function ( final GenPolynomial < C > arg0 ) { return equals ( arg0 . getPolynomial ( ) ) ; }
Set function ( ) { return composites ; }
void function ( ) { _maxSize = _size ; _free = 0 ; }
void function ( String arg0 , Throwable arg1 ) { invalidScriptError = arg1 ; }
void function ( final String arg0 , final File arg1 ) { BufferedWriter loc0 = null ; try { loc0 = new BufferedWriter ( new FileWriter ( arg1 ) ) ; loc0 . write ( arg0 ) ; loc0 . close ( ) ; } finally { if ( loc0 != null ) loc0 . close ( ) ; } }
boolean function ( Object arg0 ) { if ( arg0 == this ) return true ; if ( ! ( arg0 instanceof BigDecimal ) ) return false ; BigDecimal loc0 = ( BigDecimal ) arg0 ; if ( loc0 . signum ( ) != 0 ) return false ; return loc0 . equals ( val ) ; }
int function ( ) { return stack . size ( ) ; }
boolean function ( ) { return type ( ) . equals ( Type . VIRTUAL ) ; }
ResourceEditPropertyBuilder function ( String arg0 ) { this . fcExternalLink = arg0 ; return this ; }
boolean function ( ) { return isKeyOptional ; }
SourceViewer function ( ) { return fSourceViewer ; }
List < List < VectorXZ >> function ( Collection < Triangle > arg0 , Material arg1 , Collection < VectorXZ > arg2 , boolean arg3 ) { return getCoordLists ( arg0 , arg1 , arg2 , arg3 , null ) ; }
void function ( User arg0 , User arg1 ) { if ( arg1 != null ) { verifyEditableByOwner ( arg0 ) ; } }
ArrayList < T > function ( Enumeration < T > arg0 ) { return new ArrayList < T > ( ) ; }
int function ( ) { return size ; }
int function ( ) { return getKdcTcpPort ( ) ; }
boolean function ( ) { return false ; }
void function ( final Script arg0 ) { final Script loc0 = getScriptList ( ) . remove ( arg0 ) ; if ( loc0 == null ) { return ; } trimWhitespace ( loc0 ) ; }
void function ( ) { if ( buffer != null ) buffer . clear ( ) ; }
ShortListIterator function ( ShortListIterator arg0 ) { return arg0 == null ? EMPTY_SHORT_LIST_ITERATOR : arg0 ; }
void function ( String arg0 , PrintStream arg1 ) { singleton = new FileLoggerModule ( arg0 , arg1 ) ; }
boolean function ( double arg0 , double arg1 ) { return ! isElemMatch ( arg0 , arg1 ) ; }
String function ( ) { return name ; }
ClassLoader function ( ) { return ( getCommand ( ) . getClassLoader ( ) ) ; }
C function ( int arg0 ) { return abs ( arg0 ) ; }
boolean function ( ) { return false ; }
T function ( Collection < T > arg0 ) { if ( arg0 . isEmpty ( ) ) { return null ; } return arg0 . iterator ( ) . next ( ) ; }
boolean function ( ) { return _freeStack . get ( ) != null ; }
HazelcastInstance function ( String arg0 ) { return hazelcastInstance . createClientTopology ( arg0 , CLUSTER_HOST , CLUSTER_PORT ) ; }
Object function ( final Object arg0 , final Class < ? > arg1 ) { if ( arg0 == null ) { throw new NullPointerException ( ) ; } try { return arg0 . cast ( arg1 ) ; } catch ( ClassCastException loc0 ) { throw new IllegalArgumentException ( loc0 ) ; } }
void function ( File arg0 ) { if ( arg0 . isDirectory ( ) ) { deleteOrThrow ( arg0 ) ; } else { arg0 . delete ( ) ; } }
void function ( ) { if ( running ) { synchronized ( monitor ) { running = false ; monitor . notifyAll ( ) ; } } }
HashCodeBuilder function ( float arg0 ) { return append ( iConstant ) ; }
void function ( Integer arg0 ) { this . deptId = arg0 ; }
ContextQuery function ( String arg0 ) { return namedByField ( arg0 , CellName . query ( ) ) ; }
void function ( ) { Assert . notNull ( po , "srini_string" ) ; Assert . notNull ( lst , "srini_string" ) ; }
void function ( ) { cache . clear ( ) ; }
K function ( Comparator < K > arg0 ) { if ( kSmallest == null ) { kSmallest = arg0 . get ( ) ; } return kSmallest ; }
void function ( GridBagConstraints arg0 ) { this . constraints = arg0 ; }
double function ( Peer arg0 ) { double loc0 = 0 ; for ( MetricsAggregate loc1 : peerVariation . getMetrics ( ) ) { loc0 += loc1 . getCapacity ( arg0 ) ; } return loc0 ; }
int function ( Object arg0 ) { if ( arg0 instanceof Residue < C > ) { Residue < C > loc0 = ( Residue < C > ) arg0 ; return isField ? ( modul . compareTo ( loc0 . getModul ( ) ) < 0 ? 0 : - 1 ) : ( modul . compareTo ( loc0 . getModul ( ) ) > 0 ? 1 : - 1 ) ; } else { return super . compareTo ( arg0 ) ; } }
boolean function ( String arg0 , char arg1 ) { return convertToUtf32 ( arg0 ) >= convertToUtf32 ( arg1 ) ; }
void function ( String arg0 ) { this . outOfServiceByRelease = arg0 ; }
LoadPlan function ( Partition arg0 , String arg1 ) { LoadPlan loc0 = buildRootCollectionLoadPlan ( arg0 , arg1 ) ; return loc0 ; }
Exception function ( Object arg0 , Object ... arg1 ) { return insert ( arg0 , null , arg1 ) ; }
BigDecimal function ( BigDecimal arg0 ) { if ( arg0 == null ) return null ; return new BigDecimal ( arg0 . copy ( ) ) ; }
int function ( ) { return iterationCount ; }
void function ( WidgetLocator arg0 ) { _parentInfo = arg0 ; }
void function ( ) { list . clear ( ) ; }
void function ( ) { checkLoopback ( ) ; delegate . writeLock ( ) . lockInterruptibly ( ) ; }
void function ( RenderListener arg0 ) { if ( arg0 == null ) { throw new NullPointerException ( "srini_string" ) ; } this . delegate . onRender ( arg0 ) ; }
void function ( final NumberTransformer arg0 ) { this . map . remove ( arg0 . getClass ( ) ) ; }
TabularData function ( ) { return new CompositeDataSupport ( TABULAR_TYPE ) ; }
int function ( int arg0 ) { synchronized ( eventPool ) { return eventPool . get ( arg0 ) ; } }
List function ( String arg0 ) { List loc0 = new ArrayList ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0 , _delimeter ) ; while ( loc1 . hasMoreTokens ( ) ) { loc0 . add ( loc1 . nextToken ( ) ) ; } return loc0 ; }
VectorXZ function ( ) { return direction ; }
ArrayList < GenPolynomial < C >> function ( ) { return P ; }
void function ( EnumSet < BufferFlag > arg0 ) { for ( BufferFlag loc0 : arg0 ) { setFlagsTo ( loc0 ) ; } }
boolean function ( T arg0 , String arg1 ) { return containsIdentical ( arg0 , arg1 ) ; }
UnivPowerSeries < C > function ( BigInteger arg0 ) { return java . math . BigDecimal . valueOf ( arg0 ) ; }
void function ( Change arg0 ) { fParent = arg0 ; }
int function ( ) { return yPosition - frames_ . size ( ) / 2 ; }
PdfDictionary function ( ) { return imageObject ; }
void function ( Object arg0 ) { removeCallback ( incallbacks , arg0 ) ; }
void function ( ) { if ( mShouldDispatchChanges ) { mMenu . stop ( ) ; mShouldDispatchChanges = false ; } }
void function ( boolean arg0 ) { m_isMajorTick = arg0 ; }
String function ( int arg0 ) { String loc0 = "srini_string" ; if ( arg0 < 5 ) { loc0 += "srini_string" + trimMenuText ( arg0 ) + "srini_string" ; } else { loc0 += "srini_string" ; } return loc0 ; }
boolean function ( ) { return _hierarchy . isSubmenu ( ) ; }
ConditionMonitor function ( ) { return INSTANCE ; }
void function ( Object arg0 , Object arg1 , Object arg2 ) { GroovyMethods . setProperty ( arg0 , arg1 , arg2 ) ; }
LinkedList < MetricsSubCoordinatorInfo > function ( ) { return listOfSubCoordinators ; }
boolean function ( Object arg0 , Object arg1 ) { if ( arg0 == null ) { return arg1 == null ; } if ( arg1 == null ) { return arg0 == null ; } return arg0 . equals ( arg1 ) ; }
Duration function ( int arg0 ) { return new Duration ( value , windowConfiguration . get ( "srini_string" ) ) ; }
void function ( ) { SecurityConfiguration . getApplicationPolicy ( "srini_string" ) ; }
Map < String , String > function ( ) { return parasMap ; }
boolean function ( ResourceEntity arg0 , ResourceEntity arg1 ) { return ! isBestMatchingFutureReleaseTime ( arg0 , arg1 ) ; }
Owner function ( ) { return owner ; }
String function ( ) { return this . hostname ; }
void function ( String arg0 ) { add_implied_vis ( arg0 ) ; }
TLinkable function ( ) { return _next ; }
int function ( ) { return leased ; }
List < String > function ( ) { if ( tags == null ) { tags = new ArrayList < String > ( ) ; } return this . tags ; }
void function ( PdfReader arg0 , PdfWriter arg1 ) { fc . addDocument ( arg0 , arg1 ) ; }
int function ( ) { return ( int ) ( 31 * val . hashCode ( ) ) ; }
void function ( File arg0 ) { try ( InputStream loc0 = new FileInputStream ( arg0 ) ) { configuration . parse ( loc0 ) ; } }
Message function ( ) { try { blkQueue . take ( ) ; } catch ( InterruptedException loc0 ) { LOGGER . debug ( "srini_string" , loc0 ) ; return null ; } return blkQueue . poll ( ) ; }
List < ColumnMetaData > function ( ) { return columns ; }
VectorXYZ function ( final double arg0 , final double arg1 , final double arg2 , final double arg3 ) { return rotateX ( arg0 , arg1 , arg2 , arg3 ) ; }
void function ( ) { while ( true ) { JsonToken loc0 = reader . readToken ( ) ; if ( loc0 == JsonToken . COMMENT ) { break ; } } }
void function ( Long arg0 ) { this . endIp = arg0 ; }
List < EntityAndPendingNotifications < BE , ? >> function ( ) { return this . sentNotifications ; }
List < WPTreeNode > function ( ) { return children ; }
boolean function ( int arg0 ) { return ind_var . containsKey ( arg0 ) ; }
int function ( ) { return i_initialSize ; }
void function ( ) { _runningTest = null ; }
boolean function ( ) { return false ; }
void function ( ) { started = true ; }
int function ( ) { return size ; }
boolean function ( ) { if ( locator == null ) { return true ; } return locator . isShowing ( ) ; }
void function ( String arg0 ) { addWhereWithParams ( arg0 ) ; }
GenVector < C > function ( GenVector < C > arg0 ) { if ( val . isEmpty ( ) ) { return arg0 ; } else { GenVector < C > loc0 = new GenVector < C > ( val . size ( ) ) ; for ( C loc1 : val ) { loc0 . add ( loc1 ) ; } return loc0 ; } }
String [ ] function ( File arg0 ) { return new String [ ] { arg0 . getAbsolutePath ( ) . toString ( ) } ; }
boolean function ( String arg0 ) { throw new UnsupportedOperationException ( "srini_string" ) ; }
BigInteger function ( ) { return bigInt ; }
BigInteger function ( ) { return BigInteger . ONE ; }
void function ( ) { while ( ppt_all_iterator . hasNext ( ) ) { String loc0 = ppt_all_iterator . next ( ) ; String loc1 = loc0 . trim ( ) ; if ( loc1 . length ( ) > 0 ) { loc1 = loc1 . substring ( 1 , loc1 . length ( ) - 1 ) ; } ppt_all_iterator . remove ( ) ; } }
BigDecimal function ( java . io . Reader arg0 ) { return MoneyUtils . parse ( arg0 , this . context ) ; }
void function ( ) { if ( isAnimated ( ) ) { isAnimated ( ) ( ) ; } }
List function ( String arg0 ) { List loc0 = new ArrayList ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0 , _delimeter ) ; while ( loc1 . hasMoreTokens ( ) ) { loc0 . add ( loc1 . nextToken ( ) ) ; } return loc0 ; }
void function ( ) { MBeanServer loc0 = MBeanServerLocator . getMBeanServer ( ) ; ObjectName loc1 = loc0 . createObjectName ( JMX_NAME ) ; loc0 . unregisterMBean ( loc1 ) ; }
boolean function ( String arg0 ) { int loc0 = arg0 . length ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( Character . isDigit ( arg0 . charAt ( loc1 ) ) ) { return false ; } } return true ; }
void function ( int arg0 ) { int loc0 = binarySearch ( arg0 ) ; if ( loc0 < 0 ) { throw new ArrayIndexOutOfBoundsException ( "srini_string" + arg0 + "srini_string" + mGarbage ) ; } mData [ loc0 ] = DELETED ; mFieldNumbers [ loc0 ] = 0 ; }
byte [ ] function ( ) { return data ; }
boolean function ( Sequence arg0 , Sequence arg1 ) { return Sets . difference ( Sets . newHashSet ( arg0 ) , Sets . newHashSet ( arg1 ) ) . equals ( Sets . newHashSet ( arg0 ) ) ; }
boolean function ( ) { return bugList . size ( ) == 1 ; }
boolean function ( ) { return true ; }
HttpRequestHandler function ( final String arg0 ) { return this . matcher . get ( getRequestPath ( arg0 ) ) ; }
Iterable4 function ( Iterable4 arg0 ) { return new Iterable4 ( arg0 ) ; }
void function ( Lockscope arg0 ) { this . lockscope = arg0 ; }
RatNum function ( String arg0 ) { return new RatNum ( arg0 , arg0 ) ; }
int function ( Object arg0 , Object arg1 ) { return compareCharacter ( ( CharSequence ) arg0 , ( CharSequence ) arg1 ) ; }
void function ( int arg0 ) { this . n = arg0 ; }
void function ( String arg0 ) { this . links . add ( arg0 ) ; }
Getcontenttype function ( ) { return getcontenttype ; }
String function ( ) { return m_Language ; }
double function ( double arg0 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < MAX_ITER ; loc1 ++ ) { loc0 += Math . pow ( arg0 , loc1 ) ; } return loc0 ; }
void function ( Test arg0 ) { fTests . addElement ( arg0 ) ; }
Closure function ( Closure arg0 ) { for ( int loc0 = 0 ; loc0 < iClosures . length ; loc0 ++ ) { if ( iClosures [ loc0 ] . evaluate ( arg0 ) ) { return iClosures [ loc0 ] ; } } return arg0 ; }
Property < V > function ( Class < V > arg0 , String arg1 ) { try { return arg0 . getDeclaredMethod ( arg1 ) ; } catch ( NoSuchMethodException loc0 ) { return null ; } }
Throwable function ( ) { return this . cause ; }
String function ( Lang arg0 , List < String > arg1 ) { return getLanguage ( arg0 ) . get ( arg1 ) ; }
PdfDictionary function ( PdfDictionary arg0 ) { PdfDictionary loc0 = new PdfDictionary ( ) ; if ( views != null ) { loc0 . put ( "srini_string" , views ) ; } loc0 . put ( "srini_string" , "srini_string" ) ; return loc0 ; }
int function ( int arg0 ) { return arg0 & 0x7FFFFFFF ; }
void function ( List < E > arg0 , Transformer < E > arg1 ) { List < E > loc0 = new ArrayList < > ( ) ; for ( E loc1 : arg0 ) { loc0 . add ( arg1 . transform ( loc1 ) ) ; } arg0 . clear ( ) ; }
byte [ ] function ( ) { int loc0 = this . buf . length ; byte [ ] loc1 = new byte [ loc0 ] ; System . arraycopy ( this . buf , 0 , loc1 , 0 , loc0 ) ; return loc1 ; }
Builder function ( ) { return new Builder ( ) ; }
byte [ ] function ( ) { return data ; }
void function ( ) { files . clear ( ) ; }
String function ( ) { return cacheName ; }
GenMatrix < C > function ( final int arg0 , final int arg1 , final float arg2 ) { final GenMatrix < C > loc0 = getZero ( arg0 ) ; loc0 . density = arg2 ; return loc0 ; }
void function ( int arg0 ) { level = arg0 ; }
GenVector < C > function ( ) { return ZERO ; }
String function ( ) { return var ; }
ResourceEditPropertyBuilder function ( Integer arg0 ) { this . cardinalityProperty = arg0 ; return this ; }
ClassLoader function ( ) { ClassLoader loc0 = Thread . currentThread ( ) . getContextClassLoader ( ) ; if ( loc0 != null ) { return loc0 ; } return ClassLoader . getSystemClassLoader ( ) ; }
Object function ( ) { return map . get ( last . getKey ( ) ) ; }
void function ( ) { }
Predicate function ( final String arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } final Predicate [ ] loc0 = { iPredicates } ; return create ( loc0 ) ; }
String function ( long arg0 , String arg1 ) { return format ( arg0 , arg1 , null ) ; }
boolean function ( ) { return iterator . hasNext ( ) ; }
void function ( ) { final int loc0 = gui . getSelection ( ) . size ( ) ; gui . setSelection ( loc0 ) ; gui . repaint ( ) ; }
int function ( ) { return nLiveMethods ; }
void function ( Vector3f arg0 ) { y = arg0 . y ; z = arg0 . z ; }
void function ( String arg0 ) { this . clusterId = arg0 ; }
HandshakeMessage function ( ) { return new HandshakeMessage ( type , msg , peerId ) ; }
SummaryStatistics function ( ) { return new SummaryStatistics ( ) ; }
void function ( String [ ] arg0 ) { List < String > loc0 = new ArrayList < String > ( arg0 . length ) ; for ( int loc1 = 0 ; loc1 < arg0 . length ; loc1 ++ ) { loc0 . add ( arg0 [ loc1 ] ) ; } st . street ( loc0 ) ; }
Timer function ( int arg0 , int arg1 ) { Timer loc0 ; if ( isTimerRunning ) { loc0 = new Timer ( arg0 , arg1 ) ; } else { loc0 = new Timer ( arg0 , arg1 ) ; } theTimer = loc0 ; return loc0 ; }
void function ( ) { EventQueue . invokeLater ( new Runnable ( ) { public void run ( ) { try { _tableTester . reveal ( ) ; } catch ( Exception loc0 ) { loc0 . printStackTrace ( ) ; } } } ) ; }
String function ( ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( int loc1 = 0 ; loc1 < size ( ) ; loc1 ++ ) loc0 . append ( get ( loc1 ) ) ; return loc0 . toString ( ) ; }
String function ( char arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( int loc1 = 0 ; loc1 < arg0 . length ( ) ; loc1 ++ ) { char loc2 = arg0 . charAt ( loc1 ) ; if ( loc2 == ' ' ) { loc0 . append ( '|' ) ; } else { loc0 . append ( loc2 ) ; } } return loc0 . toString ( ) ; }
JPanel function ( ) { JPanel loc0 = new JPanel ( this ) ; for ( int loc1 = 0 ; loc1 < cellArray . length ; loc1 ++ ) { for ( int loc2 = 0 ; loc2 < cellArray [ 0 ] . length ; loc2 ++ ) { loc0 . add ( cellArray [ loc1 ] [ loc2 ] ) ; } } return loc0 ; }
String function ( String arg0 ) { return getEncoding ( arg0 , null ) ; }
Object function ( ) { if ( myList == null ) { throw new IndexOutOfBoundsException ( ) ; } return myList . item ; }
Map < Method , InterceptorFactory > function ( ) { return Collections . unmodifiableMap ( componentInterceptors ) ; }
T function ( Class < T > arg0 ) { return getMockWebServer ( ) . getPredefinedTarget ( arg0 ) ; }
Parser function ( Class arg0 , Parser arg1 ) { if ( parsers == null ) { parsers = new HashMap ( ) ; } return ( Parser ) parsers . get ( arg0 . getName ( ) ) ; }
Histogram < String , MetricsAggregate > function ( ) { return metricsHistory ; }
Label function ( ) { return defaultTarget ; }
boolean function ( String arg0 ) { if ( arg0 . startsWith ( "srini_string" ) ) { return true ; } return false ; }
void function ( ) { }
DoubleListIterator function ( DoubleIterator arg0 ) { return new DoubleListIterator ( arg0 ) ; }
Map < String , String > function ( ) { return descriptions ; }
HandlerMethodArgumentResolver function ( ) { return new HandlerMethodArgumentResolver ( ) ; }
void function ( Region arg0 ) { Assert . isNotNull ( arg0 ) ; fPosition = arg0 ; }
void function ( String [ ] arg0 ) { Shells . run ( Shells . getApplication ( ) , arg0 ) ; }
String function ( ) { return name ; }
IResource function ( IResource arg0 ) { return arg0 ; }
CssResolver function ( ) { if ( myself == null ) { myself = new CSSResolver ( ) ; } return myself ; }
StatementBuilder function ( ) { return builder . append ( "srini_string" ) ; }
BigInteger function ( ) { return new BigInteger ( java . math . random . nextInt ( ) . toString ( ) ) ; }
void function ( final T arg0 ) { processEvent ( arg0 , false ) ; }
int function ( int [ ] arg0 , int arg1 , int arg2 ) { for ( int loc0 = 0 ; loc0 < arg0 . length ; loc0 ++ ) { if ( ! isElemMatch ( arg0 [ loc0 ] , arg1 , arg2 ) ) { return loc0 ; } } return - 1 ; }
short function ( int arg0 ) { return ( short ) list . get ( arg0 ) ; }
Period function ( ) { return Period . standard ; }
boolean function ( ) { return fillInAllowed ; }
void function ( JdrReportCollector arg0 ) { JdrReportCollector . start ( ) ; }
Protocol function ( ) { return REMOTE ; }
void function ( ) { _buffer = null ; }
AST function ( AST arg0 , AST arg1 ) { arg0 . setFirstChild ( arg1 ) ; return arg0 ; }
double function ( int arg0 ) { return list . getQuick ( arg0 ) ; }
long function ( Runnable arg0 ) { return System . currentTimeMillis ( ) - start ; }
void function ( ) { started = true ; }
void function ( ) { if ( ! started ) { throw new IllegalStateException ( "srini_string" ) ; } started = false ; }
boolean function ( IConditionCheckResult arg0 ) { return true ; }
Image function ( ) { return image ; }
boolean function ( Quadrant arg0 , Graphics2D arg1 , Quadrant arg2 ) { if ( arg0 == null ) throw new NullPointerException ( "srini_string" ) ; if ( arg1 == null ) throw new NullPointerException ( "srini_string" ) ; if ( arg2 == null ) throw new NullPointerException ( "srini_string" ) ; return quadrant . adjacentTo ( arg0 , arg1 , arg2 ) ; }
boolean function ( ) { return false ; }
void function ( String arg0 ) { frame . setTitle ( arg0 ) ; }
Widget function ( Widget arg0 , Matcher < ? super Widget > arg1 ) { return ( Widget ) _searchScopeHelper . find ( arg0 , arg1 ) ; }
int function ( Canvid arg0 ) { int loc0 = 0 ; for ( String loc1 : VID ) { if ( loc1 . equals ( arg0 . getID ( ) ) ) loc0 ++ ; } return loc0 ; }
Local< C > function ( int arg0 , C arg1 ) { throw new RuntimeException ( "srini_string" ) ; }
int function ( ) { return ( ( e1 != null ) ? e1 . hashCode ( ) : 0 ) ; }
Text function ( ) { Assert . isTrue ( fTextControl != null , "srini_string" ) ; return fTextControl ; }
SchemaValidatorBuilder function ( ) { this . strategy = new SchemaValidationStrategy ( this . strategy ) ; return this ; }
void function ( YUVtoRGB arg0 ) { YCbCrtoRGB ( arg0 , 255 , 1 ) ; }
void function ( int arg0 , int arg1 , int arg2 ) { }
String function ( ) { return _treeItemTester . getUniquePath ( ) ; }
void function ( File arg0 ) { this . outputDir = arg0 ; }
int function ( int arg0 ) { int loc0 = 0 ; while ( arg0 != 0 ) { loc0 = loc0 << 1 ; arg0 = arg0 >>> 8 ; } return loc0 ; }
boolean function ( String arg0 ) { return ! CAST_FUNC_REPLACEMENT_NEEDED . contains ( arg0 ) ; }
boolean function ( ) { return isOffline ; }
void function ( String arg0 , Throwable arg1 ) { if ( log != null ) { log . error ( arg0 , arg1 ) ; } }
Node function ( ) { return parent ; }
int function ( ) { return number ; }
int function ( int arg0 ) { return num_values > arg0 ? num_values : arg0 ; }
void function ( ) { final Message loc0 = new Message ( this . stdOutBuffer , this . stdOutBuffer . size ( ) , false ) ; Assert . assertEquals ( "srini_string" , loc0 . toString ( ) ) ; }
int function ( ) { return n ; }
void function ( char arg0 [ ] , char arg1 [ ] ) { int loc0 = arg0 . length ; int loc1 = arg1 . length ; for ( int loc2 = loc0 ; loc2 < loc1 ; loc2 ++ ) { arg0 [ loc2 ] = arg1 [ loc2 ] ; arg1 [ loc2 ] = arg0 [ loc2 ] ; } }
String function ( final ZNode arg0 ) { if ( arg0 == null ) { return null ; } final String loc0 = arg0 . getPath ( ) ; if ( loc0 == null ) { return null ; } return loc0 . substring ( loc0 . lastIndexOf ( ZNODE_PATH_SEPARATOR ) + 1 ) ; }
Runnable function ( ) { return null ; }
void function ( ) { if ( isSequence ( ) ) { throw new IllegalArgumentException ( "srini_string" ) ; } }
E function ( int arg0 ) { return executables . remove ( arg0 ) ; }
void function ( ) { cachingPolicy . setCacheable ( true ) ; }
Unmarshaller function ( JAXBContext arg0 ) { return Unmarshaller . newInstance ( arg0 ) ; }
ArrayList < String > function ( String arg0 ) { InputStream loc0 = new FileInputStream ( arg0 ) ; InputStreamReader loc1 = new InputStreamReader ( loc0 ) ; return importFromXML ( loc1 ) ; }
String function ( int arg0 ) { return keyCodeDescMap . get ( arg0 ) ; }
void function ( String arg0 ) { isTrue ( arg0 , true ) ; }
boolean function ( Class < ? extends Object > arg0 , Class < ? extends Object > arg1 ) { return arg0 . isInterface ( ) && arg1 . isInterface ( ) ; }
void function ( String arg0 ) { this . serialNumber = arg0 ; }
int function ( String arg0 ) { return arg0 . split ( "srini_string" ) . length ; }
boolean function ( String arg0 ) { return ( arg0 != null && arg0 . startsWith ( "srini_string" ) ) ; }
void function ( IErrorBarsConfig arg0 ) { m_trace = arg0 ; }
String function ( String arg0 ) { return arg0 ; }
boolean function ( Object arg0 ) { if ( arg0 instanceof ColoredSystem < ? > ) { return equals ( ( ColoredSystem < ? > ) arg0 ) ; } return false ; }
StackKeeper function ( ) { if ( isEmpty ( ) ) { throw new IllegalStateException ( "srini_string" ) ; } return queue . removeFirst ( ) ; }
String function ( long arg0 , String arg1 ) { return format ( arg0 , arg1 , null ) ; }
Object function ( ) { if ( iterator . hasNext ( ) ) { return iterator . next ( ) ; } else { return null ; } }
void function ( ) { if ( verbose ) System . err . println ( "srini_string" ) ; }
void function ( PdfWriter arg0 , Document arg1 , Rectangle arg2 ) { }
String function ( String arg0 ) { arg0 = arg0 . replaceAll ( "srini_string" , "srini_string" ) ; return arg0 ; }
void function ( CSIColor arg0 ) { this . borderColor = arg0 ; }
Nonterminal function ( ) { return actual ; }
void function ( Object [ ] arg0 ) { if ( hasNext ( ) ) { throw new NoSuchElementException ( "srini_string" ) ; } this . array = arg0 ; startIndex = 0 ; endIndex = arg0 . length ; }
String function ( ) { return fcLink ; }
String function ( ) { return ( name ) ; }
void function ( Graphics2D arg0 , float arg1 , float arg2 , float arg3 ) { Font loc0 = arg0 . getFont ( ) ; Graphics2D loc1 = arg0 . create ( ) ; Font loc2 = loc0 . getFont ( ) ; int loc3 = arg0 . getHeight ( ) ; int loc4 = arg0 . getWidth ( ) ; loc1 . setFont ( loc2 ) ; loc1 . setColor ( fgcolor ) ; loc1 . draw ( arg0 , arg1 , arg2 , arg3 ) ; arg0 . setFont ( loc0 ) ; }
Label function ( ) { return end ; }
boolean function ( ) { return getMap ( ) == null ; }
void function ( final String arg0 , final String arg1 , final boolean arg2 ) { if ( ! authzEnabled ) { return ; } final HivePrivilegeObject loc0 = new HivePrivilegeObject ( HivePrivilegeObjectType . DATABASE , arg0 , arg1 ) ; authorize ( HiveOperationType . READ , HivePrivilegeObjectType . DATABASE , loc0 , arg2 ) ; }
Map < String , Node > function ( ) { return cache ; }
void function ( Throwable arg0 ) { }
void function ( ) { lastRepublish = System . currentTimeMillis ( ) ; }
String [ ] function ( ) { return toColumns ( ) ; }
int function ( ) { return items . length ; }
void function ( final OperationsInterface arg0 ) { while ( true ) { final Double loc0 = arg0 . calculate ( ) ; addOperand ( loc0 ) ; } }
RequestType function ( ) { return requestType ; }
RefactoringDescriptorProxy function ( ) { return fProxy ; }
boolean function ( ) { if ( proximitySensor == null ) { checkIfCalledOnValidThread ( ) ; } return proximitySensor . getDefault proximitySensor ( ) ; }
int function ( ) { return staleCounter ++ ; }
void function ( char arg0 [ ] , char arg1 [ ] ) { int loc0 = arg0 . length ; int loc1 = arg1 . length ; for ( int loc2 = loc0 ; loc2 < loc1 ; loc2 ++ ) { arg0 [ loc2 ] = arg1 [ loc2 ] ; arg1 [ loc2 ] = arg0 [ loc2 ] ; } }
UnivPowerSeries < C > function ( ) { return ZERO ; }
RuleSet function ( ) { return this . digester ; }
void function ( Object arg0 ) { map . put ( arg0 , arg0 ) ; }
Bag < T > function ( Bag < T > arg0 , Class < T > arg1 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } if ( arg1 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } return new TypedBag < T > ( arg0 , arg1 ) ; }
void function ( ) { this . iterator . remove ( ) ; }
boolean function ( Object arg0 ) { return arg0 != null && arg0 . length ( ) > 0 ; }
String function ( ) { return identifier ; }
Set function ( ) { return succs ; }
ModelNode function ( PathAddress arg0 , int arg1 , Map < Attribute , ModelNode > arg2 ) { return createAddOperation ( arg0 , arg1 , arg2 , Collections . emptyMap ( ) ) ; }
void function ( Object arg0 , Throwable arg1 ) { getLogger ( ) . error ( FQCN , arg0 , arg1 ) ; }
String function ( String arg0 ) { return toEscapedString ( arg0 , false ) ; }
Mixer function ( ) { Mixer loc0 = new Mixer ( ) ; loc0 . start ( ) ; return loc0 ; }
Script function ( String arg0 ) { Tag loc0 = ( Tag ) list . get ( arg0 ) ; return loc0 . evaluate ( ) ; }
Tag function ( ) { return parent ; }
boolean function ( ) { if ( criteriaType == null ) { criteriaType = RelationalOperator . NOT_NULL ; } return criteriaType == RelationalOperator . EXISTS ; }
void function ( Template arg0 ) { fTemplates . remove ( arg0 ) ; }
Predicate function ( ) { return iPredicate ; }
IWidgetMatcher function ( ) { return _parentMatcher ; }
Link function ( ) { return new Link ( ) ; }
Session function ( ) { try { HibernateSession loc0 = ( HibernateSession ) sessionFactory . openSession ( ) ; return loc0 ; } catch ( HibernateException loc0 ) { log . debug ( "srini_string" , loc0 ) ; return new Session ( loc0 ) ; } }
ReflectClass function ( String arg0 ) { if ( _parent == null ) { return null ; } return _parent . getReflectClass ( arg0 ) ; }
String function ( ) { return FileUtils . getAbsolutePath ( HTTP_KEYTAB_FILE ) ; }
void function ( LabelProviderChangeEvent arg0 ) { for ( ILabelProviderListener loc0 : fListeners ) { loc0 . labelProviderChanged ( arg0 ) ; } }
void function ( String arg0 ) { this . catalogName = arg0 ; }
void function ( ) { SecurityConfiguration . getKeyStoreURL ( ) ; }
void function ( SourceDataLine arg0 ) { if ( loops . size ( ) == 8 ) { loops . addElement ( arg0 ) ; } else { loops . addElement ( arg0 ) ; } }
void function ( ) { final ManagementClient loc0 = ManagementClient . create ( managementClient ) ; loc0 . getEarWithApplicationXml ( EAR_WITHOUT_APPLICATION_XML ) ; }
long function ( int arg0 ) { return list . get ( arg0 ) ; }
Condition function ( Widget arg0 , String arg1 ) { checkNotNull ( arg0 , "srini_string" ) ; checkNotNull ( arg1 , "srini_string" ) ; return hasText ( Pattern . compile ( arg1 ) ) ; }
void function ( Reader arg0 ) { try { setContent ( new InputStreamReader ( arg0 ) ) ; } catch ( IOException loc0 ) { } }
void function ( ) { pos . add ( lookAt ) ; lookAt . add ( pos ) ; }
String function ( ) { return receiver . toString ( ) ; }
void function ( AnimatedNode arg0 ) { mActiveIncomingNodes ++ ; }
void function ( ) { Thread . sleep ( syncTimeout ) ; }
StringBuilder function ( ) { return baos ; }
void function ( LookupResult arg0 ) { app . lookupSucceeded ( arg0 ) ; }
boolean function ( ) { return isLocked ; }
C function ( A arg0 , A arg1 , A arg2 , A arg3 , A arg4 , A arg5 ) { C loc0 = C ( ) ; list . add ( arg0 , arg1 , arg2 , arg3 , arg4 , arg5 ) ; return loc0 ; }
int function ( String [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 . length ; loc1 ++ ) { loc0 = gcd ( loc0 , arg0 [ loc1 ] ) ; } return loc0 ; }
void function ( Collection arg0 ) { for ( Object loc0 : arg0 ) { add ( loc0 ) ; } }
String function ( String arg0 ) { return addUnderscores ( StringHelper . unqualify ( arg0 ) ) ; }
boolean function ( C arg0 ) { return arg0 != null && arg0 . equals ( ideal ) ; }
boolean function ( Quadrant arg0 , Graphics2D arg1 , Quadrant arg2 ) { if ( arg0 == null ) throw new NullPointerException ( "srini_string" ) ; if ( arg1 == null ) throw new NullPointerException ( "srini_string" ) ; if ( arg2 == null ) throw new NullPointerException ( "srini_string" ) ; return quadrant . adjacentTo ( arg0 , arg1 , arg2 ) ; }
FocusController function ( ) { return focusController ; }
void function ( ) { try { latch . await ( ) ; } catch ( InterruptedException loc0 ) { } }
String function ( String arg0 , ExtractionStrategy arg1 ) { if ( arg0 == null ) { return null ; } return extractText ( new PageSource ( arg0 ) , arg1 ) ; }
List < Potion > function ( ) { return Collections . unmodifiableList ( topShelf ) ; }
void function ( Resources arg0 ) { this . resources = arg0 ; }
int function ( Integer arg0 ) { return getVal ( ) . compareTo ( new java . math . BigInteger ( arg0 . intValue ( ) ) ) ; }
void function ( Field arg0 ) { arg0 . writeOpen ( ) ; attrs [ typeIndex ++ ] = arg0 ; }
IConditionMapping function ( ) { return _mappings [ _parent ] ; }
int function ( Boolean arg0 , Boolean arg1 ) { return BooleanComparator . compare ( arg0 , arg1 ) ; }
Undo function ( ) { return fUndoChange ; }
int function ( Date arg0 ) { if ( arg0 == null ) return 0 ; if ( this . year < arg0 . year ) return - 1 ; if ( this . year == arg0 . year && arg0 . month < arg0 . month ) return 1 ; return - 1 ; }
void function ( String arg0 ) { this . schemaKey = Preconditions . checkNotNull ( arg0 , "srini_string" ) ; this . mappersKey = Preconditions . checkNotNull ( arg0 , "srini_string" ) ; }
List < Integer > function ( List < Integer > arg0 ) { return Collections . unmodifiableList ( arg0 ) ; }
int function ( ) { return queue . size ( ) ; }
boolean function ( String arg0 ) { return arg0 . startsWith ( inlineMarkupDelimiters ) ; }
Executor function ( Executor arg0 ) { return new ExecutorWrapper ( arg0 ) ; }
void function ( Airport arg0 ) { this . larnacaAirport = arg0 ; }
void function ( String arg0 ) { this . localeKey = arg0 ; }
MemberRef function ( ) { return new MemberRef ( this ) ; }
void function ( Device arg0 ) { arg0 . startInputTask ( ) ; }
C function ( C arg0 , C arg1 ) { return list == null ? null : list . add ( arg0 , arg1 ) ; }
XMLParser function ( ) { state . update ( ) ; return this ; }
Chunk function ( char arg0 ) { return new Chunk ( arg0 , null ) ; }
String function ( ) { return name ; }
StringBuffer function ( ) { return result ; }
boolean function ( ) { if ( allocationLimit . get ( ) > peakAllocation . get ( ) ) { updatePeak ( ) ; return true ; } else { return false ; } }
void function ( String arg0 , String arg1 ) { if ( ! attr . containsKey ( arg0 ) ) attr . put ( arg0 , arg1 ) ; }
HttpRoute function ( HttpParams arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } HttpRoute loc0 = ( HttpRoute ) arg0 . getParameter ( FORCED_ROUTE ) ; if ( loc0 == null ) { loc0 = NO_ROUTE ; } return loc0 ; }
boolean function ( RatTerm arg0 ) { if ( underlying_terms . length != arg0 . underlying_terms . length ) return false ; for ( int loc0 = 0 ; loc0 < underlying_terms . length ; loc0 ++ ) { if ( underlying_terms [ loc0 ] != arg0 . underlying_terms [ loc0 ] ) return false ; } return true ; }
void function ( File arg0 ) { this . outputFile = arg0 ; }
T function ( String arg0 ) { return buildObject ( arg0 , null ) ; }
void function ( ) { synchronized ( this ) { started = true ; } }
void function ( Boolean arg0 ) { this . isTest = arg0 ; }
InputStream function ( ) { return stream ; }
R function ( String arg0 ) { return arg0 ; }
boolean function ( Object arg0 ) { if ( arg0 == this ) return true ; if ( ! ( arg0 instanceof Collection ) ) return false ; final Collection4 loc0 = ( Collection4 ) arg0 ; if ( ( this . size ( ) != loc0 . size ( ) ) || ( this . size ( ) != loc0 . size ( ) ) ) return false ; for ( int loc1 = 0 ; loc1 < this . size ( ) ; loc1 ++ ) { if ( ! contains ( loc0 . get ( loc1 ) ) ) return false ; } return true ; }
int function ( ) { return _size ; }
Iterator < ColumnValue > function ( String arg0 ) { return metaData . getValues ( arg0 ) ; }
void function ( boolean arg0 ) { this . debug = arg0 ; }
void function ( String arg0 , Object arg1 ) { if ( log != null ) printLog ( arg0 , arg1 ) ; }
float function ( ) { return list . removeAt ( size ( ) - 1 ) ; }
RGB function ( String arg0 ) { try { return new RGB ( arg0 ) ; } catch ( Exception loc0 ) { loc0 . printStackTrace ( ) ; return null ; } }
ImageDescriptor function ( ) { return fImage ; }
void function ( String arg0 ) { blobBuilder . deleteBlobs ( arg0 ) ; }
void function ( Object arg0 ) { }
boolean function ( String arg0 ) { Method loc0 = ( Method ) methods . get ( arg0 ) ; if ( loc0 == null ) { return false ; } return loc0 . invoke ( null , this ) ; }
String function ( ) { return this . description ; }
int function ( ) { return this . highValue ; }
Properties function ( ) { final Properties loc0 = new Properties ( ) ; verifyProperties ( loc0 ) ; return loc0 ; }
String function ( ) { return lang ; }
String function ( String arg0 ) { return arg0 . split ( "srini_string" ) [ 0 ] ; }
Limit function ( final String arg0 , final String arg1 ) { return new Limit ( arg0 , arg1 ) ; }
byte [ ] function ( CMSSignedData arg0 ) { if ( arg0 . getType ( ) . equals ( PA_AUTHDATA ) ) { return getSignedKdcDhKeyInfo ( arg0 ) ; } else { throw new IOException ( "srini_string" ) ; } }
void function ( DeviceDescriptor arg0 ) { this . device = arg0 ; }
String function ( ) { return "srini_string" + getName ( ) + "srini_string" + getAsText ( ) ; }
void function ( PRIndirectReference arg0 ) { this . indRef = arg0 ; }
void function ( Player arg0 ) { this . player = arg0 ; }
void function ( CSIColor arg0 ) { foreColor = arg0 ; }
void function ( int arg0 ) { this . bicRegex . setRegexp ( arg0 ) ; }
void function ( ) { violations . clear ( ) ; }
T function ( String arg0 ) { return script ( "srini_string" + arg0 + "srini_string" ) ; }
boolean function ( ) { return bugList . size ( ) > 0 ; }
Criteria function ( Object arg0 ) { if ( arg0 == null ) { throw new NullPointerException ( "srini_string" ) ; } Criteria loc0 = new EqualsCriteria ( arg0 ) ; return loc0 ; }
void function ( File arg0 ) { correct = - 1 ; judge ( arg0 ) ; }
String function ( ) { return code ; }
void function ( Object arg0 ) { log ( LOG_LEVEL_WARN , arg0 ) ; }
WebArchive function ( ) { return createSecurityDomainWithoutPermissionMapper ( ) ; }
void function ( String [ ] arg0 ) { try { System . out . println ( "srini_string" ) ; System . in . read ( ) ; } catch ( Exception loc0 ) { loc0 . printStackTrace ( ) ; } }
void function ( String [ ] arg0 ) { SpringApplication loc0 = new SpringApplication ( Application . class ) ; loc0 . setShowBanner ( true ) ; loc0 . setShowCodeBug ( true ) ; loc0 . setShowCoverage ( true ) ; execute ( loc0 ) ; }
int function ( ) { return ( int ) Math . round ( y1 + y2 ) ; }
void function ( PeerStatus arg0 ) { this . lookupEnabled = arg0 ; }
void function ( String arg0 ) { this . name = arg0 ; }
void function ( Point2D arg0 ) { this . startPoint = arg0 ; }
void function ( String arg0 ) { this . packedString = arg0 ; }
void function ( String arg0 ) { this . skipHours . add ( arg0 ) ; }
String function ( SQLException arg0 ) { return determineSqlStateClassCode ( extractSqlStateClassCode ( arg0 ) ) ; }
boolean function ( int arg0 ) { return isStandardTypeCode ( arg0 ) ; }
ILanguageNames function ( ) { return languageNames ; }
boolean function ( ) { return connected ; }
void function ( int arg0 ) { this . productID = arg0 ; }
int function ( ) { return pairlist . size ( ) - 1 ; }
boolean function ( K1 arg0 , K2 arg1 ) { return dkMap . containsKey ( arg0 , arg1 ) ; }
Closure function ( ) { return iClosure ; }
BitSet function ( ) { return index ; }
int function ( ) { return ( data [ position ++ ] & 0xFF ) << 8 | ( data [ position ++ ] & 0xFF ) ; }
List < T > function ( List < T > arg0 ) { if ( ! arg0 . isEmpty ( ) ) { return arg0 ; } return Collections . emptyList ( ) ; }
void function ( final CharSequence arg0 , final String arg1 ) { if ( arg0 == null ) { throw new ValidateException ( arg1 ) ; } if ( arg0 . length ( ) == 0 ) { throw new ValidateException ( arg1 ) ; } }
boolean function ( Object arg0 ) { if ( arg0 == null ) { return false ; } if ( arg0 instanceof IdentifierValue ) { return true ; } return false ; }
ListIterator function ( ListIterator arg0 ) { if ( arg0 == null ) { return null ; } else { return new ListIteratorWrapper ( arg0 ) ; } }
BufferedImage function ( int [ ] arg0 ) { ResampleOp loc0 = new ResampleOp ( arg0 ) ; BufferedImage loc1 = loc0 . filter ( arg0 ) ; return loc1 ; }
void function ( ) { if ( releaseMap == null ) { releaseMap = new HashMap < > ( ) ; } }
Class < ? > function ( ) { return elementType ; }
void function ( ) { assertTrue ( "srini_string" , incorrectRoleResult . contains ( INIT_METHOD_NOT_PASS ) ) ; }
void function ( ) { annotations . process ( null , null ) ; }
void function ( ) { String loc0 = "srini_string" ; Assert . assertTrue ( "srini_string" , loc0 != null ) ; }
String function ( ) { return fElement . getAttribute ( CLASS_ATTRIBUTE ) ; }
void function ( ) { throw new UnsupportedOperationException ( "srini_string" ) ; }
void function ( boolean arg0 ) { this . expandEntityRef = arg0 ; }
File function ( ) { return fileInput ; }
Edge function ( int arg0 ) { Edge loc0 = new Edge ( arg0 ) ; coalesceRemainingClusters ( ) ; return loc0 ; }
ModuleList < C > function ( Class < C > arg0 , int arg1 , int arg2 , C arg3 ) { return pairList ( arg0 , arg1 , arg2 ) ; }
String function ( String arg0 ) { if ( arg0 == null ) { return "srini_string" ; } return arg0 ; }
FieldSelection function ( List < String > arg0 ) { Validate . noNullElements ( arg0 , "srini_string" ) ; return create ( arg0 . toArray ( new String [ arg0 . size ( ) ] ) ) ; }
List < ReleaseEntity > function ( ) { log . debug ( "srini_string" ) ; return em . createQuery ( "srini_string" ) . getResultList ( ) ; }
void function ( OverlayAdapter arg0 ) { this . adapters . add ( arg0 ) ; }
boolean function ( String arg0 ) { return _binsByUri . containsKey ( arg0 ) ; }
List < Message > function ( ) { if ( message == null ) { message = new ArrayList < > ( ) ; } return this . message ; }
Validator function ( ) { return new Validator ( ) ; }
void function ( StringBuilder arg0 ) { this . selectClause = arg0 ; }
void function ( Motorbike arg0 ) { }
void function ( byte arg0 ) { ensureCapacity ( length + 1 ) ; buffer [ length ++ ] = arg0 ; }
Predicate [ ] function ( int arg0 , int arg1 ) { try { validateMin2 ( arg0 ) ; validate ( arg1 ) ; return null ; } catch ( ValidationException loc0 ) { return null ; } }
Property function ( ) { return property ; }
String function ( ) { return this . localeKey ; }
C function ( long arg0 ) { return parse ( arg0 , false ) ; }
Widget function ( Widget arg0 , Widget arg1 , Matcher < ? super Widget > arg2 ) { Widget loc0 = find0 ( arg0 , arg1 ) ; if ( loc0 == null ) return null ; return loc0 ; }
RandomAccessSource function ( byte [ ] arg0 ) { return new ByteArrayRandomAccessSource ( arg0 ) ; }
void function ( ) { assertEquals ( "srini_string" , ctx . getMemory ( ) . size ( ) ) ; }
String function ( ) { return "srini_string" ; }
boolean function ( ) { return needBeforeSpace ; }
void function ( ConsumerRebalanceListener arg0 ) { }
Set function ( ) { return _register . keySet ( ) ; }
H2Database function ( ) { return new H2Database ( jpaProperties ) ; }
RingFactory < C > function ( ) { return ring ; }
void function ( float arg0 ) { this . width = arg0 ; }
LIST < C > function ( ) { return list != null ? list . inverse ( ) : null ; }
void function ( ) { Collections . reverse ( disableMigrations ) ; }
Collection function ( ) { return new ArrayList ( ) ; }
void function ( Throwable arg0 ) { log ( Level . SEVERE , arg0 ) ; }
String [ ] function ( ) { return items ; }
ProgressRequestBody function ( String arg0 ) { return new ProgressRequestBody ( arg0 ) ; }
int function ( T arg0 ) { return weight ; }
HttpClient function ( ) { return backend ; }
Allprop function ( ) { return allprop ; }
void function ( byte [ ] arg0 ) { if ( arg0 . length != 2 * 2 ) throw new IOException ( "srini_string" ) ; buf = arg0 ; }
void function ( ) { if ( fExecContext != null ) { fExecContext . run ( ) ; } }
Items function ( ) { return items ; }
Symbol function ( ) { return stack [ -- pos ] ; }
SortedBag function ( Bag arg0 , Class < ? extends T > arg1 ) { return sortedBag ( arg0 , arg1 , null ) ; }
void function ( VectorXYZ arg0 ) { pos . set ( arg0 ) ; lookAt . set ( arg0 ) ; }
byte [ ] function ( String arg0 , String arg1 ) { if ( arg0 == null || arg1 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } byte [ ] loc0 = new byte [ arg0 . length ( ) + arg1 . length ( ) ] ; for ( int loc1 = 0 ; loc1 < loc0 . length ; loc1 ++ ) { loc0 [ loc1 ] = ( byte ) ( arg1 . charAt ( loc1 ) ^ arg0 . charAt ( loc1 ) ) ; } return loc0 ; }
IStatus function ( ) { return null ; }
boolean function ( ) { return ring . isField ( ) ; }
Type function ( String arg0 ) { return basicTypeRegistry . getType ( arg0 ) ; }
String function ( Bundle arg0 ) { Validate . notNull ( arg0 , "srini_string" ) ; return arg0 . getString ( TOKEN_KEY ) ; }
int function ( ) { return limit - position ; }
void function ( ) { reactor . start ( ) ; }
void function ( final StyleListener arg0 ) { if ( arg0 == null ) { throw new NullPointerException ( ) ; } listeners . remove ( arg0 ) ; }
String function ( ) { return technicalKey ; }
IJavaElement function ( JavaEditor arg0 , IElementType arg1 ) { return arg0 . resolveEnclosingElement ( arg1 ) ; }
void function ( long arg0 , ExecutionData arg1 ) { entries . put ( arg0 , arg1 ) ; }
void function ( Set < String > arg0 ) { for ( String loc0 : arg0 ) { if ( containsPingErCountryOrRegion ( loc0 ) ) { pingErCountry . remove ( loc0 ) ; } } }
void function ( double arg0 ) { this . torusDimensionSize = arg0 ; }
GenVector < C > function ( GenVector < C > arg0 , GenVector < C > arg1 ) { if ( arg0 . isEmpty ( ) && arg1 . isEmpty ( ) ) { logger . error ( "srini_string" ) ; return arg1 ; } else { return leftScalarProduct ( arg0 , arg1 ) ; } }
Closure [ ] function ( ) { return iClosures ; }
int function ( ) { return _index ; }
void function ( Iterator arg0 ) { this . iterator = arg0 ; this . nextObject = false ; }
float function ( ) { return width ; }
void function ( final OPModeManager arg0 ) { }
Comparator function ( boolean arg0 ) { return ( arg0 ? NATURAL_COMPARATOR : NATURAL_COMPARATOR ) ; }
void function ( ) { stop = true ; }
boolean function ( String arg0 ) { throw new UnsupportedOperationException ( "srini_string" ) ; }
boolean function ( String arg0 ) { return Nazgul . instance . getInstanceOf ( arg0 ) ; }
boolean function ( ) { return _runningTest != null ; }
ModuleList < C > function ( ) { return twosidedGB ( false ) ; }
void function ( IText arg0 , Map < String , String > arg1 ) { insertNames ( arg0 , arg1 , "srini_string" ) ; }
String function ( String arg0 ) { int loc0 = arg0 . indexOf ( '/' ) ; if ( loc0 == - 1 ) { return arg0 ; } else { return arg0 . substring ( 0 , loc0 ) ; } }
void function ( ) { consoleLoggerModule = new ConsoleLoggerModule ( ) ; fileLoggerModule = new ConsoleLoggerModule ( ) ; consoleLoggerModule = new ConsoleLoggerModule ( ) ; }
DocumentBuilder function ( Section arg0 ) { ensureNotBuilt ( ) ; sections . add ( arg0 ) ; return this ; }
boolean function ( int arg0 ) { int loc0 = ( arg0 * WIDTH ) + ( x * x ) ; int loc1 = ( arg0 * HEIGHT ) + ( y * y ) ; int loc2 = ( arg0 * WIDTH ) + ( x * x ) ; int loc3 = ( arg0 * HEIGHT ) + ( y * y ) ; int loc4 = ( arg0 * HEIGHT ) + ( x * x ) ; int loc5 = ( arg0 * HEIGHT ) + ( y * y ) ; int loc6 = ( arg0 * WIDTH ) + ( x * x ) ; int loc7 = ( arg0 * HEIGHT ) + ( y * y ) ; int
void function ( String arg0 , Chunk arg1 ) { if ( arg0 . equals ( "srini_string" ) || arg0 . equals ( "srini_string" ) || arg0 . equals ( "srini_string" ) ) { return ; } int loc0 = arg0 . length ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { int loc2 = arg0 . codePointAt ( loc1 ) ; char loc3 = arg0 . charAt ( loc1 + 1 ) ; if ( loc3 == '-' ) { loc1 ++ ; } else if ( loc3 == '_' ) { loc1 ++ ; } } }
void function ( Object arg0 ) { log ( Level . ERROR , String . valueOf ( arg0 ) , null ) ; }
KeyValuePairList function ( ) { return new KeyValuePairList ( ) ; }
void function ( ) { fListeneredDisabled = false ; }
boolean function ( Object arg0 ) { if ( arg0 == null ) { return false ; } if ( arg0 instanceof String ) { return arg0 . equals ( getKey ( ) ) ; } return arg0 instanceof String && arg0 . equals ( getValue ( ) ) ; }
void function ( DisplayPortMetrics [ ] arg0 ) { for ( int loc0 = 0 ; loc0 < mMetrics . length ; loc0 ++ ) { if ( arg0 [ loc0 ] == mMetrics [ loc0 ] ) { mMetrics [ loc0 ] = null ; break ; } } }
BaseColor function ( ) { return strokeColor ; }
SchemaValidatorBuilder function ( ) { this . strategy = new SchemaValidationStrategy ( this . strategy ) ; return this ; }
ISource function ( IJavaElement arg0 , IResource arg1 , IProgressMonitor arg2 ) { return fOldType . convert ( arg0 , arg1 , arg2 ) ; }
long function ( ) { return ours ; }
double function ( ) { return mu ; }
void function ( Exception arg0 ) { fShowTraceInConsoleAction = new ShowStackTraceInConsoleAction ( fFailureTableDisplay , fFailureTableDisplay . get ( ) , arg0 ) ; }
DurationFieldType function ( int arg0 ) { return getFieldType ( arg0 ) . get ( arg0 ) ; }
void function ( Employee arg0 ) { em . persist ( arg0 ) ; em . flush ( ) ; }
void function ( RandomAccessSource arg0 ) { this . source = arg0 ; }
boolean function ( Quadrant arg0 , Graphics2D arg1 , Quadrant arg2 ) { if ( arg0 == null ) throw new NullPointerException ( "srini_string" ) ; if ( arg1 == null ) throw new NullPointerException ( "srini_string" ) ; if ( arg2 == null ) throw new NullPointerException ( "srini_string" ) ; return quadrant . adjacentTo ( arg0 , arg1 , arg2 ) ; }
Set function ( Map arg0 ) { return new HashSet ( arg0 ) ; }
Branch function ( ) { return new Branch ( ) ; }
boolean function ( String arg0 ) { boolean loc0 = false ; ZNode loc1 = ZNode . create ( arg0 ) ; if ( loc1 != null ) { loc0 = loc1 . exists ( ) ; } return loc0 ; }
void function ( int arg0 ) { constantValue = ConstantValue . make ( arg0 ) ; }
void function ( Throwable arg0 ) { this . exception = arg0 ; if ( callback != null ) { callback . onFailure ( this ) ; } }
double function ( double arg0 ) { return factory . zero ( arg0 ) ; }
Iterator < ? > function ( DoubleIterator arg0 ) { if ( arg0 == null ) { return null ; } else { return new DoubleIteratorWrapper ( arg0 ) ; } }
