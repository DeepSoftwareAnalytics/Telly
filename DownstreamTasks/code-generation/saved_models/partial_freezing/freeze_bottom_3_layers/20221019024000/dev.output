void function ( ) { AvroSchemaReader loc0 = new AvroSchemaReader ( AvroSchemaResolver . DEFAULT ) ; loc0 . canWrite ( null ) ; }
void function ( String arg0 ) { delete ( new String ( arg0 ) ) ; }
List < SpringConfig > function ( ) { return new ArrayList < SpringConfig > ( mSpringConfigMap . values ( ) ) ; }
File function ( ) { return Libraries . getLibsDirectory ( ) ; }
boolean function ( ) { return coalescing ; }
void function ( final InvocationContext arg0 ) { arg0 . setCurrentPrincipalName ( String . valueOf ( System . currentTimeMillis ( ) ) ) ; }
void function ( Object arg0 , Throwable arg1 ) { if ( isTraceEnabled ( ) ) { getLogger ( ) . log ( Level . TRACE , String . valueOf ( arg0 ) , arg1 ) ; } }
Object function ( ) { if ( instance == null ) { instance = persister . createInstance ( session ) ; } return instance ; }
boolean function ( ) { return true ; }
void function ( long arg0 ) { markAsOverriden ( "srini_string" ) ; this . evictionWakeUpInterval = arg0 ; }
IProduct function ( ) { return product ; }
String function ( ASN1Primitive arg0 ) { if ( arg0 instanceof CRL ) return getOCSPURL ( ( CRL ) arg0 ) ; else return null ; }
int function ( InputStream arg0 ) { return ( ( ( short ) arg0 . read ( ) ) << 8 ) | ( ( short ) arg0 . read ( ) & 0xFF ) ; }
void function ( ClassDoc arg0 , String arg1 , boolean arg2 ) { if ( arg0 . isPrimitive ( ) ) { return ; } for ( FieldDoc loc0 : arg0 . getDeclaredFields ( ) ) { if ( start ( loc0 , arg1 , arg2 ) ) { return ; } } }
LongList function ( ) { return UnmodifiableLongList . unmodifiableLongList ( ) ; }
GetContentlanguage function ( ) { return getcontentlanguage ; }
void function ( String arg0 , String arg1 ) { KClient loc0 = new KClient ( arg0 , arg1 ) ; loc0 . requestTicket ( ) ; }
List < NamePart > function ( String arg0 ) { if ( arg0 == null ) { return Collections . emptyList ( ) ; } return NAME_PART_PATTERN . split ( arg0 ) ; }
Location function ( Element arg0 ) { Location loc0 = new Location ( ) ; loc0 . setLatitude ( arg0 . getFloat ( "srini_string" ) ) ; loc0 . setLongitude ( arg0 . getFloat ( "srini_string" ) ) ; return loc0 ; }
boolean function ( ) { return _display != null && _display . isShowing ( ) ; }
void function ( String arg0 , String arg1 ) { if ( arg1 == null ) { throw new XMPException ( "srini_string" , XMPError . BADPARAM ) ; } if ( arg1 . length ( ) == 0 ) { throw new XMPException ( "srini_string" , XMPError . BADPARAM ) ; } }
void function ( ) { m_negativeXErrorPixel = 0 ; m_negativeYErrorPixel = 0 ; }
String function ( ) { return reason ; }
String function ( ) { return null ; }
int function ( ) { return ( int ) getFormat ( ) . getSampleDuration ( ) ; }
void function ( final RecordBatch arg0 , final int arg1 ) { if ( arg0 . getPartitioners ( ) . size ( ) > arg1 ) { executeMethodLogic ( arg0 , arg1 ) ; } else { for ( Partitioner loc0 : partitioners ) { loc0 . processBatch ( arg0 , arg1 ) ; } } }
boolean function ( ) { return ( document . getRltdDocument ( ) != null ) && ( document . getCrcpt ( ) != null ) && ( document . getMsgId ( ) != null ) && ( document . getMsgCopy ( ) != null ) ; }
long function ( ) { return cacheHitCount ; }
Dialog function ( Activity arg0 , String arg1 ) { return ( new AlertDialog . Builder ( arg0 ) ) . setTitle ( "srini_string" ) . setMessage ( arg1 ) . setNeutralButton ( android . R . string . ok , null ) . create ( ) ; }
Section function ( int arg0 ) { return sections . get ( arg0 ) ; }
Product function ( ) { return new Product ( ) ; }
FigureInfo function ( ) { return new FigureInfo ( this ) ; }
Integer function ( Cursor arg0 , int arg1 ) { return arg0 == null ? null : arg0 . getInt ( arg1 ) ; }
Providedportid function ( ) { return new Providedportid ( ) ; }
boolean function ( String arg0 , String arg1 ) { return findKeyword ( arg0 , arg1 , 0 ) >= 0 ; }
int function ( ProtocolVersion arg0 ) { if ( this . protocol . equals ( arg0 . protocol ) ) { return major - arg0 . major ; } else if ( this . protocol . equals ( arg0 . protocol ) ) { return minor - arg0 . minor ; } else { return - 1 ; } }
void function ( Fum arg0 ) { this . fum = arg0 ; }
void function ( ServerHandshakeEvent arg0 ) { }
void function ( ) { SecurityConfiguration . getCipherKey ( ) ; }
int function ( ) { return map . size ( ) ; }
void function ( Point2D arg0 ) { this . startPoint = arg0 ; }
int function ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 : arg0 ) { loc0 = gcd ( loc0 , loc1 ) ; } return loc0 ; }
void function ( String [ ] arg0 ) { System . out . println ( "srini_string" + Version . VERSION ) ; System . out . println ( "srini_string" + getSpecification ( ) ) ; System . exit ( 0 ) ; }
void function ( String arg0 , Object arg1 , final CallBackInfo arg2 ) { getRemote ( ) . request ( arg0 , arg1 , arg2 ) ; }
void function ( Collection < ? extends E > arg0 , Collection < ? extends E > arg1 , Comparator < ? super E > arg2 , int arg3 ) { for ( E loc0 : arg1 ) { if ( arg2 . compare ( loc0 , arg0 ) < 0 ) { arg0 . add ( loc0 ) ; } } }
long function ( ) { return timestamp ; }
String function ( ) { return this . name ; }
Piece function ( int arg0 ) { return pieces [ arg0 ] ; }
String function ( String arg0 ) { return bundle . getString ( arg0 ) ; }
void function ( ISourceFileLocator arg0 ) { this . delegates . add ( arg0 ) ; }
void function ( double arg0 , double arg1 ) { if ( arg0 <= arg1 ) { throw new IllegalArgumentException ( "srini_string" + arg0 + "srini_string" + arg1 ) ; } }
Integer function ( ) { return repeated ; }
Description function ( Description arg0 ) { return addChild ( arg0 , 0 ) ; }
byte [ ] function ( short arg0 ) { return new byte [ ] { ( byte ) ( arg0 >>> 8 ) , ( byte ) arg0 } ; }
Criteria function ( ) { return new Criteria ( ) ; }
StandardServiceRegistryBuilder function ( Config arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } this . aggregatedCfgXml = arg0 ; return this ; }
Integer [ ] function ( Integer [ ] arg0 ) { Integer [ ] loc0 = new Integer [ arg0 . length ] ; for ( int loc1 = 0 ; loc1 < arg0 . length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }
KeyStroke function ( char arg0 ) { loadMaps ( ) ; String loc0 = Character . toUpperCase ( arg0 ) ; KeyStroke loc1 = ( KeyStroke ) characterMap . get ( loc0 ) ; if ( loc1 != null ) { return loc1 ; } else { return generateKeyStroke ( loc0 ) ; } }
double function ( int arg0 ) { double loc0 = 0.0 ; PolynomialFunction loc1 [ ] = polynomials [ arg0 ] ; for ( int loc2 = 0 ; loc2 < loc1 . length ; loc2 ++ ) { loc0 += loc1 [ loc2 ] . value ( knots [ loc2 ] ) ; } return loc0 ; }
ValidatorConfiguration function ( final String arg0 , final String arg1 ) { return addProperty ( arg0 , arg1 , false ) ; }
void function ( ) { validateChain ( ) ; }
CookieAttributeHandler function ( final String arg0 ) { return findAttribHandler ( arg0 , false ) ; }
void function ( ) { }
void function ( String [ ] arg0 ) { Mammoth loc0 = new Mammoth ( ) ; loc0 . observe ( ) ; loc0 . timePasses ( ) ; loc0 . observe ( ) ; loc0 . timePasses ( ) ; loc0 . observe ( ) ; }
void function ( String arg0 ) { this . className = arg0 ; }
int function ( Object arg0 , Object arg1 ) { return arg0 . compareTo ( arg1 ) ; }
void function ( ) { dao = mock ( DbCustomerDao . class ) ; exception = null ; }
String function ( ) { String loc0 = "srini_string" ; loc0 += "srini_string" + m_Key + "srini_string" ; return loc0 ; }
String function ( ) { return responseHeaders . get ( responseHeader ) ; }
GenMatrix < C > function ( ) { for ( int loc0 = 0 ; loc0 < matrix . size ( ) - 1 ; loc0 ++ ) { val . add ( matrix . get ( loc0 ) . get ( 0 ) ) ; } return this ; }
void function ( Canvas arg0 , Rectangle arg1 ) { arg0 . drawRect ( arg1 . x , arg1 . y , arg1 . width , arg1 . height ) ; }
AuditCriterion function ( AuditCriterion arg0 , AuditCriterion arg1 ) { return new LogicalAuditExpression ( arg0 , arg1 , "srini_string" ) ; }
T function ( T arg0 , Object arg1 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( String . valueOf ( arg1 ) ) ; } return arg0 ; }
void function ( String arg0 ) { myTopType = arg0 ; }
PlanNode function ( Quadrant arg0 ) { return arg0 . reflect ( this ) ; }
void function ( String arg0 ) { this . fcKey = arg0 ; }
Double function ( ) { return xValue ; }
void function ( ) { compact ( _size ) ; }
float function ( ) { return textRectangle . x ; }
Long function ( ) { return idCounter ; }
String [ ] function ( String arg0 ) { return collectionPropertyMappingByRole . get ( arg0 ) ; }
Collection < Table > function ( List < String > arg0 , BulkLoad arg1 ) { return getTablesByNames ( getTableNames ( arg0 ) , arg1 ) ; }
void function ( ) { }
UnivPowerSeries < C > function ( ) { return ONE ; }
EditPartFactory function ( ) { return viewer . getEditPartFactory ( ) ; }
void function ( boolean arg0 ) { fResolveBindings = arg0 ; }
double function ( Body arg0 , double arg1 , double arg2 ) { if ( arg0 == null ) arg0 = new Body ( arg1 ) ; else arg0 = arg0 . new Body ( arg1 ) ; return pskip . compute ( arg0 , arg2 ) ; }
boolean function ( PastryContact arg0 ) { return ccwNodes . remove ( arg0 ) ; }
boolean function ( ) { return iterators . size ( ) > 0 ; }
DateTimeFieldType function ( int arg0 ) { return getField ( arg0 ) . getFieldType ( ) ; }
ActiveLock function ( ) { return new ActiveLock ( ) ; }
Product < C > function ( Reader arg0 ) { return from ( arg0 , null ) ; }
void function ( final String arg0 , final File arg1 ) { try { if ( arg1 . exists ( ) ) { System . out . println ( "srini_string" + arg0 + "srini_string" + arg1 . getAbsolutePath ( ) ) ; return ; } FileUtils . copyFile ( arg0 , new File ( arg1 ) ) ; } catch ( Exception loc0 ) { error ( "srini_string" + arg0 , loc0 ) ; } }
void function ( ) { if ( pdfxConformance != PdfWriter . PDFX_NONE ) { throw new IOException ( "srini_string" ) ; } }
boolean function ( ) { return Platform . getWorkbench ( ) . getActiveWorkbenchWindow ( ) != null && Platform . getWorkbench ( ) . getActiveEditor ( ) != null ; }
void function ( ) { fFilesSaved = true ; }
double function ( double [ ] arg0 , double [ ] arg1 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 . length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] * arg1 [ loc1 ] ; } return loc0 ; }
void function ( ) { I1z = 1 ; I2z = 2 ; I3z = 3 ; I4 = 4 ; }
void function ( String arg0 , Collection < ? > arg1 , Collection < ? > arg2 ) { if ( ! arg1 . containsAll ( arg2 ) ) { fail ( arg0 ) ; } }
Collection < EvaluationListener > function ( ) { return evaluationListeners ; }
Callable < T > function ( Callable < T > arg0 ) { return originalCallable ( arg0 , null ) ; }
boolean function ( BigInteger arg0 ) { return signum ( arg0 ) == 0 ; }
Event [ ] function ( ) { return getResolver ( ) . getEvents ( ) ; }
int function ( Context arg0 , int arg1 , int arg2 ) { Resources loc0 = arg0 . getResources ( ) ; int loc1 = loc0 . getDimensionPixelSize ( arg1 ) ; int loc2 = loc0 . getDimensionPixelSize ( arg2 ) ; return loc1 * loc2 ; }
void function ( Resource arg0 , boolean arg1 ) { }
String [ ] function ( ) { return columnNames ; }
Closure function ( @ Nullable Closure arg0 , @ Nullable Closure arg1 ) { return new ClosureWithResult ( arg0 , arg1 ) ; }
void function ( double arg0 ) { if ( Double . isNaN ( arg0 ) || arg0 < 0 ) { throw new ArithmeticException ( "srini_string" ) ; } }
boolean function ( ) { return vid . getExtend ( ) ; }
void function ( int arg0 ) { definesEncryptionData = true ; sampleEncryptionDataLength = arg0 ; sampleEncryptionDataNeedsFill = false ; }
int function ( int arg0 ) { return ( m_value - arg0 ) ; }
boolean function ( ) { return onlineCheckingAllowed ; }
int function ( int arg0 ) { return childRanges [ arg0 ] ; }
void function ( int arg0 , long [ ] arg1 ) { checkColumns ( arg0 , arg1 . length ) ; for ( int loc0 = 0 ; loc0 < arg1 . length ; loc0 ++ ) { columns [ loc0 ] . setSize ( arg1 [ loc0 ] ) ; } }
boolean function ( Collection < K > arg0 ) { return putAll ( arg0 , null ) ; }
void function ( Component arg0 , Image arg1 ) { if ( arg1 != null ) { background = arg1 ; } else { background = getBackGround ( ) ; } }
TemplateContextType function ( ) { return fContextType ; }
void function ( float arg0 ) { list . add ( 0 , arg0 ) ; }
void function ( Object arg0 ) { myList . setItem ( arg0 ) ; }
PropertyTemplateBean function ( ) { PropertyTemplateBean loc0 = new PropertyTemplateBean ( ) ; loc0 . setFormat ( "srini_string" ) ; loc0 . setShowQueries ( true ) ; return loc0 ; }
IWidgetCondition function ( Object arg0 ) { Assert . isNotNull ( arg0 ) ; return new WidgetCondition ( arg0 ) ; }
ReflectConstructorSpec function ( Object ... arg0 ) { return new ReflectConstructorSpec ( arg0 ) ; }
void function ( ) { pos ++ ; }
byte [ ] function ( Object arg0 ) { return toJSON ( arg0 , false ) ; }
Optional < JobStatus > function ( @ NotNull JobId arg0 ) { Optional < JobStatus > loc0 = jobStatuses ( ) . stream ( ) . filter ( job -> job . getJobId ( ) . equals ( arg0 ) ) . findFirst ( ) ; if ( loc0 . isPresent ( ) ) { return Optional . of ( loc0 ) ; } return Optional . empty ( ) ; }
Codec [ ] function ( Format arg0 ) { return getInstance ( ) . getCodec ( arg0 ) ; }
void function ( int arg0 ) { this . weight = arg0 ; }
int [ ] function ( ) { return aVueltas ; }
PdfIndirectReference function ( String arg0 , PdfDictionary arg1 ) { if ( arg1 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } PdfDictionary loc0 = new PdfDictionary ( ) ; loc0 . put ( "srini_string" , arg1 ) ; configurations . put ( arg0 , loc0 ) ; return this ; }
void function ( Set < IResource > arg0 ) { this . resources = arg0 ; }
String function ( ) { return this . toString ( ) + "srini_string" + this . _leftDistance + "srini_string" + this . _topDistance + "srini_string" ; }
void function ( final double arg0 ) { this . numericalZero = arg0 ; }
void function ( int arg0 ) { doKeyUp ( arg0 , getAbbotRobot ( ) ) ; }
void function ( String arg0 ) { this . city = arg0 ; }
String function ( String arg0 ) { String loc0 = null ; loc0 = doSendApiRequest ( "srini_string" , arg0 ) ; return loc0 ; }
String function ( ) { return nodeInfo . getId ( ) ; }
Map < String , ByteBuffer > function ( ) { return requestCallMeta ; }
ColumnDescriptor [ ] function ( ) { return columns ; }
String function ( String arg0 ) { if ( arg0 == null ) { return null ; } int loc0 = arg0 . indexOf ( URL_DELIMITERS ) ; if ( loc0 >= 0 ) { return arg0 . substring ( 0 , loc0 ) ; } return arg0 ; }
long function ( Duration arg0 ) { return arg0 . getSeconds ( ) * NANOS_PER_SECOND + arg0 . getNanos ( ) ; }
String function ( Object arg0 ) { Writer loc0 = new StringWriter ( ) ; writeBackToXML ( arg0 , loc0 ) ; return loc0 . toString ( ) ; }
void function ( Runway arg0 ) { if ( arg0 . isFree ( ) ) { runwaysArray [ arg0 . getRunwayNumber ( ) ] = arg0 ; } else { throw new RuntimeException ( "srini_string" ) ; } }
void function ( BigInteger arg0 ) { this . nresults = arg0 ; }
long function ( ) { return iter . next ( ) . readLong ( ) ; }
AccessibilityGraph function ( final DeploymentUnit arg0 ) { AccessibilityGraph loc0 = new AccessibilityGraph ( ) ; for ( BeanDeploymentArchive loc1 : beanDeploymentArchives ) { loc0 . addBeanDeploymentArchive ( loc1 ) ; } loc0 . addBeanDeploymentArchive ( rootBeanDeploymentModule ) ; return loc0 ; }
ITracePoint2D function ( ) { return m_previousPoint ; }
Object function ( Object arg0 ) { return value ; }
Map < Integer , Integer > function ( ) { return initialAvailableNumer ; }
ModInteger function ( Integer arg0 ) { return new ModInteger ( ~ arg0 , getModul ( arg0 ) ) ; }
String function ( ) { return name ; }
float function ( Vector3f arg0 , Vector3f arg1 ) { float loc0 = ( float ) ( arg0 . x * arg1 . x + arg0 . y * arg1 . y + arg0 . z * arg1 . z ) ; return loc0 ; }
boolean function ( GroupCategory ... arg0 ) { for ( GroupCategory loc0 : arg0 ) { if ( contains ( loc0 ) ) { return true ; } } return false ; }
GenMatrix < C > function ( Reader arg0 ) { return GenMatrix . fromReader ( arg0 ) ; }
boolean function ( ) { return ( this . type == NULL ) ; }
ByteBuffer function ( ByteBuffer arg0 , int arg1 , int arg2 ) { byte [ ] loc0 = new byte [ arg2 - arg1 ] ; System . arraycopy ( arg0 . array ( ) , arg1 , loc0 , 0 , arg2 ) ; return ByteBuffer . wrap ( loc0 ) ; }
String function ( ) { return toXMLString ( ) ; }
LinkedList function ( CFG arg0 ) { LinkedList loc0 = new LinkedList ( ) ; for ( Block loc1 : arg0 . getBlocks ( ) ) { loc0 . addFirst ( loc1 . getDominanceFrontier ( ) ) ; } arg0 . setBlocks ( loc0 ) ; notifyBlocks ( arg0 ) ; return loc0 ; }
String function ( String arg0 ) { int loc0 = arg0 . lastIndexOf ( "srini_string" ) ; if ( loc0 > 0 ) { return arg0 . substring ( 0 , loc0 ) ; } return arg0 ; }
ModuleList < C > function ( int arg0 , int arg1 ) { return this . rightGB ( arg0 , arg1 , false , null ) ; }
List function ( ) { return ones ; }
String function ( ) { return this . entityName ; }
void function ( ClassInfo arg0 , Type arg1 ) { interfaceInfo ( arg0 ) . addInterface ( arg1 ) ; }
BatchCQLStatementTupleMapper function ( BatchCQLStatementBuilder ... arg0 ) { return new BatchCQLStatementTupleMapper ( arg0 ) ; }
void function ( String arg0 ) { files . add ( arg0 ) ; }
int [ ] function ( int [ ] arg0 ) { int loc0 = arg0 . length / 2 ; return redHistogram ( arg0 , loc0 ) ; }
IConnection function ( String arg0 , int arg1 ) { IConnection loc0 = connections . get ( arg0 ) ; if ( loc0 != null ) return loc0 ; loc0 = new LocalConnection ( storm_conf , arg0 , arg1 ) ; connections . put ( arg0 , loc0 ) ; return loc0 ; }
void function ( ) { IntArrayWorker loc0 = new IntArrayWorker ( ) ; int [ ] [ ] loc1 = { { 1 , 2 , 3 } , { 4 , 5 , 6 } } ; loc0 . setMatrix ( loc1 ) ; int loc2 = loc0 . getColTotal ( ) ; System . out . println ( "srini_string" + loc2 ) ; }
URL function ( String arg0 ) { String loc0 = RESOURCE + "srini_string" + arg0 ; return new URL ( loc0 ) ; }
boolean function ( ) { return isField ; }
void function ( Shell arg0 ) { bringWorkbenchToFront ( arg0 ) ; }
String function ( String arg0 ) { return arg0 ; }
GeckoMenu function ( ) { return mMenu ; }
ResourceEditPropertyBuilder function ( Clob arg0 ) { this . propertyComment = arg0 ; return this ; }
void function ( int arg0 ) { if ( arg0 < 0 || arg0 >= size ( ) ) throw new IndexOutOfBoundsException ( "srini_string" + arg0 + "srini_string" + size ( ) ) ; else stack . remove ( arg0 ) ; }
WorkerContextImpl function ( ) { return context . get ( ) ; }
Environment function ( ) { Environment loc0 = new Environment ( ) ; populateEnvironment ( loc0 ) ; return loc0 ; }
String function ( ) { return fMethod . getMnemonic ( ) ; }
String function ( String arg0 ) { System . out . println ( arg0 ) ; return in . readLine ( ) ; }
OSMElement function ( ) { return objectWithTags ; }
PartitionBatch function ( int arg0 ) { for ( Partitioner loc0 : partitioners ) { if ( loc0 . getPartitioningIndex ( ) > 0 ) { return loc0 . getPartitionOutgoingBatch ( arg0 ) ; } } return null ; }
void function ( Object arg0 , Throwable arg1 ) { log ( LogTarget . WARN , arg0 , arg1 ) ; }
boolean function ( ) { return false ; }
void function ( Object arg0 ) { error ( arg0 , null ) ; }
URI function ( ) { return uri ; }
void function ( ) { boolean loc0 = true ; for ( ColoredSystem < C > loc1 : list ) { loc0 &= loc1 . isDetermined ( ) && loc1 . getConditions ( ) . size ( ) == 0 ; } assertThat ( loc0 , isDetermined ( ) ) ; }
List < Integer > function ( ) { return JNACLibrary . getSupportedAbis ( ) ; }
CRL function ( byte [ ] arg0 ) { if ( arg0 == null ) return null ; ByteArrayInputStream loc0 = new ByteArrayInputStream ( arg0 ) ; CertificateFactory loc1 = CertificateFactory . getInstance ( "srini_string" ) ; return ( CRL ) loc1 . generateCRL ( loc0 ) ; }
void function ( int arg0 ) { int loc0 = size * 2 ; if ( arg0 > loc0 ) { loc0 = arg0 ; } size = loc0 ; }
State function ( ) { return state ; }
boolean function ( ) { Integer loc0 = Integer . valueOf ( mForegroundNotificationId ) ; return mNotifications . containsKey ( loc0 ) ; }
ResourceEditPropertyBuilder function ( boolean arg0 ) { this . isTesting = arg0 ; return this ; }
double function ( double arg0 , double arg1 , double arg2 ) { return bracket ( arg0 , arg1 , arg2 , 1 ) ; }
String function ( ) { return Objects . toStringHelper ( this ) . add ( "srini_string" , getChronology ( ) ) . add ( "srini_string" , getPeriodType ( ) ) . toString ( ) ; }
ObjectContainer function ( String arg0 ) { return open ( new File ( arg0 ) ) ; }
RawFragmentBatch function ( Allocator arg0 ) { return new RawFragmentBatch ( this , arg0 ) ; }
String function ( String arg0 ) { return fAttributes . get ( arg0 ) ; }
List < T > function ( Collection < T > arg0 ) { return CollectionUtils . asUnmodifiableList ( new ArrayList < T > ( arg0 ) ) ; }
Integer function ( ) { return stmt . getSeqnum ( ) ; }
boolean function ( ) { return i . stackOwner ( ) ; }
MSG_TYPE function ( ) { return msgType ; }
String function ( String arg0 ) { if ( map == null ) { return null ; } return map . get ( arg0 ) ; }
void function ( ) { receivedMsg ++ ; }
Element function ( Node arg0 , String arg1 ) { NodeList loc0 = arg0 . getElementsByTagName ( arg1 ) ; if ( loc0 . getLength ( ) > 0 ) { return ( Element ) loc0 . item ( 0 ) ; } return null ; }
int function ( final byte [ ] arg0 , final byte [ ] arg1 , final int arg2 ) { return compareTo ( arg0 , 0 , arg0 . length , arg1 , 0 , arg1 . length , arg2 ) ; }
String function ( final Member arg0 ) { return getClassDescriptor ( arg0 . getDeclaringClass ( ) ) ; }
Object function ( final Name arg0 ) { final int loc0 = arg0 . size ( ) - 1 ; if ( loc0 < 0 ) { throw new NamingException ( "srini_string" + arg0 ) ; } return arg0 . get ( loc0 ) ; }
ConsumedPort function ( ) { return new ConsumedPort ( ) ; }
String function ( String arg0 ) { return hostToIp . get ( arg0 ) ; }
void function ( ) { }
boolean function ( ) { return true ; }
void function ( Socket arg0 ) { arg0 . setSoTimeout ( getSocketTimeout ( ) ) ; this . socket = arg0 ; this . open = true ; }
void function ( String [ ] arg0 ) { int loc0 = Integer . parseInt ( arg0 [ 0 ] ) ; Student loc1 = readStudent ( loc0 ) ; Session loc2 = readSession ( loc1 ) ; writeSession ( loc2 ) ; }
boolean function ( IIndex arg0 ) { if ( arg0 == null ) return false ; fMap . remove ( arg0 . getId ( ) ) ; if ( arg0 . getId ( ) . equals ( "srini_string" ) ) fMap . remove ( "srini_string" ) ; return true ; }
Request function ( Class < ? > arg0 , String arg1 ) { return new ErrorReportingRunner ( arg0 , arg1 ) ; }
void function ( String arg0 ) { if ( arg0 != null ) { out . append ( arg0 ) ; } }
void function ( MouseEvent arg0 ) { release ( ) ; }
int function ( boolean arg0 ) { return this . list . indexOf ( arg0 ) ; }
File function ( ) { return this . file ; }
Date function ( Date arg0 ) { if ( arg0 == null ) { return null ; } SimpleDateFormat loc0 = new SimpleDateFormat ( "srini_string" ) ; Date loc1 = null ; try { loc1 = loc0 . parse ( arg0 . getTime ( ) ) ; } catch ( ParseException loc2 ) { Log . w ( TAG , "srini_string" , loc2 ) ; } return loc1 ; }
ArrayList < Byte > function ( ) { return bytes ; }
String function ( ) { return this . charset ; }
Phenotype function ( String arg0 , String arg1 ) { return getPhenotype ( arg0 , arg1 , 1 ) ; }
void function ( Context arg0 , Name arg1 , Object arg2 ) { arg0 . rebind ( arg1 , arg2 ) ; int loc0 = arg0 . size ( ) ; try { arg0 . rebind ( arg1 . getPrefix ( ) , arg2 , loc0 ) ; } catch ( NamingException loc1 ) { throw new CannotProceedException ( loc1 ) ; } }
void function ( final byte [ ] arg0 , final int arg1 , final int arg2 ) { if ( arg0 == null ) { return ; } ensureCapacity ( arg2 ) ; System . arraycopy ( arg0 , arg1 , buffer , position , arg2 ) ; position += arg2 ; }
void function ( Person arg0 ) { allPersons . remove ( arg0 ) ; allTags . remove ( arg0 ) ; }
boolean function ( Object arg0 ) { if ( ! ( arg0 instanceof RoutingTableEntry ) ) { return false ; } RoutingTableEntry < T > loc0 = ( RoutingTableEntry < T > ) arg0 ; return this . contact . equals ( loc0 . getContact ( ) ) ; }
void function ( String arg0 ) { ExtendedJSONObject loc0 = getObsoleteIds ( ) ; loc0 . putString ( PrefKeys . ID , arg0 ) ; setObsoleteIds ( loc0 ) ; }
void function ( String arg0 ) { if ( _register != null ) { _register . remove ( arg0 ) ; } }
void function ( Host arg0 , Double arg1 ) { List < Double > loc0 = rttToMonitors . get ( arg0 ) ; if ( loc0 == null ) { loc0 = new ArrayList < Double > ( ) ; rttToMonitors . put ( arg0 , loc0 ) ; } loc0 . add ( arg1 ) ; }
boolean function ( int arg0 , int arg1 ) { if ( arg0 < 0 || arg0 >= Board . MAX_BOARD_SIZE ) { return false ; } for ( int loc0 = 0 ; loc0 < pieces . length ; loc0 ++ ) { if ( pieces [ loc0 ] . arg0 == arg0 ) { return true ; } } return false ; }
Parser function ( ) { return new SAXParser ( ) ; }
void function ( int arg0 ) { this . iterations = arg0 ; }
QuadTree function ( SquareSide arg0 , SquareSide arg1 ) { return child ( 0 , arg0 ) . child ( 1 , arg1 ) ; }
void function ( double arg0 , double arg1 , double arg2 , double arg3 , double arg4 , double arg5 , List < GenPolynomial < C >> arg6 , List < GenPolynomial < C >> arg7 ) { Reduction < C > loc0 = new Reduction < C > ( arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 ) ; StdOut . print ( loc0 . toString ( ) ) ; }
ValidationContext function ( ) { return new ValidationContext ( ) ; }
Map < String , NamedParameterDescriptor > function ( ) { return this . namedDescriptorMap ; }
SpringConfig function ( final Properties arg0 ) { final SpringConfig loc0 = new SpringConfig ( ) ; loc0 . setProperties ( arg0 ) ; return loc0 ; }
Response . ResponseBuilder function ( Uri arg0 ) { return new Response . ResponseBuilder ( arg0 ) ; }
void function ( Permission arg0 ) { checkPermissionAndFireCheckedException ( arg0 , null ) ; }
boolean function ( String arg0 ) { return userFunctions . containsKey ( arg0 ) ; }
VectorXZ function ( double arg0 ) { if ( arg0 < 0 ) throw new IllegalArgumentException ( "srini_string" ) ; return new VectorXZ ( x * arg0 , z * arg0 , x * arg0 , z * arg0 ) ; }
String function ( Element arg0 , String arg1 ) { Attribute loc0 = arg0 . getAttributeByName ( arg1 ) ; if ( loc0 == null || loc0 . getValue ( ) == null ) { return null ; } return loc0 . getValue ( ) . trim ( ) ; }
void function ( ) { if ( isEmpty ( ) ) throw new NoSuchElementException ( "srini_string" ) ; Node loc0 = first ; first = loc0 . next ; next = loc0 ; size -- ; }
void function ( String arg0 ) { this . inputInfo = arg0 ; }
boolean function ( Bundle arg0 ) { return updateBundle ( arg0 , false ) ; }
long function ( ) { return kdcUtil . getCurrentTime ( ) ; }
Date function ( ) { return bankToCustomerStatement . getDtEnd ( ) ; }
Quotient < C > function ( C arg0 ) { return new Quotient < C > ( num . subtract ( arg0 . num ) , den . subtract ( arg0 . den ) , arg0 . isUNIT ) ; }
boolean function ( int arg0 ) { return ( LocalStore . get ( arg0 ) != null ) ; }
UnivPowerSeries < C > function ( ) { return get ( 0 , 5 , var , truncate ) ; }
Duration function ( Duration arg0 , Duration arg1 ) { return normalizedDuration ( arg0 . getSeconds ( ) + arg1 . getSeconds ( ) , arg0 . getNanos ( ) + arg1 . getNanos ( ) ) ; }
IAnnotationCreator function ( ) { if ( instance == null ) { synchronized ( IAnnotationCreator . class ) { if ( instance == null ) { instance = new AnnotationCreator ( ) ; } } } return instance ; }
boolean function ( T [ ] arg0 ) { return ( arg0 != null ) && arg0 . length > 0 ; }
HazelcastInstance function ( ) { return hazelcastInstance ( true ) ; }
boolean function ( java . math . BigInteger arg0 ) { return getModul ( arg0 ) . equals ( ModInteger . MIREX ( ) ) ; }
String function ( ) { return messageSource . getMessage ( FLASH_ERROR_MESSAGE , null , null ) ; }
Optional < Section > function ( ) { return sections ; }
boolean function ( ) { return timespan > 0 ; }
boolean function ( ) { return ( size == 0 ) ; }
void function ( PdfReader arg0 , Bookmark arg1 ) { for ( int loc0 = 0 ; loc0 < arg1 . getCount ( ) ; loc0 ++ ) { SimpleBookmark loc1 = arg1 . get ( loc0 ) ; loc0 . setBookmark ( loc1 ) ; } }
void function ( int arg0 ) { this . lineJoinStyle = arg0 ; }
int function ( ) { return red . getLength ( ) + green . getLength ( ) ; }
void function ( ICommandStack arg0 ) { }
void function ( int arg0 ) { setScreenBrightness ( arg0 , 0 , 255 ) ; }
void function ( ) { if ( releaseMap == null ) { releaseMap = new LinkedHashMap < Integer , ReleaseEntity > ( ) ; } }
Date function ( ) { return Date . from ( toInstant ( ) ) ; }
boolean function ( ) { return escapeText ; }
boolean function ( ) { return settings . getBoolean ( NET_SF_EHCACHE_CONFIGURATION_RESOURCE_NAME , false ) ; }
BasicDevice function ( String arg0 ) { if ( ( arg0 == null ) || ( arg0 . trim ( ) . equals ( "srini_string" ) ) ) { throw new NullIdException ( ) ; } return ( BasicDevice ) this . devices . get ( arg0 ) ; }
void function ( TLinkable arg0 ) { _next = arg0 ; }
void function ( Hessian2Serializer arg0 ) { _freeHessian2Input ( arg0 ) ; _freeHessian2Output ( arg0 ) ; }
TagState function ( ) { return tagState ; }
String function ( ) { returnNodeTypeZNode ( KEY_TYPE_ZNODE_NAME ) ; }
void function ( PropertyChangeListener arg0 ) { pcsDelegate . addPropertyChangeListener ( arg0 ) ; }
void function ( T arg0 , long arg1 ) { lock . lock ( ) ; try { map . put ( arg0 , arg1 ) ; } finally { lock . unlock ( ) ; } }
void function ( final ITestRunSession arg0 , final String arg1 ) { exportTestRunSession ( arg0 , arg1 , JUNIT3_CONTAINER_PATH ) ; }
void function ( Object arg0 ) { iterator . add ( arg0 ) ; }
boolean function ( ) { return fCheckable ; }
float function ( Context arg0 ) { return getCornerThickness ( arg0 , false ) ; }
void function ( FreeMarkerProperty arg0 ) { arg0 . setApp ( this ) ; collector . collectProperty ( arg0 ) ; }
boolean function ( ) { return ( this . type == NUMBER ) ; }
void function ( ) { throw new RuntimeException ( "srini_string" ) ; }
void function ( ) { MyListener . setInvocationCount ( 0 ) ; SLSBBMT loc0 = lookup ( "srini_string" , SLSBBMT . class ) ; this . doCMTTest ( loc0 , 6 ) ; }
void function ( int arg0 ) { sleep ( arg0 , "srini_string" ) ; }
void function ( String arg0 ) { this . caller = arg0 ; }
boolean function ( CtClass arg0 ) { return ! arg0 . isAnnotationPresent ( Entity . class ) ; }
Region function ( ) { return fTagPosition ; }
ColorPolynomial < C > function ( NumberArray arg0 ) { int loc0 = arg0 . length ( ) ; if ( ! isONE ( ) ) { return sum ( arg0 , 0 , loc0 ) ; } else { return sum ( arg0 , 1 , loc0 ) ; } }
void function ( GraphModelEvent arg0 ) { blockedTimeInWindow = 0 ; }
void function ( ImagePanel arg0 ) { arg0 . removeImagePanel ( this ) ; }
Block function ( ) { return returnAddress ; }
void function ( String arg0 , String arg1 ) { if ( mParameters == null ) mParameters = new HashMap < String , Object > ( ) ; mParameters . put ( arg0 , arg1 ) ; }
MethodStubStrategy function ( Class < ? > arg0 , String arg1 , Class < ? > [ ] arg2 , Object [ ] arg3 ) { return new MethodStubStrategy ( arg0 , arg1 , arg2 , arg3 ) ; }
void function ( ) { int loc0 = dao . countCustomers ( ) ; assertNotNull ( "srini_string" , loc0 ) ; assertEquals ( "srini_string" , 0 , loc0 ) ; }
boolean function ( ) { return valid ; }
File [ ] function ( String arg0 , String arg1 ) { return findFiles ( arg0 , arg1 , new String [ ] { } ) ; }
AlgebraicNumber < C > function ( java . io . Reader arg0 ) { return parse ( arg0 , null ) ; }
float function ( final String arg0 , final float arg1 ) { if ( arg0 == null || arg0 . length ( ) == 0 ) { return arg1 ; } final String [ ] loc0 = arg0 . split ( "srini_string" ) ; if ( loc0 . length < 2 ) { return arg1 ; } return Arrays . asList ( loc0 ) . get ( 0 ) ; }
String function ( ) { return "srini_string" ; }
BranchAndFinancialInstitutionIdentification4 function ( String arg0 , String arg1 ) { return new BranchAndFinancialInstitutionIdentification4 ( arg0 , arg1 ) ; }
XMLParser function ( ) { return setState ( SpecialCharState . RED ) ; }
boolean function ( ) { return isAssociative ( ) ; }
String function ( String arg0 ) { }
String [ ] function ( ) { return keyAliases ; }
char function ( ) { return list . peek ( ) ; }
void function ( ) { synchronizerDelegate . onSynchronized ( ) ; }
boolean function ( ) { return fEnabled ; }
void function ( ) { if ( fLabel != null ) { fLabel . validate ( ) ; } }
BigDecimal function ( ) { return random . nextDouble ( ) ; }
Object function ( final String arg0 , final Object arg1 ) { return add ( arg0 , arg1 , null ) ; }
void function ( ) { if ( parentCoordinator == null || parentCoordinator . id == 0 ) { return ; } if ( coordinatorKey == null ) { coordinatorKey = skyNetNode . getHostKey ( ) ; } treeHandlerDelegator . refreshTreeHandler ( this ) ; }
void function ( IWidgetLocator arg0 ) { }
Type function ( ) { return superclass ; }
Archive < ? > function ( ) { return ShrinkWrap . create ( Archive . class , MODULE_WEB ) ; }
void function ( Node arg0 ) { if ( arg0 == null ) return ; serialize ( arg0 . getLeft ( ) ) ; serialize ( arg0 . getRight ( ) ) ; }
ClassLoader function ( ) { ClassLoader loc0 = Thread . currentThread ( ) . getContextClassLoader ( ) ; if ( loc0 == null ) { loc0 = ClassLoader . getSystemClassLoader ( ) ; } return ( loc0 != null ? loc0 : Thread . currentThread ( ) . getContextClassLoader ( ) ) ; }
void function ( Iterable < ? extends Writable > arg0 ) { for ( Writable loc0 : arg0 ) { queue . add ( loc0 ) ; } }
GenVector < C > function ( ) { return fromList ( random ) ; }
int function ( ) { return marcador ; }
MathUtil function ( ) { return instance ; }
void function ( ) { tx = db . begin ( ) ; }
Change function ( ClasspathFixProposal arg0 ) { Change loc0 = new Change ( ) ; loc0 . addItem ( arg0 ) ; return loc0 ; }
void function ( Interpolator arg0 , int arg1 ) { if ( ! isAnimating ) { isAnimating = true ; launchAnimation ( arg0 , arg1 ) ; } }
String function ( AuctionEntry arg0 ) { return arg0 . getKey ( ) ; }
int function ( ) { return index ; }
Map < String , String > function ( String arg0 ) { if ( arg0 != null && ! arg0 . isEmpty ( ) ) { Map < String , String > loc0 = new HashMap < String , String > ( ) ; for ( String loc1 : arg0 . split ( DEFAULT_KEY_AND_VALUE_PAIR_SEPARATOR ) ) { loc0 . put ( loc1 , arg0 . substring ( 1 , arg0 . length ( ) - 1 ) ) ; } return loc0 ; } return null ; }
StringBuilder function ( StringBuilder arg0 , char arg1 ) { int loc0 = arg0 . length ( ) ; char loc1 = arg1 ; arg0 . delete ( loc0 , loc1 ) ; arg1 = arg0 . charAt ( loc0 ) ; arg0 . setCharAt ( loc0 , loc1 ) ; return arg0 ; }
void function ( ) { probes = new boolean [ 0 ] ; }
Map < String , ArrayList < String >> function ( ) { return values ; }
String [ ] function ( ) { return body ; }
String function ( String arg0 ) { return discardNonBase64Chars ( arg0 , 0 , arg0 . length ( ) ) ; }
boolean function ( ) { return globalMutex . isEmpty ( ) ; }
void function ( float arg0 ) { this . offset = arg0 ; }
Quotient < C > function ( ) { return new Quotient < C > ( random ( ) ) ; }
Dialog function ( Component arg0 , IDialogConstants arg1 , String arg2 , Object arg3 ) { return createRefactoringStatusDialog ( arg0 , arg1 , arg2 , arg3 , null ) ; }
boolean function ( ) { return false ; }
DocumentWrapper function ( DocumentWrapper arg0 ) { DocumentWrapper loc0 = ( DocumentWrapper ) arg0 . clone ( ) ; loc0 . setDocumentMetadata ( arg0 . getDocumentMetadata ( ) ) ; loc0 . setRowId ( arg0 . getRowId ( ) ) ; return loc0 ; }
T function ( Class < T > arg0 ) { return create ( arg0 , new Object [ 0 ] ) ; }
boolean function ( PdfName arg0 , PdfDictionary arg1 ) { if ( arg0 . equals ( PdfName . DISPLAY ) ) { return true ; } if ( arg0 . equals ( PdfName . VIEWER ) ) { return ( ( PdfDictionary ) arg1 . get ( arg0 ) ) != null ; } return false ; }
Local < C > function ( String arg0 ) { return parse ( arg0 , null ) ; }
SortedBag < T > function ( SortedBag < ? extends T > arg0 ) { return new TypeBoundSortedBag < > ( arg0 ) ; }
boolean function ( ) { return enabledMetrics . size ( ) > 0 ; }
void function ( Window arg0 ) { runner = new GUIRunner ( arg0 ) ; }
ISDVInfo function ( ) { return new ISDVInfo ( ) ; }
ITrace2D function ( ) { return m_trace ; }
Image function ( String arg0 , Class arg1 ) { return getImage ( arg0 , arg1 , false ) ; }
void function ( OutputStream arg0 ) { sessionInfos . save ( arg0 ) ; }
Residue < C > function ( ) { return new Residue < C > ( ring . clone ( ) , val , isunit ) ; }
OSCByteStream function ( ) { if ( ! isByteArrayComputed ) { computeByteArray ( ) ; } return byteArray ; }
void function ( int arg0 ) { balance -= arg0 ; }
Dialog function ( final Document arg0 , final IProgressMonitor arg1 ) { return createRefactoringStatusDialog ( arg0 , arg1 , null ) ; }
JoinSequence function ( boolean arg0 ) { this . useThetaStyle = arg0 ; return this ; }
void function ( JsonElement arg0 ) { if ( arg0 . isArray ( ) ) { for ( int loc0 = 0 ; loc0 < arg0 . size ( ) - 1 ; loc0 ++ ) { inspectChild ( arg0 . getValue ( loc0 ) , loc0 ) ; } } }
boolean function ( ) { if ( mainType . equals ( "srini_string" ) || mainType . equals ( "srini_string" ) ) { return true ; } return false ; }
DateTime function ( ) { return toDateTime ( DateTimeZone . UTC ) ; }
Quotient < C > function ( double arg0 ) { return new Quotient < C > ( NumericalUtils . sqrt ( arg0 ) ) ; }
boolean function ( Class arg0 , Class arg1 ) { return ( arg0 . isAssignableFrom ( arg1 ) || arg0 . equals ( arg1 ) ) ; }
Limit function ( ) { return new Limit ( ) ; }
IHoverInfo function ( final IProgressMonitor arg0 ) { return new MouseHoverInfo ( arg0 ) ; }
int function ( ) { return ( int ) Math . round ( x ) ; }
boolean function ( Block arg0 ) { if ( arg0 . y + Block . HEIGHT > y ) { if ( arg0 . x + Block . WIDTH == x ) { return true ; } } return false ; }
void function ( String arg0 ) { rowData = arg0 ; }
int function ( ) { if ( beforeFirst ) { throw new NoSuchElementException ( ) ; } beforeFirst = false ; return nextIndex ( ) ; }
void function ( ) { final String loc0 = this . slsb . getInjectedString ( ) ; Assert . assertEquals ( "srini_string" , "srini_string" , loc0 ) ; }
Iterator < Float > function ( FloatIterator arg0 ) { return ( arg0 == null ) ? null : new FloatIterator ( arg0 ) ; }
void function ( TokenProvider arg0 ) { this . tokenProvider = arg0 ; }
Header function ( ) { return myHeader ; }
int function ( ) { return tagNo ; }
byte [ ] function ( byte [ ] arg0 ) { return saslClient != null ? saslClient . evaluateResponse ( arg0 ) : new byte [ 0 ] ; }
Iterator < D > function ( ) { return reader . iterator ( ) ; }
void function ( Composite arg0 , ImageDescriptor arg1 , boolean arg2 ) { Composite loc0 = new Composite ( arg0 ) ; loc0 . setFilter ( filterString ( arg1 ) ) ; if ( arg2 ) { loc0 . setVisible ( true ) ; } else { loc0 . setVisible ( false ) ; } arg0 . add ( loc0 ) ; }
JoinSequence function ( Collection arg0 , String arg1 , JoinType arg2 , String [ ] arg3 ) { JoinSequence loc0 = createJoinSequence ( sfi , arg0 , arg1 , arg2 , arg3 ) ; loc0 . setMode ( arg2 ) ; return loc0 ; }
void function ( @ ArquillianResource ( TxControlServlet . class ) URL arg0 ) { testURL ( arg0 , true , false ) ; }
void function ( String [ ] arg0 ) { Mammoth loc0 = new Mammoth ( ) ; loc0 . observe ( ) ; loc0 . timePasses ( ) ; loc0 . observe ( ) ; loc0 . timePasses ( ) ; loc0 . observe ( ) ; }
Exception function ( ) { return this . error ; }
void function ( MetricsAggregate arg0 ) { this . conditionVarition = arg0 ; }
byte [ ] function ( Drawable arg0 ) { if ( arg0 == null ) { return null ; } ByteArrayOutputStream loc0 = new ByteArrayOutputStream ( ) ; arg0 . draw ( loc0 ) ; return loc0 . toByteArray ( ) ; }
void function ( Closeable arg0 ) { if ( arg0 != null ) { try { arg0 . close ( ) ; } catch ( IOException loc0 ) { } } }
void function ( boolean arg0 ) { if ( arg0 == false ) { throw new IllegalArgumentException ( "srini_string" ) ; } }
Residue < C > function ( Reader arg0 ) { return parse ( arg0 , null ) ; }
float function ( ) { return rise ; }
byte [ ] function ( String arg0 ) { return StringUtils . getBytesUnchecked ( arg0 , CharEncoding . UTF_16 ) ; }
void function ( ) { for ( int loc0 = 0 ; loc0 < grid . length ; loc0 ++ ) { for ( int loc1 = 0 ; loc1 < grid [ 0 ] . length ; loc1 ++ ) { grid [ loc0 ] [ loc1 ] = 0 ; } } }
Student function ( String arg0 ) { Student loc0 = null ; try { Document loc1 = new Document ( ) ; loc0 = read ( loc1 , new FileInputStream ( arg0 ) ) ; } catch ( Exception loc1 ) { loc1 . printStackTrace ( ) ; } return loc0 ; }
int function ( ) { return state ; }
void function ( boolean arg0 ) { this . payloadSizeEstimatedWhenAdding = arg0 ; }
void function ( List < Integer > arg0 ) { taskIdsQueue . addAll ( arg0 ) ; takeLock . lock ( ) ; try { notEmpty . signal ( ) ; } finally { takeLock . unlock ( ) ; } }
void function ( long [ ] arg0 ) { _list . toArray ( arg0 ) ; }
int function ( ) { return type ; }
void function ( TagSet arg0 , String arg1 ) { String loc0 = "srini_string" ; validateChildNotSetOnSetParent ( arg0 , arg1 , loc0 ) ; }
Local < C > function ( ) { return ( Local < C > ) ring ; }
String function ( File arg0 ) { return readFully ( arg0 , Charsets . UTF_8 ) ; }
UUID function ( byte [ ] arg0 ) { if ( isPsshAtom ( arg0 ) ) { String loc0 = new String ( arg0 , "srini_string" ) ; return UUID . fromString ( loc0 ) ; } return null ; }
List function ( ) { return list ; }
void function ( Component arg0 ) { this . component = arg0 ; }
void function ( Pipeline < ? > arg0 ) { arg0 . next ( ) ; }
String function ( IPlugIn arg0 ) { if ( arg0 == null ) { return null ; } return arg0 . getIdentifier ( ) ; }
PMML function ( InputStream arg0 ) { return IOUtil . toPMML ( arg0 ) ; }
int function ( ) { return classInfo . hashCode ( ) ; }
boolean function ( IProject arg0 ) { if ( arg0 == null ) return false ; return _exists && arg0 . exists ( ) ; }
void function ( String arg0 ) { this . style = arg0 ; }
void function ( final HttpParams arg0 , final boolean arg1 ) { Args . notNull ( arg0 , "srini_string" ) ; arg0 . setBooleanParameter ( CoreConnectionPNames . SO_KEEPALIVE , arg1 ) ; }
void function ( int arg0 , int arg1 , int arg2 ) { if ( arg0 == EMPTY ) arg0 = arg1 ; if ( arg1 == EMPTY ) arg1 = arg2 ; gridData [ arg0 ] [ arg1 ] = FISH ; }
Set < ResourceGroupEntity > function ( ResourceType arg0 ) { return resourceGroupService . findAllByResourceType ( arg0 ) ; }
void function ( ListElement arg0 ) { listElements . add ( arg0 ) ; }
Object [ ] [ ] function ( ) { return columnNames ; }
void function ( Class < E > arg0 , E arg1 ) { if ( handlers . containsKey ( arg0 ) ) { handlers . get ( arg0 ) . handle ( arg1 ) ; } else { arg1 . dispatch ( ) ; } }
void function ( boolean arg0 ) { this . useCriterion4 = arg0 ; }
void function ( Author arg0 ) { addPart ( CREATOR , arg0 , null ) ; }
void function ( ) { if ( size ( ) != _mods ) throw new ConcurrentModificationException ( ) ; reset ( ) ; }
String function ( ) { return null ; }
Identifier function ( String arg0 , String arg1 , String arg2 ) { return new BasicIdentifier ( arg0 , arg1 , arg2 ) ; }
void function ( ) { if ( sClipboardQueue != null ) { sClipboardQueue . clear ( ) ; } }
String function ( String arg0 , Object ... arg1 ) { return String . format ( arg0 , arg1 ) ; }
ITypeHierarchy function ( IType arg0 ) { return fTypeHierarchy . getSuperTypeHierarchy ( arg0 ) ; }
void function ( ) { fContent = null ; }
int function ( ListNode arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 . size ( ) ; loc1 ++ ) loc0 += arg0 . get ( loc1 ) . getValue ( ) ; return loc0 ; }
void function ( ) { }
void function ( double arg0 , double arg1 ) { double loc0 = Math . abs ( arg0 - arg1 ) ; if ( loc0 > Double . MAX_VALUE || loc0 < 0 ) { throw new IllegalArgumentException ( "srini_string" + arg0 + "srini_string" + arg1 ) ; } this . leftBound = arg0 ; this . rightBound = arg1 ; fireBoundsChangeEvent ( ) ; }
List < Tag > function ( Tag arg0 ) { List < Tag > loc0 = new ArrayList < Tag > ( ) ; if ( arg0 != null ) { while ( arg0 . getParent ( ) != null ) { loc0 . add ( arg0 . getParent ( ) ) ; arg0 = arg0 . getParent ( ) ; } } return loc0 ; }
void function ( ) { assertThatClassIsList ( OrderedUnorderedListItem . class ) ; }
void function ( Collection arg0 , Collection arg1 , String arg2 ) { if ( ! arg0 . containsAll ( arg1 ) ) { fail ( arg2 ) ; } }
int function ( String arg0 , String arg1 , int arg2 ) { return getMessage ( arg0 , arg1 , new Object [ ] { arg2 } ) ; }
int function ( ASTNode arg0 ) { switch ( arg0 . getKind ( ) ) { case Token . SELECT : case Token . BEFORE : case Token . AFTER : case Token . INCLUDE : case Token . SELECTED : return INTERSECTS ; case Token . BEFORE : return BEFORE ; case Token . AFTER : return AFTER ; default : return BEFORE ; } }
void function ( boolean arg0 ) { started_ = arg0 ; }
IJavaSearchScope function ( IJavaElement arg0 ) { return RefactoringScopeFactory . create ( arg0 , true ) ; }
Object function ( BigInteger arg0 ) { Object loc0 = _curr . get ( arg0 ) ; return loc0 == null ? null : loc0 ; }
T function ( Class < T > arg0 , String arg1 , InputStream arg2 ) { HttpResponse loc0 = HttpHelper . executeUrl ( arg1 , buildRequest ( arg0 , arg2 ) , mapper ) ; return mapper . readValue ( loc0 . getEntity ( ) , arg0 ) ; }
void function ( ) { TopLevelBean loc0 = lookup ( "srini_string" , TopLevelBean . class ) ; loc0 . induceCreationViaJNDILookup ( ) ; }
void function ( int arg0 ) { unscheduleTask ( arg0 ) ; }
String function ( ) { return id ; }
long function ( ) { return allocationLimit . get ( ) ; }
int function ( ) { return addends . size ( ) ; }
ColumnMetaData [ ] function ( ) { return metaData . getRoots ( ) ; }
Residue < C > function ( ) { return negate ( 1 ) ; }
String function ( ) { return baseID ; }
Set < Asset > function ( Set < Asset > arg0 ) { final Set < Asset > loc0 = new HashSet < Asset > ( ) ; for ( final Asset loc1 : arg0 ) { if ( loc1 . getVendor ( ) != null ) { loc0 . add ( loc1 ) ; } } return loc0 ; }
String function ( ) { return this . catalogKey ; }
RDD < MatchableEntity > function ( RDD < MatchableEntity > arg0 ) { if ( ! arg0 . isDataFrame ( ) ) { throw new IllegalArgumentException ( "srini_string" ) ; } return arg0 . map ( new MatchableEntityMap ( ) ) ; }
void function ( Figure arg0 ) { _message = arg0 ; }
IntListIterator function ( ListIterator arg0 ) { return new IntListIterator ( arg0 ) ; }
Closure function ( Closure arg0 ) { return new MethodClosure ( arg0 ) ; }
int function ( ) { return val . size ( ) ; }
boolean function ( final HttpServletResponse arg0 ) { return isResponseFresh ( ) || getLastModifiedValue ( arg0 ) != null ; }
InputStream function ( InputStream arg0 , int arg1 , int arg2 ) { return new NioInputStream ( arg0 , arg1 , arg2 ) ; }
boolean function ( ) { return instantiated ; }
boolean function ( ) { if ( ! configured ) throw new IllegalStateException ( "srini_string" + "srini_string" ) ; return keyPopularity . size ( ) > 0 ; }
DeSerializer function ( boolean arg0 ) { return new Hessian2Deserializer ( arg0 ) ; }
void function ( IWidgetAdapter arg0 ) { adapters . put ( arg0 . getClass ( ) , arg0 ) ; }
void function ( double arg0 ) { this . numHosts = arg0 ; }
void function ( byte [ ] arg0 , CryptoRecord arg1 ) { arg1 . init ( arg0 ) ; }
void function ( Object arg0 ) { if ( is12 ) { getLogger ( ) . log ( FQCN , ( Priority ) Level . TRACE , arg0 , null ) ; } else { getLogger ( ) . log ( FQCN , Level . TRACE , arg0 ) ; } }
boolean function ( ) { return false ; }
void function ( String arg0 ) { this . fileName = arg0 ; }
Throwable function ( ) { return state . getException ( ) ; }
boolean function ( T arg0 , int arg1 ) { try { return orm . update ( arg0 , arg1 ) ; } catch ( SQLException loc0 ) { throw new OsmosisRuntimeException ( "srini_string" , loc0 ) ; } }
List < Tag > function ( Tag arg0 ) { List < Tag > loc0 = new ArrayList < Tag > ( ) ; if ( arg0 != null ) { while ( arg0 . getParent ( ) != null ) { loc0 . add ( arg0 . getParent ( ) ) ; arg0 = arg0 . getParent ( ) ; } } return loc0 ; }
void function ( ) { Assert . assertTrue ( "srini_string" , this . slsb . getAutowiredBean ( "srini_string" ) instanceof DefaultValidatorFactory ) ; }
Collection function ( ) { return bag ; }
int function ( ) { return accounts . length ; }
void function ( int arg0 ) { need ( arg0 ) ; }
void function ( int arg0 ) { doKeyDown ( arg0 , false ) ; }
T function ( Object arg0 , Closure arg1 ) { if ( arg0 == null ) { return null ; } return ( T ) iClosure . call ( arg0 ) ; }
int function ( ) { return coveredBranches ; }
AlgebraicNumber < C > function ( ) { return new AlgebraicNumber < C > ( java . lang . Math . gcd ( getVal ( ) . tol ( ) , getVal ( ) ) , getVal ( ) ) ; }
T function ( ) { return key ; }
void function ( final GeneralArchive < ? > arg0 ) { addXACMLPoliciesToArchive ( arg0 , SUBST_SUBJECT_ID ) ; }
LinearLayout function ( String arg0 ) { LinearLayout loc0 = new LinearLayout ( 50 , 50 ) ; loc0 . setLayoutData ( new Object [ ] { arg0 } ) ; return loc0 ; }
MessageSource function ( ) { return messageSourceMock ; }
boolean function ( String arg0 ) { return _register . containsKey ( arg0 ) ; }
Integer function ( ) { return precision ; }
void function ( tagName arg0 , String arg1 ) { Assert . assertEquals ( "srini_string" , arg0 , arg1 ) ; }
void function ( Color arg0 ) { color = arg0 ; Canvas . getInstance ( ) . repaint ( ) ; }
List < PropertyDeclaration > function ( ) { if ( properties == null ) { properties = new ArrayList < PropertyDeclaration > ( ) ; } return this . properties ; }
void function ( ComplexType arg0 ) { write ( arg0 . getBasicType ( ) ) ; writeBackToXML ( arg0 . getBody ( ) ) ; }
String function ( ) { return getIdentitiesZNode ( ) ; }
void function ( KeyStore arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( REVIEW_MESSAGE ) ; } }
CQLStatementTupleMapper function ( Tuple arg0 , String arg1 , Object arg2 ) { return new ColumnValueTupleMapper ( arg1 , arg2 , all ) ; }
byte function ( int arg0 ) { if ( arg0 < size ) { return list . get ( arg0 ) ; } else { return list . get ( size - arg0 - 1 ) ; } }
void function ( ) { }
void function ( ) { Customer loc0 = existingCustomer ; dao . deleteCustomerSchema ( loc0 ) ; }
boolean function ( ) { return percentage ; }
SessionImplementor function ( ) { return session ; }
IWidgetLocator function ( T arg0 ) { return new WidgetLocator ( arg0 ) ; }
Set < Integer > function ( MVariable arg0 ) { Set < Integer > loc0 = new HashSet < Integer > ( ) ; for ( MStatement loc1 : statements ) { if ( loc1 . getInputs ( ) . contains ( arg0 ) ) { loc0 . add ( loc1 . getIndex ( ) ) ; } } return loc0 ; }
String function ( ) { if ( shouldTrim ) { this . trimBody ( ) ; } return this . body . exec ( ) ; }
void function ( ) { Message . sendMessage ( "srini_string" + PRINCIPAL + "srini_string" + "srini_string" + "srini_string" + "srini_string" + "srini_string" ) ; }
void function ( mg arg0 , Attribute arg1 ) { if ( ! is_local_variable_type_table ( arg0 ) ) return ; arg0 . remove_attribute ( arg1 ) ; }
TemplateDocument function ( ) { return createBuffer ( true ) ; }
void function ( final File arg0 , final File arg1 ) { final File [ ] loc0 = arg0 . listFiles ( ) ; final File [ ] loc1 = arg1 . listFiles ( ) ; for ( final File loc2 : loc0 ) { if ( ! loc2 . isFile ( ) ) { continue ; } if ( ! loc1 . contains ( loc2 ) ) { return ; } } compareFiles ( loc0 , loc1 ) ; }
Rectangle2D function ( ) { return new Rectangle2D . Double ( startPoint . x , startPoint . y , endPoint . x - startPoint . x , endPoint . y - startPoint . y ) ; }
void function ( Writer arg0 ) { assertNotNull ( arg0 ) ; }
UserInterfaceContext function ( ) { return new UserInterfaceContext ( ) ; }
Asn1Asn1 function ( byte [ ] arg0 ) { return decode ( arg0 ) ; }
Duration function ( Timestamp arg0 , Duration arg1 ) { return Durations . fromMillis ( arg0 . getTime ( ) - arg1 . getTime ( ) ) ; }
void function ( int arg0 , String arg1 ) { defaults . put ( arg0 , arg1 ) ; }
Object function ( ) { return debug ; }
ContextEntity function ( ContextEntity arg0 ) { if ( arg0 == null ) { return globalContext ; } else { return arg0 ; } }
String function ( ) { return classInfo . name ( ) ; }
byte [ ] function ( ) { if ( consumedLength > 0 ) { return consumedData ; } byte [ ] loc0 = new byte [ remainingLength ] ; System . arraycopy ( payload , 0 , loc0 , 0 , consumedLength ) ; consumedLength = 0 ; return loc0 ; }
int function ( ) { return 37 * getClass ( ) . hashCode ( ) ; }
Token [ ] function ( ) { return TokenService . getRenewedTokens ( ) ; }
void function ( boolean arg0 ) { fStatementsRecovery = arg0 ; }
boolean function ( GenPolynomial < C > arg0 ) { return getPolynomial ( ) . equals ( arg0 . getPolynomial ( ) ) ; }
Set function ( ) { return composites ; }
void function ( ) { compact ( _size ) ; }
void function ( Throwable arg0 ) { invalidScriptError = arg0 ; }
void function ( File arg0 , String arg1 ) { write ( arg0 , arg1 , true ) ; }
boolean function ( Object arg0 ) { if ( ! ( arg0 instanceof BigDecimal ) ) return false ; BigDecimal loc0 = ( BigDecimal ) arg0 ; return compareTo ( loc0 ) == 0 ; }
int function ( ) { return stack . size ( ) ; }
Type function ( ) { return type ; }
ResourceEditPropertyBuilder function ( String arg0 ) { this . fcExternalLink = arg0 ; return this ; }
boolean function ( ) { return isKeyOptional ; }
SourceViewer function ( ) { return fSourceViewer ; }
List < List < VectorXZ >> function ( Collection < Triangle > arg0 ) { return texCoordLists ( Arrays . asList ( arg0 ) ) ; }
void function ( User arg0 ) { if ( isChuckNorris ( arg0 ) ) { Permission loc0 = permissionService . getPermission ( "srini_string" ) ; Assert . assertNotNull ( loc0 ) ; throw new AccessDeniedException ( "srini_string" + loc0 . getMessage ( ) ) ; } }
List function ( Enumeration arg0 ) { List loc0 = new ArrayList ( ) ; while ( arg0 . hasMoreElements ( ) ) { loc0 . add ( arg0 . nextElement ( ) ) ; } return loc0 ; }
int function ( ) { return size ; }
int function ( ) { if ( kdcConfig == null ) throw new RuntimeException ( "srini_string" ) ; return kdcConfig . getKdcTcpPort ( ) ; }
String function ( Class arg0 ) { return arg0 . getName ( ) ; }
void function ( final Script arg0 ) { list . remove ( arg0 ) ; }
void function ( ) { state = State . NORMAL ; }
ShortListIterator function ( ShortListIterator arg0 ) { return UnmodifiableShortListIterator . unmodifiableShortListIterator ( arg0 ) ; }
void function ( ) { output = new PrintStream ( OUTPUT_FILE ) ; error = new PrintStream ( ERROR_FILE ) ; singleton = new FileLoggerModule ( ) ; }
boolean function ( double arg0 , double arg1 ) { if ( ! isSubset ( arg0 , arg1 ) ) return false ; return arg0 >= arg1 && arg0 < arg1 ; }
String function ( ) { return name ; }
ClassLoader function ( ) { ClassLoader loc0 = null ; synchronized ( factories ) { loc0 = ( ClassLoader ) factories . get ( "srini_string" ) ; } return ( loc0 != null ) ? loc0 : Thread . currentThread ( ) . getContextClassLoader ( ) ; }
Local < C > function ( C arg0 ) { return local ( Math . abs ( arg0 ) ) ; }
boolean function ( ) { return false ; }
T function ( List < T > arg0 ) { if ( arg0 . isEmpty ( ) ) { return null ; } Random loc0 = new Random ( ) ; return arg0 . get ( loc0 . nextInt ( arg0 . size ( ) ) ) ; }
boolean function ( ) { for ( T loc0 : _freeStack ) { if ( loc0 == null ) { return true ; } } return false ; }
Topology function ( String arg0 , int arg1 , HazelcastInstance arg2 ) { return new ClientTopology ( arg0 , arg1 , arg2 ) ; }
Object function ( Object arg0 , Class arg1 ) { if ( arg0 != null ) { return directPropertyAccessOR . resolve ( arg0 , arg1 ) ; } else { return NO_PARAMS ; } }
void function ( File arg0 ) { if ( arg0 . isDirectory ( ) ) { deleteOrThrow ( arg0 ) ; } else { Files . delete ( arg0 . toPath ( ) ) ; } }
void function ( ) { singleton . reset ( ) ; }
HashCodeBuilder function ( float arg0 ) { return appendFloat ( arg0 , true ) ; }
void function ( Integer arg0 ) { this . deptId = arg0 ; }
ContextQuery function ( String arg0 ) { return newContextQuery ( null , arg0 ) ; }
boolean function ( ) { if ( po == null ) return true ; return false ; }
void function ( ) { cache . clear ( ) ; }
K function ( ) { if ( kSmallest == null ) return null ; return kSmallest . minKey ( ) ; }
void function ( GridBagConstraints arg0 ) { this . constraints = arg0 ; }
MetricsAggregate function ( ) { return peerVariation ; }
boolean function ( Object arg0 ) { if ( this == arg0 ) return true ; if ( arg0 instanceof Residue ) { Residue < C > loc0 = ( Residue < C > ) arg0 ; return ( isField && loc0 . isField ( ) && isModul ( loc0 . getModul ( ) ) ) || ( isField && loc0 . isField ( ) && loc0 . getModul ( ) . equals ( modul ) ) ; } return false ; }
boolean function ( String arg0 , char arg1 , char arg2 ) { return arg0 . length ( ) > arg1 . length ( ) && arg0 . charAt ( arg1 ) == arg2 ; }
void function ( String arg0 ) { this . outOfServiceByRelease = arg0 ; }
LoadPlan function ( String arg0 , String arg1 ) { return new LoadPlan ( arg0 , arg1 , null ) ; }
void function ( Document ... arg0 ) { for ( Document loc0 : arg0 ) { if ( loc0 != null ) { collection . insert ( loc0 ) ; } } }
BigDecimal function ( BigDecimal arg0 ) { return context . copy ( arg0 ) ; }
int function ( ) { return iterationCount ; }
void function ( WidgetLocator arg0 ) { _parentInfo = arg0 ; }
void function ( ) { list . clear ( ) ; }
void function ( ) { checkLoopback ( ) ; delegate . writeLock ( ) . lock ( ) ; }
void function ( RenderEvent arg0 ) { for ( RenderFilter loc0 : filters ) { loc0 . render ( arg0 ) ; } }
Object function ( Class arg0 ) { return this . map . remove ( arg0 ) ; }
CompositeData function ( ) { try { return new CompositeDataSupport ( COMPOSITE_TYPE ) ; } catch ( OpenDataException loc0 ) { throw new RuntimeException ( loc0 ) ; } }
boolean function ( int arg0 ) { return eventPool . containsKey ( arg0 ) ; }
List function ( String arg0 ) { ArrayList loc0 = new ArrayList ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0 , _delimeter ) ; while ( loc1 . hasMoreTokens ( ) ) { loc0 . add ( loc1 . nextToken ( ) ) ; } return loc0 ; }
Point function ( ) { return new Point ( startNode . getCenter ( ) , endNode . getCenter ( ) ) ; }
ArrayList < GenPolynomial < C >> function ( ) { return P ; }
void function ( BufferFlag arg0 ) { flags . add ( arg0 ) ; }
boolean function ( T arg0 , List < T > arg1 ) { for ( T loc0 : arg1 ) { if ( arg0 . equals ( loc0 ) ) { return true ; } } return false ; }
UnivPowerSeries < C > function ( BigInteger arg0 ) { return get ( java . lang . Math . abs ( arg0 . longValue ( ) ) ) ; }
void function ( Change arg0 ) { fParent = arg0 ; }
void function ( int arg0 ) { xPosition = ( arg0 / 2 ) - padding_ ; yPosition = ( arg0 / 2 ) - padding_ ; }
PdfImageObject function ( ) { return imageObject ; }
void function ( Object arg0 ) { removeCallback ( instances , arg0 ) ; }
void function ( ) { mShouldDispatchChanges = false ; }
void function ( final String arg0 ) { m_isMajorTick = true ; m_label = arg0 ; }
String function ( int arg0 , String arg1 ) { return arg0 + "srini_string" + arg1 ; }
boolean function ( ) { return _hierarchy . isSubmenu ( this ) ; }
ConditionMonitor function ( ) { return INSTANCE ; }
void function ( Object arg0 , Object arg1 , Object arg2 ) { try { Field loc0 = arg0 . getClass ( ) . getDeclaredField ( arg1 ) ; loc0 . setAccessible ( true ) ; loc0 . set ( arg0 , arg2 ) ; } catch ( Exception loc0 ) { throw new RuntimeException ( "srini_string" + arg1 + "srini_string" + arg0 , loc0 ) ; } }
HashMap < BigDecimal , MetricsSubCoordinatorInfo > function ( ) { return listOfSubCoordinators ; }
boolean function ( Object arg0 , Object arg1 ) { if ( arg0 == null ) { return arg1 == null ; } return arg0 . equals ( arg1 ) ; }
Duration function ( int arg0 ) { return withWindowLength ( Duration . ofDays ( arg0 ) ) ; }
void function ( ) { SecurityConfiguration . getApplicationPolicy ( "srini_string" ) ; }
Map < String , String > function ( ) { return parasMap ; }
Boolean function ( Release arg0 , String arg1 ) { return this . resourceReleaseComparator . isBestMatching ( arg0 , arg1 ) ; }
Owner function ( ) { return owner ; }
String function ( ) { return lcHostname + "srini_string" + hostname ; }
void function ( String arg0 ) { add_implied_vis ( arg0 ) ; }
TLinkable function ( ) { return _next ; }
int function ( ) { return ( available - leased ) + leased ; }
List < String > function ( ) { if ( tags == null ) { tags = new ArrayList < String > ( ) ; } return this . tags ; }
void function ( PdfReader arg0 , PdfWriter arg1 ) { fc . addDocument ( arg0 , arg1 ) ; }
int function ( ) { int loc0 = val . hashCode ( ) ; loc0 = 29 * loc0 + ( ( loc0 >> 31 ) ^ ( loc0 % 31 ) ) ; return loc0 ; }
void function ( String [ ] arg0 ) { Configuration loc0 = getConfiguration ( ) ; sentencesExtractor . extract ( loc0 , arg0 ) ; }
Message function ( ) { try { return blkQueue . take ( ) ; } catch ( InterruptedException loc0 ) { LOGGER . error ( "srini_string" , loc0 ) ; return null ; } }
List < ColumnMetaData > function ( Schema arg0 ) { return columns . get ( arg0 ) ; }
VectorXYZ function ( final double arg0 , final double arg1 , final double arg2 ) { final double loc0 = ( double ) Math . cos ( arg0 ) , final double loc1 = ( double ) Math . sin ( arg1 ) ; return new VectorXYZ ( x * loc0 + y * loc1 , z * loc0 - x * loc1 , z * loc1 + y * loc0 ) ; }
void function ( ) { tokeniser . readObject ( ) ; }
void function ( Long arg0 ) { this . endIp = arg0 ; }
List < BE > function ( ) { List < EntityAndPendingNotifications < BE , ? >> loc0 = getSentNotifications ( ) ; List < BE > loc1 = new ArrayList < > ( loc0 . size ( ) ) ; for ( EntityAndPendingNotifications < BE , ? > loc2 : loc0 ) loc1 . add ( loc2 ) ; return loc1 ; }
List < WPTreeNode > function ( WPTreeNode arg0 ) { WPTreeNode loc0 = this ; List < WPTreeNode > loc1 = new LinkedList < WPTreeNode > ( ) ; while ( loc0 != null ) { loc1 . add ( loc0 ) ; loc0 = loc0 . parent ; } return loc1 ; }
boolean function ( int arg0 ) { return ( ind_var != null ) ? ind_var . equals ( arg0 ) : false ; }
int function ( ) { return i_initialSize ; }
void function ( ITestIdentifier arg0 ) { if ( _runningTest != null ) { _runningTest . start ( arg0 ) ; } }
void function ( @ SuppressWarnings ( "srini_string" ) Component arg0 , @ SuppressWarnings ( "srini_string" ) Event arg1 ) { bugList . add ( arg1 ) ; }
void function ( ) { started = true ; }
int function ( ) { return size ; }
boolean function ( ) { return locator . isShowing ( ui ) ; }
void function ( String ... arg0 ) { for ( String loc0 : arg0 ) { addWhereWithParam ( arg0 [ 0 ] , loc0 , false ) ; } }
GenVector < C > function ( GenVector < C > arg0 ) { return modul . scalarProd ( this , arg0 ) ; }
List < String > function ( File arg0 ) { return getFactory ( ) . getNamespaceUris ( arg0 ) ; }
String function ( ) { return null ; }
BigInteger function ( ) { checkBounds ( ) ; return bigInt ; }
BigInteger function ( ) { return ZERO ; }
void function ( ) { Iterator < String > loc0 = nameToPpt . keySet ( ) . iterator ( ) ; while ( loc0 . hasNext ( ) ) { String loc1 = loc0 . loc1 ( ) ; if ( loc1 . equals ( "srini_string" ) ) { loc0 . remove ( ) ; } else { loc0 . add ( null ) ; } }
BigDecimal function ( java . io . Reader arg0 ) { return parse ( arg0 , DEFAULT_CONTEXT ) ; }
void function ( ) { example . advanceAnimation ( ) ; }
List function ( String arg0 ) { ArrayList loc0 = new ArrayList ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0 , _delimeter ) ; while ( loc1 . hasMoreTokens ( ) ) { loc0 . add ( loc1 . nextToken ( ) ) ; } return loc0 ; }
void function ( ) { name . unregister ( ) ; server . unregister ( name ) ; }
boolean function ( String arg0 ) { return arg0 . length ( ) > 3 && arg0 . charAt ( 3 ) == '-' ; }
void function ( int arg0 ) { int loc0 = binarySearch ( arg0 ) ; if ( loc0 >= 0 ) { mData [ loc0 ] = null ; } }
byte [ ] function ( ) { return data ; }
boolean function ( final Failure arg0 , final Failure arg1 ) { return arg0 . getFailureIndex ( ) > arg1 . getFailureIndex ( ) ; }
boolean function ( ) { return false ; }
boolean function ( Class < ? > arg0 ) { return isPrimitive ( arg0 ) ; }
HttpRequestHandler function ( final String arg0 ) { return this . matcher . match ( arg0 ) ; }
Iterable4 function ( Iterable4 arg0 ) { return flatten ( arg0 , null ) ; }
void function ( Lockscope arg0 ) { this . lockscope = arg0 ; }
void function ( final String arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } checkRep ( arg0 ) ; this . numer = Integer . parseInt ( arg0 ) ; this . denom = 1 ; }
boolean function ( CharSequence arg0 , CharSequence arg1 ) { return compare ( arg0 , arg1 ) == 0 ; }
void function ( final int arg0 ) { this . n = arg0 ; }
void function ( String arg0 ) { this . links . add ( arg0 ) ; }
ResourceType function ( ) { return resourcetype ; }
String function ( ) { return m_Language ; }
double function ( double arg0 ) { return exp ( arg0 - 0.5 ) ; }
void function ( Test arg0 ) { fTests . addElement ( arg0 ) ; }
Object function ( Closure arg0 ) { for ( int loc0 = 0 ; loc0 < iPredicates . length ; loc0 ++ ) { if ( iPredicates [ loc0 ] . evaluate ( arg0 ) ) { return loc0 ; } } return null ; }
Property < V > function ( Class < ? > arg0 , String arg1 ) { return new Property < V > ( arg0 , arg1 ) ; }
Throwable function ( ) { return cause ; }
String function ( Lang arg0 , String arg1 ) { if ( stopwords . containsKey ( arg0 ) ) { return extractTextFromPdf ( arg0 , arg1 ) ; } else { return arg1 ; } }
PdfIndirectReference function ( PdfDictionary arg0 ) { if ( arg0 != null ) { views . put ( arg0 . toString ( ) , arg0 ) ; } return this ; }
int function ( int arg0 ) { return arg0 % hashArray . length ; }
List < T > function ( List < T > arg0 , Transformer < T > arg1 ) { List < T > loc0 = Lists . newArrayList ( ) ; for ( int loc1 = 0 ; loc1 < arg0 . size ( ) ; loc1 ++ ) { loc0 . add ( arg1 . transform ( arg0 . get ( loc1 ) ) ) ; } return loc0 ; }
byte [ ] function ( ) { int loc0 = buf . length ; byte [ ] loc1 = new byte [ loc0 ] ; System . arraycopy ( buf , 0 , loc1 , 0 , pos ) ; return loc1 ; }
Person function ( ) { return new Person ( this ) ; }
byte [ ] function ( ) { return data ; }
String [ ] function ( ) { return files . toArray ( new String [ files . size ( ) ] ) ; }
String function ( ) { return cacheName ; }
GenMatrix < C > function ( ) { return coFac . random ( rows , cols , blocksize ) ; }
void function ( int arg0 ) { this . level = arg0 ; }
GenVector < C > function ( ) { return ZERO ; }
String function ( ) { return var ; }
ResourceEditPropertyBuilder function ( Integer arg0 ) { this . cardinalityProperty = arg0 ; return this ; }
ClassLoader function ( ) { ClassLoader loc0 = Thread . currentThread ( ) . getContextClassLoader ( ) ; if ( loc0 == null ) loc0 = ClassLoader . getSystemClassLoader ( ) ; return ( loc0 != null ? loc0 : Thread . currentThread ( ) . getContextClassLoader ( ) ) ; }
Object function ( ) { return map . getKey ( ) ; }
void function ( ) { }
Predicate function ( final Predicate [ ] arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } return new Predicate [ ] { arg0 } ; }
String function ( long arg0 ) { return arg0 / UNIT_MILLISECONDS + "srini_string" ; }
boolean function ( ) { return iterator . hasNext ( ) ; }
void function ( ValueChangeEvent arg0 ) { if ( arg0 . getNewValue ( ) != null ) { gui . removeValueChangeListener ( arg0 ) ; arg0 . getNewValue ( ) . setValue ( null ) ; } gui . repaint ( ) ; }
int function ( ) { return nLiveMethods ; }
void function ( Vector2 arg0 ) { float loc0 = arg0 . x - y ; float loc1 = arg0 . y - z ; float loc2 = arg0 . z - y ; arg0 . x = loc0 ; arg0 . y = loc1 ; arg0 . z = loc2 ; }
void function ( String arg0 ) { this . clusterId = arg0 ; }
Message function ( ByteBuffer arg0 , MessageType arg1 ) { Message loc0 = new Message ( arg0 ) ; loc0 . type = arg1 ; loc0 . data = arg0 . slice ( ) ; return loc0 ; }
SummaryStatistics function ( ) { return new SummaryStatistics ( ) ; }
Object function ( ) { return st ; }
void function ( ) { if ( isTimerRunning ( ) ) { theTimer . setSeconds ( 2 * 60 * 1000 ) ; } else { theTimer . setSeconds ( 2 * 60 * 1000 ) ; } theTimer . start ( ) ; }
void function ( ) { _tableTester . waitForReveal ( ) ; }
String function ( ) { return stack . toString ( ) ; }
String function ( String arg0 ) { if ( arg0 == null ) { return arg0 ; } return arg0 . replaceAll ( "srini_string" , "srini_string" ) . replaceAll ( "srini_string" , "srini_string" ) ; }
String [ ] function ( ) { String [ ] loc0 = new String [ cellArray . length ] ; for ( int loc1 = 0 ; loc1 < cellArray . length ; loc1 ++ ) { loc0 [ loc1 ] = cellArray [ loc1 ] [ 0 ] . toString ( ) ; } return loc0 ; }
String function ( String arg0 ) { String loc0 = MAP . get ( arg0 ) ; if ( loc0 != null ) return loc0 ; else return arg0 ; }
Object function ( ) { if ( myList == null ) throw new Exception ( "srini_string" ) ; return myList . item ; }
Map < Method , InterceptorFactory > function ( ) { return componentInterceptors ; }
CouchDB function ( ) { return Mockito . mock ( CouchDB . class ) ; }
Parser function ( Class arg0 , String arg1 ) { Parser loc0 = ( Parser ) parsers . get ( arg0 ) ; if ( loc0 != null ) { return ( loc0 ) ; } loc0 = new Parser ( arg0 , arg1 ) ; parsers . put ( arg0 , loc0 ) ; return loc0 ; }
LinkedList < HashMap < String , MetricsAggregate >> function ( ) { return metricsHistory ; }
Label function ( ) { return defaultTarget ; }
boolean function ( String arg0 , String arg1 ) { return ( arg0 . compareTo ( arg1 ) >= 0 ) ; }
void function ( ) { }
DoubleListIterator function ( ListIterator arg0 ) { if ( arg0 == null ) { return null ; } return new DoubleListIterator ( arg0 ) ; }
String [ ] function ( ) { return new String [ 0 ] ; }
HandlerMethodArgumentResolver function ( ) { return new HandlerMethodArgumentResolver ( ) ; }
void function ( Region arg0 ) { if ( fIsEclipseNLS ) { fTagPosition = arg0 ; } }
void function ( String [ ] arg0 ) { Mammoth loc0 = new Mammoth ( ) ; loc0 . observe ( ) ; loc0 . timePasses ( ) ; loc0 . observe ( ) ; loc0 . timePasses ( ) ; loc0 . observe ( ) ; }
String function ( ) { return name ; }
IJavaElement function ( String arg0 ) { IResource loc0 = handleToResource ( arg0 ) ; return ( IJavaElement ) JavaUtils . toElement ( loc0 ) ; }
CssResolver function ( ) { if ( defaultCssFile == null ) { defaultCssFile = getCSS ( ) ; } return defaultCssFile ; }
StatementBuilder function ( ) { builder . append ( '(' ) ; builder . append ( toString ( ) ) ; builder . append ( ')' ) ; return this ; }
BigInteger function ( ) { return random ( ) . random ( ) ; }
void function ( T arg0 ) { synchronized ( queuedEvents ) { if ( started ) { throw new IllegalStateException ( "srini_string" ) ; } queuedEvents . add ( arg0 ) ; } }
int function ( D arg0 , D arg1 , int arg2 ) { return isSubset ( arg0 , arg1 , arg2 , null ) ? 1 : - 1 ; }
short function ( int arg0 ) { return list . getQuick ( arg0 ) ; }
Period function ( ) { return Period . standard ( iPeriod ) ; }
boolean function ( ) { return fillInAllowed ; }
void function ( JdrReportCollector arg0 ) { arg0 . collect ( ) ; }
Protocol function ( ) { return REMOTE . get ( ) ; }
void function ( ) { }
AST function ( AST arg0 ) { arg0 . setLeftChild ( insertSibling ( arg0 . getLeftChild ( ) , arg0 ) ) ; return arg0 ; }
double [ ] function ( ) { return list . getDoubleArray ( ) ; }
long function ( Runnable arg0 ) { return System . currentTimeMillis ( ) - start ; }
void function ( String arg0 ) { if ( log . isDebugEnabled ( ) ) log . debug ( "srini_string" + arg0 + "srini_string" ) ; started = true ; }
void function ( ) { if ( ! started ) { started = true ; started = true ; System . out . println ( "srini_string" ) ; } }
boolean function ( IRefactoring arg0 , IProgressMonitor arg1 ) { return fQueryFactory . isConditionFailed ( arg0 , arg1 ) ; }
Image function ( ) { return this . image ; }
boolean function ( Image arg0 , float arg1 , float arg2 , float arg3 ) { if ( arg1 < arg0 . getMinX ( ) || arg1 > arg0 . getMaxX ( ) || arg2 < arg0 . getMinY ( ) || arg2 > arg0 . getMaxY ( ) ) return false ; return child ( arg0 , arg1 , arg2 , arg3 ) ; }
boolean function ( ) { return false ; }
void function ( String arg0 ) { frame . setTitle ( arg0 ) ; }
boolean function ( Widget arg0 , Matcher < ? super Widget > arg1 ) { return ( find0 ( arg0 ) == arg1 ) ; }
int function ( CANVID arg0 ) { return listCommon . size ( ) - listCommon . size ( ) ; }
Local < C > function ( ) { logger . debug ( "srini_string" ) ; return gcd ( this ) ; }
int function ( ) { int loc0 = 19 ; loc0 = 37 * loc0 + e1 . hashCode ( ) ; loc0 = 37 * loc0 + e2 . hashCode ( ) ; return loc0 ; }
Text function ( ) { if ( fTextControl == null ) { createTextControl ( ) ; } return fTextControl ; }
SchemaValidatorBuilder function ( ) { this . strategy = new SchemaValidationStrategy ( DEFAULT_SCHEMA_RESOLVER ) ; return this ; }
void function ( int arg0 , int arg1 , int arg2 ) { int loc0 = ( arg0 << 12 ) & 0x00ffffff ; int loc1 = ( arg1 << 8 ) & 0x00ffff ; int loc2 = arg2 & 0xff ; setBits ( loc0 , loc1 , loc2 ) ; }
void function ( int arg0 , int arg1 , int arg2 ) { int [ ] loc0 = createSegmentTree ( arg2 ) ; int [ ] loc1 = RangeUtils . concat ( loc0 , arg1 ) ; updateSegmentTreeRangeLazy ( arg0 , arg1 , loc1 ) ; }
String function ( ) { return _treeItemTester . getPath ( ) ; }
void function ( File arg0 ) { outputDir = arg0 ; }
int function ( int arg0 ) { int loc0 = 0 ; while ( ( arg0 & ~ loc0 ) != 0 ) { loc0 <<= 1 ; } return loc0 ; }
boolean function ( String arg0 ) { return TYPE2FUNC . containsKey ( arg0 ) ; }
boolean function ( ) { return isOffline ; }
void function ( Throwable arg0 ) { this . log . error ( arg0 ) ; }
Node function ( ) { return parent ; }
int function ( ) { return number ; }
int function ( ) { return num_values ; }
void function ( final String arg0 , final String arg1 , final String arg2 ) { assertEquals ( arg0 , arg1 ) ; assertEquals ( arg2 , arg1 ) ; }
int function ( ) { return n ; }
void function ( byte arg0 [ ] , byte arg1 [ ] , int arg2 , int arg3 ) { int loc0 = arg2 - arg3 ; for ( int loc1 = arg1 . length - 1 ; loc1 >= arg3 ; loc1 -- ) { byte loc2 = arg0 [ loc1 ] ; arg0 [ loc1 ] = arg0 [ loc0 - 1 ] ; arg0 [ loc0 - 1 ] = loc2 ; } }
String function ( String arg0 ) { if ( arg0 != null && arg0 . length ( ) > 0 ) { arg0 = arg0 . substring ( arg0 . length ( ) - 1 ) ; } return arg0 ; }
Runnable function ( Runnable arg0 ) { return new StackTraceElement [ ] { arg0 } ; }
void function ( boolean arg0 ) { if ( ! arg0 ) { throw new IllegalArgumentException ( "srini_string" ) ; } }
void function ( int arg0 ) { executables . remove ( arg0 ) ; }
String function ( String arg0 , String arg1 ) { return arg0 ; }
Unmarshaller function ( ) { JAXB_CONTEXT . reset ( ) ; Unmarshaller loc0 = JAXB_CONTEXT . createUnmarshaller ( ) ; return loc0 ; }
void function ( Element arg0 ) { ImportLockupData loc0 = new ImportLockupData ( ) ; Element [ ] loc1 = arg0 . getElements ( ) ; for ( int loc2 = 0 ; loc2 < loc1 . length ; loc2 ++ ) { Element loc3 = ( Element ) loc1 [ loc2 ] ; String loc4 = loc3 . getAttribute ( "srini_string" ) ; loc0 . importLockupData ( loc4 , loc3 ) ; } }
String function ( int arg0 ) { if ( keyCodeDescMap . containsKey ( arg0 ) ) { return keyCodeDescMap . get ( arg0 ) ; } else { return "srini_string" ; } }
void function ( String arg0 ) { throw new IllegalStateException ( arg0 ) ; }
boolean function ( Class arg0 , Class arg1 ) { return arg0 != null && arg1 != null && arg0 . isInterface ( ) && arg1 . isInterface ( ) ; }
void function ( String arg0 ) { this . serialNumber = arg0 ; }
int function ( String arg0 ) { final int loc0 = arg0 . length ( ) ; int loc1 = 0 ; for ( String loc2 : arg0 . split ( "srini_string" ) ) { loc1 = loc1 + loc2 . length ( ) ; } return loc1 ; }
boolean function ( String arg0 ) { return staticMap . containsKey ( arg0 ) ; }
void function ( int arg0 ) { m_negativeYErrorPixel = arg0 ; }
String [ ] function ( ) { return null ; }
boolean function ( final GroupedSystem < C > arg0 ) { return isDetermined ( ) && cgb . equals ( arg0 . cgb ) ; }
StackKeeper function ( ) { return queue . removeFirst ( ) ; }
String function ( long arg0 ) { return arg0 / UNIT_MILLISECONDS + "srini_string" ; }
Object function ( ) { if ( iterator . hasNext ( ) ) { return ( Object ) iterator . next ( ) ; } else { return null ; } }
void function ( ) { if ( verbose ) { System . out . println ( "srini_string" ) ; } }
void function ( PdfWriter arg0 , Document arg1 , Rectangle arg2 , boolean arg3 ) { for ( PdfPageEvent loc0 : events ) { loc0 . onChunk ( arg0 , arg1 , arg2 , arg3 ) ; } }
String function ( String arg0 ) { return arg0 . replaceAll ( "srini_string" , "srini_string" ) . replaceAll ( "srini_string" , "srini_string" ) ; }
void function ( CSIColor arg0 ) { this . borderColor = arg0 ; }
Nonterminal function ( Schema arg0 ) { return arg0 . getNonterminal ( ) ; }
void function ( Object arg0 ) { this . array = arg0 ; }
String function ( ) { return fcLink ; }
String function ( ) { return name ; }
void function ( Graphics arg0 , float arg1 , int arg2 , int arg3 ) { if ( cachedTf != null ) { arg0 . setColor ( fgcolor ) ; arg0 . fillCircle ( arg1 , arg2 , arg3 , width , height ) ; } }
Label function ( ) { return end ; }
boolean function ( ) { return ( size ( ) == 0 ) ; }
void function ( final String arg0 ) { if ( ! authzEnabled ) { return ; } final HivePrivilegeObject loc0 = new HivePrivilegeObject ( HivePrivilegeObjectType . DATABASE , arg0 , null ) ; authorize ( HiveOperationType . READ , ImmutableList . of ( loc0 ) , Collections . < HivePrivilegeObject > emptyList ( ) ) ; }
List < Node > function ( ) { return cache . values ( ) ; }
void function ( final Exception arg0 ) { }
void function ( ) { this . lastRepublish = System . currentTimeMillis ( ) ; }
String [ ] function ( ) { return toColumns ( ) ; }
String function ( ) { return null ; }
void function ( OperationsInterface arg0 , double arg1 ) { while ( operands . size ( ) == 0 || arg1 < operands . pop ( ) ) { calculate ( arg0 , operands . peek ( ) , arg1 ) ; } }
RequestType function ( ) { return requestType ; }
RefactoringDescriptorProxy function ( ) { return fProxy ; }
Sensor function ( ) { return proximitySensor ; }
int function ( ) { return ++ staleCounter ; }
void function ( byte arg0 [ ] , byte arg1 [ ] , int arg2 , int arg3 ) { int loc0 = arg2 - arg3 ; for ( int loc1 = arg1 . length - 1 ; loc1 >= arg3 ; loc1 -- ) { byte loc2 = arg0 [ loc1 ] ; arg0 [ loc1 ] = arg0 [ loc0 - 1 ] ; arg0 [ loc0 - 1 ] = loc2 ; } }
UnivPowerSeries < C > function ( ) { return ZERO ; }
RuleSet function ( ) { if ( this . ruleSet == null ) { this . ruleSet = DigesterFactory . createRuleSet ( ) ; } return this . ruleSet ; }
void function ( Object arg0 ) { map . put ( ( String ) loc0 , arg0 ) ; }
TypedBag < T > function ( Class < T > arg0 , T ... arg1 ) { return new TypedBag < > ( arg0 , arg1 ) ; }
void function ( ) { iterator . remove ( ) ; }
boolean function ( final CharSequence arg0 ) { return arg0 == null || arg0 . length ( ) == 0 ; }
String function ( ) { return identifier ; }
Collection function ( ) { return succs ; }
ModelNode function ( PathAddress arg0 , int arg1 ) { return createAddOperation ( arg0 , arg1 , Collections . emptyMap ( ) ) ; }
void function ( Object arg0 , Throwable arg1 ) { if ( is12 ) { getLogger ( ) . log ( FQCN , ( Priority ) Level . ERROR , arg0 , arg1 ) ; } else { getLogger ( ) . log ( FQCN , Level . ERROR , arg0 , arg1 ) ; } }
String function ( String arg0 ) { }
Vector function ( ) { if ( mixer == null ) { mixer = new Vector ( 8 ) ; } return mixer ; }
Script function ( String arg0 ) { Iterator loc0 = list . iterator ( ) ; Script loc1 = null ; while ( loc0 . hasNext ( ) ) { loc1 = ( Script ) loc0 . next ( ) ; if ( loc1 . evaluate ( arg0 ) ) { return loc1 ; } } return null ; }
Tag function ( ) { return parent ; }
boolean function ( String arg0 ) { ValueNode loc0 = left . get ( arg0 ) ; if ( loc0 == null ) { return false ; } else { return loc0 . isPresent ( ) ; } }
void function ( Template arg0 ) { fTemplates . remove ( arg0 ) ; }
Predicate function ( ) { return iPredicate ; }
IWidgetMatcher function ( ) { return _parentMatcher ; }
Link function ( ) { return new Link ( ) ; }
Session function ( ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "srini_string" + sessionFactory + "srini_string" ) ; } return sessionFactory . openSession ( ) ; }
ReflectClass function ( String arg0 ) { return _classLoader . getReflectClass ( arg0 ) ; }
String function ( ) { return KRB5_CONF ; }
void function ( LabelProviderChangeEvent arg0 ) { for ( ILabelProviderListener loc0 : fListeners ) { loc0 . labelProviderChanged ( arg0 ) ; } }
void function ( String arg0 ) { this . catalogName = arg0 ; }
void function ( ) { SecurityConfiguration . getKeyStoreURL ( ) ; }
void function ( SourceDataLine arg0 ) { lines . addElement ( arg0 ) ; if ( lines . size ( ) >= 800000 ) { loopEnd = lines . size ( ) ; } }
void function ( ) { connector . testWithEar ( EAR_WITHOUT_APPLICATION_XML ) ; }
long function ( int arg0 ) { return list . getQuick ( arg0 ) ; }
Condition function ( String arg0 , String arg1 ) { return hasText ( null , arg0 , arg1 ) ; }
void function ( Reader arg0 ) { XMLParser loc0 = new XMLParser ( this , arg0 ) ; loc0 . start ( ) ; parseWithReader ( loc0 ) ; }
void function ( ) { pos = new VectorXYZ ( ) ; lookAt = new VectorXYZ ( ) ; }
void function ( String arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } this . receiver = new Receiver ( arg0 , null ) ; }
void function ( AnimatedNode arg0 ) { }
void function ( ) { Spannable loc0 = new Spannable ( ) ; loc0 . setSpan ( "srini_string" , 10 , 10 , Spanned . SPAN_POINT_POINT ) ; loc0 . setSpan ( "srini_string" , 15 , 15 , Spanned . SPAN_POINT_POINT ) ; type ( loc0 ) ; loc0 . setSpan ( null , null , null , Spanned . SPAN_POINT ) ; waitFor ( 30 ) ; }
StringBuilder function ( ) { return baos ; }
void function ( String arg0 ) { }
boolean function ( Comparator arg0 ) { return isLocked ( ) && arg0 . isLocked ( ) ; }
void function ( final C arg0 , final C arg1 , final C arg2 , final C arg3 , final C arg4 , final C arg5 ) { list . add ( arg0 ) ; list . add ( arg1 ) ; list . add ( arg2 ) ; list . add ( arg3 ) ; list . add ( arg4 ) ; list . add ( arg5 ) ; }
int function ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 : arg0 ) { loc0 = gcd ( loc0 , loc1 ) ; } return loc0 ; }
void function ( Collection arg0 ) { for ( Iterator loc0 = arg0 . iterator ( ) ; loc0 . hasNext ( ) ; ) add ( ( Object ) loc0 . next ( ) ) ; }
String function ( String arg0 ) { return addUnderscores ( StringHelper . unqualify ( arg0 ) ) ; }
boolean function ( Object arg0 ) { if ( ! ( arg0 instanceof Ring ) ) return false ; Ring loc0 = ( Ring ) arg0 ; if ( this . isField && loc0 . isField ( ) ) return true ; if ( this . isCommutative && loc0 . isAssociative ( ) ) return true ; return false ; }
boolean function ( Image arg0 , float arg1 , float arg2 , float arg3 ) { if ( arg1 < arg0 . getMinX ( ) || arg1 > arg0 . getMaxX ( ) || arg2 < arg0 . getMinY ( ) || arg2 > arg0 . getMaxY ( ) ) return false ; return child ( arg0 , arg1 , arg2 , arg3 ) ; }
void function ( ) { backItem . setFocus ( true ) ; }
void function ( ) { syncResult . message ( ) ; }
List < String > function ( String arg0 , String arg1 ) { return extractText ( arg0 , arg1 , null ) ; }
List < Potion > function ( ) { return Collections . unmodifiableList ( topShelf ) ; }
void function ( ) { if ( resources == null ) { resources = getResources ( ) ; } }
boolean function ( Object arg0 ) { if ( arg0 instanceof ModInteger ) return ( ( ModInteger ) arg0 ) . val . equals ( val ) ; else return false ; }
void function ( PrintWriter arg0 , String arg1 , int arg2 , int arg3 , Attribute [ ] arg4 ) { classInfo . write ( arg0 , arg1 , arg2 , arg3 , arg4 ) ; }
ConditionMapping function ( ICondition arg0 ) { if ( _isProcessing ) { return null ; } for ( int loc0 = 0 ; loc0 < _mappings . length ; loc0 ++ ) { ConditionMapping loc1 = _mappings [ loc0 ] ; if ( arg0 . equals ( loc1 . getCondition ( ) ) ) { return loc1 ; } } return null ; }
boolean function ( Boolean arg0 , Boolean arg1 ) { return arg0 != null && arg1 != null && arg0 . equals ( arg1 ) ; }
Undo function ( ) { return fUndoChange ; }
int function ( Date arg0 ) { if ( arg0 == null ) { throw new NullPointerException ( ) ; } if ( this . year == arg0 . year ) { return 0 ; } return daysInMonth ( arg0 ) ; }
void function ( Path arg0 , Schema arg1 ) { if ( arg1 != null ) { getInputSchemaMap ( ) . put ( arg0 , arg1 ) ; } }
IntList function ( IntegerList arg0 ) { return UnmodifiableIntList . unmodifiableIntList ( arg0 ) ; }
int function ( ) { return queue . size ( ) ; }
boolean function ( String arg0 ) { int loc0 = arg0 . indexOf ( inlineMarkupDelimiters ) ; return loc0 >= 0 ; }
Executor function ( Executor arg0 ) { if ( arg0 == null ) { arg0 = new LinkedBlockingQueue < Runnable > ( ) ; } return new Executor ( arg0 ) ; }
void function ( Airport arg0 ) { this . larnacaAirport = arg0 ; }
void function ( String arg0 ) { this . localeKey = arg0 ; }
MemberRef function ( ) { return new MemberRef ( this , null ) ; }
void function ( Device arg0 ) { if ( arg0 == null ) { logger . error ( "srini_string" ) ; return ; } arg0 . startInputTask ( ) ; }
void function ( Object arg0 , Object arg1 ) { list . add ( ( C ) arg0 , ( C ) arg1 ) ; }
void function ( TagState arg0 ) { this . tagState = arg0 ; }
String function ( String arg0 , int arg1 ) { return arg0 . substring ( arg1 ) ; }
String function ( ) { return name ; }
StringBuffer function ( ) { return result ; }
boolean function ( long arg0 ) { if ( allocationLimit . get ( ) < arg0 ) { allocationLimit . set ( arg0 ) ; return true ; } else { return false ; } }
void function ( String arg0 , String arg1 ) { if ( hasCurrentAttribute ( arg0 ) ) { attr . put ( arg0 , arg1 ) ; } }
HttpRoute function ( HttpParams arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } HttpRoute loc0 = ( HttpRoute ) arg0 . getParameter ( FORCED_ROUTE ) ; if ( ( loc0 != null ) && NO_ROUTE . equals ( loc0 ) ) { loc0 = null ; } return loc0 ; }
boolean function ( Object arg0 ) { if ( ! ( arg0 instanceof RatTermVec ) ) return false ; RatTermVec loc0 = ( RatTermVec ) arg0 ; return underlying_terms . equals ( loc0 . underlying_terms ) ; }
void function ( File arg0 ) { this . outputFile = arg0 ; }
QueryCondition [ ] function ( QueryCondition [ ] arg0 ) { QueryCondition [ ] loc0 = new QueryCondition [ arg0 . length ] ; for ( int loc1 = 0 ; loc1 < arg0 . length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }
void function ( ) { while ( ! started ) { try { wait ( ) ; } catch ( InterruptedException loc0 ) { } } started = true ; }
void function ( Boolean arg0 ) { this . isTest = arg0 ; }
InputStream function ( ) { return stream ; }
R function ( T arg0 , P arg1 ) { return arg1 ; }
boolean function ( Object arg0 ) { return _first . equals ( arg0 ) || _last . equals ( arg0 ) ; }
int function ( ) { return _size ; }
Iterator < String > function ( String arg0 ) { return new ColumnIterator ( arg0 ) ; }
void function ( boolean arg0 ) { android . util . Log . d ( TAG , "srini_string" + arg0 ) ; this . debug = arg0 ; }
void function ( String arg0 , Object arg1 , String arg2 ) { if ( log != null ) { log . log ( Level . INFO , arg0 , arg1 , arg2 ) ; } }
float function ( ) { return list . removeAt ( size - 1 ) ; }
Color function ( String arg0 ) { return parse ( arg0 , null ) ; }
ImageDescriptor function ( ) { return fImage ; }
void function ( String arg0 , Map < String , String > arg1 ) { blobBuilders . deleteAllBlobs ( arg0 , arg1 ) ; }
void function ( Object arg0 , Object arg1 , Object arg2 ) { }
boolean function ( String arg0 , String arg1 ) { return evaluateResult ( arg0 , arg1 , null ) ; }
String function ( ) { return ( this . description ) ; }
int function ( ) { return values [ values . length - 1 ] ; }
Properties function ( ) { Properties loc0 = new Properties ( ) ; verifyProperties ( loc0 ) ; return loc0 ; }
String function ( ) { return lang ; }
String function ( String arg0 ) { return topologyBases ( ) . get ( arg0 ) ; }
void function ( Limit arg0 ) { limits . add ( arg0 ) ; }
byte [ ] function ( byte [ ] arg0 , byte [ ] arg1 , byte [ ] arg2 ) { try { Cipher loc0 = Cipher . getInstance ( ID_PKINIT_AUTHDATA ) ; loc0 . init ( Cipher . DECRYPT_MODE , arg1 ) ; byte [ ] loc1 = loc0 . doFinal ( arg0 ) ; return loc1 ; } catch ( Exception loc0 ) { return null ; } }
int function ( ) { checkIsOpen ( ) ; return device . get eepromSize ( ) ; }
void function ( String arg0 ) { System . out . println ( "srini_string" + getName ( ) + "srini_string" + getAsText ( ) ) ; }
void function ( PRIndirectReference arg0 ) { this . indRef = arg0 ; }
void function ( ) { player = new Player ( ) ; }
void function ( int arg0 , int arg1 , CSIColor arg2 ) { foreColor = arg2 ; foreColor = arg1 ; foreColor = arg0 ; }
void function ( int arg0 ) { if ( arg0 > 140 ) { throw new IllegalArgumentException ( "srini_string" ) ; } }
void function ( ) { violations . clear ( ) ; numEvaluations = 0 ; numNormalPptExits = 0 ; numExceptionalPptExits = 0 ; }
T function ( String arg0 , String arg1 ) { return ( T ) tag ( "srini_string" , arg0 , arg1 ) ; }
boolean function ( ) { return false ; }
Criteria function ( Object arg0 , Object arg1 ) { return new Criteria ( arg0 , arg1 , "=", null ) ; }
String function ( String arg0 ) { BufferedReader loc0 = new BufferedReader ( new FileReader ( arg0 ) ) ; String loc1 = null ; try { loc1 = loc0 . readLine ( ) ; } catch ( IOException loc2 ) { } return loc1 ; }
String function ( ) { return code ; }
void function ( Object arg0 , Throwable arg1 ) { log ( LOG_LEVEL_WARN , arg0 , arg1 ) ; }
WebArchive function ( @ NotNull WebArchive arg0 , @ NotNull SecurityDomain arg1 ) { return createWar ( arg0 , arg1 , "srini_string" , "srini_string" , UNSUCCESSFUL_PERMISSION_CHECK_EVENT ) ; }
void function ( String [ ] arg0 ) { prepare ( ) ; PrintStream loc0 = new PrintStream ( System . loc0 ) ; for ( String loc1 : arg0 ) { loc0 . println ( loc1 ) ; } loc0 . flush ( ) ; }
void function ( String [ ] arg0 ) { if ( arg0 . length != 2 ) { System . err . println ( "srini_string" + "srini_string" ) ; System . exit ( - 1 ) ; } String loc0 = arg0 [ 0 ] ; String loc1 = arg0 [ 1 ] ; visitCoverage ( loc0 , loc1 ) ; }
int function ( ) { return ( int ) Math . round ( y2 ) ; }
void function ( ) { PeerStatus loc0 = myNode . getPeerStatus ( ) ; if ( loc0 != null && ! loc0 . lookupEnabled ) { return ; } try { doConnect ( ) ; } finally { myNode = null ; } }
void function ( ) { for ( ResourceEntity loc0 : resources ) { loc0 . setName ( name ) ; } }
void function ( Point2D arg0 ) { this . startPoint = arg0 ; }
void function ( String arg0 ) { packedString = arg0 ; this . cat_id = Integer . parseInt ( arg0 . substring ( 1 , 3 ) ) ; this . name = arg0 . substring ( 3 ) ; }
void function ( String arg0 ) { this . skipHours . add ( arg0 ) ; }
String function ( SQLException arg0 ) { return determineSqlStateClassCode ( extractSqlStateClassCode ( arg0 ) ) ; }
boolean function ( int arg0 ) { return isStandardCode ( arg0 ) ; }
ILanguageNames function ( ) { return languageNames ; }
HttpRoute function ( ) { return ( HttpRoute ) connected ? this : new HttpRoute ( this ) ; }
void function ( int arg0 ) { productID = arg0 ; }
int function ( ) { return remCount ; }
boolean function ( K1 arg0 , K2 arg1 ) { if ( dkMap . containsKey ( arg0 ) ) { return dkMap . get ( arg0 ) . contains ( arg1 ) ; } else { return false ; } }
Closure function ( ) { return iClosure ; }
int function ( ) { return this . num_sets ; }
int function ( ) { return ( data [ position ++ ] & 0xFF ) << 8 | ( data [ position ++ ] & 0xFF ) ; }
List < T > function ( ) { final List < T > loc0 = new ArrayList < T > ( ) ; final T loc1 = getOrCreateContext ( getId ( ) ) ; loc0 . add ( loc1 ) ; return loc0 ; }
void function ( final String arg0 , final String arg1 ) { validate . notEmpty ( arg0 , arg1 ) ; throw new ValidationException ( arg1 ) ; }
boolean function ( Object arg0 ) { if ( arg0 == null ) { return false ; } if ( arg0 instanceof IdentifierValue ) { return ( ( IdentifierValue ) arg0 ) . value == null ; } return false ; }
ListIterator function ( ListIterator arg0 ) { return arg0 == null ? null : new ListIterator ( arg0 ) ; }
Image function ( int [ ] arg0 ) { return toIntImage ( arg0 , arg0 . length ) ; }
void function ( ) { if ( releaseMap == null ) { releaseMap = new LinkedHashMap < Integer , ReleaseEntity > ( ) ; } }
Class < ? > function ( ) { return elementType ; }
void function ( ) { assertTrue ( "srini_string" , incorrectRoleResult . contains ( DESTROY_METHOD_NOT_PASS ) ) ; }
void function ( ) { annotations . process ( null , null , null ) ; }
void function ( ) { final Element loc0 = d . getContent ( ) ; verifyIfPdfDiv ( loc0 ) ; }
String function ( ) { String loc0 = fElement . getAttribute ( CLASS_ATTRIBUTE ) ; if ( loc0 != null ) return loc0 ; loc0 = fElement . getAttribute ( DESCRIPTION_ATTRIBUTE ) ; if ( loc0 != null ) return loc0 ; return "srini_string" ; }
void function ( ) { throw new WaitTimeoutException ( "srini_string" ) ; }
void function ( boolean arg0 ) { this . expandEntityRef = arg0 ; }
File function ( ) { return fileInput ; }
void function ( Cluster arg0 , int arg1 ) { Edge loc0 = new Edge ( arg0 , arg1 ) ; edgeList . add ( loc0 ) ; }
boolean function ( int arg0 , int arg1 ) { return sbb . isTwosided ( arg0 , arg1 ) ; }
String function ( Object arg0 ) { if ( arg0 == null ) return "srini_string" ; return arg0 . toString ( ) ; }
FieldSelection function ( List < String > arg0 ) { return new FieldSelection ( arg0 , ValidityMode . PARTIAL , true ) ; }
List < ReleaseEntity > function ( ) { log . debug ( "srini_string" ) ; List < ReleaseEntity > loc0 = persistenceService . findAll ( ) ; return loc0 ; }
void function ( OverlayAdapter arg0 ) { adapters . add ( arg0 ) ; }
boolean function ( String arg0 ) { return _binsByUri . containsKey ( arg0 ) ; }
List < Message > function ( ) { if ( message == null ) { message = new ArrayList < Message > ( ) ; } return this . message ; }
Validator function ( ) { return new Validator ( ) ; }
void function ( String arg0 ) { appendClause ( arg0 ) ; }
void function ( Motorbike arg0 ) { entityManager . persist ( arg0 ) ; }
void function ( final byte arg0 ) { ensureCapacity ( length + 1 ) ; buffer [ length ++ ] = ( byte ) arg0 ; }
void function ( int arg0 , Predicate [ ] arg1 ) { validateMin2 ( arg0 , arg1 ) ; }
Property function ( ) { return property ; }
String function ( ) { return localeKey ; }
Quotient < C > function ( long arg0 ) { return parse ( Long . toString ( arg0 ) ) ; }
Widget function ( Widget arg0 , Matcher < ? super Widget > arg1 ) { Widget loc0 = find0 ( arg0 ) ; if ( loc0 == null && arg1 . matches ( arg0 ) ) { loc0 = arg0 ; } return loc0 ; }
RandomAccessSource function ( byte [ ] arg0 ) { return new ByteArrayRandomAccessSource ( arg0 , 0 , arg0 . length ) ; }
void function ( ) { assertEquals ( "srini_string" , ctx . getPageSize ( ) , "srini_string" ) ; }
String function ( ) { return pluginMeta . getVersion ( ) ; }
boolean function ( ) { return needBeforeSpace ; }
void function ( ConsumerRebalanceListener arg0 ) { }
Set function ( ) { return _register . entrySet ( ) ; }
JpaDatabase function ( ) { final JpaDatabase loc0 = new JpaDatabase ( ) ; loc0 . setEntityManagerFactory ( entityManagerFactory ( ) . getObject ( ) ) ; return loc0 ; }
RingFactory < C > function ( ) { return ring ; }
void function ( float arg0 ) { this . width = arg0 ; }
LIST < C > function ( ) { return ( LIST < C > ) list ; }
void function ( ) { migrationDone = true ; }
Collection function ( ) { return defaultHierarchy . getComponents ( ) ; }
void function ( Exception arg0 ) { log ( arg0 . getMessage ( ) ) ; arg0 . printStackTrace ( ) ; }
String [ ] function ( ) { return ( String [ ] ) this . items . toArray ( new String [ this . items . size ( ) ] ) ; }
ProgressRequestBody function ( String arg0 ) { return RequestBody . create ( ProgressRequestBody . class , arg0 ) ; }
int function ( T arg0 ) { return weight ; }
HttpClient function ( ) { return backend ; }
Allprop function ( ) { return allprop ; }
void function ( DataOutput arg0 , byte arg1 ) { arg0 . writeByte ( arg1 ) ; }
void function ( ) { fForked = true ; fStopSeverity = - 1 ; }
Items function ( ) { return items ; }
Symbol function ( ) { return stack [ -- pos ] ; }
SortedBag function ( Bag arg0 , Class < ? extends T > arg1 ) { return new TypedSortedBag ( arg0 , arg1 ) ; }
void function ( VectorXYZ arg0 ) { setPos ( arg0 ) ; lookAt ( arg0 ) ; }
byte [ ] function ( String arg0 ) { MessageDigest loc0 ; loc0 = MessageDigest . getInstance ( "srini_string" ) ; loc0 . update ( arg0 . getBytes ( ) , 0 , arg0 . length ( ) ) ; return loc0 . digest ( ) ; }
String function ( ) { return null ; }
boolean function ( ) { return ring . isField ( ) ; }
Type function ( String arg0 ) { return basicTypeRegistry . getType ( arg0 ) ; }
String function ( Bundle arg0 ) { Validate . notNull ( arg0 , "srini_string" ) ; return arg0 . getString ( TOKEN_KEY ) ; }
int function ( ) { return data . length ; }
void function ( ) { reactor . start ( ) ; }
void function ( final StyleListener arg0 ) { if ( arg0 == null ) { throw new NullPointerException ( ) ; } listeners . remove ( arg0 ) ; }
String function ( ) { return technicalKey ; }
IJavaElement function ( JavaEditor arg0 ) { return arg0 . getEnclosingElement ( ) ; }
void function ( ExecutionData arg0 ) { names . add ( arg0 . getClass ( ) . getName ( ) ) ; entries . put ( arg0 . getClass ( ) . getName ( ) , arg0 ) ; }
void function ( ) { countryLookup . clear ( ) ; }
void function ( int arg0 ) { this . noOfDimensions = arg0 ; }
GenVector < C > function ( GenVector < C > arg0 , GenVector < C > arg1 ) { return modul . comparable ( arg0 , arg1 ) ; }
Closure [ ] function ( ) { return iClosures ; }
int function ( ) { return _index ; }
void function ( Iterator arg0 ) { this . iterator = arg0 ; }
float function ( ) { return width ; }
void function ( OpModeManager arg0 ) { }
Comparator function ( boolean arg0 ) { return arg0 ? NATURAL_COMPARATOR : nullLowComparator ( ) ; }
void function ( ) { stop = true ; }
Type function ( final int arg0 ) { return null ; }
void function ( ) { final Nazgul loc0 = Nazgul . getInstance ( ) ; assertNotNull ( loc0 ) ; assertEquals ( "srini_string" , loc0 . getInstance ( ) ) ; }
boolean function ( ) { return _runningTest != null ; }
ModuleList < C > function ( String arg0 , ModuleList < C > arg1 , ModuleList < C > arg2 , ModuleList < C > arg3 ) { return solve ( arg0 , new SolveTwosidedGroebnerBase < C > ( arg1 , arg2 , arg3 ) ) ; }
void function ( ITextDirectory arg0 , Map < String , BaseFontParameters > arg1 ) { insertNames ( arg0 , arg1 , "srini_string" ) ; insertAliases ( arg0 , arg1 , "srini_string" ) ; insertFiles ( arg0 , arg1 ) ; }
String function ( String arg0 ) { if ( arg0 == null ) { return null ; } int loc0 = arg0 . indexOf ( '#' ) ; if ( loc0 >= 0 ) { return arg0 . substring ( 0 , loc0 ) ; } return arg0 ; }
void function ( String [ ] arg0 ) { fileLoggerModule = new FileLoggerModule ( arg0 ) ; consoleLoggerModule = new ConsoleLoggerModule ( arg0 ) ; }
DocumentBuilder function ( final String arg0 ) { Section loc0 = new Section ( arg0 ) ; sections . add ( loc0 ) ; return this ; }
boolean function ( int arg0 , int arg1 , int arg2 ) { return ( ( arg0 * arg0 ) + ( arg1 * arg1 ) + ( arg2 * arg2 ) ) == x ; }
void function ( final Chunk arg0 , final Chunk arg1 ) { setText ( arg0 , arg1 , getWidestWord ( ) ) ; }
void function ( Object arg0 ) { error ( arg0 , null ) ; }
KeyValuePairList function ( ) { return new KeyValuePairList ( ) ; }
void function ( ) { if ( fListeneredDisabled ) return ; for ( IOptionChangeListener loc0 : fListeners ) { loc0 . onConfigurationChanged ( ) ; } fListeneredDisabled = true ; }
int function ( Object arg0 , Object arg1 ) { if ( arg0 == null ) return ( arg1 == null ) ? 0 : 1 ; if ( arg1 == null ) return - 1 ; if ( arg0 . getClass ( ) != arg1 . getClass ( ) ) return arg0 . compareTo ( arg1 ) ; return arg0 . compareTo ( arg1 ) ; }
long function ( DisplayPortMetrics arg0 ) { long loc0 = 0 ; for ( int loc1 = mHead ; loc1 < mTail ; loc1 ++ ) { if ( arg0 == mMetrics [ loc1 ] ) { mTimestamps [ loc1 ] = loc0 ; mTail = loc1 ; } } return loc0 ; }
BaseColor function ( ) { return strokeColor ; }
SchemaValidatorBuilder function ( ) { this . strategy = new CanReadStrategy ( ) ; return this ; }
IJavaScriptElement function ( IJavaScriptElement arg0 , IJavaScriptElement arg1 ) { return resolveElementName ( arg0 , arg1 , null ) ; }
long function ( ) { return ours ; }
double function ( ) { return this . mu ; }
void function ( String arg0 ) { fInputTrace = arg0 ; fShowTraceInConsoleViewViewAction . setDisable ( true ) ; }
DurationFieldType function ( int arg0 ) { if ( arg0 < 0 || arg0 >= size ( ) ) { throw new IndexOutOfBoundsException ( "srini_string" + arg0 + "srini_string" + size ( ) ) ; } return getFieldType ( arg0 . intValue ( ) ) ; }
void function ( String arg0 , String arg1 , int arg2 ) { Employee loc0 = em . find ( Employee . class , arg0 ) ; loc0 . set ( arg1 , arg2 ) ; em . persist ( loc0 ) ; em . flush ( ) ; }
void function ( RandomAccessSource arg0 ) { }
boolean function ( Image arg0 , float arg1 , float arg2 , float arg3 ) { if ( arg1 < arg0 . getMinX ( ) || arg1 > arg0 . getMaxX ( ) || arg2 < arg0 . getMinY ( ) || arg2 > arg0 . getMaxY ( ) ) return false ; return child ( arg0 , arg1 , arg2 , arg3 ) ; }
Set function ( Map arg0 ) { return new SetFromMap ( arg0 ) ; }
Branch function ( final String arg0 , final int arg1 , final String arg2 , final String arg3 ) { return new Branch ( arg0 , arg1 , arg2 , arg3 ) ; }
boolean function ( String arg0 ) { return joinZNode ( arg0 ) . equals ( ZNODE_PATH_SEPARATOR ) ; }
void function ( int arg0 ) { constantValue . setIndex ( arg0 ) ; }
void function ( Exception arg0 ) { synchronized ( lock ) { if ( exception == null ) { exception = arg0 ; } } }
double function ( double arg0 ) { return findZero ( arg0 , null ) ; }
Iterator < Double > function ( DoubleIterator arg0 ) { return ( arg0 == null ) ? null : new DoubleIterator ( arg0 ) ; }
