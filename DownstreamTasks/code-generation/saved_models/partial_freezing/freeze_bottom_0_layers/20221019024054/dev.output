void function ( Schema arg0 , Schema arg1 ) { new CustomSchemaResolver ( arg0 , arg1 ) . canWrite ( ) ; }
void function ( String arg0 ) { getProperties ( ) . remove ( arg0 ) ; dvdProperties . remove ( arg0 ) ; bookProperties . remove ( arg0 ) ; }
Collection < SpringConfig > function ( ) { return mSpringConfigMap . values ( ) ; }
File function ( ) { return Libraries . getLibsDirectory ( ) ; }
boolean function ( ) { return coalescing ; }
void function ( final String arg0 ) { ServerSecurityInterceptor . setPrincipalName ( arg0 ) ; }
void function ( Object arg0 , Throwable arg1 ) { this . log ( LogLevel . TRACE , arg0 , arg1 ) ; }
Object function ( ) { return instance ; }
boolean function ( ) { return true ; }
void function ( long arg0 ) { markAsOverriden ( "srini_string" ) ; this . evictionWakeUpInterval = arg0 ; }
IProduct function ( ) { return product ; }
String function ( ASN1Primitive arg0 ) { return getExtensionValue ( arg0 , "srini_string" ) ; }
int function ( int arg0 ) { int loc0 = readInt24LE ( arg0 ) ; byte [ ] loc1 = new byte [ 2 ] ; loc1 [ 0 ] = byteBuf [ 0 ] ; for ( int loc2 = 1 ; loc2 <= 2 ; loc2 ++ ) { loc1 [ loc2 ] = byteBuf [ 1 + loc2 ] ; } return ( ( ( loc0 & 0xff ) << 24 ) | ( loc0 & 0xff ) << 16 ) | ( loc0 & 0xff ) << 8 ) | ( loc0 & 0xff ) ; }
boolean function ( ClassDoc arg0 , String arg1 ) { return false ; }
LongList function ( ) { return unmodifiableLongList ( EMPTY_LONG_LIST ) ; }
Getcontentlanguage function ( ) { return getcontentlanguage ; }
void function ( String arg0 , String arg1 ) { KOptions loc0 = convertOptions ( arg0 , arg1 ) ; System . setProperty ( "srini_string" , loc0 . getPassword ( ) ) ; System . setProperty ( "srini_string" , "srini_string" ) ; }
List < NamePart > function ( String arg0 ) { return NAME_PARSER . parse ( arg0 ) ; }
Location function ( Element arg0 ) { Location loc0 = new Location ( ) ; loc0 . setName ( arg0 . getAttribute ( "srini_string" ) ) ; loc0 . setLongitude ( arg0 . getAttribute ( "srini_string" ) ) ; loc0 . setLatitude ( arg0 . getAttribute ( "srini_string" ) ) ; return loc0 ; }
boolean function ( ) { return _display . isShowing ( ) ; }
void function ( String arg0 , String arg1 ) { if ( arg1 == null ) { throw new XMPException ( "srini_string" , XMPError . BADPARAM ) ; } }
void function ( ) { m_trace . clear ( ) ; }
String function ( ) { return reason ; }
boolean function ( String arg0 ) { return false ; }
int function ( ) { return ( int ) Math . round ( outputBuffer . getSampleDuration ( ) / 1000 ) ; }
void function ( final RecordBatch arg0 , final int arg1 ) { for ( Partitioner loc0 : partitioners ) { if ( loc0 . canPartition ( arg0 , arg1 ) ) { loc0 . processBatch ( arg0 , arg1 ) ; } } }
boolean function ( ) { if ( document . getDocumentType ( ) == DocumentType . CAMPAIGN ) { return true ; } return false ; }
long function ( ) { return cacheHitCount ; }
Dialog function ( Activity arg0 , String arg1 ) { return ( new AlertDialog . Builder ( arg0 ) ) . setMessage ( arg1 ) . setNeutralButton ( android . R . string . ok , null ) . create ( ) ; }
Section function ( int arg0 ) { return sections . get ( arg0 ) ; }
Product function ( ) { return new Product ( ) ; }
FigureInfo function ( IFigure arg0 , Object arg1 ) { return new FigureInfo ( arg0 , arg1 ) ; }
Integer function ( BoundStatement arg0 , int arg1 ) { return arg0 . getInt ( arg1 ) ; }
Providedportid function ( ) { return new Providedportid ( ) ; }
boolean function ( String arg0 , String arg1 ) { return findKeyword ( arg0 , arg1 , 0 ) >= 0 ; }
boolean function ( ProtocolVersion arg0 ) { if ( ! this . protocol . equals ( arg0 . protocol ) ) { return false ; } return this . protocol . equals ( arg0 . protocol ) ; }
void function ( Fum arg0 ) { this . fum = arg0 ; }
void function ( ServerSession arg0 , int arg1 ) { }
void function ( ) { SecurityConfiguration . getCipherKey ( ) ; }
long function ( ) { return data . size ( ) ; }
void function ( Point2D arg0 ) { this . startPoint = arg0 ; }
int function ( int arg0 , int arg1 ) { int loc0 = arg0 % arg1 ; if ( loc0 == 0 ) { loc0 = arg1 ; } return loc0 ; }
void function ( String [ ] arg0 ) { System . err . println ( "srini_string" + Version . VERSION ) ; System . exit ( 0 ) ; }
void function ( String arg0 , Object arg1 , Object arg2 ) { synchronized ( channelLock ) { writeBuffers ( arg0 , arg1 , arg2 ) ; } }
void function ( Collection < Tt > arg0 , Collection < Tt > arg1 , Comparator < Tt > arg2 , int arg3 ) { List < Tt > loc0 = new ArrayList < Tt > ( ) ; for ( int loc1 = 0 ; loc1 < arg3 ; loc1 ++ ) { if ( arg2 . compare ( arg0 . get ( loc1 ) , arg0 . get ( loc1 ) ) ) { loc0 . add ( arg0 . get ( loc1 ) ) ; } }
long function ( ) { return timestamp ; }
String function ( ) { return this . name ; }
Piece function ( int arg0 ) { return pieces [ arg0 ] ; }
String function ( String arg0 ) { return myself . bundle . getString ( arg0 ) ; }
void function ( ISourceFileLocator arg0 ) { delegates . add ( arg0 ) ; }
void function ( ) { if ( ! isSequence ( ) ) { throw new IllegalArgumentException ( "srini_string" ) ; } }
Integer function ( ) { return repeated ; }
Description function ( Description arg0 ) { fChildren . add ( arg0 ) ; return arg0 ; }
byte [ ] function ( short arg0 ) { byte [ ] loc0 = new byte [ 2 ] ; loc0 [ 0 ] = ( byte ) ( arg0 >>> 8 ) ; loc0 [ 1 ] = ( byte ) ( arg0 ) ; return loc0 ; }
Criteria function ( String arg0 , RelationalOperator arg1 , ValueNode arg2 ) { checkComplete ( ) ; return new Criteria ( arg0 , arg1 , arg2 ) ; }
StandardServiceRegistryBuilder function ( ConfigLoader arg0 ) { this . configLoader = arg0 ; return this ; }
Integer [ ] function ( int [ ] arg0 ) { Integer [ ] loc0 = new Integer [ arg0 . length ] ; for ( int loc1 = 0 ; loc1 < arg0 . length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }
Map function ( ) { loadMaps ( ) ; return characterMap ; }
UnivariateRealFunction function ( int arg0 ) { return polynomials [ arg0 ] . getDerivative ( ) ; }
ValidatorConfiguration function ( final String arg0 , final String arg1 ) { properties . put ( arg0 , arg1 ) ; return this ; }
void function ( ) { validateChain ( ) ; }
CookieAttributeHandler function ( final String arg0 ) { return this . attribHandlerMap . get ( arg0 ) ; }
void function ( ) { state = CLOSED ; dispatch . dispatch ( new PropertyChangeEvent ( this , this ) ) ; }
void function ( String [ ] arg0 ) { printCapitalized ( "srini_string" ) ; }
void function ( String arg0 ) { this . className = arg0 ; }
int function ( Object arg0 , Object arg1 ) { return arg0 . compareTo ( arg1 ) ; }
void function ( ) { dao = mock ( DbCustomerDao . class ) ; exception = new ExpectedException ( RuntimeException . class ) ; }
String function ( ) { String loc0 = doSendApiRequest ( "srini_string" , "srini_string" ) ; return loc0 ; }
String function ( ) { return responseHeaders . get ( "srini_string" ) ; }
GenMatrix < C > function ( ) { for ( int loc0 = 0 ; loc0 < matrix . size ( ) ; loc0 ++ ) { if ( matrix . get ( loc0 ) . get ( 0 ) == 0 ) { matrix . remove ( loc0 ) ; } } return this ; }
void function ( DrawSurface arg0 ) { arg0 . setColor ( Color . WHITE ) ; arg0 . fillRect ( 0 , 0 , gameWidth , gameHeight ) ; arg0 . setColor ( Color . BLACK ) ; arg0 . drawRect ( 0 , 0 , gameWidth , gameHeight ) ; }
AuditCriterion function ( AuditCriterion arg0 , AuditCriterion arg1 ) { return new LogicalAuditExpression ( arg0 , arg1 , "srini_string" ) ; }
T function ( Method arg0 , Object arg1 ) { if ( arg0 == null ) { throw new NullPointerException ( String . valueOf ( arg1 ) ) ; } return arg0 . cast ( arg1 ) ; }
void function ( String arg0 ) { myTopType = arg0 ; }
 quadrantOf ( quadrantOf ( Node arg0 ) ) { return arg0 == null ? null : quadrantOf ( arg0 . getParent ( ) ) ; }
void function ( String arg0 ) { this . fcKey = arg0 ; }
Double function ( ) { return xValue ; }
void function ( ) { trimToSize ( _maxSize ) ; }
floatfloat function ( ) { return textRectangle . getWidth ( ) ; }
GnpPosition function ( ) { return gnpPosition ; }
String [ ] function ( String arg0 ) { return collectionPropertyMappingByRole . get ( arg0 ) ; }
Collection < Table > function ( List < String > arg0 ) { return getTablesByNames ( getFullSchemaName ( ) , arg0 ) ; }
void function ( ) { }
UnivPowerSeries < C > function ( ) { return random . nextElement ( ) ; }
EditPartFactory function ( ) { return editorSite . getEditPartFactory ( ) ; }
void function ( boolean arg0 ) { fResolveBindings = arg0 ; }
double function ( Body arg0 , Body arg1 , Hand arg2 ) { if ( arg2 . pskip . value == 0 ) return arg0 . pskip . value * EPS ; else return arg1 . pskip . value * EPS + arg0 . pskip . value * phi0 ; }
boolean function ( PastryContact arg0 ) { return cwNodes . remove ( arg0 ) ; }
boolean function ( ) { return anyHasNext ( ) ; }
DateTimeFieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType fieldType
ActiveLock function ( ) { return new ActiveLock ( ) ; }
Product < C > function ( Reader arg0 ) { return parse ( arg0 , null ) ; }
void function ( final File arg0 , final File arg1 ) { if ( arg0 . exists ( ) && arg1 . exists ( ) ) { return ; } if ( arg0 . mkdirs ( ) ) { arg1 . renameTo ( arg0 ) ; } }
void function ( ) { if ( pdfxConformance != PdfWriter . PDFX2 ) { throw new IOException ( "srini_string" ) ; } }
boolean function ( JEditorPane arg0 ) { return arg0 != null && arg0 . getEditor ( ) != null && JGitUtil . isDirty ( arg0 . getEditor ( ) ) ; }
void function ( ) { fFilesSaved = true ; }
double function ( double [ ] arg0 , double [ ] arg1 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 . length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] * arg1 [ loc1 ] ; } return loc0 ; }
void function ( ) { }
void function ( String arg0 , Collection < ? > arg1 , Collection < ? > arg2 ) { if ( shouldContain ( arg1 , arg2 ) ) { fail ( arg0 ) ; } }
Collection < EvaluationListener > function ( ) { return evaluationListeners ; }
Callable < T > function ( final Class < T > arg0 ) { return new Callable < T > ( ) { @ Override public T call ( ) { StackTraceElement [ ] loc0 = getStackContext ( ) ; return ( loc0 != null ) ? loc0 [ 1 ] . getStackTrace ( ) : null ; } } ; }
int function ( BigInteger arg0 ) { return signum ( arg0 . mod ( this ) ) ; }
Event [ ] function ( ) { return getListener ( ) . getEvents ( ) ; }
int function ( Context arg0 , int arg1 ) { Resources loc0 = arg0 . getResources ( ) ; int loc1 = loc0 . getDimensionPixelSize ( arg1 ) ; return loc1 ; }
S function ( Class < S > arg0 ) { return createSchema ( arg0 , "srini_string" ) ; }
String [ ] function ( ) { return columnNames ; }
Closure function ( @ Nonnull Iterable < ? extends Closure > arg0 ) { return new ClosureAdapter ( arg0 ) ; }
void function ( double arg0 ) { if ( arg0 < Double . NEGATIVE_INFINITY ) { throw new ArithmeticException ( "srini_string" + arg0 + "srini_string" ) ; } }
void function ( CanVID arg0 ) { vid = arg0 ; }
void function ( int arg0 ) { setSampleEncryptionData ( true , arg0 ) ; setEncryptionData ( false , arg0 ) ; }
void function ( int arg0 ) { m_value -= arg0 ; }
boolean function ( ) { return onlineCheckingAllowed ; }
int function ( int arg0 ) { return childRanges [ arg0 ] ; }
void function ( int arg0 ) { checkColumns ( arg0 ) ; if ( arg0 == 1 ) { columnCount ++ ; } else if ( arg0 == columnCount ) { columnCount = 0 ; } }
void function ( Collection < ? extends K > arg0 ) { Iterator < ? extends K > loc0 = arg0 . iterator ( ) ; while ( loc0 . hasNext ( ) ) { put ( loc0 . next ( ) , null ) ; } }
void function ( ) { JOptionPane . showMessageDialog ( null , "srini_string" , "srini_string" ) ; }
TemplateContextType function ( ) { return fContextType ; }
void function ( float arg0 ) { list . add ( 0 , arg0 ) ; }
void function ( Object arg0 ) { if ( myList != null ) { myList . setItem ( arg0 ) ; } else { throw new InvalidItemException ( ) ; } }
JpaTemplate function ( final DataSource arg0 , final Map < String , String > arg1 ) { final JpaTemplate loc0 = new JpaTemplate ( arg0 , arg1 ) ; loc0 . setExpandable ( false ) ; return loc0 ; }
IWidgetLocator function ( Object arg0 ) { return new WidgetEnabledCondition ( arg0 ) ; }
ReflectConstructorSpec function ( Object ... arg0 ) { return new ReflectConstructorSpec ( arg0 ) ; }
void function ( ) { pos ++ ; }
byte [ ] function ( Object arg0 ) { if ( arg0 == null ) { return null ; } return toJSON ( arg0 , false ) ; }
JobStatus function ( @ NonNull JobId arg0 ) { Optional < JobStatus > loc0 = Optional . ofNullable ( model . getJobStatuses ( ) . get ( arg0 ) ) ; return loc0 . isPresent ( ) ? loc0 . get ( ) : null ; }
Codec [ ] function ( Format arg0 ) { return getCodecs ( getDecoderClasses ( ) , arg0 ) ; }
void function ( int arg0 ) { this . weight = arg0 ; }
int [ ] function ( ) { return aVueltas ; }
PdfIndirectReference function ( String arg0 , PdfDictionary arg1 ) { if ( arg1 != null ) { this . richMediaContent . put ( arg0 , arg1 ) ; } this . richMediaContent . add ( arg0 , PdfDictionary . create ( ) ) ; return this ; }
void function ( Set < IResource > arg0 ) { resources . addAll ( arg0 ) ; }
String function ( ) { String loc0 = "srini_string" ; loc0 += this . getLeftDistance ( ) + "srini_string" + this . getTopDistance ( ) + "srini_string" + this . getBottomDistance ( ) + "srini_string" ; return loc0 ; }
void function ( final double arg0 ) { this . numericalZero = arg0 ; }
void function ( int arg0 ) { doKeyUpKeyUp ( arg0 , extractKeys ( arg0 ) ) ; }
void function ( String arg0 ) { this . city = arg0 ; }
String function ( String arg0 ) { String loc0 = "srini_string" + m_Key + "srini_string" + arg0 ; return doSendApiRequest ( loc0 ) ; }
String function ( ) { return nodeInfo . getId ( ) ; }
HandshakeRequest function ( ) { return requestCallMeta ; }
List < ColumnMetaData > function ( ) { return columns ; }
String function ( String arg0 ) { if ( arg0 != null && arg0 . startsWith ( "srini_string" ) ) { arg0 = arg0 . substring ( 1 ) ; } return getLabelFor ( URI . create ( arg0 ) ) ; }
long function ( Duration arg0 ) { return Durations . toMicros ( arg0 ) ; }
String function ( Object arg0 ) { Element loc0 = new Element ( "srini_string" ) ; writeBack ( loc0 , arg0 ) ; return loc0 . getText ( ) ; }
void function ( Runway arg0 ) { arg0 . free ( ) ; }
void function ( BigInteger arg0 ) { this . nresults = arg0 ; }
long function ( ) { return SystemClock . uptimeMillis ( ) ; }
AccessibilityGraph function ( BeanDeploymentArchive arg0 , Map < ClassLoader , Boolean > arg1 ) { final Set < ClassLoader > loc0 = getSubDeploymentClassLoaders ( arg0 , arg1 ) ; return new AccessibilityGraph ( loc0 ) ; }
ITracePoint2D function ( ) { return m_previousPoint ; }
Object function ( ) { return value ; }
List < Integer > function ( ) { return initialAvailableNumer ; }
ModInteger function ( final java . math . BigInteger arg0 ) { return new ModInteger ( mod0 . mod ( arg0 ) , val . mod ( arg0 ) ) ; }
String function ( ) { return name ; }
float function ( Vector3f arg0 , Vector3f arg1 ) { return ( ( arg0 . x * arg1 . x + arg0 . y * arg1 . y + arg0 . z * arg1 . z ) / ( arg1 . x * arg1 . x + arg1 . y * arg1 . y + arg1 . z * arg1 . z ) ; }
boolean function ( GroupCategory ... arg0 ) { if ( arg0 == null ) { throw new NullPointerException ( ) ; } for ( GroupCategory loc0 : arg0 ) { if ( contains ( loc0 ) ) { return true ; } } return false ; }
GenMatrix < C > function ( Reader arg0 ) { return GenMatrixLite . from ( arg0 ) ; }
boolean function ( ) { return ( this . type == NULL ) ; }
ByteBuffer function ( ByteBuffer arg0 , int arg1 , int arg2 ) { throw new UnsupportedOperationException ( "srini_string" ) ; }
String function ( ) { return toXMLString ( ) ; }
LinkedList function ( CFG arg0 ) { LinkedList loc0 = new LinkedList ( ) ; calcFrontier ( arg0 , loc0 ) ; return loc0 ; }
String function ( String arg0 ) { if ( arg0 . equals ( "srini_string" ) ) { return "srini_string" ; } else if ( arg0 . equals ( "srini_string" ) ) { return "srini_string" ; } else if ( arg0 . equals ( "srini_string" ) ) { return "srini_string" ; } else { return "srini_string" ; } }
void function ( ) { sbb . build ( new PairListBuilder < > ( ) ) ; }
List function ( ) { return ones ; }
String function ( ) { return entityName ; }
void function ( Type arg0 ) { if ( DEBUG ) { System . err . println ( "srini_string" + arg0 ) ; } interfaces = new Type [ 1 ] ; interfaces [ 0 ] = arg0 ; }
BatchCQLStatementTupleMapper function ( BatchCQLStatementBuilder ... arg0 ) { return new BatchCQLStatementTupleMapper ( arg0 ) ; }
void function ( String arg0 ) { files . add ( arg0 ) ; }
int [ ] function ( float arg0 ) { int loc0 = ( int ) ( arg0 / 255.0f ) ; return redHistogram ( loc0 ) ; }
IConnection function ( String arg0 , String arg1 ) { IConnection loc0 = connections . get ( arg0 ) ; if ( loc0 != null ) { return loc0 ; } loc0 = new IConnection ( storm_conf , arg1 ) ; connections . put ( arg0 , loc0 ) ; return loc0 ; }
void function ( ) { IntArrayWorker loc0 = new IntArrayWorker ( ) ; int [ ] [ ] loc1 = { { 1 , 2 , 3 } , { 4 , 5 , 6 } } ; loc0 . setMatrix ( loc1 ) ; int loc2 = loc0 . getColTotal ( ) ; System . out . println ( "srini_string" + loc2 ) ; }
URL function ( String arg0 ) { if ( arg0 == null || arg0 . length ( ) == 0 ) { throw new IllegalArgumentException ( ERRORMSG ) ; } URL loc0 = null ; try { loc0 = new URL ( arg0 ) ; } catch ( MalformedURLException loc1 ) { return null ; } return loc0 ; }
boolean function ( ) { return isField ; }
void function ( Shell arg0 ) { if ( arg0 == getWorkbenchWindow ( ) . getShell ( ) ) { getWorkbenchWindow ( ) . getShell ( ) . setTop ( ) ; } else { getWorkbenchWindow ( ) . getShell ( ) . setTop ( ) ; } }
String function ( String arg0 ) { if ( arg0 . endsWith ( "srini_string" ) ) { return "srini_string" ; } else if ( arg0 . endsWith ( "srini_string" ) ) { return "srini_string" ; } else if ( arg0 . endsWith ( "srini_string" ) ) { return "srini_string" ; } else { return "srini_string" ; } }
GeckoMenu function ( ) { return mMenuPopup . getMenu ( ) ; }
ResourceEditPropertyBuilder function ( String arg0 ) { this . propertyComment = arg0 ; return this ; }
void function ( int arg0 ) { if ( arg0 < 0 || arg0 >= size ( ) ) throw new IndexOutOfBoundsException ( "srini_string" + arg0 + "srini_string" + size ( ) ) ; stack . remove ( arg0 ) ; }
WorkerContextImpl function ( ) { return context . get ( ) ; }
Environment function ( ) { Environment loc0 = new Environment ( ) ; populateEnvironment ( loc0 ) ; return loc0 ; }
String function ( ) { return fMethod . getMnemonicMnemonicMnemonic ( ) ; }
String function ( ) { return in . nextLine ( ) ; }
OSMElement function ( ) { return objectWithTags ; }
Batch function ( final int arg0 ) { for ( Partitioner loc0 : partitioners ) { Batch loc1 = loc0 . getOutgoingBatch ( arg0 ) ; if ( loc1 != null ) { return loc1 ; } } return null ; }
void function ( Object arg0 , Throwable arg1 ) { log ( LogTarget . WARN , arg0 , arg1 ) ; }
boolean function ( ) { return false ; }
void function ( Object arg0 ) { if ( isErrorEnabled ( ) ) { getLogger ( ) . error ( String . valueOf ( arg0 ) ) ; } }
URI function ( ) { return uri ; }
void function ( ) { ColoredSystemList . checkAllColoredSystems ( ) ; ColoredSystemList . checkAllInvariants ( ) ; }
int [ ] function ( ) { return Libraries . listAvailableAbis ( ) ; }
String function ( byte [ ] arg0 ) { try { CertificateFactory loc0 = CertificateFactory . getInstance ( "srini_string" ) ; return ( String ) loc0 . generateCRL ( new X509Certificate ( arg0 ) ) ; } catch ( Throwable loc0 ) { return "srini_string" ; } }
void function ( ) { size *= 2 ; }
State function ( ) { return state ; }
boolean function ( int arg0 ) { return arg0 >= 0 && arg0 < mNotifications . size ( ) ; }
ResourceEditPropertyBuilder function ( boolean arg0 ) { this . isTesting = arg0 ; return this ; }
double function ( double arg0 , double arg1 , double arg2 ) { return bracket ( arg0 , arg1 , arg2 , - 1 ) ; }
String function ( ) { return "srini_string" + getChronologyChronology ( ) . toString ( ) + "srini_string" + getChronology ( ) . toString ( ) + "srini_string" + getPartialValues ( ) . toString ( ) ; }
ObjectContainer function ( String arg0 ) { return open ( new File ( arg0 ) ) ; }
RawFragmentBatch function ( Allocator arg0 ) { return new RawFragmentBatch ( arg0 , header , body , sender ) ; }
String function ( String arg0 ) { return fAttributes . get ( arg0 ) ; }
List < T > function ( Collection < T > arg0 ) { return Collections . unmodifiableList ( new ArrayList < T > ( arg0 ) ) ; }
int function ( ) { return stmt . getSeq ( ) ; }
boolean function ( ) { return i . isTag ( "srini_string" ) ; }
MSG_TYPE function ( ) { return msgType ; }
String function ( String arg0 ) { if ( map == null ) { return null ; } return map . get ( arg0 ) ; }
void function ( ) { receivedMsg ++ ; }
Element function ( Node arg0 , String arg1 ) { return getFirstElementMatching ( new NodeImpl ( arg0 ) , arg1 ) ; }
int function ( final Object [ ] arg0 , final Object [ ] arg1 ) { return indexOf ( arg0 , arg1 , 0 ) ; }
String function ( final Member arg0 ) { return getClassDescriptor ( arg0 . getDeclaringClass ( ) ) ; }
String function ( final Name arg0 ) { final int loc0 = arg0 . size ( ) - 1 ; if ( loc0 < 0 ) { return "srini_string" ; } return arg0 . get ( loc0 ) ; }
ConsumedPort function ( ) { return new ConsumedPort ( ) ; }
String function ( String arg0 ) { return hostToIp . get ( arg0 ) ; }
void function ( ) { }
void function ( ) { final Path loc0 = Paths . get ( "srini_string" , "srini_string" , "srini_string" ) ; final Class < ? > loc1 = Class . forName ( loc0 . toString ( ) ) ; Assert . assertTrue ( "srini_string" , loc1 . isInterface ( ) ) ; }
void function ( Socket arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } arg0 . setSoTimeout ( getSocketTimeout ( ) ) ; this . socket = arg0 ; open = true ; }
void function ( ) { Configuration loc0 = new Configuration ( ) ; loc0 . configure ( ) ; writeSession ( ) ; }
boolean function ( IResource arg0 , String arg1 ) { return remove ( arg0 , arg1 , false ) ; }
Request function ( ) { return ErrorReportingRunner . INSTANCE ; }
void function ( ) { out . append ( ';' ) ; }
void function ( MouseEvent arg0 ) { release ( ) ; }
int function ( ) { return list . lastIndexOf ( true ) ; }
File function ( ) { return file ; }
String function ( Date arg0 ) { if ( arg0 == null ) return null ; SimpleDateFormat loc0 = new SimpleDateFormat ( "srini_string" ) ; return loc0 . format ( arg0 ) ; }
ArrayList < Byte > function ( ) { return read ( new FileReader ( inputFile ) ) ; }
String function ( ) { return this . charset ; }
Phenotype function ( String arg0 , String arg1 ) { return getPhenotype ( arg0 , arg1 , null ) ; }
void function ( Context arg0 , Name arg1 , Object arg2 ) { arg0 . rebind ( arg1 , arg2 ) ; }
void function ( boolean arg0 ) { if ( arg0 ) { buffer = Arrays . copyOf ( buffer , length ) ; } else { buffer = Arrays . copyOf ( buffer , length ) ; } }
void function ( Person arg0 ) { allPersons . remove ( arg0 ) ; }
boolean function ( Object arg0 ) { if ( arg0 instanceof RoutingTableEntry ) { RoutingTableEntry loc0 = ( RoutingTableEntry ) arg0 ; return ( loc0 . getContact ( ) == contact ) ; } return false ; }
void function ( String arg0 ) { ExtendedJSONObject loc0 = getObsoleteIds ( ) ; loc0 . putString ( arg0 , 1 ) ; setObsoleteIds ( loc0 ) ; }
boolean function ( String arg0 ) { if ( _register == null ) return false ; return _register . remove ( arg0 ) != null ; }
void function ( Host arg0 , Double arg1 ) { List < Double > loc0 = rttToMonitors . get ( arg0 ) ; if ( loc0 == null ) { loc0 = new ArrayList < Double > ( ) ; rttToMonitors . put ( arg0 , loc0 ) ; } loc0 . add ( arg1 ) ; }
boolean function ( ) { for ( int loc0 = 0 ; loc0 < MAX_BOARD_SIZE ; loc0 ++ ) { if ( pieces [ loc0 ] == null ) { return false ; } } return true ; }
Parser function ( ) { return new SAXParser ( ) ; }
void function ( int arg0 ) { this . iterations = arg0 ; }
QuadTreeNode function ( SquareNode arg0 ) { return child ( arg0 ) . parent ; }
GenPolynomialPolynomial < C > function ( final Class < ? extends GenPolynomialPolynomial < C >> arg0 , final Class < ? extends GenPolynomialPolynomial < C >> arg1 , final int arg2 , final int arg3 , final int arg4 , final int arg5 , final int arg6 , final int arg7 , final int arg8 , final int arg9 , final int arg10 , final int arg11 ) { return create ( arg0 , arg1 , arg2 , arg3 , arg4 , arg5 5 , arg6 , arg7 , arg8 , arg9 , arg10 , arg11 ) ; }
ValidationContext function ( ) { return new ValidationContext ( ) ; }
Set < String > function ( ) { return namedDescriptorMap . keySet ( ) ; }
SpringConfig function ( Map < String , ? > arg0 ) { final SpringConfig loc0 = new SpringConfig ( ) ; loc0 . arg0 = arg0 ; loc0 . tension = defaultConfig . tension ; loc0 . friction = defaultConfig . frictionction ; return loc0 ; }
void function ( Uri arg0 ) { }
void function ( Permission arg0 ) { checkPermissionAndFireCheckedException ( arg0 , null ) ; }
boolean function ( final String arg0 ) { return userFunctions . containsKey ( arg0 ) ; }
VectorXZ function ( double arg0 ) { return new VectorXZ ( x * arg0 , y * arg0 , z * arg0 ) ; }
String function ( Element arg0 , String arg1 ) { Attribute loc0 = arg0 . getAttributeByName ( arg1 ) ; if ( loc0 == null ) { return null ; } return loc0 . getValue ( ) ; }
void function ( ) { if ( isEmpty ( ) ) throw new NoSuchElementException ( "srini_string" ) ; Node loc0 = first ; first = loc0 . next ; loc0 . next = null ; size -- ; }
void function ( String arg0 ) { this . inputInfo = arg0 ; }
void function ( Bundle arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( BUNDLE_EXTRA_STRING_MESSAGE ) ; } }
long function ( ) { if ( preauthContext != null && preauthContext . allowUnauthTime ) { return preauthContext . time ; } return System . currentTimeMillis ( ) ; }
Date function ( ) { return bankToCustomerStatement . getDtEnd ( ) ; }
Quotient < C > function ( ) { return new Quotient < C > ( num , den , signum ( ) ) ; }
Expr function ( int arg0 ) { return LocalStore . get ( ind_var , arg0 ) ; }
UnivPowerSeries < C > function ( ) { return random . nextDouble ( ) . pow ( 0.7 ) ; }
Duration function ( Duration arg0 , Duration arg1 ) { return new Duration ( arg0 . getSeconds ( ) + arg1 . getSeconds ( ) , arg0 . getNanos ( ) + arg1 . getNanos ( ) ) ; }
IClipboardAnnotationCreator function ( ) { if ( instance == null ) { instance = new IAnnotationCreator ( ) ; } return instance ; }
boolean function ( T [ ] arg0 ) { if ( arg0 == null ) { return false ; } for ( T loc0 : arg0 ) { if ( loc0 == null ) { return false ; } } return true ; }
HazelcastInstance function ( ) { return hazelcastInstance ; }
boolean function ( ) { return ring . isUnit ( val ) ; }
void function ( @ TestRes int arg0 ) { LOGGER . info ( "srini_string" , arg0 ) ;addView ( VIEW_REDIRECT_PREFIX + arg0 ) ; }
Section function ( ) { Section loc0 = sections . get ( sections . size ( ) - 1 ) ; return loc0 ; }
boolean function ( ) { return timespan > System . currentTimeMillis ( ) ; }
boolean function ( ) { return ( size == 0 ) ; }
void function ( PdfReader arg0 ) { fc . setBookmarks ( arg0 ) ; }
void function ( int arg0 ) { this . lineJoinStyle = arg0 ; }
int function ( ) { return red . getCoefficient ( ) + green . getCoefficient ( ) + white . getCoefficient ( ) ; }
void function ( ICommandStack arg0 ) { }
void function ( int arg0 ) { if ( arg0 < 0 || arg0 > 255 ) throw new IllegalArgumentException ( "srini_string" ) ; setSystemBrightness ( arg0 ) ; }
void function ( ) { if ( upcomingReleaseId == null ) { throw new IllegalStateException ( "srini_string" ) ; } }
Date function ( ) { return Date . from ( get ( ) ) ; }
boolean function ( ) { return escapeText ; }
PutSettings function ( Settings arg0 ) { return new PutSettings ( ) ; }
BasicDevice function ( String arg0 ) { if ( ( arg0 == null ) || ( arg0 . trim ( ) . equals ( "srini_string" ) ) ) { throw new NullIdException ( ) ; } return devices . get ( arg0 ) ; }
void function ( TLinkable arg0 ) { _next = arg0 ; }
void function ( Serializer arg0 ) { _freeHessian2Output . free ( arg0 ) ; }
TagState function ( ) { return state ; }
String function ( ) { return getKeyTypeZNode ( baseZNode , KEY_TYPE_ZNODE_NAME ) ; }
void function ( PropertyChangeListener arg0 ) { pcsDelegate . addPropertyChangeListener ( arg0 ) ; }
void function ( T arg0 ) { lock . lock ( ) ; try { map . put ( arg0 , arg0 ) ; } finally { lock . unlock ( ) ; } }
void function ( ITestRunSession arg0 , String arg1 ) { exportTestRunSession ( arg0 , arg1 , JUNIT_CONTAINER_PATH ) ; }
void function ( final Object arg0 ) { iterator . add ( arg0 ) ; }
boolean function ( ) { return fCheckable ; }
float function ( final Graphics2D arg0 ) { final float loc0 = arg0 . getFontMetrics ( ) . stringWidth ( loc0 ) ; return arg0 . getFontMetrics ( ) . stringWidth ( loc0 ) ; }
void function ( String arg0 , FreeMarkerProperty arg1 ) { Map < String , FreeMarkerProperty > loc0 = properties . get ( arg0 ) ; if ( loc0 == null ) { loc0 = new HashMap < String , FreeMarkerProperty > ( ) ; properties . put ( arg0 , loc0 ) ; } loc0 . put ( arg1 . getId ( ) , arg1 ) ; }
boolean function ( ) { return ( this . type == NUMBER ) ; }
void function ( Object arg0 ) { throw new RuntimeException ( "srini_string" + arg0 ) ; }
void function ( ) { MyListener . setInvocationCount ( 0 ) ; SLSBBMT loc0 = lookup ( "srini_string" , SLSBBMT . class ) ; this . doCMTTest ( loc0 , 2 ) ; }
void function ( int arg0 ) { sleep ( arg0 , false ) ; }
void function ( String arg0 ) { this . caller = arg0 ; }
boolean function ( CtClass arg0 ) { return arg0 . isAnnotationPresent ( Entity . class ) ; }
Region function ( ) { return fTagPosition ; }
GenPolynomial < C > function ( GenPolynomial < C > arg0 ) { return reduce ( arg0 , true ) ; }
void function ( ActionEvent arg0 ) { blockedTimeInWindow = AnimationUtils . currentAnimationTime ( ) - TICK_TIME ; }
void function ( ImagePanel arg0 ) { colorDialog . removeImagePanel ( arg0 ) ; }
Block function ( ) { return returnAddress ; }
void function ( String arg0 , Object arg1 ) { mParameters . put ( arg0 , arg1 ) ; }
StubStrategy function ( String arg0 , String arg1 , Class < ? > arg2 ) { return new StubStrategy ( arg0 , arg1 , arg2 ) ; }
void function ( ) { Customer loc0 = new Customer ( ) ; loc0 . setId ( 1 ) ; dao . update ( loc0 ) ; }
boolean function ( ) { return valid ; }
File [ ] function ( File arg0 ) { return findFilesWithMixedLineDelimiters ( arg0 , false ) ; }
AlgebraicNumber < C > function ( java . io . Reader arg0 ) { char [ ] loc0 = new char [ arg0 . available ( ) ] ; arg0 . read ( loc0 ) ; return parse ( new java . io . InputStreamReader ( arg0 ) ) ; }
float function ( final String arg0 , final float arg1 ) { if ( arg0 == null ) { return arg1 ; } else { return Float . parseFloat ( arg0 ) ; } }
String function ( ) { if ( debug_df ) System . out . println ( "srini_string" ) ; return "srini_string" ; }
AccountIdentification32 function ( String arg0 , String arg1 , XMLGregorianCalendar arg2 ) { return new AccountIdentification32 ( arg0 , arg1 , arg2 ) ; }
XMLParser function ( State arg0 ) { return setState ( specialChar , arg0 ) ; }
boolean function ( ) { return isAssociative ( ) ; }
String function ( String arg0 ) { }
String [ ] function ( ) { return keyAliases ; }
char function ( ) { return list . peek ( ) ; }
void function ( ) { try { synchronizerDelegate . onSynchronized ( ) ; } catch ( Throwable loc0 ) { onSynchronizeFailed ( loc0 ) ; } }
boolean function ( ) { return fEnabled ; }
void function ( ) { if ( fLabel != null ) { fLabel . setEnabled ( isOkToUse ( ) ) ; } }
BigDecimal function ( ) { return random . nextDouble ( ) ; }
BSONObject function ( String arg0 , Object arg1 ) { BSONObject loc0 = new BSONObject ( ) ; loc0 . data . put ( arg0 , arg1 ) ; return loc0 ; }
void function ( ) { if ( treeHandlerDelegator . isRoot ( ) || parentCoordinator == null ) { skyNetNode . removeTreeHandler ( this ) ; } }
IWidgetLocator function ( final IWidgetLocator arg0 ) { return arg0 ; }
Type function ( ) { return superclass ; }
WebApp function ( ) { return deployer . createWebApp ( MODULE_WEB ) ; }
String function ( Node arg0 ) { Node loc0 = deserialize ( arg0 ) ; serialize ( loc0 ) ; return serializeUtil ( loc0 ) ; }
ClassLoader function ( ) { ClassLoader loc0 = Thread . currentThread ( ) . getContextClassLoader ( ) ; if ( loc0 == null ) { loc0 = ClassLoader . getSystemClassLoader ( ) ; } return ( loc0 != null ? loc0 : Thread . currentThread ( ) . getContextClassLoader ( ) ) ; }
void function ( Collection < Writable > arg0 ) { for ( Writable loc0 : arg0 ) { queue . add ( loc0 ) ; } }
GenVector < C > function ( ) { return GenVector . random ( random ) ; }
int function ( ) { return marcador ; }
MathUtil function ( ) { return instance ; }
void function ( ) { if ( ! closed ) { tx . begin ( ) ; } else { throw new IllegalStateException ( "srini_string" ) ; } }
Change function ( ChangeType arg0 , Path arg1 , ClasspathFixProposal [ ] arg2 ) { Change loc0 = new Change ( arg0 ) ; loc0 . addPath ( arg1 ) ; if ( arg2 != null ) { loc0 . addProposals ( arg2 ) ; } return loc0 ; }
void function ( Interpolator arg0 ) { if ( ! isAnimating ) { start ( ) ; } activeInterpolators . addElement ( arg0 ) ; }
int function ( ) { return entry . getKey ( ) ; }
int function ( ) { return index ; }
Map < String , String > function ( String arg0 ) { Map < String , String > loc0 = new HashMap < String , String > ( ) ; if ( ! isEmpty ( arg0 ) ) { String [ ] loc1 = arg0 . split ( DEFAULT_KEY_AND_VALUE_PAIR_SEPARATOR ) ; for ( String loc2 : loc1 ) { String [ ] loc3 = loc2 . split ( DEFAULT_KEY_AND_VALUE_PAIR_SEPARATOR ) ; loc0 . put ( loc3 [ 0 ] , loc3 [ 1 ] ) ; } } return loc0 ; }
StringBuilder function ( StringBuilder arg0 , char arg1 ) { int loc0 = arg0 . length ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { arg0 . setCharAt ( loc1 , arg0 . charAt ( loc1 ) ) ; } return arg0 ; }
void function ( ) { probes = new boolean [ 0 ] ; }
Map < String , ArrayList < String >> function ( ) { return values ; }
String [ ] function ( ) { final String [ ] loc0 = getVariables ( ) ; final String [ ] loc1 = new String [ loc0 . length ] ; System . arraycopy ( loc0 , 0 , loc1 , 0 , loc0 . length ) ; return loc1 ; }
String function ( String arg0 ) { if ( arg0 == null ) { return null ; } return encode ( arg0 , true ) ; }
void function ( ) { globalMutex . add ( this ) ; }
void function ( float arg0 ) { this . offset = arg0 ; }
Quotient < C > function ( ) { return new Quotient < C > ( random ( ) ) ; }
Dialog function ( final Dialogs . ID arg0 , final String arg1 , final String arg2 , final int arg3 , final int arg4 , final int arg5 , final int arg6 , final int arg7 ) { return createRefactoringStatusDialog ( arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , null , arg6 , arg7 ) ; }
boolean function ( ) { return operations . isIgnorable ( ) ; }
DocumentWrapperWrapper > function ( DocumentWrapperWrapper arg0 ) { DocumentWrapperWrapper loc0 = new DocumentWrapperWrapper ( arg0 ) ; DocumentWrapper loc1 = loc0 . getDocumentWrapper ( ) ; return ( DocumentWrapper ) loc1 . getWrappedDocument ( ) ; }
T function ( Class < T > arg0 , Object ... arg1 ) { return arg0 . cast ( new Constructor < T > [ arg1 . length ] ) ; }
boolean function ( PdfName arg0 ) { if ( viewerPreferences != null ) { return viewerPreferences . containsKey ( arg0 ) ; } return false ; }
Local < C > function ( String arg0 ) { return parse ( arg0 , new HashSet < > ( ) ) ; }
SortedBag < T > function ( ) { return create ( null ) ; }
boolean function ( ) { return enabledMetrics . contains ( LoadMetric . STARTED ) ; }
void function ( JPanel arg0 ) { this . runner = new GUIRunner ( arg0 ) ; }
ISDVInfo function ( ) { return new ISDVInfo ( ) ; }
ITrace2D function ( ) { return m_trace ; }
Image function ( String arg0 , Class arg1 ) { return getImage ( arg0 , arg1 , false ) ; }
void function ( OutputStream arg0 ) { sessionInfos . save ( arg0 ) ; executionData . save ( arg0 ) ; }
Residue < C > function ( ) { return new Residue < C > ( ring , val , isunit ) ; }
OSCByteStream function ( ) { if ( isByteArrayComputed ) { computeByteArray ( ) ; } return new OSCByteStream ( byteArray , byteArray . length ) ; }
void function ( int arg0 ) { balance -= arg0 ; }
Dialog function ( final Context arg0 , final Dialog . RefactoringStatus arg1 , final Id arg2 ) { return createRefactoringRefactoringStatusDialog ( arg0 , arg1 , arg2 , null ) ; }
JoinSequence function ( boolean arg0 ) { this . useThetaStyle = arg0 ; return this ; }
void function ( Element arg0 ) { if ( arg0 . hasAttribute ( "srini_string" ) ) { String loc0 = arg0 . getAttribute ( "srini_string" ) ; String [ ] loc1 = loc0 . split ( "srini_string" ) ; Arrays . equals ( loc1 , loc1 ) ; } }
boolean function ( ) { if ( name != null && name . endsWith ( "srini_string" ) ) { return true ; } return false ; }
DateTime function ( ) { return toMutableDateTimeISO ( ) . toDateTime ( ) ; }
Quotient < C > function ( final int arg0 ) { return new Quotient < C > ( num . sqrt ( arg0 ) , den ) ; }
boolean function ( Type arg0 , Type arg1 ) { if ( ! ( arg0 instanceof Method ) || ! ( arg1 instanceof Method ) ) { return false ; } return true ; }
Limit function ( ) { return new Limit ( ) ; }
IHoverInfo function ( final String arg0 , final String arg1 , final boolean arg2 ) { return new Tooltip ( null , arg0 , arg1 , arg2 ) ; }
int function ( ) { return ( int ) Math . round ( label . getPreferredSize ( ) . getWidth ( ) - xGrow ) ; }
boolean function ( Block arg0 ) { if ( arg0 . y + Block . HEIGHT > y ) { if ( arg0 . x + Block . WIDTH == x ) { return true ; } } return false ; }
void function ( String arg0 ) { this . rowData = arg0 ; }
int function ( ) { if ( beforeFirst ) { throw new IllegalStateException ( ) ; } beforeFirst = false ; return nextIndex ( ) ; }
void function ( ) { Assert . assertTrue ( "srini_string" , this . slsb . isInjected ( ) ) ; }
Iterator function ( FloatIterator arg0 ) { if ( arg0 == null ) { return null ; } return new FloatIterator ( arg0 ) ; }
void function ( TokenProvider arg0 ) { this . tokenProvider = arg0 ; }
Header function ( ) { return myHeader ; }
int function ( ) { return tagNo ; }
byte [ ] function ( byte [ ] arg0 ) { try { return saslClient != null ? saslClient . evaluateResponse ( arg0 ) : new byte [ 0 ] ; } catch ( SaslException loc1 ) { throw Throwables . propagate ( loc1 ) ; } }
Iterator < D > function ( ) { return new DataFileIterator ( this ) ; }
void function ( ) { Text loc0 = new Text ( getFilterControl ( ) ) ; fTextControl . add ( loc0 ) ; fComposite . add ( loc0 ) ; }
JoinSequence function ( Collection arg0 , boolean arg1 ) { JoinSequence loc0 = createJoinSequence ( arg0 . size ( ) ) ; createJoinSequence ( loc0 , arg1 ) ; return loc0 ; }
void function ( @ ArquillianResource ( TxControlServlet . class ) URL arg0 ) { testURL ( arg0 , true , false ) ; }
void function ( String [ ] arg0 ) { printCapitalized ( "srini_string" ) ; }
Exception function ( ) { return error ; }
void function ( final int arg0 ) { this . conditionVarition = new SimpleExpressionAggregate ( arg0 ) ; }
byte [ ] function ( Drawable arg0 ) { return arg0 . getByteArray ( ) ; }
void function ( Closeable arg0 ) { if ( arg0 != null ) { try { arg0 . close ( ) ; } catch ( IOException loc0 ) { } } }
void function ( boolean arg0 ) { if ( ! arg0 ) { throw new IllegalArgumentException ( "srini_string" ) ; } }
Residue < C > function ( BufferedReader arg0 ) { return new Residue < C > ( parse ( arg0 . readLine ( ) ) ) ; }
float function ( ) { return rise ; }
byte [ ] function ( String arg0 ) { return StringUtils . getBytesUnchecked ( arg0 , CharEncoding . UTF_16 ) ; }
void function ( ) { for ( int loc0 = 0 ; loc0 < grid . length ; loc0 ++ ) { for ( int loc1 = 0 ; loc1 < grid [ 0 ] . length ; loc1 ++ ) { grid [ loc0 ] [ loc1 ] = 0 ; } } }
Student function ( String arg0 ) { Student loc0 = null ; try { Document loc1 = new Document ( arg0 ) ; loc0 = read ( loc1 ) ; } catch ( Exception loc1 ) { loc1 . printStackTrace ( ) ; } return loc0 ; }
int function ( ) { return state ; }
void function ( boolean arg0 ) { this . payloadSizeEstimatedWhenAdding = arg0 ; }
void function ( List < Integer > arg0 ) { taskIdsQueue . addAll ( arg0 ) ; takeLock . lock ( ) ; try { notEmpty . signal ( ) ; } finally { takeLock . unlock ( ) ; } }
int function ( ) { int loc0 = size ( ) ; _list . toArray ( new long [ loc0 ] , 0 , loc0 ) ; return loc0 ; }
int function ( ) { return type ; }
void function ( ) { Assert . assertEquals ( "srini_string" , false , new TagName ( "srini_string" ) . equals ( "srini_string" ) ) ; }
boolean function ( ) { return num == 1 ; }
String function ( File arg0 ) { return readFully ( arg0 , Charsets . UTF_8 ) ; }
UUID function ( byte [ ] arg0 ) { if ( isPsshAtom ( arg0 ) ) { byte [ ] loc0 = new byte [ 16 ] ; System . arraycopy ( arg0 , 8 , loc0 , 0 , 16 ) ; return UUID . fromString ( loc0 ) ; } return null ; }
List function ( ) { return list ; }
void function ( Component arg0 ) { this . component = arg0 ; }
void function ( ) { next . close ( ) ; }
PluginIdentifierIdentifier function ( @ SuppressWarnings ( "srini_string" ) IPluginIdentifier arg0 ) { if ( arg0 == null ) return null ; return new PluginIdentifierIdentifier ( arg0 . getIdentifier ( ) ) ; }
PMML function ( InputStream arg0 ) { return IOUtil . unmarshal ( arg0 , PMML . class ) ; }
int function ( ) { return classInfo . hashCode ( ) ; }
boolean function ( ) { return _exists ; }
void function ( String arg0 ) { this . style = arg0 ; }
void function ( final HttpParams arg0 , final boolean arg1 ) { Args . notNull ( arg0 , "srini_string" ) ; arg0 . setBooleanParameter ( CoreConnectionPNames . SO_KEEPALIVE , arg1 ) ; }
void function ( int arg0 , int arg1 ) { if ( cellContents ( arg0 , arg1 ) == EMPTY ) { gridData [ arg0 ] [ arg1 ] = FISH ; } }
Set < ResourceGroupEntity > function ( ResourceType arg0 ) { return resourceGroupService . findAllByResourceType ( arg0 ) ; }
void function ( ListElement arg0 ) { this . listElements . add ( arg0 ) ; }
Object [ ] [ ] function ( ) { return columnNames . clone ( ) ; }
void function ( Class < E > arg0 , E arg1 ) { if ( handlers . containsKey ( arg0 ) ) { handlers . get ( arg0 ) . handle ( arg1 ) ; } else { throw new IllegalArgumentException ( "srini_string" + arg0 + "srini_string" ) ; } }
void function ( boolean arg0 ) { this . useCriterion4 = arg0 ; }
void function ( final String arg0 , final String arg1 , final String arg2 ) { addAuthor ( arg0 , arg1 , null , arg2 ) ; }
void function ( ) { _total = 0 ; }
String function ( ) { if ( id == null ) { id = new Integer ( 1 ) ; } return getFreemarkerFooter ( ) + "srini_string" + id + "srini_string" ; }
Identifier function ( String arg0 , String arg1 , String arg2 ) { return new Identifier ( arg0 , arg1 , arg2 ) ; }
void function ( ) { if ( sClipboardQueue != null ) { sClipboardQueue . clear ( ) ; } }
String function ( ) { return String . format ( "srini_string" , component , task , ts , values ) ; }
ITypeHierarchy function ( IType arg0 ) { return findTypeHierarchyInCache ( arg0 ) ; }
void function ( ) { fIsHashCached = false ; fLength = 0 ; fColumn = UNDEFINED ; }
int function ( List arg0 ) { int loc0 = 0 ; Iterator loc1 = arg0 . iterator ( ) ; while ( loc1 . hasNext ( ) ) { loc0 += loc1 . next ( ) ; } return loc0 ; }
void function ( ) { }
void function ( double arg0 , double arg1 ) { double loc0 = Math . max ( arg0 , arg1 ) ; if ( loc0 < leftBound ) { leftBound = loc0 ; } if ( loc0 > rightBound ) { rightBound = loc0 ; } }
List < Tag > function ( Tag arg0 ) { List < Tag > loc0 = new ArrayList < Tag > ( ) ; if ( arg0 != null ) { if ( arg0 . getParent ( ) != null ) { loc0 . add ( arg0 . getParent ( ) ) ; } loc0 . add ( arg0 ) ; } return loc0 ; }
void function ( ) { final Element loc0 = li . end ( ) ; assertEquals ( ListElement . class , loc0 . getClass ( ) ) ; verifyContent ( loc0 ) ; }
void function ( Collection arg0 , Object arg1 , Object arg2 ) { assertContains ( "srini_string" + arg1 + "srini_string" + arg2 + "srini_string" , arg0 , arg1 , arg2 ) ; }
int function ( String arg0 , String arg1 ) { return ( int ) getMessage ( arg0 , arg1 , "srini_string" ) ; }
int function ( ASTNode arg0 ) { return cover ( arg0 , INTERSECTS ) ? SELECTED : BEFORE ; }
void function ( boolean arg0 ) { started_ = arg0 ; }
IJavaSearchScope function ( IJavaScriptElement arg0 ) { return RefactoringScopeFactory . create ( arg0 , true ) ; }
Object function ( BigInteger arg0 ) { Object loc0 = _curr . get ( arg0 ) ; if ( loc0 == null ) { return null ; } return loc0 ; }
T function ( Class < T > arg0 , String arg1 ) { HttpURLConnection loc0 = ( HttpURLConnection ) getStream ( arg1 ) ; loc0 . connect ( ) ; return mapper . readValue ( loc0 . getInputStream ( ) , arg0 ) ; }
void function ( ) { TopLevelBean loc0 = lookup ( "srini_string" , TopLevelBean . class ) ; loc0 . induceCreationViaJNDILookup ( ) ; }
void function ( int arg0 ) { deleteTask ( arg0 ) ; }
String function ( ) { return id ; }
long function ( ) { return allocationLimit . get ( ) ; }
int function ( ) { return getAddends ( ) . size ( ) ; }
ColumnFileMetaData function ( ) { return metaData . getRootColumns ( ) ; }
Residue < C > function ( ) { int loc0 = signum ( ) ; if ( loc0 == 0 ) return this ; return new Residue < C > ( ring . negate ( ) , loc0 ) ; }
String function ( ) { return baseID ; }
Set < Asset > function ( Set < Asset > arg0 ) { return Iterables . filter ( arg0 , new Predicate < Asset > ( ) { @ Override public boolean apply ( Asset arg1 ) { return arg1 . getVendor ( ) != null ; } } ) ; }
String function ( ) { return catalogKey ; }
JavaPairRDD < String , MatchableEntity > function ( JavaPairRDD < String , MatchableEntity > arg0 ) { if ( ! ( arg0 instanceof JavaPairRDD ) ) { throw new IllegalArgumentException ( "srini_string" ) ; } return convertDocuments ( ( JavaPairRDD < String , MatchableEntity > ) arg0 ) ; }
void function ( Figure arg0 ) { _message = arg0 ; }
IntListIterator function ( ListIterator arg0 ) { if ( arg0 == null ) { return null ; } return new ListIteratorWrapper ( arg0 ) ; }
Closure function ( final Class < ? > arg0 , final Method arg1 , final Object arg2 ) { return new Closure ( ) { public Object doInClosure ( Closure arg3 ) throws Throwable { return arg3 . doInClosure ( arg0 , arg1 , arg2 ) ; } } ; }
int function ( ) { return val . size ( ) ; }
boolean function ( final HttpCacheEntry arg0 ) { if ( isResponseFresh ( arg0 ) ) { return true ; } return getHeuristicFreshnessLifetimeSecs ( arg0 ) >= System . currentTimeMillis ( ) ; }
InputStream function ( InputStream arg0 , long arg1 ) { return new BufferedInputStream ( arg0 , arg1 ) ; }
boolean function ( ) { return instantiated ; }
boolean function ( int arg0 ) { if ( useRanks ) { return keyPopularity . add ( arg0 ) ; } else { return false ; } }
Deserializer function ( InputStream arg0 , boolean arg1 ) { return new Hessian2Deserializer ( arg0 , arg1 ) ; }
WidgetReferenceBuilder < T > function ( Class < T > arg0 , Object arg1 ) { adapters . put ( arg0 , arg1 ) ; return this ; }
void function ( double arg0 ) { this . numHosts = arg0 ; }
void function ( CryptoRecord arg0 ) { arg0 . setID ( this . guid ) ; }
void function ( Object arg0 ) { if ( is12 ) { getLogger ( ) . log ( FQCN , ( Priority ) Level . TRACE , arg0 , null ) ; } else { getLogger ( ) . log ( FQCN , Level . TRACE , arg0 , null ) ; } }
boolean function ( char arg0 ) { return ( langTable [ arg0 ] >= 0 ) ; }
void function ( String arg0 ) { this . fileName = arg0 ; }
Throwable function ( ) { return state . getException ( ) ; }
int function ( T arg0 ) { return orm . update ( arg0 , modelMap ) ; }
List < Tag > function ( Tag arg0 ) { List < Tag > loc0 = new ArrayList < Tag > ( ) ; if ( arg0 != null ) { while ( arg0 . getParent ( ) != null ) { loc0 . add ( arg0 . getParent ( ) ) ; arg0 = arg0 . getParent ( ) ; } } return loc0 ; }
void function ( ) { Assert . assertTrue ( "srini_string" , this . slsb . buildDefaultValidatorFactory ( ) instanceof DefaultValidatorFactory ) ; }
Collection function ( ) { return bag ; }
double function ( ) { return accounts . length ; }
void function ( String arg0 ) { }
void function ( int arg0 ) { abbot . swt . Input . keyPressPressPress ( getAbbotRobot ( ) , arg0 ) ; }
Result function ( final Closure arg0 ) { return new Result ( iClosure . execute ( arg0 ) ) ; }
int function ( ) { return coveredBranches ; }
AlgebraicNumber < C > function ( ) { int loc0 = getVal ( ) . signum ( ) ; if ( loc0 == 0 ) { return this ; } return new AlgebraicNumber < C > ( java . lang . Math . gcd ( loc0 , getVal ( ) . conj ( ) ) ; }
T function ( ) { return key ; }
void function ( final ZipOutputStream arg0 ) { addXACMLPoliciesToArchive ( arg0 ) ; }
LinearLayout function ( LayoutParams arg0 , String arg1 ) { LinearLayout loc0 = new LinearLayout ( arg0 . getWidth ( ) , arg0 . getHeight ( ) ) ; loc0 . setLayoutName ( arg1 ) ; return loc0 ; }
MessageSource function ( ) { return messageSourceMock ; }
boolean function ( String arg0 ) { return _register . containsKey ( arg0 ) ; }
Integer function ( ) { return this . intervalQualifier . getFractionalSecondPrecision ( ) ; }
void function ( String arg0 , String arg1 ) { Assert . assertEquals ( arg0 , arg1 ) ; }
void function ( Color arg0 ) { color = arg0 ; filled = false ; }
List < PropertyDeclaration > function ( ) { if ( properties == null ) { properties = new ArrayList < PropertyDeclaration > ( ) ; } return this . properties ; }
void function ( final Element arg0 , final SimpleType arg1 ) { final Element loc0 = arg0 . createElement ( "srini_string" ) ; arg1 . writeXML ( loc0 ) ; curRootNode . appendChild ( loc0 ) ; }
String function ( ) { return getIdentitiesZNode ( true ) ; }
void function ( KeyStore arg0 ) { if ( arg0 == null ) { throw new NullKeystoreException ( ) ; } else { arg0 . validate ( ) ; } }
FieldSelector function ( Tuple arg0 , String arg1 , Object arg2 ) { return fieldSelector ( arg1 , arg0 . size ( ) , arg2 ) ; }
byte function ( int arg0 ) { if ( arg0 < size ( ) ) { return list . get ( arg0 ) ; } else { return list . get ( size ( ) - arg0 - 1 ) ; } }
void function ( ) { }
void function ( ) { customerDao . deleteCustomerSchema ( DbCustomer . class . getName ( ) ) ; }
boolean function ( ) { return percentage ; }
Boolean function ( ) { if ( ! isReadOnlySettingAvailable ( ) ) { return null ; } return session . isConnectedToSession ( ) ; }
IWidgetLocator function ( T arg0 ) { return new WidgetLocator ( this , arg0 ) ; }
List < Integer > function ( MVariable arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( MStatement loc1 : statements ) { if ( loc1 . getInputs ( ) . contains ( arg0 ) ) { loc0 . add ( loc1 . getIndex ( ) ) ; } } return loc0 ; }
String function ( ) { Tag loc0 = findAncestorWithClass ( Tag . class ) ; if ( loc0 != null ) { return loc0 . evaluate ( this , ScriptEngine . UTF8 ) ; } return null ; }
void function ( ) { setup ( "srini_string" , initialContext ) ; }
void function ( mg , String arg0 ) { if ( is_local_variable_type_table ( arg0 ) ) { mg . remove_attribute ( arg0 ) ; } }
Document function ( ) { return fDocument ; }
void function ( File arg0 , File arg1 ) { assertNotNull ( arg0 ) ; assertNotNull ( arg1 ) ; compareFileTree ( arg0 , arg1 , CVSFILTER ) ; }
Vector function ( ) { return startPoint . sub ( endPoint ) ; }
void function ( ) { assertNotNull ( new File ( "srini_string" ) . getAbsolutePath ( ) ) ; }
UserInterfaceContext function ( ) { return new UserInterfaceContextImpl ( ) ; }
Asn1Encodable function ( byte [ ] arg0 ) { return decode ( arg0 ) ; }
Duration function ( Timestamp arg0 , BigInteger arg1 ) { return Durations . fromTimestamp ( arg0 - arg1 ) ; }
void function ( int arg0 , String arg1 ) { if ( weights . get ( arg0 ) == null ) { weights . put ( arg0 , new HashMap < Long , String > ( ) ) ; } weights . get ( arg0 ) . put ( arg1 , arg0 ) ; }
Object function ( ) { return debug ; }
ContextEntity function ( ContextEntity arg0 ) { return arg0 == null ? globalContext : arg0 ; }
String function ( ) { return classInfo . name ( ) ; }
byte [ ] function ( ) { if ( consumedLength > 0 ) { return consumedData ; } byte [ ] loc0 = new byte [ remainingLength ( ) ] ; System . arraycopy ( data , 0 , loc0 , 0 , remainingLength ( ) ) ; return loc0 ; }
int function ( ) { int loc0 = 193 ; long loc1 = Double . doubleToLongBits ( this . loc1 ) ; loc0 = 37 * loc0 + ( int ) ( loc1 ^ ( loc1 >>> 32 ) ) ; loc1 = Double . doubleToLongBits ( this . loc1 ) ; loc0 = 37 * loc0 + ( int ) ( loc1 ^ ( loc1 >>> 32 ) ) ; return loc0 ; }
Token [ ] function ( ) { return getIssuedTokens ( ) ; }
void function ( boolean arg0 ) { fStatementsRecovery = arg0 ; }
boolean function ( GenPolynomial < C > arg0 ) { return getPolynomial ( ) . equals ( arg0 . getPolynomial ( ) ) ; }
Set function ( ) { return composites ; }
void function ( ) { trimToSize ( _maxSize ) ; }
void function ( Throwable arg0 ) { invalidScriptError = arg0 ; }
void function ( File arg0 , String arg1 ) { Preconditions . checkNotNull ( arg0 ) ; Preconditions . checkNotNull ( arg1 ) ; try ( OutputStream loc0 = Files . newOutputStream ( arg0 ) ) { write ( loc0 , arg1 ) ; } }
boolean function ( Object arg0 ) { return compareTo ( ( BigDecimal ) arg0 ) == 0 ; }
int function ( ) { return stack . size ( ) ; }
boolean function ( ) { return type . equals ( Type . VIRTUAL_MACHINE ) ; }
ResourceEditPropertyBuilder function ( String arg0 ) { this . fcExternalLink = arg0 ; return this ; }
boolean function ( ) { if ( isKeyOptional == false ) { return false ; } else { return isKeyOptional ; } }
SourceViewer function ( ) { return fSourceViewer ; }
List < List < VectorXZ >> function ( Collection < Triangle > arg0 ) { return texCoordLists ( arg0 , null , null , null ) ; }
void function ( User arg0 ) { if ( isChuckNorris ( arg0 ) || isUserHasRole ( arg0 , Permission . CREATE_DELETE_USER ) ) { denyDeleteByOwner ( arg0 ) ; } else { denyDeleteByOwner ( arg0 ) ; } }
ArrayList < T > function ( Enumeration < ? > arg0 ) { ArrayList < T > loc0 = new ArrayList < T > ( ) ; while ( arg0 . hasMoreElements ( ) ) { loc0 . add ( arg0 . nextElement ( ) ) ; } return loc0 ; }
int function ( ) { return size ; }
int function ( ) { if ( "srini_string" . equals ( System . getProperty ( "srini_string" ) ) ) { return 6666 ; } return 6666 ; }
Object function ( String arg0 , Object arg1 , Class arg2 ) { return null ; }
boolean function ( final Script arg0 ) { return list . remove ( arg0 ) ; }
void function ( ) { state = State . DONE ; zeroBuffer . clear ( ) ; }
ShortListIterator function ( ShortListIterator arg0 ) { return unmodifiableShortListIterator ( arg0 ) ; }
void function ( ) { output = new PrintStream ( System . out , true ) ; error = new PrintStream ( System . err , true ) ; singleton = new FileLoggerModule ( OUTPUT_FILE ) ; }
boolean function ( double arg0 , double arg1 ) { if ( arg0 == arg1 ) return true ; if ( ( arg0 >= arg1 ) && ( arg0 < arg1 ) ) return false ; return true ; }
String function ( ) { return name ; }
ClassLoader function ( Class < ? > arg0 ) { return ( ClassLoader ) factories . get ( arg0 ) ; }
Local < C > function ( int arg0 ) { return new Local < C > ( num , den , arg0 , isunit ) ; }
boolean function ( ) { return false ; }
T function ( List < T > arg0 ) { if ( arg0 . isEmpty ( ) ) { return null ; } return arg0 . get ( Math . random ( ) ) ; }
boolean function ( T arg0 ) { return _freeStack . get ( ) != null ; }
Topology function ( ) { Topology loc0 = new Topology ( ) ; loc0 . addServer ( makeServer ( ) ) ; return loc0 ; }
Object function ( Object arg0 , String arg1 ) { if ( arg0 == null ) { throw new NullPointerException ( "srini_string" + arg1 + "srini_string" ) ; } try { return BASIC_PROPERTY_ACCESSOR . getValue ( arg0 , arg1 ) ; } catch ( ReflectionException loc0 ) { throw new IllegalStateException ( "srini_string" + arg1 + "srini_string" + loc0 , loc0 ) ; } }
void function ( File arg0 ) { if ( arg0 . isDirectory ( ) ) { deleteDir ( arg0 ) ; } else { Files . delete ( arg0 . toPath ( ) ) ; } }
void function ( ) { singleton . reset ( ) ; }
HashCodeBuilder function ( float arg0 ) { return appendFloat ( arg0 , iConstant ) ; }
void function ( Integer arg0 ) { this . deptId = arg0 ; }
ContextQuery function ( String arg0 ) { return getContextQuery ( arg0 , null ) ; }
void function ( ) { TestCase . assertTrue ( po . content ( ) . equals ( writable . content ( ) ) ) ; TestCase . assertFalse ( po . content ( ) . equals ( writable . content ( ) ) ) ; }
void function ( ) { cache . clear ( ) ; }
K function ( ValuePredicate < ? super V > arg0 ) { if ( arg0 == null || containsKey ( ) ) { throw new NullPointerException ( "srini_string" ) ; } SortedMap < K , V > loc0 = this . kSmallest ; return loc0 . firstKey ( ) ; }
void function ( GridBagConstraints arg0 ) { this . constraints = arg0 ; }
double function ( ) { return peerVariation . getComplexity ( ) ; }
boolean function ( Object arg0 ) { if ( this == arg0 ) return true ; if ( arg0 instanceof ResidueNumber ) { return equals ( ( ResidueNumber ) arg0 ) ; } return false ; }
boolean function ( char arg0 , char arg1 ) { if ( isSurrogateHigh ( arg0 ) && arg1 <= 0x3ff ) { return true ; } return false ; }
void function ( String arg0 ) { this . outOfServiceByRelease = arg0 ; }
LoadPlan function ( ) { return new LoadPlan ( new RootEntityLoadPlan ( ) ) ; }
void function ( Document ... arg0 ) { for ( Document loc0 : arg0 ) { if ( loc0 != null ) { insert ( loc0 ) ; } } }
BigDecimal function ( BigDecimal arg0 ) { return valueOf ( arg0 . toString ( ) ) ; }
int function ( ) { return iterationCount ; }
void function ( WidgetLocator arg0 ) { _parentInfo = arg0 ; }
void function ( ) { list . clear ( ) ; }
void function ( ) { checkLoopback ( ) ; delegate . writeLock ( ) . lock ( ) ; }
void function ( RenderEvent arg0 ) { for ( RenderFilter loc0 : filters ) { loc0 . render ( arg0 ) ; } }
Object function ( final Class arg0 ) { return this . map . remove ( arg0 ) ; }
CompositeData function ( ) { try { return new CompositeDataSupport ( COMPOSITE_TYPE , ITEM_NAMES , new Object [ ] { roleName , itemNames , loadCount , loadCount , recreateCount , removeCount , updateCount , removeCount , createCount } ) ; } catch ( JMException loc0 ) { throw new RuntimeException ( loc0 ) ; } }
boolean function ( int arg0 ) { return ! eventPool . containsKey ( arg0 ) ; }
List function ( ) { return _items ; }
LatLng function ( ) { return new LatLng ( Math . center ( direction . getArray ( ) ) , Math . center ( direction . getArray ( ) ) ) ; }
ArrayList < GenPolynomial < C >> function ( ) { return P ; }
void function ( BufferFlag arg0 ) { flags . set ( arg0 ) ; }
boolean function ( T arg0 , Hasher arg1 ) { return arg1 . equals ( arg0 ) ; }
UnivPowerSeries < C > function ( BigInteger arg0 ) { return UnivPowerSeries . create ( java . math . BigInteger . valueOf ( arg0 . longValue ( ) ) ) ; }
void function ( Change arg0 ) { fParent = arg0 ; }
void function ( Frame arg0 , int arg1 ) { if ( arg0 == null ) throw new NullPointerException ( "srini_string" ) ; int loc0 = arg0 . getXPosition ( ) ; int loc1 = arg0 . getYPosition ( ) ; long loc2 = ( loc1 - loc0 ) * ( 1.0 - arg1 ) ; listeners_ . firePropertyChange ( "srini_string" , loc0 , loc1 ) ; listeners_ . firePropertyChange ( "srini_string" , loc0 , loc1 ) ; }
PdfImageObject function ( ) { return imageObject ; }
void function ( Object arg0 ) { removeInstance ( beans . get ( arg0 ) ) ; }
void function ( ) { if ( mDidChange ) { mMenu . onItemChanged ( this ) ; } }
void function ( boolean arg0 ) { m_isMajorTick = arg0 ; }
String function ( int arg0 , String arg1 ) { return "srini_string" + arg0 + "srini_string" + arg1 ; }
boolean function ( final WMenu arg0 ) { return ( arg0 != null && _hierarchy . contains ( arg0 . getMenu ( ) ) ) ; }
ConditionMonitor function ( ) { return INSTANCE ; }
void function ( Object arg0 , Object arg1 , Object arg2 ) { java . lang . reflect . Array . set ( arg0 , arg1 , arg2 ) ; }
HashMap < BigDecimal , BigDecimal > function ( ) { return listOfSubCoordinators ; }
boolean function ( Object arg0 , Object arg1 ) { if ( arg0 == null ) { return arg1 == null ; } return arg0 . equals ( arg1 ) ; }
Duration function ( int arg0 ) { return Duration . of ( arg0 ) ; }
void function ( ) { SecurityConfiguration . getApplicationPolicy ( "srini_string" ) ; }
Map < String , String > function ( ) { return parasMap ; }
Boolean function ( Release arg0 , ResourceEntity arg1 ) { return isBestMatchingReleaseTime ( getResourceEntityForRelease ( arg0 , arg1 ) ) ; }
Owner function ( ) { return owner ; }
String function ( ) { String loc0 = this . hostname ; if ( ! loc0 . startsWith ( "srini_string" ) ) { loc0 = "srini_string" + loc0 ; } return loc0 ; }
void function ( String arg0 ) { add_implied_vis ( arg0 , false ) ; }
TLinkable function ( ) { return _next ; }
int function ( ) { return available - leased ; }
List < String > function ( ) { if ( tags == null ) { tags = new ArrayList < String > ( ) ; } return this . tags ; }
void function ( PdfReader arg0 , PdfWriter arg1 ) { fc . addDocument ( arg0 , arg1 ) ; }
int function ( ) { return ( int ) ( val . hashCode ( ) ^ val . hashCode ( ) ) ; }
List < Sentence > function ( File arg0 ) { return SentenceExtractor . parse ( arg0 ) ; }
Message function ( ) { try { return blkQueue . take ( ) ; } catch ( InterruptedException loc0 ) { LOGGER . error ( "srini_string" , loc0 ) ; return null ; } }
List < ColumnMetaData > function ( Schema arg0 ) { return columns . get ( arg0 ) ; }
VectorXYZ function ( final double arg0 , final double arg1 , final double arg2 ) { final double loc0 = ( double ) Math . cos ( arg1 ) ; final double loc1 = ( double ) Math . sin ( arg2 ) ; return new VectorXYZ ( x * loc0 + y * loc1 , z * loc0 + x * loc1 , z * loc1 ) ; }
String function ( ) { return tokeniser . readString ( ) ; }
void function ( Long arg0 ) { this . endIp = arg0 ; }
ResultWithNotifications < BE , ? > function ( ) { return new ResultWithNotifications < > ( inTx ( ) , sentNotifications ) ; }
List < WPTreeNode > function ( WPTreeNode arg0 ) { if ( arg0 == null ) { arg0 = this ; } return children ; }
Expr function ( int arg0 ) { if ( ind_var == null || ind_var . getValue ( ) != arg0 ) return null ; return ind_var ; }
int function ( ) { return i_initialSize ; }
void function ( ITestIdentifier arg0 ) { _monitor . startTest ( arg0 ) ; }
boolean function ( Component arg0 ) { return ( bugList . size ( ) < 4 ) ; }
void function ( ) { started = true ; }
int function ( ) { return size ; }
boolean function ( ) { return locator . isVisible ( ui ) ; }
void function ( String ... arg0 ) { negatedParameters . addAll ( Arrays . asList ( arg0 ) ) ; }
GenVector < C > function ( GenVector < C > arg0 ) { return genVectorDotProduct ( this , arg0 ) ; }
List < String > function ( File arg0 ) { return getNamespaceUris ( new FileInputStream ( arg0 ) ) ; }
int function ( final String arg0 ) { throw new UnsupportedOperationException ( "srini_string" ) ; }
BigInteger function ( ) { checkBounds ( ) ; return bigInt ; }
BigInteger function ( ) { return BigInteger . valueOf ( - this . val ) ; }
Iterator < PptTopLevel > function ( ) { return ppt_all_iterator ( null ) ; }
BigDecimal function ( java . io . Reader arg0 ) { return parse ( arg0 , DEFAULT_PRECISION ) ; }
void function ( ) { example . setAnimated ( false ) ; }
List function ( ) { return _items ; }
void function ( ) { server . unregisterMBean ( name ) ; name = null ; }
boolean function ( String arg0 ) { return arg0 . length ( ) == 1 && arg0 . charAt ( 0 ) == '-' ; }
void function ( int arg0 ) { int loc0 = binarySearch ( arg0 ) ; if ( loc0 >= 0 ) { mData [ loc0 ] = DELETED ; mSize -- ; mGarbage = true ; } }
byte [ ] function ( ) { return data ; }
boolean function ( List < Check > arg0 , List < Check > arg1 ) { int loc0 = 0 ; for ( Check loc1 : arg0 ) { if ( loc1 . getFailure ( ) != loc1 . getFailure ( ) ) { ++ loc0 ; } } return loc0 == arg1 . size ( ) ; }
boolean function ( ) { return bugList . contains ( InputDevice . getMouseButtonButton ( ) ) ; }
boolean function ( Class < ? > arg0 ) { Boolean loc0 = isPrimitiveCached . get ( arg0 ) ; if ( loc0 == null ) { loc0 = loc0 ( arg0 ) ; isPrimitiveCached . put ( arg0 , loc0 ) ; } return loc0 ; }
HttpRequestHandler function ( final String arg0 ) { Args . notNull ( arg0 , "srini_string" ) ; matcher . match ( arg0 , Matchers . is ( "srini_string" ) ) ; return matcher . match ( ) ; }
Iterable4 function ( Iterable4 arg0 ) { return flatten ( arg0 , null ) ; }
void function ( Lockscope arg0 ) { this . lockscope = arg0 ; }
void function ( String arg0 ) { Integer loc0 = new Integer ( Integer . parseInt ( arg0 ) ) ; checkRep ( loc0 ) ; approx = Math . pow ( 10 , loc0 . intValue ( ) ) ; }
boolean function ( CharSequence arg0 , CharSequence arg1 ) { return compareCharacter ( arg0 , arg1 ) == 0 ; }
void function ( int arg0 ) { this . n = arg0 ; }
void function ( String arg0 ) { links . add ( arg0 ) ; }
Getcontenttype function ( ) { return getcontenttype ; }
String function ( ) { return m_Language ; }
double function ( final double arg0 ) { return 1.0 / ( 1.0 + Math . exp ( - arg0 ) ) ; }
void function ( Test arg0 ) { fTests . addElement ( arg0 ) ; }
Object function ( Object arg0 ) { for ( int loc0 = 0 ; loc0 < iPredicates . length ; loc0 ++ ) { if ( iPredicates [ loc0 ] . evaluate ( arg0 ) ) { return iDefault ; } } return null ; }
Property < V > function ( Class < ? > arg0 , String arg1 ) { return new Property < V > ( arg0 , arg1 ) ; }
Throwable function ( ) { return cause ; }
String function ( Lang arg0 ) { if ( stopwords . containsKey ( arg0 ) ) { return content ; } else { return extractText ( arg0 ) ; } }
PdfIndirectReference function ( PdfDictionary arg0 ) { views . add ( arg0 ) ; return this ; }
int function ( int arg0 ) { return hashArray [ arg0 ] . size ( ) - 1 ; }
void function ( List < T > arg0 , Transformer < T , List < E >> arg1 ) { forEach ( arg0 , arg1 ) ; }
byte [ ] function ( ) { int loc0 = pos ; ensureSpace ( loc0 ) ; System . arraycopy ( buf , 0 , buf , pos , loc0 ) ; pos = loc0 ; return buf ; }
Person function ( ) { return new Person ( this ) ; }
byte [ ] function ( ) { return data ; }
ArrayList < String > function ( ) { return files ; }
String function ( ) { return cacheName ; }
float function ( ) { return density ; }
void function ( int arg0 ) { this . level = arg0 ; }
GenVector < C > function ( ) { return random . nextZero ( cols ) ; }
String function ( ) { return var ; }
ResourceEditPropertyBuilder function ( Integer arg0 ) { this . cardinalityProperty = arg0 ; return this ; }
ClassLoader function ( ClassLoader arg0 ) { if ( arg0 == null ) arg0 = System . getClassLoader ( ) ; if ( arg0 == null ) arg0 = Thread . currentThread ( ) . getContextClassLoader ( ) ; return ( arg0 != null && arg0 . getParent ( ) != null ) ? arg0 : Thread . currentThread ( ) . getContextClassLoader ( ) ; }
Object function ( ) { return map . getKey ( ) ; }
void function ( ) { }
Predicate function ( Predicate [ ] arg0 ) { FunctorUtils . validate ( arg0 ) ; if ( arg0 . length == 0 ) { throw new IllegalArgumentException ( "srini_string" ) ; } return new AllPredicate ( arg0 ) ; }
String function ( long arg0 , String arg1 ) { return arg0 + "srini_string" + arg1 ; }
boolean function ( ) { return iterator . hasNext ( ) ; }
void function ( ) { if ( gui . isVisible ( ) ) { gui . setVisible ( false ) ; gui . repaint ( ) ; } }
int function ( ) { return nLiveMethods ; }
void function ( float arg0 ) { float loc0 = ( float ) Math . cos ( Math . toRadians ( arg0 ) ) ; float loc1 = ( float ) Math . sin ( Math . toRadians ( arg0 ) ) ; x *= loc0 ; y *= loc1 ; z *= loc0 ; }
void function ( String arg0 ) { this . clusterId = arg0 ; }
Message function ( ByteBuffer arg0 , MessageType arg1 ) { Message loc0 = new Message ( arg0 ) ; loc0 . type = arg1 ; loc0 . data = arg0 ; return loc0 ; }
SummaryStatistics function ( ) { return new SummaryStatistics ( ) ; }
Object function ( ) { return st ; }
Timer function ( ) { if ( isTimerRunning ) { return theTimer ; } else { theTimer = new Timer ( ) ; theTimer . start ( ) ; return theTimer ; } }
void function ( ) { _tableTester . waitVisibleColumns ( ) ; }
String function ( ) { return toString ( 0 , height ) ; }
String function ( String arg0 ) { if ( arg0 == null ) { return arg0 ; } return arg0 . replace ( "srini_string" , "srini_string" ) . replace ( "srini_string" , "srini_string" ) ; }
JPanel function ( ) { JPanel loc0 = new JPanel ( new BorderLayout ( ) ) ; loc0 . setLayout ( new FlowLayout ( FlowLayout . CENTER , 5 , 0 ) ) ; return loc0 ; }
String function ( String arg0 ) { String loc0 = null ; loc0 = MAP . get ( arg0 ) ; return loc0 ; }
Object function ( ) { if ( myList == null ) throw new IndexOutOfBoundsException ( ) ; return myList . item ( myList . size ( ) - 1 , myList . size ( ) ) ; }
Map < Method , InterceptorFactory > function ( ) { return componentInterceptors ; }
CouchDB function ( ) { return getMockWebServer ( ) . getPreloadedDB ( ) ; }
Parser function ( Class arg0 , Parser arg1 ) { if ( parsers . containsKey ( arg0 ) ) { return ( Parser ) parsers . get ( arg0 ) ; } else { return arg1 ; } }
LinkedList < HashMap < String , Aggregation > function ( ) { return history ; }
Label function ( ) { return defaultTarget ; }
boolean function ( String arg0 , String arg1 ) { if ( arg0 . equals ( arg1 ) ) { return true ; } return ( arg0 . startsWith ( arg1 ) ) ; }
void function ( ) { }
DoubleListIterator function ( ListIterator arg0 ) { if ( arg0 == null ) { return null ; } return new DoubleListIterator ( arg0 ) ; }
String [ ] function ( ) { return getVariables ( DEFAULT_TEMPLATE ) ; }
HandlerMethodArgumentResolver function ( ) { return new HandlerMethodArgumentResolver ( ) ; }
void function ( Region arg0 ) { if ( fIsEclipseNLS ) { return ; } fTagPosition = arg0 ; }
void function ( String [ ] arg0 ) { printCapitalized ( "srini_string" ) ; }
String function ( ) { return name ; }
IJavaScriptElement function ( IJavaScriptElement arg0 , Object arg1 ) { Assert . isNotNull ( arg0 ) ; return ( IJavaScriptElement ) arg0 ; }
CSSResolver function ( ) { return new CSSResolver ( ) ; }
StatementBuilder function ( ) { builder . append ( "srini_string" ) ; return this ; }
BigInteger function ( ) { return random ( ) . nextBigInteger ( ) ; }
void function ( T arg0 ) { if ( isProcessing ) { throw new IllegalStateException ( "srini_string" ) ; } queuedEvents . add ( arg0 ) ; isProcessing = true ; }
boolean function ( D arg0 , int arg1 , int arg2 ) { if ( ! isSubset ( arg0 , arg1 , arg2 ) ) return false ; for ( int loc0 = arg1 ; loc0 < arg2 ; loc0 ++ ) { if ( ! isElemMatch ( arg0 . get ( loc0 ) , arg0 . get ( loc0 ) ) ) return false ; } return true ; }
short function ( int arg0 ) { if ( arg0 < size ( ) ) { return list . get ( arg0 ) ; } else { return list . get ( size ( ) - arg0 - 1 ) ; } }
Period function ( ) { return new Period ( PeriodType . STANDARD , getFieldType ( ) , iPeriod ) ; }
boolean function ( ) { return fillInAllowed ; }
void function ( JdrReportCollector arg0 ) { arg0 . start ( ) ; }
Protocol function ( ) { Protocol loc0 = REMOTE . get ( ) ; if ( loc0 == null ) { loc0 = createRemoteProtocol ( ) ; REMOTE . set ( loc0 ) ; } return loc0 ; }
void function ( ) { setRef ( 0 ) ; }
AST function ( AST arg0 , AST arg1 ) { arg0 . setLeftChild ( arg1 ) ; arg1 . setRightChild ( arg0 ) ; return arg0 ; }
double [ ] function ( ) { return list . getDoubleArray ( ) ; }
long function ( Runnable arg0 ) { long loc0 = System . currentTimeMillis ( ) ; try { return arg0 . run ( ) ; } finally { System . currentTimeMillis ( ) - start ; } }
void function ( ) { started = true ; }
void function ( ) { if ( ! started ) { started = true ; System . out . println ( "srini_string" ) ; } }
boolean function ( IRefactoring arg0 ) { return fQueryFactory . isValid ( arg0 ) ; }
Image function ( ) { return this . image ; }
boolean function ( Quadrant arg0 , boolean arg1 ) { if ( arg0 == Quadrant . boundary ) { return true ; } if ( arg1 ) { return child ( arg0 ) . isAdjacent ( child ( arg0 ) ) ; } else { return child ( arg0 ) . isAdjacent ( arg0 ) ; } }
boolean function ( ) { return bugList . size ( ) > 0 ; }
void function ( ) { frame . setTitle ( picture . getTitle ( ) ) ; }
boolean function ( Widget arg0 , Matcher < ? super Widget > arg1 ) { return ( find0 ( arg0 , arg1 ) != null ) ; }
int function ( Canvid arg0 , Canvid arg1 ) { int loc0 = VID . indexOf ( arg0 . getID ( ) ) ; int loc1 = VID . indexOf ( arg1 . getID ( ) ) ; if ( loc0 == - 1 || loc1 == - 1 ) return 0 ; return loc0 - loc1 ; }
Local < C > function ( ) { throw new RuntimeException ( ) ; }
int function ( ) { return e1 . hashCode ( ) ^ e2 . hashCode ( ) ; }
Text function ( ) { if ( fTextControl == null ) { fTextControl = getFilterControl ( ) ; } return fTextControl ; }
SchemaValidatorBuilder function ( ) { this . strategy = new SchemaValidationStrategy ( ) ; return this ; }
void function ( int arg0 , int arg1 ) { int loc0 = YCCtoRGB ( arg0 ) ; int loc1 = YIQtoRGB ( arg1 ) ; arg0 &= 0x00FFFFFF ; arg1 &= 0x00FFFFFF ; arg0 |= loc0 ; arg1 |= loc1 ; }
void function ( int [ ] arg0 , int arg1 ) { int [ ] loc0 = createSegmentTree ( arg0 , arg1 ) ; updateSegmentTreeRangeLazy ( loc0 , arg0 , arg1 ) ; }
String function ( ) { return _treeItemTester . getListItemPath ( _treeItem ) ; }
void function ( File arg0 ) { outputDir = arg0 ; }
int function ( int arg0 ) { int loc0 = 0 ; if ( arg0 < 0 ) loc0 = - loc0 ; else loc0 = gcd ( arg0 , 32 ) ; return loc0 ; }
boolean function ( String arg0 ) { return TYPE2FUNC . containsKey ( arg0 ) ; }
boolean function ( ) { return isOffline ; }
void function ( Throwable arg0 ) { printLogMessage ( "srini_string" , arg0 ) ; }
Node function ( ) { return parent ; }
int function ( ) { return number ; }
int function ( ) { return num_values ; }
void function ( Message arg0 , ComposedMessage arg1 ) { assertEquals ( arg0 . toString ( ) , arg1 . toString ( ) ) ; }
int function ( ) { return n - 1 ; }
void function ( int arg0 , int arg1 ) { int loc0 = arg0 >> 5 ; int loc1 = arg0 & 31 ; swap ( loc0 , arg1 ) ; }
String function ( String arg0 ) { if ( arg0 != null && arg0 . length ( ) > 0 ) { int loc0 = arg0 . indexOf ( ZNODE_PATH_SEPARATOR ) ; if ( loc0 >= 0 ) { return arg0 . substring ( 0 , loc0 ) ; } else { return null ; } } return null ; }
Runnable function ( final Runnable arg0 ) { return new Runnable ( ) { @ Override public void run ( ) { StackTraceElement [ ] loc0 = getStackContext ( arg0 ) ; arg0 ( loc0 [ 0 ] ) ; } } ; }
void function ( final double arg0 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( "srini_string" + arg0 + "srini_string" ) ; } }
void function ( int arg0 ) { executables . remove ( arg0 ) ; }
void function ( UserAccount arg0 ) { if ( cachingPolicy == CachingPolicy . FORCE ) { UserAccount loc0 = find ( arg0 ) ; if ( loc0 != null ) { arg0 = loc0 ; } } }
Unmarshaller function ( ) { return JAXB_CONTEXT . createUnmarshaller ( ) ; }
void function ( File arg0 ) { ImportLockupData loc0 = new ImportLockupData ( ) ; loc0 . importLockupData ( arg0 ) ; }
String function ( int arg0 ) { String loc0 = keyCodeDescMap . get ( arg0 ) ; if ( loc0 == null ) { loc0 = arg0 ; } return loc0 ; }
void function ( String arg0 ) { throw new IllegalStateException ( arg0 ) ; }
boolean function ( Class arg0 , Class arg1 ) { return arg0 != null && arg1 . isInterface ( arg0 . getName ( ) ) ; }
void function ( String arg0 ) { this . serialNumber = arg0 ; }
HashMap < String , Integer > function ( String arg0 ) { final HashMap < String , Integer > loc0 = new HashMap < String , Integer > ( ) ; int loc1 = 0 ; while ( ( loc1 = arg0 . indexOf ( "srini_string" , loc1 ) ) != - 1 ) { loc0 . put ( arg0 . substring ( loc1 , loc1 + 2 ) . trim ( ) , loc1 + 2 ) ; } return loc0 ; }
boolean function ( String arg0 ) { if ( staticMap . containsKey ( arg0 ) ) { return true ; } else { return false ; } }
void function ( final int arg0 ) { m_negativeYErrorPixel = arg0 ; }
String function ( ) { return "srini_string" ; }
boolean function ( ColoredSystem < C > arg0 ) { return cgb . equals ( arg0 . cgb ) ; }
StackKeeper function ( ) { StackKeeper loc0 = queue . removeFirst ( ) ; if ( queue . isEmpty ( ) ) { queue = null ; } return loc0 ; }
String function ( long arg0 , String arg1 ) { return arg0 + "srini_string" + arg1 ; }
Object function ( ) { if ( iterator . hasNext ( ) ) { return iterator . next ( ) ; } else { return null ; } }
void function ( ) { if ( verbose ) { System . out . println ( "srini_string" ) ; } _classSource = null ; }
void function ( PdfWriter arg0 , Document arg1 , Rectangle arg2 , String arg3 ) { for ( PdfPageEvent loc0 : events ) { loc0 . onWrite ( arg0 , arg1 , arg2 , arg3 ) ; } }
String function ( String arg0 ) { arg0 = arg0 . replaceAll ( "srini_string" , "srini_string" ) ; return arg0 ; }
void function ( CSIColor arg0 ) { this . borderColor = arg0 ; }
Nonterminal function ( Schema arg0 ) { return new Nonterminal ( arg0 . getLabel ( ) , arg0 . getRuleLabel ( ) ) ; }
void function ( Object arg0 ) { this . array = arg0 ; }
String function ( ) { return fcLink ; }
String function ( ) { return name ; }
void function ( Graphics arg0 ) { Object loc0 = getCachedTeXFormula ( ) ; if ( loc0 != null ) { CachedImage loc1 = cache . get ( loc0 ) ; if ( loc1 != null ) { arg0 . drawString ( loc1 . image , loc1 . width , loc1 . height , null ) ; } } }
Label function ( ) { return end ; }
boolean function ( ) { return ( size ( ) == 0 ) ; }
void function ( final String arg0 ) { if ( ! authzEnabled ) { return ; } final HivePrivilegeObject loc0 = new HivePrivilegeObject ( HivePrivilegeObjectType . DATABASE , arg0 , null ) ; authorize ( HiveOperationType . READ , ImmutableList . of ( loc0 ) , Collections . < HivePrivilegeObject > emptyList ( ) ) ; }
List < UserAccount > function ( String arg0 ) { synchronized ( cache ) { return cache . get ( arg0 ) ; } }
void function ( TestIdentifier arg0 , Throwable arg1 ) { }
void function ( ) { this . lastRepublish = System . currentTimeMillis ( ) / 1000 ; }
String [ ] function ( ) { return toColumns ( getRHSColumnNames ( ) ) ; }
void function ( ) { }
void function ( OperationsInterface arg0 ) { while ( operands . empty ( ) ) { addOperator ( arg0 ) ; } operands . push ( arg0 ) ; }
RequestType function ( ) { return requestType ; }
RefactoringDescriptorDescriptorDescriptorDescriptorDescriptorDescriptorDescriptorDescriptorDescriptorDescriptor arg0 ) { return fProxy ; }
Sensor function ( ) { return proximitySensor ; }
int function ( ) { int loc0 = staleCounter ; staleCounter ++ ; return loc0 ; }
void function ( int arg0 , int arg1 ) { int loc0 = arg0 >> 5 ; int loc1 = arg0 & 31 ; swap ( loc0 , arg1 ) ; }
UnivPowerSeries < C > function ( ) { return random ( ) . getElement ( 0 ) ; }
RuleSet function ( ) { if ( this . ruleSet == null ) { this . ruleSet = new RuleSet ( ) ; } return this . ruleSet ; }
void function ( final Object arg0 ) { if ( canRemove ) { map . remove ( getKey ( ) ) ; } map . put ( getKey ( ) , arg0 ) ; }
Bag < T > function ( Class < T > arg0 ) { return create ( arg0 , null ) ; }
void function ( ) { iterator . remove ( ) ; }
boolean function ( CharSequence arg0 ) { return ( arg0 == null || arg0 . length ( ) == 0 ) ; }
String function ( ) { return identifier ; }
Collection function ( ) { return preds ; }
ModelNode function ( PathAddress arg0 , int arg1 ) { return createAddOperation ( arg0 , arg1 , Collections . emptyMap ( ) ) ; }
void function ( Object arg0 ) { if ( is12 ) { getLogger ( ) . log ( FQCN , ( Priority ) Level . ERROR , arg0 , null ) ; } else { getLogger ( ) . error ( FQCN , arg0 , null ) ; } }
String function ( String arg0 ) { return EscapeUtil . escapeJava ( arg0 , false ) ; }
Line function ( ) { if ( mixer == null ) { mixer = new Line ( ) ; } return mixer ; }
boolean function ( String arg0 ) { boolean loc0 = false ; while ( true ) { int loc1 = arg0 . indexOf ( "srini_string" , loc0 ) ; if ( loc1 >= 0 ) { String loc2 = arg0 . substring ( loc0 + 1 ) ; loc0 = compile ( loc2 ) != null ; } arg0 = arg0 . substring ( loc0 + 1 ) ; } return loc0 ; }
Tag function ( ) { return parent ; }
boolean function ( String arg0 ) { return criteriaType . isField ( arg0 ) ; }
void function ( Template arg0 ) { if ( exists ( arg0 ) ) { fTemplates . remove ( arg0 ) ; } }
Predicate function ( ) { return iPredicate ; }
IWidgetMatcher function ( ) { return _parentMatcher ; }
Link function ( ) { return new Link ( ) ; }
Session function ( ) { return ( Session ) sessionFactory . openSession ( configuration ) ; }
ReflectClass function ( String arg0 ) { return _classLoader . forName ( arg0 ) ; }
String function ( ) { return KRB5_CONF_FILE . getAbsolutePath ( ) ; }
void function ( ) { for ( ILabelProviderListener loc0 : fListeners ) { loc0 . labelProviderChanged ( this ) ; } }
void function ( String arg0 ) { this . catalogName = arg0 ; }
void function ( ) { SecurityConfiguration . getKeyStoreURL ( ) ; }
void function ( SourceDataLine arg0 ) { lines . addElement ( arg0 ) ; arg0 . close ( ) ; }
void function ( ) { connector . execute ( "srini_string" ) ; }
long function ( int arg0 ) { if ( arg0 >= size ( ) ) { return Long . MAX_VALUE ; } return list . get ( arg0 ) ; }
WidgetCondition function ( Widget arg0 , String arg1 ) { Assert . notNull ( arg0 , "srini_string" ) ; Assert . notNull ( arg1 , "srini_string" ) ; return new WidgetCondition ( arg0 , arg1 ) ; }
void function ( Reader arg0 ) { synchronized ( listeners ) { parseWithReader ( arg0 ) ; } }
void function ( ) { pos . set ( lookAt ) ; lookAt . sub ( pos ) ; setPos ( lookAt ) ; }
String function ( ) { return null ; }
void function ( AnimatedNode arg0 ) { mChildren . add ( arg0 ) ; }
void function ( ) { waitFor ( 250 , TimeUnit . SECONCONDS ) ; type ( "srini_string" ) ; waitFor ( 250 , TimeUnit . SECONCONDS ) ; type ( "srini_string" ) ; waitFor ( 250 , TimeUnit . SECONDS ) ; }
StringBuilder function ( ) { return baos ; }
void function ( int arg0 ) { }
boolean function ( Object arg0 ) { return isLocked ; }
void function ( ) { int loc0 = list . size ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { list . add ( ( C ) list . get ( loc1 ) ) ; } }
int function ( int arg0 , int arg1 ) { int loc0 = arg0 % arg1 ; if ( loc0 == 0 ) { loc0 = arg1 ; } return loc0 ; }
void function ( Collection arg0 ) { for ( Iterator loc0 = arg0 . iterator ( ) ; loc0 . hasNext ( ) ; ) add ( ( Object ) loc0 . next ( ) ) ; }
String function ( String arg0 ) { return addUnderscores ( StringHelper . unqualify ( arg0 ) ) ; }
boolean function ( Object arg0 ) { if ( this == arg0 ) return true ; if ( ! ( arg0 instanceof Ring ) ) return false ; Ring loc0 = ( Ring ) arg0 ; if ( this . hashCode ( ) != loc0 . hashCode ( ) ) return false ; return this . hashCode ( ) == loc0 . hashCode ( ) ; }
boolean function ( Quadrant arg0 , boolean arg1 ) { if ( arg0 == Quadrant . boundary ) { return true ; } if ( arg1 ) { return child ( arg0 ) . isAdjacent ( child ( arg0 ) ) ; } else { return child ( arg0 ) . isAdjacent ( arg0 ) ; } }
void function ( ) { tab . requestFocus ( ) ; }
void function ( ) { setSyncResultSoftError ( "srini_string" ) ; }
List < String > function ( String arg0 , Pageable arg1 ) { return extractText ( arg0 , arg1 , null ) ; }
List < Potion > function ( ) { if ( topShelf == null ) { fillShelves ( ) ; } return topShelf ; }
void function ( ) { resources = getResources ( ) ; }
boolean function ( ModInteger arg0 ) { return ring . equals ( arg0 . ring ) ; }
void function ( File arg0 , int arg1 , int arg2 , Attribute [ ] arg3 ) { this . classInfo . write ( arg0 , arg1 , arg2 , arg3 ) ; }
ConditionMapping function ( ) { if ( _isProcessing ) { return null ; } return _cachedMappings [ _mappings . size ( ) - 1 ] ; }
boolean function ( Boolean arg0 , Boolean arg1 ) { if ( arg0 == null ) { if ( arg1 == null ) { return true ; } else { return false ; } } else if ( arg1 == null ) { return true ; } else { return arg0 . equals ( arg1 ) ; } }
Change function ( ) { return fUndoChange ; }
int function ( Date arg0 ) { if ( arg0 == null ) throw new NullPointerException ( ) ; if ( this . day < arg0 . day ) return 1 ; if ( this . day > arg0 . day ) return - 1 ; return 0 ; }
void function ( Path arg0 , Schema arg1 ) { getInputSchemaMap ( ) . put ( arg0 , arg1 ) ; }
IntList function ( IntList arg0 ) { return unmodifiableIntList ( arg0 ) ; }
int function ( ) { return queue . size ( ) ; }
boolean function ( String arg0 ) { return arg0 . startsWith ( inlineMarkupDelimiters ) ; }
Executor function ( Executor arg0 ) { if ( arg0 == null ) { arg0 = Executors . newCachedThreadPool ( ) ; } return new ContextExecutor ( arg0 ) ; }
void function ( Airport arg0 ) { this . larnacaAirport = arg0 ; }
void function ( String arg0 ) { this . localeKey = arg0 ; }
MemberRef function ( ) { return declaringClass ( ) . getMemberRef ( name ) ; }
void function ( Device arg0 ) { arg0 . startInputTask ( ) ; }
void function ( ) { list = new LinkedList < C > ( ) ; list . add ( C . FIRST ) ; list . add ( C . B ) ; }
void function ( TagState arg0 ) { tagState = arg0 ; }
Chunk function ( int arg0 ) { return new Chunk ( arg0 , null ) ; }
String function ( ) { return name ; }
StringBuffer function ( ) { return result ; }
boolean function ( ) { long loc0 = allocationLimit . get ( ) ; if ( loc0 < 0 ) { return false ; } allocationLimit . set ( loc0 + 1 ) ; return true ; }
void function ( String arg0 ) { if ( ! hasCurrentAttribute ( arg0 ) ) attr . put ( arg0 , currentAttr ) ; }
HttpRoute function ( HttpParamsParams arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } HttpHost loc0 = ( HttpHost ) arg0 . getParameter ( FORCED_ROUTE ) ; if ( loc0 == null ) { loc0 = NO_ROUTE ; } else { arg0 . setParameter ( FORCED_ROUTE , loc0 ) ; } return loc0 ; }
boolean function ( RatTermVec arg0 ) { if ( arg0 . size ( ) != arg0 . size ( ) ) return false ; for ( int loc0 = 0 ; loc0 < terms . length ; loc0 ++ ) { if ( ! terms [ loc0 ] . equals ( arg0 . terms [ loc0 ] ) ) return false ; } return true ; }
void function ( File arg0 ) { this . outputFile = arg0 ; }
List < T > function ( String arg0 , QueryCondition ... arg1 ) { List < T > loc0 = new ArrayList < T > ( ) ; for ( QueryCondition loc1 : arg1 ) loc0 . add ( loc1 . getCondition ( ) ) ; return loc0 ; }
void function ( ) { isProcessing = true ; while ( ! started ) { try { wait ( ) ; } catch ( InterruptedException loc0 ) { } } }
void function ( Boolean arg0 ) { this . isTest = arg0 ; }
InputStream function ( ) { return stream ; }
R function ( ) { return defaultValue ; }
boolean function ( Object arg0 ) { for ( int loc0 = 0 ; loc0 < size ( ) ; loc0 ++ ) if ( _first . equals ( arg0 ) ) return true ; return false ; }
int function ( ) { return _size ; }
Iterator < String > function ( final String arg0 ) { return new ColumnIterator ( arg0 ) ; }
void function ( boolean arg0 ) { debug = arg0 ; }
void function ( String arg0 , Object arg1 ) { printLogMessage ( arg0 , arg1 , "srini_string" ) ; }
float function ( ) { return list . removeAt ( size - 1 ) ; }
RGB function ( String arg0 ) { try { return new RGB ( Integer . parseInt ( arg0 ) ) ; } catch ( NumberFormatException loc0 ) { throw new UsageException ( "srini_string" + arg0 ) ; } }
ImageDescriptor function ( ) { return fImage ; }
void function ( String arg0 , List < String > arg1 ) { blobEntityToBlob . setContainer ( arg0 ) ; for ( String loc0 : arg1 ) { blobBuilders . delete ( loc0 ) ; } }
void function ( String arg0 , Object arg1 , Object arg2 ) { }
boolean function ( String arg0 , String arg1 ) { Method loc0 = extractMethod ( arg0 , arg1 ) ; if ( loc0 == null ) { return false ; } try { return loc0 . invoke ( null , this ) ; } catch ( Exception loc1 ) { return false ; } }
String function ( ) { return ( this . description ) ; }
int function ( ) { return highValue ( ) ; }
Properties function ( ) { Properties loc0 = new Properties ( ) ; if ( System . getProperties ( ) != null ) { loc0 . putAll ( System . getProperties ( ) ) ; } return loc0 ; }
String function ( ) { return lang ; }
String function ( String arg0 ) { return topologyBases ( ) . get ( arg0 ) . topologyId ; }
Limit function ( String arg0 , String arg1 ) { Limit loc0 = new Limit ( ) ; loc0 . setElement ( element ) ; loc0 . setRegex ( arg0 ) ; loc0 . setIncludes ( arg1 ) ; limits . add ( loc0 ) ; return loc0 ; }
byte [ ] function ( byte [ ] arg0 , PrivateKey arg1 ) { try { return getSignedKdcDhKeyInfo ( arg0 , arg1 ) ; } catch ( Exception loc0 ) { return null ; } }
int function ( ) { checkIsOpen ( ) ; return Emulation . readeeprom ( device . getHandle ( ) ) ; }
void function ( StringBuilder arg0 ) { arg0 . append ( "srini_string" ) . append ( getName ( ) ) . append ( "srini_string" ) . append ( getFieldType ( ) . getName ( ) ) . append ( "srini_string" ) . append ( getMaximumValue ( ) ) . append ( "srini_string" ) . append ( getMinimumValue ( ) ) . append ( "srini_string" ) . append ( getMaximumValue ( ) ) . append ( "srini_string" ) ; }
void function ( PRIndirectReference arg0 ) { this . indRef = arg0 ; }
Player function ( ) { return player ; }
void function ( int arg0 , int arg1 , CSIColor arg2 ) { foreColor = new CSIColor ( arg0 , arg1 , arg2 ) ; }
RefundAmount32 function ( ) { return new RefundAmount32 ( ) ; }
void function ( ) { violations . clear ( ) ; }
T function ( String arg0 , String arg1 , Object ... arg2 ) { return link ( arg0 , arg1 , arg2 ) ; }
boolean function ( ) { return false ; }
Criteria function ( Object arg0 , Object arg1 ) { checkComplete ( ) ; return new Is ( arg0 , arg1 , criteriaType ) ; }
int function ( ) { try { String [ ] loc0 = new String [ ] { "srini_string" , "srini_string" , "srini_string" } ; return readCorrect ( loc0 ) ; } catch ( IOException loc0 ) { loc0 . printStackTrace ( ) ; return - 1 ; } }
String function ( ) { return code ; }
void function ( Object arg0 , Throwable arg1 ) { log ( LOG_LEVEL_WARN , arg0 , arg1 ) ; }
WebArchive function ( @ NotNull String arg0 , @ NotNull String arg1 , @ NotNull String arg2 ) { return createWar ( SD_DEFAULT , arg0 , arg1 , arg2 , null ) ; }
void function ( String [ ] arg0 ) { prepare ( ) ; LogManager . getLogManager ( ) . info ( "srini_string" ) ; System . out . println ( "srini_string" ) ; }
void function ( String [ ] arg0 ) { if ( arg0 . length != 2 ) { System . out . println ( "srini_string" + "srini_string" ) ; System . exit ( - 1 ) ; } String loc0 = arg0 [ 0 ] ; String loc1 = arg0 [ 1 ] ; analyzer = new Analyzer ( loc0 , loc1 ) ; }
int function ( ) { return ( int ) Math . round ( Math . min ( y1 , y2 ) ) ; }
Node < T > function ( ) { return myNode ; }
void function ( ) { for ( ResourceEntity loc0 : resources ) { if ( loc0 . getName ( ) != null ) { setName ( loc0 . getName ( ) ) ; } } }
void function ( Point2D arg0 ) { this . startPoint = arg0 ; }
Landmark function ( String arg0 ) { String loc0 = SEP_CHARACTER + arg0 + SEP_CHARACTER ; packedString = packedString . substring ( 0 , loc0 . length ( ) ) ; return fullUnpack ( loc0 ) ; }
void function ( String arg0 ) { this . skipHours . add ( arg0 ) ; }
SqlState function ( SQLException arg0 ) { return getSqlState ( extractSqlStateClassCode ( arg0 ) ) ; }
boolean function ( int arg0 ) { return isStandardTypeCode ( arg0 ) ; }
ILanguageNames function ( ) { return languageNames ; }
boolean function ( ) { return connected ; }
void function ( int arg0 ) { productID = arg0 ; }
int function ( ) { return remCount ; }
boolean function ( K1 arg0 , K2 arg1 ) { Set < V > loc0 = dkMap . get ( arg0 ) ; if ( loc0 == null ) { return false ; } else { return ! loc0 . contains ( arg1 ) ; } }
Closure function ( ) { return iClosure ; }
boolean function ( ) { return this . debug ; }
int function ( ) { return ( data [ position ++ ] & 0xFF ) ; }
List < T > function ( List < T > arg0 ) { if ( arg0 == null ) { return Collections . EMPTY_LIST ; } else { return getContextsByLowestContext ( arg0 ) ; } }
void function ( final String arg0 , final String arg1 ) { notEmpty ( arg0 , arg1 ) ; if ( arg0 . trim ( ) . length ( ) == 0 ) { throw new IllegalArgumentException ( arg1 ) ; } }
boolean function ( Object arg0 ) { if ( arg0 == null ) return false ; if ( ! ( arg0 instanceof IdentifierValue ) ) return false ; return ( ( IdentifierValue ) arg0 ) . value == value ; }
ByteListIterator function ( ListIterator arg0 ) { if ( arg0 == null ) { return null ; } return new ListIteratorByteListIterator ( arg0 ) ; }
Image function ( int [ ] arg0 ) { BufferedImage loc0 = createImage ( arg0 . length , BufferedImage . TYPE_INT_RGB ) ; for ( int loc1 = 0 ; loc1 < arg0 . length ; loc1 ++ ) { int loc2 = arg0 [ loc1 ] ; loc0 . setRGB ( loc1 , loc2 , 1 ) ; } return loc0 ; }
void function ( ) { if ( upcomingReleaseId == null ) { upcomingReleaseId = releaseService . getNextUpcomingReleaseId ( ) ; } }
Class < ? > function ( ) { return elementType ; }
void function ( ) { assertTrue ( "srini_string" , incorrectRoleResult . contains ( DESTROY_METHOD_NOT_PASS ) ) ; }
void function ( ) { annotations . process ( null , null , null ) ; }
void function ( ) { List < Element > loc0 = d . getContent ( ) ; verifyNumberOfParagraphs ( loc0 ) ; }
String function ( ) { return fElement . getAttribute ( CLASS_ATTRIBUTE ) ; }
Timer function ( ) { throw new WaitTimeOutException ( "srini_string" ) ; }
void function ( boolean arg0 ) { this . expandEntityRef = arg0 ; }
File function ( ) { return fileInput ; }
void function ( int arg0 , int arg1 ) { Edge loc0 = new Edge ( arg0 , arg1 ) ; edgeList . add ( loc0 ) ; set . add ( loc0 ) ; }
boolean function ( ) { return isTwosidedGB ( "srini_string" ) ; }
String function ( Object arg0 ) { if ( arg0 == null ) return "srini_string" ; return arg0 . toString ( ) ; }
FieldSelection function ( List < String > arg0 ) { return new FieldSelectionList ( arg0 , mode ) ; }
List < ReleaseEntity > function ( ) { log . debug ( "srini_string" ) ; List < ReleaseEntity > loc0 = null ; try { loc0 = persistenceService . findAllReleases ( ) ; } catch ( Exception loc1 ) { throw new PersistenceException ( loc1 ) ; } return loc0 ; }
void function ( OverlayAdapter arg0 ) { adapters . add ( arg0 ) ; }
boolean function ( String arg0 ) { return _binsByUri . containsKey ( arg0 ) ; }
List < Message > function ( ) { if ( message == null ) { message = new ArrayList < Message > ( ) ; } return this . message ; }
Validator function ( ) { return new Validator ( ) ; }
void function ( ) { selectClause . append ( "srini_string" ) ; }
Motorbike function ( ) { EntityManager loc0 = entityManager . getTransaction ( ) ; loc0 . beginTransaction ( ) ; Motorbike loc1 = downPaymentOnBikeNoTx ( ) ; entityManager . persist ( loc1 ) ; loc0 . commit ( ) ; return loc1 ; }
void function ( int arg0 ) { ensureCapacity ( length + arg0 ) ; buffer [ length ++ ] = ( byte ) arg0 ; }
void function ( Validator arg0 , Object arg1 , Object arg2 ) { validateMin ( arg0 , arg1 , arg2 , null ) ; }
Property function ( ) { return property ; }
String function ( ) { return this . localeKey ; }
C function ( long arg0 ) { return ring . get ( ( int ) arg0 ) ; }
boolean function ( Widget arg0 , Hierarchy arg1 , WidgetMatcher arg2 ) { Widget loc0 = find0 ( arg0 , arg1 ) ; if ( loc0 != null ) { if ( arg2 . matches ( loc0 ) ) { return true ; } } return false ; }
RandomAccessSource function ( byte [ ] arg0 ) { if ( arg0 == null ) throw new IllegalArgumentException ( "srini_string" ) ; return createByReadingToMemory ( arg0 , 0 ) ; }
void function ( ) { assertEquals ( "srini_string" , ctx . pageSize ( ) , 4 ) ; }
String function ( ) { return pluginMeta . getVersion ( ) ; }
boolean function ( ) { return needBeforeSpace ; }
void function ( int arg0 , long arg1 ) { }
Set function ( ) { return _register . entrySet ( ) ; }
JpaDatabase function ( ) { LOGGER . info ( "srini_string" ) ; JpaDatabase loc0 = new H2Database ( ) ; return loc0 ; }
String function ( ) { return String . valueOf ( ring ) ; }
void function ( float arg0 ) { this . width = arg0 ; }
LIST < C > function ( ) { return ( List < C > ) list ; }
void function ( ) { migrationDone = false ; }
Collection function ( ) { final Collection loc0 = getComponents ( defaultHierarchy . getIconNames ( ) ) ; loc0 . addAll ( getComponents ( defaultHierarchy . getIconNames ( ) ) ) ; return loc0 ; }
void function ( Throwable arg0 ) { log ( arg0 . getMessage ( ) ) ; arg0 . printStackTrace ( ) ; }
Item [ ] function ( ) { return ( Item [ ] ) items . toArray ( new Item [ items . size ( ) ] ) ; }
ProgressRequestBody function ( String arg0 , long arg1 ) { return new ProgressRequestBody . Builder ( ) . arg0 ( arg0 ) . arg1 ( arg1 ) . build ( ) ; }
int function ( T arg0 ) { return weight ; }
HttpClient function ( ) { return backend ; }
Allprop function ( ) { return allprop ; }
void function ( byte [ ] arg0 , ObjectOutputStream arg1 ) { arg1 . writeObject ( arg0 ) ; }
void function ( ) { fForkChangeExecution = true ; fStopSeverity = - 1 ; }
Items function ( ) { return items ; }
Symbol function ( ) { return stack [ -- pos ] ; }
SortedBag function ( Bag arg0 , Class < ? extends T > arg1 ) { return typedBag ( arg0 , arg1 , false ) ; }
void function ( VectorXYZ arg0 ) { this . pos . set ( arg0 ) ; this . lookAt . set ( arg0 ) ; }
String function ( String arg0 , String arg1 ) { if ( arg0 == null || arg1 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } final byte [ ] loc0 = arg0 . getBytes ( ) ; final byte [ ] loc1 = hmac hmac ( ( arg1 ) . getBytes ( ) , arg0 . length ( ) ) ; final byte [ ] loc2 = hmac ( loc0 , arg1 ) ; return new String ( loc2 , "srini_string" ) ; }
String function ( ) { return null ; }
boolean function ( ) { return ring . isField ( ( ( Field ) ring . get ( name ( ) ) . getDeclaringClass ( ) ) ; }
Type function ( String ... arg0 ) { return basicTypeRegistry . find ( arg0 ) ; }
String function ( Bundle arg0 ) { Validate . notNull ( arg0 , "srini_string" ) ; return arg0 . getString ( TOKEN_KEY ) ; }
int function ( ) { return limit - position ; }
void function ( ) { reactor . start ( ) ; }
void function ( final StyleListener arg0 ) { if ( arg0 == null ) { throw new NullPointerException ( ) ; } listeners . remove ( arg0 ) ; }
String function ( ) { return technicalKey ; }
IJavaElement function ( JavaEditor arg0 ) { return selectJavaElement ( arg0 . getEditorInput ( ) ) ; }
void function ( ExecutionData arg0 ) { entries . put ( arg0 . getClass ( ) . getId ( ) , arg0 ) ; }
void function ( ) { if ( countryLookup != null ) { for ( String loc0 : countryLookup . keySet ( ) ) { if ( countryLookup . get ( loc0 ) == null ) { countryLookup . remove ( loc0 ) ; } } } }
void function ( int arg0 ) { this . noOfDimensions = arg0 ; }
int function ( GenVector < C > arg0 ) { if ( arg0 . val . isEmpty ( ) ) { return 0 ; } return val . compareTo ( arg0 . val ) ; }
Closure [ ] function ( ) { return iClosures ; }
int function ( ) { return _index ; }
void function ( Iterator arg0 ) { this . iterator = arg0 ; }
float function ( ) { return width ; }
void function ( final OPModeManager arg0 ) { }
Comparator function ( boolean arg0 ) { return arg0 ? NATURAL_COMPARATOR : nullLowComparator ( ) ; }
void function ( ) { stop = true ; }
int function ( final String arg0 ) { throw new UnsupportedOperationException ( "srini_string" ) ; }
void function ( ) { final String loc0 = nazgulName ( ) ; assertEquals ( "srini_string" , loc0 ) ; }
boolean function ( ITestIdentifier arg0 ) { return _monitor . isRunningTest ( arg0 ) ; }
ModuleList < C > function ( ) { return leftGB ( "srini_string" ) . getModuleList ( ) ; }
void function ( ITextDirectory arg0 , Map < String , BaseFontParameters > arg1 ) { fontsInsert ( arg0 . getNames ( ) , arg1 ) ; }
String function ( String arg0 ) { if ( arg0 == null ) { return null ; } int loc0 = arg0 . indexOf ( '#' ) ; if ( loc0 >= 0 ) { arg0 = arg0 . substring ( 0 , loc0 ) ; } if ( arg0 . startsWith ( "srini_string" ) || arg0 . startsWith ( "srini_string" ) ) { return "srini_string" ; } else if ( arg0 . startsWith ( "srini_string" ) || arg0 . startsWith ( "srini_string" ) ) { return "srini_string" ; } else { return "srini_string" ; } }
void function ( String arg0 ) { fileLoggerModule = new FileLoggerModule ( arg0 ) ; consoleLoggerModule = new ConsoleLoggerModule ( arg0 ) ; }
DocumentBuilder function ( Section arg0 ) { Section loc0 = builder ( ) . add ( arg0 ) ; sections . add ( loc0 ) ; return loc0 ; }
boolean function ( int arg0 , int arg1 ) { return ( ( arg0 + 1 ) * ( arg1 + 1 ) ) == x ; }
void function ( Chunk arg0 , Chunk arg1 ) { for ( String loc0 : BOLD ) { arg0 . setStyle ( loc0 , arg1 . getStyle ( ) ) ; } }
void function ( Object arg0 ) { log ( Level . ERROR , String . valueOf ( arg0 ) , null ) ; }
KeyValuePairList function ( ) { return new KeyValuePairList ( ) ; }
void function ( ) { fListeneredDisabled = true ; notifyListeners ( ) ; }
int function ( Object arg0 , Object arg1 ) { if ( arg0 == null ) return 1 ; if ( arg1 == null ) return 0 ; if ( arg0 . equals ( arg1 ) ) return 1 ; return arg0 . hashCode ( ) . compareTo ( arg1 . hashCode ( ) ) ; }
void function ( long arg0 ) { if ( mHead == mTail ) { return ; } long loc0 = mTimestamps [ mTail ] ; mTimestamps [ mTail ] = 0 ; mHead = ( mTail + 1 ) % BUFFER_SIZE ; }
BaseColor function ( ) { return strokeColor ; }
SchemaValidatorBuilder function ( ) { this . strategy = SchemaValidationStrategy . AVRO ; return this ; }
IJavaScriptElement function ( IJavaScriptElement arg0 , IJavaScriptProject arg1 ) { return null ; }
long function ( ) { return ours ; }
double function ( ) { return this . mu ; }
void function ( String arg0 ) { if ( fInputTrace != null ) { fInputTrace = arg0 ; } }
DurationFieldType function ( int arg0 ) { int loc0 = indexOf ( arg0 ) ; if ( loc0 < 0 ) { throw new IllegalArgumentException ( "srini_string" + arg0 + "srini_string" ) ; } return getFieldType ( loc0 ) ; }
Employee function ( int arg0 , String arg1 ) { Employee loc0 = em . find ( Employee . class , arg0 ) ; loc0 . setID ( arg1 ) ; em . persist ( loc0 ) ; return loc0 ; }
void function ( ) { }
boolean function ( Quadrant arg0 , boolean arg1 ) { if ( arg0 == Quadrant . boundary ) { return true ; } if ( arg1 ) { return child ( arg0 ) . isAdjacent ( child ( arg0 ) ) ; } else { return child ( arg0 ) . isAdjacent ( arg0 ) ; } }
Set function ( Map arg0 ) { return new TreeSetFromMapFromMap ( arg0 ) ; }
Branch function ( String arg0 ) { return new Branch ( this , arg0 ) ; }
boolean function ( final String arg0 ) { return this . listChildrenNoWatch ( arg0 ) ; }
void function ( int arg0 ) { constantValue . arg0 = arg0 ; }
void function ( Exception arg0 ) { synchronized ( lock ) { if ( exception == null ) { throw arg0 ; } wait ( ) ; } }
double function ( double arg0 ) { return findZero ( arg0 , factory . getDefaultSolver ( ) ) ; }
Iterator function ( DoubleIterator arg0 ) { if ( arg0 == null ) { return null ; } else { return new DoubleIteratorWrapper ( arg0 ) ; } }
