void function ( ) { SchemaReplacer loc0 = new SchemaReplacer ( ) ; AvroSchemaReader loc1 = new AvroSchemaReader ( ) ; loc1 . setSchemaResolver ( new AvroSchemaResolver ( ) ) ; loc0 . parse ( loc1 ) ; }
void function ( String arg0 ) { try { dvdProperties . remove ( arg0 ) ; } catch ( Exception loc0 ) { loc0 . printStackTrace ( ) ; } }
Collection < SpringConfig > function ( ) { return new ArrayList < SpringConfig > ( mSpringConfigMap . values ( ) ) ; }
File function ( ) { return Libraries . getLibsDirectory ( ) ; }
boolean function ( ) { return coalescing ; }
void function ( IgniteContext arg0 ) { ServerSecurityInterceptor loc0 = ( ServerSecurityInterceptor ) arg0 . get ( IgniteInterceptor . delegated_user_key ) ; loc0 . setCurrentUsername ( arg0 . get ( IgniteInterceptor . delegated_user_key ) . toString ( ) ) ; }
void function ( Object arg0 , Throwable arg1 ) { log ( Level . TRACE , String . valueOf ( arg0 ) , arg1 ) ; }
Object function ( ) { if ( instance == null ) { instance = persister . getInstance ( getEntityName ( ) ) ; } return instance ; }
boolean function ( ) { return true ; }
void function ( long arg0 ) { markAsOverriden ( "srini_string" ) ; this . evictionWakeUpInterval = arg0 ; }
IProduct function ( ) { return product ; }
String function ( ASN1Primitive arg0 ) { try { return arg0 . getAsString ( ) ; } catch ( IOException loc0 ) { throw new IOException ( "srini_string" + arg0 ) ; } }
int function ( InputStream arg0 ) { return ( ( int ) readInt24LE ( arg0 ) << 24 ) + ( ( int ) readInt24LE ( arg0 ) << 16 ) + ( ( int ) readInt24LE ( arg0 ) << 8 ) + ( ( int ) readInt24LE ( arg0 ) ) ; }
void function ( ClassDoc arg0 , String arg1 ) { if ( arg0 == null ) return ; Set < ClassDoc > loc0 = cmap . get ( arg0 ) ; if ( loc0 == null ) return ; for ( ClassDoc loc1 : loc0 ) { if ( loc1 . startsWith ( arg1 ) ) { loc0 . add ( loc1 ) ; } } }
LongList function ( ) { return UnmodifiableLongList . unmodifiableLongList ( EMPTY_LONG_LIST ) ; }
Getcontentlanguage function ( ) { return getcontentlanguage ; }
void function ( String arg0 , String arg1 ) { KerberosCli loc0 = new KerberosCli ( arg0 , arg1 ) ; loc0 . init ( ) ; }
ImmutableList < NamePart > function ( String arg0 ) { return NAME_PARSER . parse ( arg0 ) ; }
Location function ( Element arg0 ) { Location loc0 = new Location ( ) ; loc0 . setLatitude ( arg0 . getFloat ( "srini_string" ) ) ; loc0 . setLongitude ( arg0 . getFloat ( "srini_string" ) ) ; return loc0 ; }
boolean function ( Display arg0 ) { return _display != null && _matcher . matches ( arg0 ) ; }
void function ( String arg0 , String arg1 ) { if ( arg1 == null ) { throw new XMPException ( "srini_string" , XMPError . BADPARAM ) ; } }
void function ( ) { m_negativeXErrorPixel = 0 ; m_negativeYErrorPixel = 0 ; m_positiveXErrorPixel = 0 ; m_positiveYErrorPixel = 0 ; }
String function ( ) { return reason ; }
void function ( String arg0 ) { }
int function ( ) { return ( int ) Math . round ( outputBuffer . getSampleDuration ( ) / 1000 ) ; }
void function ( final RecordBatch arg0 , final boolean arg1 , final int arg2 ) { executeMethodLogic ( new PartitionHandlingMethod ( arg0 , arg1 , arg2 ) ) ; }
boolean function ( ) { return ( document . getDocumentType ( ) == DocumentType . duplicate || document . getDocumentType ( ) == DocumentType . duplicate || document . getDocumentType ( ) == DocumentType . copy ) ; }
long function ( ) { return cacheHitCount ; }
Dialog function ( Activity arg0 , String arg1 ) { return ( new AlertDialog . Builder ( arg0 ) ) . setTitle ( arg1 ) . setNeutralButton ( android . R . string . ok , null ) . create ( ) ; }
Section function ( int arg0 ) { return sections . get ( arg0 ) ; }
Product function ( ) { return new Product ( ) ; }
FigureInfo function ( ) { return new FigureInfo ( this ) ; }
Integer function ( Cursor arg0 , int arg1 ) { return arg0 . getInt ( arg1 ) ; }
Providedportid function ( ) { return new Providedportid ( ) ; }
boolean function ( String arg0 , String arg1 ) { return findKeyword ( arg0 , arg1 , 0 ) < 0 ; }
int function ( ProtocolVersion arg0 ) { return this . protocol . compareTo ( arg0 . protocol ) ; }
void function ( Fum arg0 ) { this . fum = arg0 ; }
void function ( final HttpServerExchange arg0 ) { }
void function ( ) { SecurityConfiguration . getCipherKey ( ) ; }
int function ( ) { return map . size ( ) ; }
void function ( Point2D arg0 ) { this . startPoint = arg0 ; }
int function ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 : arg0 ) { loc0 = gcd ( loc0 , loc1 ) ; } return loc0 ; }
void function ( String [ ] arg0 ) { System . out . println ( getImplementation ( ) ) ; System . exit ( 0 ) ; }
void function ( String arg0 , Object arg1 , final CallBack < ByteBuffer > arg2 ) { writeBuffers ( arg0 , arg1 , arg2 , null ) ; }
void function ( Collection < T > arg0 , int arg1 , Comparator < T > arg2 , int arg3 ) { List < T > loc0 = new ArrayList < T > ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { T loc2 = loc0 . get ( loc1 ) ; if ( arg2 . compare ( loc2 , arg1 ) > 0 ) { loc0 . add ( loc2 ) ; } } copyNSorted ( loc0 , arg2 , arg3 ) ; }
long function ( ) { return timestamp ; }
String function ( ) { return this . name ; }
Piece function ( int arg0 ) { if ( arg0 >= this . pieces . length ) { System . out . println ( "srini_string" + arg0 ) ; return null ; } return this . pieces [ arg0 ] ; }
String function ( String arg0 ) { return getMessage ( arg0 , null ) ; }
void function ( ISourceFileLocator arg0 ) { this . delegates . add ( arg0 ) ; }
void function ( ) { int loc0 = loc0 ( ) ; if ( loc0 <= 0 ) { throw new IllegalArgumentException ( "srini_string" ) ; } }
Integer function ( ) { return repeated ; }
Description function ( Description arg0 ) { fChildren . add ( arg0 ) ; return arg0 ; }
byte [ ] function ( short arg0 ) { byte [ ] loc0 = new byte [ 2 ] ; loc0 [ 0 ] = ( byte ) ( arg0 >>> 8 ) ; loc0 [ 1 ] = ( byte ) arg0 ; return loc0 ; }
Criteria function ( RelationalOperator arg0 , ValueNode arg1 ) { return new Criteria ( arg0 , arg1 ) ; }
StandardServiceRegistryBuilder function ( Map arg0 ) { this . settings . putAll ( arg0 ) ; return this ; }
Int [ ] function ( Integer [ ] arg0 ) { Int [ ] loc0 = new Int [ arg0 . length ] ; for ( int loc1 = 0 ; loc1 < arg0 . length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }
Map function ( char arg0 ) { loadMaps ( arg0 ) ; return characterMap ; }
double function ( int arg0 ) { return polynomials [ arg0 ] . function ( knots [ arg0 ] ) ; }
ValidatorConfiguration function ( final String arg0 , final String arg1 ) { this . properties . put ( arg0 , arg1 ) ; return this ; }
void function ( ) { validateChain ( "srini_string" ) ; validateChain ( "srini_string" ) ; validateChain ( "srini_string" ) ; validateChain ( "srini_string" ) ; validateChain ( "srini_string" ) ; }
CookieAttributeHandler function ( final String arg0 ) { return this . attribHandlerMap . get ( arg0 ) ; }
void function ( ) { if ( dispatcher != null ) { dispatcher . init ( ) ; } }
void function ( String [ ] arg0 ) { printCapitalized ( "srini_string" ) ; }
void function ( String arg0 ) { this . className = arg0 ; }
int function ( Object arg0 , Object arg1 ) { return arg0 . compareTo ( arg1 ) ; }
void function ( ) { dao = mock ( DbCustomerDao . class ) ; exception = null ; }
String function ( String arg0 , String arg1 , String arg2 , String arg3 ) { String loc0 = doSendApiRequest ( arg0 , arg1 , arg2 ) ; JSONObject loc1 = new JSONObject ( loc0 ) ; return loc1 . getString ( m_Key ) ; }
String function ( ) { return responseHeaders . get ( "srini_string" ) ; }
GenMatrix < C > function ( ) { for ( int loc0 = 0 ; loc0 < matrix . size ( ) ; loc0 ++ ) { val . add ( matrix . get ( loc0 ) . get ( 0 ) ) ; } return this ; }
void function ( DrawSurface arg0 ) { arg0 . setColor ( Color . WHITE ) ; arg0 . fillRect ( 0 , 0 , gameWidth , gameHeight ) ; arg0 . setColor ( Color . BLACK ) ; arg0 . drawRect ( 0 , 0 , gameWidth , gameHeight ) ; }
AuditCriterion function ( AuditCriterion arg0 , AuditCriterion arg1 ) { return new LogicalAuditExpression ( arg0 , arg1 , "srini_string" ) ; }
T function ( T arg0 , Object arg1 ) { if ( arg0 == null ) { throw new NullPointerException ( String . valueOf ( arg1 ) ) ; } return arg0 ; }
void function ( String arg0 , MessageType arg1 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } if ( arg1 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } myTopType = arg0 ; myMsgTypeByName . put ( arg0 , arg1 ) ; }
PlanNode function ( PlanNode arg0 ) { if ( arg0 . getChildCount ( ) != 1 ) throw new IllegalArgumentException ( "srini_string" ) ; return ( PlanNode ) arg0 . getChild ( 0 ) ; }
void function ( String arg0 ) { this . fcKey = arg0 ; }
Double function ( ) { return xValue ; }
void function ( ) { _size = _size + 1 ; }
float function ( ) { return textRectangle . getR ( ) ; }
int function ( ) { return 0 ; }
List < String > function ( String arg0 ) { return sfi . getCollectionElementColumnNames ( arg0 ) ; }
Collection < Table > function ( List < String > arg0 ) { return getTablesInBulkLoad ( arg0 , null ) ; }
void function ( ) { }
UnivPowerSeries < C > function ( ) { return random . getOne ( ) ; }
EditPartFactory function ( ) { return editorSite . getEditPartFactory ( ) ; }
void function ( boolean arg0 ) { fResolveBindings = arg0 ; }
double function ( Body arg0 , Body arg1 ) { if ( arg0 . pskip . compareTo ( arg1 . pskip ) <= 0 ) return 0.0 ; else return pskip . distance ( arg0 . pskip , arg1 . pskip ) ; }
boolean function ( PastryContact arg0 ) { return ccwNodes . remove ( arg0 ) ; }
boolean function ( ) { return iterators . size ( ) > 0 ; }
DateTimeFieldType function ( int arg0 ) { return getField ( arg0 ) . getType ( ) ; }
ActiveLock function ( ) { return new ActiveLock ( ) ; }
Product < C > function ( Reader arg0 ) { return parse ( arg0 , null ) ; }
void function ( String arg0 , String arg1 , File arg2 ) { try { FileOutputStream loc0 = new FileOutputStream ( arg2 ) ; FileInputStream loc1 = new FileInputStream ( arg0 ) ; int loc2 ; while ( ( loc2 = loc1 . read ( ) ) != - 1 ) { loc0 . write ( loc2 ) ; } loc0 . flush ( ) ; loc0 . close ( ) ; } catch ( IOException loc0 ) { } }
void function ( PdfWriter arg0 ) { if ( pdfxConformance != PdfWriter . PDFX ) { throw new RuntimeException ( "srini_string" ) ; } }
boolean function ( JEditorPane arg0 ) { return arg0 != null && JOptionPane . showConfirmDialog ( arg0 , "srini_string" , JOptionPane . OK_CANCEL_OPTION ) == JOptionPane . OK_CANCEL_OPTION ; }
void function ( ) { fFilesSaved = true ; }
double function ( double [ ] arg0 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 . length ; loc1 ++ ) loc0 += arg0 [ loc1 ] * weights [ loc1 ] ; return loc0 ; }
void function ( ) { I1z = 0 ; I2z = 0 ; I3z = 0 ; I4z = 0 ; }
void function ( String arg0 , Collection < ? > arg1 ) { if ( arg1 == null ) { throw new AssertionFailure ( arg0 ) ; } for ( Collection < ? > loc0 : arg1 ) { loc0 . add ( null ) ; } }
Collection < EvaluationListener > function ( ) { return this . evaluationListeners ; }
Callable < T > function ( final StackTraceElement arg0 ) { return new Callable < T > ( ) { @ Override public T call ( ) { return arg0 ; } } ; }
boolean function ( BigInteger arg0 ) { return signum ( arg0 ) == 0 ; }
Event [ ] function ( ) { return al . getEvents ( ) ; }
int function ( Context arg0 , int arg1 ) { Resources loc0 = arg0 . getResources ( ) ; int loc1 = loc0 . getDimensionPixelSize ( arg1 ) ; return loc1 ; }
H2Schema function ( ) { return new H2Schema ( new NameResolver ( "srini_string" ) ) ; }
String [ ] function ( ) { return columnNames ; }
Closure function ( @ Nullable Iterable < ? extends Closure > arg0 ) { return new ClosureIterator ( arg0 ) ; }
void function ( double arg0 ) { if ( Double . isNaN ( arg0 ) || arg0 < 0 ) { throw new ArithmeticException ( "srini_string" ) ; } }
boolean function ( ) { return vid != null ; }
void function ( int arg0 ) { this . definesEncryptionData = true ; this . sampleEncryptionDataLength = arg0 ; this . sampleEncryptionDataNeedsFill = false ; }
void function ( int arg0 ) { m_value -= arg0 ; }
boolean function ( ) { return onlineCheckingAllowed ; }
int function ( int arg0 ) { return childRanges [ arg0 ] ; }
void function ( int arg0 ) { if ( arg0 > columnCount ) { throw new IllegalArgumentException ( "srini_string" + arg0 + "srini_string" ) ; } this . columnCount = arg0 ; }
boolean function ( Collection < K > arg0 ) { return false ; }
void function ( ) { background = loadAndResizeSprite ( "srini_string" ) ; }
TemplateContextType function ( ) { return fContextType ; }
void function ( float arg0 ) { list . add ( arg0 ) ; }
void function ( Object arg0 ) { if ( myList != null ) { myList . setItem ( arg0 ) ; } else if ( arg0 != null ) { throw new Exception ( "srini_string" ) ; } }
PropertyTemplateBean function ( ) { PropertyTemplateBean loc0 = new PropertyTemplateBean ( ) ; loc0 . setFormat ( "srini_string" ) ; loc0 . setUrl ( "srini_string" ) ; loc0 . setShowQueries ( true ) ; return loc0 ; }
IWidgetCondition function ( Widget arg0 ) { return new WidgetCondition ( arg0 ) ; }
ReflectConstructorSpec function ( Object ... arg0 ) { return new ReflectConstructorSpec ( arg0 ) ; }
void function ( ) { pos = 0 ; }
byte [ ] function ( Object arg0 ) { return toJson ( arg0 , new Configuration ( ) ) ; }
JobStatus function ( final JobId arg0 ) { checkNotNull ( arg0 , "srini_string" ) ; JobStatus loc0 = model . get ( arg0 ) ; if ( loc0 == null ) { loc0 = new JobStatus ( ) ; } return loc0 ; }
Codec [ ] function ( Format arg0 ) { return getCodecs ( ) ; }
Opponent function ( int arg0 ) { this . weight = arg0 ; return this ; }
int function ( ) { return aVueltas . length ; }
PdfDictionary function ( String arg0 , PdfDictionary arg1 ) { if ( arg1 == null ) { throw new PdfException ( "srini_string" ) ; } PdfDictionary loc0 = ( PdfDictionary ) configuration . get ( arg0 ) ; if ( loc0 == null ) { loc0 = new PdfDictionary ( ) ; configuration . put ( arg0 , loc0 ) ; } loc0 . put ( arg1 , richMediaContent ) ; return richMediaContent ; }
void function ( final Set < IResource > arg0 ) { this . resources = arg0 ; }
String function ( ) { return toString ( ) + "srini_string" + _size + "srini_string" + _topDistance + "srini_string" ; }
void function ( double arg0 ) { this . numericalZero = arg0 ; }
void function ( int arg0 ) { doKeyUp ( arg0 , false ) ; }
void function ( String arg0 ) { this . areaCode = arg0 ; }
String function ( String arg0 ) { String loc0 = null ; loc0 = doSendApiRequest ( "srini_string" , arg0 ) ; return loc0 ; }
String function ( ) { return nodeInfo . getId ( ) ; }
Map < String , ByteBuffer > function ( ) { return requestCallMeta ; }
ColumnDescriptor [ ] function ( ) { return columns ; }
String function ( String arg0 ) { int loc0 = arg0 . indexOf ( URL_DELIMITERS ) ; if ( loc0 >= 0 ) { arg0 = arg0 . substring ( 0 , loc0 ) ; } return getJavaElementName ( arg0 ) ; }
long function ( Duration arg0 ) { return Durations . toMicros ( arg0 ) ; }
String function ( Object arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; writeBack ( arg0 , loc0 ) ; return loc0 . toString ( ) ; }
void function ( Runway arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } runwaysArray [ arg0 . getRunwayNumber ( ) ] = null ; runwaysArray [ arg0 . getAirportNumber ( ) ] = null ; arg0 . free ( ) ; }
void function ( BigInteger arg0 ) { this . nresults = arg0 ; }
long function ( ) { return System . currentTimeMillis ( ) ; }
AccessibilityGraph function ( final DeploymentUnit arg0 ) { AccessibilityGraph loc0 = new AccessibilityGraph ( ) ; loc0 . addObject ( bootstrapClassLoaderBeanDeploymentArchive ) ; loc0 . addObject ( subDeploymentClassLoaders ) ; loc0 . addObject ( extensions ) ; return loc0 ; }
ITracePoint2D function ( ) { return m_previousPoint ; }
Object function ( ) { return value ; }
List < Integer > function ( ) { return initialAvailableNumer ; }
ModInteger function ( java . math . BigInteger arg0 ) { int loc0 = ring . getModulus ( arg0 ) . loc0 ( ) ; return new ModInteger ( loc0 ) ; }
String function ( ) { return name ; }
float function ( Vector3f arg0 , Vector3f arg1 ) { float loc0 = ( float ) Math . sqrt ( ( arg0 . x * arg0 . x ) + ( arg0 . y * arg0 . y ) + ( arg0 . z * arg0 . z ) ) ; return loc0 ; }
boolean function ( int ... arg0 ) { for ( int loc0 : arg0 ) { if ( contains ( loc0 ) ) { return true ; } } return false ; }
GenMatrix < C > function ( Reader arg0 ) { return GenMatrix . fromReader ( arg0 ) ; }
boolean function ( ) { return ( this . type == NULL ) ; }
ByteBuffer function ( ByteBuffer arg0 , int arg1 , int arg2 ) { return arg0 . subregion ( arg1 , arg1 + arg2 ) ; }
String function ( ) { return toString ( ) ; }
LinkedList function ( CFG arg0 ) { LinkedList loc0 = new LinkedList ( ) ; for ( Block loc1 : arg0 . getBlocks ( ) ) { loc0 . addFirst ( loc1 ) ; } calcFrontier ( arg0 , loc0 ) ; return loc0 ; }
String function ( String arg0 ) { if ( arg0 == null ) { return null ; } int loc0 = arg0 . lastIndexOf ( CODE_DELIMITERS ) ; if ( loc0 >= 0 ) { arg0 = arg0 . substring ( 0 , loc0 ) ; } return arg0 ; }
SolvableGroebnerBase < C > function ( List < GenSolvablePolynomial < C >> arg0 , List < GenSolvablePolynomial < C >> arg1 ) { return new SolvableGroebnerBase < C > ( leftGB ( arg0 ) , rightGB ( arg1 ) ) ; }
List function ( ) { return ones ; }
String function ( ) { return this . entityName ; }
void function ( int arg0 , Type arg1 ) { classInfo . addInterface ( arg0 , arg1 ) ; }
BatchCQLStatementTupleMapper function ( BatchCQLStatementBuilder ... arg0 ) { return newLogBatch ( Arrays . asList ( arg0 ) ) ; }
void function ( String arg0 ) { files . add ( arg0 ) ; }
int [ ] function ( int [ ] arg0 ) { return redHistogram ( arg0 , 0 , arg0 . length ) ; }
IConnection function ( String arg0 , int arg1 ) { IConnection loc0 = connections . get ( arg0 ) ; if ( loc0 != null ) return loc0 ; loc0 = new ServerConn ( storm_conf , arg1 ) ; connections . put ( arg0 , loc0 ) ; return loc0 ; }
void function ( ) { IntArrayWorker loc0 = new IntArrayWorker ( ) ; int [ ] [ ] loc1 = { { 1 , 2 , 3 } , { 4 , 5 , 6 } } ; loc0 . setMatrix ( loc1 ) ; int loc2 = loc0 . getColTotal ( ) ; assertEquals ( 3 , loc2 ) ; }
URL function ( String arg0 ) { String loc0 = RESOURCE + "srini_string" + arg0 ; return Runtime . getRuntime ( ) . getClassLoader ( ) . getResource ( loc0 ) ; }
boolean function ( ) { return isField ; }
void function ( Shell arg0 ) { arg0 . moveToBottom ( ) ; }
String function ( String arg0 ) { return arg0 ; }
GeckoMenu function ( ) { return mMenu ; }
ResourceEditPropertyBuilder function ( Clob arg0 ) { this . propertyComment = arg0 ; return this ; }
Expr function ( ) { if ( size == 0 ) throw new EmptyStackException ( ) ; return stack . remove ( size - 1 ) ; }
WorkerContextImpl function ( ) { return context . get ( ) ; }
Environment function ( ) { Environment loc0 = new Environment ( ) ; loc0 . setName ( "srini_string" ) ; populateEnvironment ( loc0 ) ; return loc0 ; }
String function ( ) { return fMethodName ; }
String function ( String arg0 ) { System . out . println ( arg0 ) ; return null ; }
OSMElement function ( ) { return objectWithTags ; }
Partitioner function ( int arg0 ) { for ( Partitioner loc0 : partitioners ) { if ( loc0 . getPartitioningIndex ( ) == arg0 ) { return loc0 ; } } return null ; }
void function ( Object arg0 , Throwable arg1 ) { log ( Level . WARN , String . valueOf ( arg0 ) , arg1 ) ; }
boolean function ( ) { return false ; }
void function ( Object arg0 ) { log ( Level . ERROR , String . valueOf ( arg0 ) , null ) ; }
URI function ( ) { return uri ; }
void function ( ) { if ( ! isDetermined ( ) ) { throw new IllegalStateException ( "srini_string" ) ; } if ( conds . isEmpty ( ) ) { throw new IllegalStateException ( "srini_string" ) ; } }
List < Abi > function ( ) { if ( cachedBuffer != null ) { return Arrays . asList ( cachedBuffer ) ; } throw new IllegalStateException ( "srini_string" ) ; }
CRL function ( byte [ ] arg0 , String arg1 ) { if ( arg0 == null || arg1 == null ) return null ; CertificateFactory loc0 = CertificateFactory . getInstance ( arg1 ) ; return ( CRL ) loc0 . generateCRL ( new X509EncodedCert ( arg0 ) ) ; }
void function ( int arg0 ) { size *= 2 ; }
State function ( ) { return state ; }
boolean function ( int arg0 ) { return mNotifications . containsKey ( arg0 ) ; }
ResourceEditPropertyBuilder function ( boolean arg0 ) { this . isTesting = arg0 ; return this ; }
double function ( double arg0 , double arg1 , double arg2 ) { return bracket ( arg0 , arg1 , arg2 , - 1 ) ; }
String function ( ) { return "srini_string" + getChronology ( ) . name ( ) + "srini_string" + getPartialValues ( ) . toString ( ) + "srini_string" ; }
ObjectContainer function ( String arg0 ) { return open ( new File ( arg0 ) ) ; }
RawFragmentBatch function ( Allocator arg0 ) { return new RawFragmentBatch ( sender , header , body , arg0 ) ; }
String function ( String arg0 ) { return fAttributes . get ( arg0 ) ; }
List < T > function ( Collection < T > arg0 ) { return CollectionUtils . unmodifiableList ( new ArrayList < T > ( arg0 ) ) ; }
BigDecimal function ( ) { return stmt . getStatementNum ( ) ; }
void function ( ) { if ( i . isStackOwner ( ) ) { String loc0 = i . loc0 ( ) ; assertEquals ( "srini_string" , false , loc0 ) ; } }
MSG_TYPE function ( ) { return msgType ; }
String function ( String arg0 ) { if ( map == null ) { return null ; } return map . get ( arg0 ) ; }
void function ( ) { receivedMsg ++ ; }
Element function ( Node arg0 , String arg1 ) { NodeList loc0 = arg0 . getElementsByTagName ( arg1 ) ; return loc0 . arg0 ( 0 ) ; }
int function ( byte [ ] arg0 , byte [ ] arg1 , int arg2 ) { int loc0 = 0 ; int loc1 = arg0 . length ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { if ( arg0 [ loc2 ] != arg1 [ loc2 ] ) { loc0 ++ ; } } return loc0 ; }
String function ( Member arg0 ) { return getClassDescriptor ( arg0 . getDeclaringClass ( ) ) ; }
Component function ( final Name arg0 ) { final int loc0 = arg0 . size ( ) - 1 ; return ( Component ) arg0 . get ( loc0 ) ; }
ConsumedPort function ( ) { return new ConsumedPort ( ) ; }
String function ( String arg0 ) { return hostToIp . get ( arg0 ) ; }
void function ( ) { }
void function ( ) { final ClassPathManifest loc0 = new ClassPathManifest ( "srini_string" ) . addClass ( "srini_string" ) ; Assert . assertTrue ( "srini_string" . equals ( loc0 . getImplementationClass ( ) ) ) ; }
void function ( Socket arg0 ) { this . socket = arg0 ; this . open = true ; }
void function ( String [ ] arg0 ) { AssignmentModel loc0 = new AssignmentModel ( ) ; loc0 . read ( ) ; }
boolean function ( String arg0 ) { IIndex loc0 = getIndex ( arg0 ) ; if ( loc0 == null ) return false ; loc0 . remove ( ) ; return true ; }
Request function ( Class < ? > arg0 , String arg1 ) { return new ErrorReportingRunner ( arg0 , arg1 ) ; }
void function ( final String arg0 ) { if ( arg0 != null ) { out . append ( "srini_string" ) ; out . append ( arg0 ) ; out . append ( "srini_string" ) ; } }
void function ( ) { release ( ) ; }
int function ( boolean arg0 ) { return ( peek ( arg0 ) ? 1 : 0 ) ; }
File function ( ) { return this . file ; }
Date function ( Date arg0 ) { if ( arg0 != null ) { SimpleDateFormat loc0 = new SimpleDateFormat ( "srini_string" ) ; Date loc1 = null ; try { loc1 = loc0 . parse ( arg0 . getTime ( ) ) ; } catch ( ParseException loc2 ) { Log . w ( TAG , "srini_string" , loc2 ) ; } return loc1 ; } else { return null ; } }
ArrayList < Byte > function ( ) { return getBytes ( inputFile ) ; }
String function ( ) { return this . charset ; }
Phenotype function ( String arg0 , String arg1 ) { return getPhenotype ( arg0 , arg1 , 1 ) ; }
void function ( Context arg0 , Name arg1 ) { arg0 . rebind ( arg1 ) ; int loc0 = arg1 . size ( ) ; while ( -- loc0 >= 0 ) { Name loc1 = arg1 . getPrefix ( loc0 ) ; try { arg0 . rebind ( loc1 ) ; } catch ( NamingException loc2 ) { throw new CannotProceedException ( loc2 ) ; } } }
void function ( boolean arg0 ) { append ( arg0 ? 1 : 0 ) ; }
void function ( Person arg0 ) { allPersons . remove ( arg0 ) ; }
boolean function ( Object arg0 ) { if ( arg0 instanceof RoutingTableEntry ) { return ( ( RoutingTableEntry < ? > ) arg0 ) . contact == contact ; } return false ; }
void function ( String arg0 ) { ExtendedJSONObject loc0 = getObsoleteIds ( sharedPrefs ) ; loc0 . putString ( PrefKeys . ID , arg0 ) ; sharedPrefs . edit ( ) . putString ( PrefKeys . OWNER , arg0 ) . apply ( ) ; }
void function ( String arg0 ) { if ( arg0 == null ) return ; String loc0 = getKey ( arg0 ) ; _register . remove ( loc0 ) ; _values . remove ( loc0 ) ; }
void function ( Host arg0 , double arg1 ) { List < Double > loc0 = rttToMonitors . get ( arg0 ) ; if ( loc0 == null ) { loc0 = new ArrayList < Double > ( ) ; } loc0 . add ( arg1 ) ; rttToMonitors . put ( arg0 , loc0 ) ; }
boolean function ( Piece arg0 ) { for ( int loc0 = 0 ; loc0 < MAX_BOARD_SIZE ; loc0 ++ ) { if ( pieces [ loc0 ] . equals ( arg0 ) ) { return true ; } } return false ; }
SAXParser function ( ) { return new SAXParser ( ) ; }
void function ( int arg0 ) { this . iterations = arg0 ; }
Quad quadrant ( SquareSide arg0 , SquareSide arg1 ) { return child ( arg0 , arg1 ) ; }
Reduce < C > function ( int arg0 , int arg1 , Reduction < C > arg2 , boolean arg3 ) { return reduce ( arg0 , arg1 , arg2 , arg3 , true ) ; }
ValidationContext function ( ) { return new ValidationContext ( ) ; }
Map < String , NamedParameterDescriptor > function ( ) { return namedDescriptorMap ; }
SpringConfig function ( double arg0 , double arg1 , double arg2 , double arg3 ) { return new SpringConfig ( arg0 , arg1 , arg2 , arg3 ) ; }
Response . ResponseBuilder function ( Uri arg0 ) { return Response . status ( CREATED ) . entity ( arg0 ) . build ( ) ; }
void function ( Permission arg0 ) { checkPermissionAndFireCheckedException ( arg0 , "srini_string" ) ; }
boolean function ( String arg0 ) { return userFunctions . containsKey ( arg0 ) ; }
VectorXZ function ( double arg0 ) { if ( arg0 < 0 ) return X_UNIT ; if ( arg0 > 1 ) return Z_UNIT ; return new VectorXZ ( x , y , z , arg0 ) ; }
String function ( Element arg0 , String arg1 ) { Attribute loc0 = arg0 . getAttributeByName ( arg1 ) ; if ( loc0 == null ) { return null ; } return loc0 . getValue ( ) ; }
void function ( ) { Node loc0 = first ; while ( loc0 != null ) { if ( loc0 . item == item ) { loc0 = loc0 . next ; } else { loc0 = loc0 . next ; } } item = loc0 . next ; }
void function ( String arg0 ) { this . inputInfo = arg0 ; }
void function ( Bundle arg0 ) { Validate . notNull ( arg0 , BUNDLE_EXTRA_STRING_MESSAGE ) ; }
long function ( ) { return ( long ) System . currentTimeMillis ( ) ; }
Date function ( ) { return bankToCustomerStatement . getIssueDate ( ) ; }
Quotient < C > function ( int arg0 , int arg1 ) { return new Quotient < C > ( num , arg0 , - arg1 ) ; }
int function ( int arg0 ) { return ( Integer ) LocalStore . get ( arg0 ) ; }
UnivPowerSeries < C > function ( ) { return get ( 0 , java . util . Random . random ( ) ) ; }
Duration function ( Duration arg0 , Duration arg1 ) { return normalizedDuration ( arg0 . getSeconds ( ) + arg1 . getSeconds ( ) , arg0 . getNanos ( ) + arg1 . getNanos ( ) ) ; }
IAnnotationCreator function ( ) { if ( instance == null ) { synchronized ( IAnnotationCreator . class ) { if ( instance == null ) { instance = new AnnotationCreator ( ) ; } } } return instance ; }
boolean function ( T [ ] arg0 ) { return ( arg0 != null ) && arg0 . length > 0 ; }
HazelcastInstance function ( ) { return hazelcastInstance ; }
boolean function ( java . math . BigInteger arg0 ) { return getModul ( ) . equals ( arg0 ) ; }
String function ( String arg0 ) { addErrorMessage ( arg0 ) ; return null ; }
Optional < Section > function ( ) { return sections ; }
boolean function ( ) { return ( timespan > 0 ) ; }
boolean function ( ) { return head == null ; }
void function ( PdfReader arg0 , Bookmark arg1 ) { fc . setBookmarks ( arg0 , arg1 ) ; }
void function ( int arg0 ) { this . lineJoinStyle = arg0 ; }
int function ( ) { return red . length ( ) + green . length ( ) ; }
void function ( ISemanticActionProvider arg0 ) { }
void function ( int arg0 ) { setScreenBrightness ( arg0 , true ) ; }
void function ( ) { if ( releaseMap == null ) { releaseMap = new LinkedHashMap < Integer , ReleaseEntity > ( ) ; } }
Date function ( ) { return Date . from ( toInstant ( ) ) ; }
boolean function ( ) { return escapeText ; }
PutRule function ( ) { return new PutRule ( ) ; }
Device function ( String arg0 ) { if ( ( arg0 == null ) || ( arg0 . trim ( ) . equals ( "srini_string" ) ) ) { throw new NullIdException ( ) ; } return ( Device ) this . devices . get ( arg0 ) ; }
void function ( TLinkable arg0 ) { _next = arg0 ; }
void function ( Hessian2Serializer arg0 ) { _serializerFactory . freeSerializer ( arg0 ) ; }
State function ( ) { return tagState ; }
String function ( ) { return getKeyTypeZNode ( KEY_TYPE_ZNODE_NAME ) ; }
void function ( IPropertyChangeListener arg0 ) { pcsDelegate . addPropertyChangeListener ( arg0 ) ; }
void function ( T arg0 ) { lock . lock ( ) ; try { map . put ( arg0 , lock ) ; } finally { lock . unlock ( ) ; } }
void function ( final ITestRunSession arg0 , final PrintWriter arg1 ) { arg0 . toXML ( arg1 ) ; }
void function ( final Object arg0 ) { this . iterator . add ( arg0 ) ; }
boolean function ( ) { return fCheckable ; }
float function ( final Graphics2D arg0 ) { final float loc0 = arg0 . getFontMetrics ( ) . getHeight ( ) ; return arg0 . getFontMetrics ( ) . stringWidth ( SEMI_TRANSPARENT ) / loc0 ; }
void function ( FreeMarkerProperty arg0 ) { Map < String , FreeMarkerProperty > loc0 = properties . get ( arg0 . getIdentifier ( ) ) ; if ( loc0 == null ) { loc0 = new HashMap < String , FreeMarkerProperty > ( ) ; properties . put ( arg0 . getIdentifier ( ) , loc0 ) ; } loc0 . put ( arg0 . getName ( ) , arg0 ) ; }
boolean function ( ) { return ( this . type == NUMBER ) ; }
void function ( ) { throw new RuntimeException ( "srini_string" ) ; }
void function ( ) { MyListener . setInvocationCount ( 0 ) ; SLSBBMT loc0 = lookup ( "srini_string" , SLSBBMT . class ) ; this . doCMTTest ( loc0 , 2 ) ; }
void function ( int arg0 ) { sleep ( arg0 , "srini_string" ) ; }
void function ( String arg0 ) { this . caller = arg0 ; }
boolean function ( CtField arg0 ) { return arg0 . hasAnnotation ( Entity . class ) ; }
Region function ( ) { return fTagPosition ; }
GenPolynomial < C > function ( List < GenPolynomial < C >> arg0 ) { return sum ( arg0 . toArray ( new GenPolynomial < C > [ arg0 . size ( ) ] ) ) ; }
void function ( ) { Thread . sleep ( TICK_TIME ) ; }
void function ( ImagePanel arg0 ) { if ( arg0 != null ) { arg0 . removeImagePanel ( this ) ; } }
Block function ( ) { return returnAddress ; }
void function ( String arg0 , Object arg1 ) { mParameters . put ( arg0 , arg1 ) ; }
Object function ( java . lang . reflect . Method arg0 ) { return new StubStrategy ( arg0 ) ; }
void function ( ) { Customer loc0 = dao . retrieveCustomer ( "srini_string" , "srini_string" ) ; assertNotNull ( loc0 ) ; }
boolean function ( ) { return valid ; }
File [ ] function ( ) { return findFiles ( new File ( "srini_string" ) , new String [ ] { "srini_string" } ) ; }
AlgebraicNumber < C > function ( java . io . Reader arg0 ) { return parse ( arg0 , null ) ; }
float function ( final String arg0 , final float arg1 ) { if ( arg0 == null ) { return arg1 ; } else { return Float . parseFloat ( arg0 ) ; } }
String function ( ) { return "srini_string" ; }
BranchAndFinancialInstitutionIdentification4 function ( ) { return new BranchAndFinancialInstitutionIdentification4 ( ) ; }
XMLParser function ( State arg0 ) { this . specialChar = arg0 ; return this ; }
boolean function ( ) { return isAssociative ( ) ; }
String function ( String arg0 ) { }
String [ ] function ( ) { return keyAliases ; }
char function ( ) { return list . charAt ( list . size ( ) - 1 ) ; }
void function ( ) { if ( session == null ) { load ( ) ; } session . start ( ) ; }
boolean function ( ) { return fEnabled ; }
void function ( ) { if ( fLabel != null ) { fLabel . setEnabled ( fEnabled ) ; } }
BigDecimal function ( ) { return random ( DEFAULT_CONTEXT ) ; }
Object function ( final String arg0 , final Object arg1 ) { return put ( arg0 , arg1 , null ) ; }
void function ( ) { if ( skyNetNode . getOffline ( ) || parentCoordinator == null ) { return ; } this . treeHandlerDelegator . refreshTreeHandler ( this . skyNetNode , this . coordinatorKey , this . treeHandlerDelegator ) ; }
void function ( final IWidgetLocator arg0 ) { }
Type function ( ) { return superclass ; }
WebArchive function ( ) { return ShrinkWrap . create ( WebArchive . class , MODULE_WEB ) . addClasses ( Log . class ) ; }
void function ( Node arg0 , Graph arg1 ) { if ( arg0 . getLeftChild ( ) != null ) { serialize ( arg0 . getLeftChild ( ) , arg1 ) ; } if ( arg0 . getRightChild ( ) != null ) { serialize ( arg0 . getRightChild ( ) , arg1 ) ; } }
ClassLoader function ( ) { ClassLoader loc0 = Thread . currentThread ( ) . getContextClassLoader ( ) ; if ( loc0 == null ) { loc0 = ClassLoader . getSystemClassLoader ( ) ; } return ( loc0 != null ? loc0 : ClassLoader . getSystemClassLoader ( ) ) ; }
void function ( Iterable < ? extends Writable > arg0 ) { for ( Writable loc0 : arg0 ) { add ( loc0 ) ; } }
GenVector < C > function ( final int arg0 ) { return random ( arg0 , arg0 ) ; }
int function ( ) { return marcador ; }
MathUtil function ( ) { return instance ; }
void function ( ) { tx . begin ( ) ; }
Change function ( ClasspathFixProposal arg0 , ClasspathSpecifier arg1 , Image arg2 ) { Change loc0 = new Change ( arg0 , arg1 ) ; loc0 . addClasspathEntry ( arg2 ) ; return loc0 ; }
void function ( Interpolator arg0 ) { synchronized ( lock ) { if ( ! isActive ( ) ) { start ( ) ; } activeInterpolators . addElement ( arg0 ) ; } }
String function ( AuctionEntry arg0 ) { return arg0 . getEntryId ( ) . toString ( ) ; }
int function ( ) { return index ; }
Map < String , Object > function ( Map < String , Object > arg0 ) { Map < String , Object > loc0 = new HashMap < String , Object > ( ) ; for ( String loc1 : arg0 . keySet ( ) ) { if ( ! StringUtils . isEmpty ( loc1 ) ) { String [ ] loc2 = loc1 . split ( DEFAULT_KEY_AND_VALUE_PAIR_SEPARATOR ) ; loc0 . put ( loc2 [ 0 ] , loc2 [ 1 ] ) ; } } return loc0 ; }
StringBuilder function ( StringBuilder arg0 , char arg1 ) { arg0 . setCharAt ( arg0 . length ( ) - 1 , arg1 ) ; }
void function ( ) { probes = new boolean [ 16 ] ; Arrays . fill ( probes , false ) ; }
Map < String , ArrayList < String >> function ( ) { return values ; }
String [ ] function ( ) { return body ; }
String function ( String arg0 ) { }
Set < Object > function ( ) { return globalMutex ; }
void function ( float arg0 ) { this . offset = arg0 ; }
BigInteger function ( ) { return random ( 0 ) ; }
Dialog function ( Context arg0 , IdialogParameters arg1 , String arg2 , Object arg3 ) { return createRefactoringStatusDialog ( arg0 , arg1 , arg2 , arg3 , null ) ; }
boolean function ( ) { return false ; }
DocumentWrapper function ( DocumentWrapper arg0 ) { DocumentWrapper loc0 = ( DocumentWrapper ) arg0 . clone ( ) ; loc0 . setRowId ( arg0 . getRowId ( ) ) ; return loc0 ; }
T function ( Class < T > arg0 , Object ... arg1 ) { return create ( arg0 , new Object [ arg1 . length ] ) ; }
boolean function ( String arg0 ) { if ( viewerPreferences != null ) { return viewerPreferences . containsKey ( arg0 ) ; } return false ; }
Local < C > function ( String arg0 ) { return parse ( arg0 , null ) ; }
SortedBag < T > function ( Iterable < T > arg0 ) { return new TreeSortedBag < > ( arg0 ) ; }
boolean function ( ) { return enabledMetrics . size ( ) > 0 ; }
void function ( Window arg0 ) { runner = new GUIRunner ( arg0 ) ; }
ISDVInfo function ( ) { return new ISDVInfo ( ) ; }
ITrace2D function ( ) { return m_trace ; }
Image function ( String arg0 , Class arg1 ) { return getImage ( arg0 , arg1 , false ) ; }
void function ( OutputStream arg0 ) { if ( this . executionData == null ) { return ; } arg0 . write ( this . executionData . getData ( ) ) ; }
Residue < C > function ( ) { Residue < C > loc0 = new Residue < C > ( val , ring ) ; return loc0 ; }
short function ( ) { if ( ! isByteArrayComputed ) { computeByteArray ( ) ; isByteArrayComputed = true ; } return ( short ) byteArray . length ; }
void function ( int arg0 ) { deposit ( arg0 , "srini_string" ) ; }
Dialog function ( IDialogModel arg0 , String arg1 , String arg2 ) { return createRefactoringStatusDialog ( arg0 , arg1 , arg2 , null ) ; }
boolean function ( ) { return useThetaStyle ; }
boolean function ( JsonElement arg0 ) { if ( arg0 . hasAttribute ( "srini_string" ) ) { String loc0 = arg0 . getAttribute ( "srini_string" ) ; if ( loc0 . equals ( "srini_string" ) ) { return true ; } } return false ; }
boolean function ( ) { if ( "srini_string" . equals ( mainType ) ) { return true ; } return false ; }
DateTime function ( ) { return toMutableDateTimeISO ( ) . atZone ( getZone ( ) ) ; }
Quotient < C > function ( double arg0 ) { return new Quotient < C > ( Math . abs ( arg0 ) ) ; }
boolean function ( final Class arg0 , final Class arg1 ) { return ( arg0 . isAssignableFrom ( arg1 ) || arg0 . equals ( arg1 ) ) ; }
Limit function ( ) { return new Limit ( ) ; }
IHoverInfo function ( String arg0 , String arg1 , IProgressMonitor arg2 ) { return new WidgetHoverInfo ( arg0 , arg1 , arg2 ) ; }
int function ( ) { return ( int ) Math . round ( Math . min ( x , xGrow ) ) ; }
boolean function ( Block arg0 ) { if ( arg0 . y + Block . HEIGHT > y ) { if ( arg0 . x + Block . WIDTH == x ) { return true ; } } return false ; }
void function ( String arg0 ) { this . rowData = arg0 ; }
int function ( ) { if ( beforeFirst ) { throw new NoSuchElementException ( ) ; } previous = object ; return nextIndex ( ) ; }
void function ( ) { Assert . assertTrue ( "srini_string" , this . slsb . isInjected ( ) ) ; }
Iterator function ( FloatIterator arg0 ) { return arg0 == null ? null : new FloatIterator ( arg0 ) ; }
void function ( TokenProvider arg0 ) { this . tokenProvider = arg0 ; }
Header function ( ) { return myHeader ; }
int function ( ) { return tagNo ; }
byte [ ] function ( byte [ ] arg0 ) { try { return saslClient != null ? saslClient . evaluateResponse ( arg0 ) : new byte [ 0 ] ; } catch ( SaslException loc1 ) { LOG . error ( "srini_string" , loc1 ) ; return arg0 ; } }
Iterator < D > function ( ) { throw new UnsupportedOperationException ( "srini_string" ) ; }
void function ( Composite arg0 ) { fComposite = arg0 ; createFilterControl ( fTextControl , fgClearIconDescriptor ) ; createFilterControl ( fClearButton , fgDisabledClearIconDescriptor ) ; }
JoinSequence function ( Collection arg0 , boolean arg1 , String arg2 , JoinType arg3 , String [ ] arg4 ) { JoinSequence loc0 = createJoinSequence ( arg0 , arg1 , arg2 , arg3 ) ; loc0 . setUseThetaStyle ( arg4 ) ; return loc0 ; }
void function ( @ ArquillianResource ( TxControlServlet . class ) URL arg0 ) { testURL ( arg0 , true , false ) ; }
void function ( String [ ] arg0 ) { printCapitalized ( "srini_string" ) ; }
Exception function ( ) { return this . error ; }
void function ( MetricsAggregate arg0 ) { this . conditionVarition = arg0 ; }
byte [ ] function ( Drawable arg0 ) { if ( arg0 == null ) { return null ; } ByteArrayOutputStream loc0 = new ByteArrayOutputStream ( ) ; arg0 . draw ( loc0 ) ; return loc0 . toByteArray ( ) ; }
void function ( Closeable arg0 ) { try { if ( arg0 != null ) arg0 . close ( ) ; } catch ( IOException loc0 ) { } }
void function ( boolean arg0 ) { if ( arg0 == false ) { throw new IllegalArgumentException ( "srini_string" ) ; } }
Residue < C > function ( Reader arg0 ) { return parse ( arg0 , null ) ; }
float function ( ) { return rise ; }
byte [ ] function ( String arg0 ) { return StringUtils . getBytesUnchecked ( arg0 , CharEncoding . UTF_16 ) ; }
void function ( ) { this . grid = null ; if ( hasCombined ) { generateNextCell ( ) ; } }
Student function ( String arg0 ) { File loc0 = new File ( arg0 ) ; return readStudent ( loc0 ) ; }
int function ( ) { return state ; }
void function ( boolean arg0 ) { this . payloadSizeEstimatedWhenAdding = arg0 ; }
void function ( List < Integer > arg0 ) { taskIdsQueue . addAll ( arg0 ) ; takeLock . lock ( ) ; try { notEmpty . signal ( ) ; } finally { takeLock . unlock ( ) ; } }
void function ( long [ ] arg0 , int arg1 ) { _list . toArray ( arg0 , arg1 , size ( ) ) ; }
int function ( ) { return type ; }
void function ( Validator arg0 , Tag arg1 , String arg2 ) { if ( arg1 == null ) { throw new XmlStringBuilderException ( "srini_string" ) ; } arg0 . addRule ( arg1 , "srini_string" ) ; }
boolean function ( ) { return num == 1 ; }
String function ( File arg0 ) { return new FileReader ( arg0 ) . readLine ( ) ; }
UUID function ( byte [ ] arg0 ) { if ( isPsshAtom ( arg0 ) ) { byte [ ] loc0 = new byte [ 16 ] ; System . arraycopy ( arg0 , 8 , loc0 , 0 , 8 ) ; return new UUID ( loc0 ) ; } return null ; }
List function ( ) { return this . list ; }
void function ( Component arg0 ) { this . component = arg0 ; }
void function ( ) { next . close ( ) ; }
String function ( IPlugIn arg0 ) { if ( arg0 == null ) { return null ; } return arg0 . getIdentifier ( ) ; }
PMML function ( InputStream arg0 ) { Objects . requireNonNull ( arg0 ) ; return IOUtil . unmarshal ( arg0 , PMML . class ) ; }
int function ( ) { return classInfo . hashCode ( ) ; }
boolean function ( IProject arg0 ) { if ( arg0 == null ) return false ; return _exists && ! _project . equals ( arg0 ) ; }
void function ( String arg0 ) { this . style = arg0 ; }
void function ( final HttpParams arg0 , final boolean arg1 ) { Args . notNull ( arg0 , "srini_string" ) ; arg0 . setBooleanParameter ( CoreConnectionPNames . SO_KEEPALIVE , arg1 ) ; }
void function ( int arg0 , int arg1 , int arg2 ) { if ( arg0 == EMPTY ) { arg0 = arg1 ; arg1 = arg2 ; } else { arg0 = arg0 + 1 ; arg1 = arg1 + 1 ; if ( arg0 >= width ) { arg0 = width - 1 ; arg2 = arg2 + 1 ; } else if ( arg2 >= height ) { arg2 = height - 1 ; arg0 = arg0 + 1 ; arg2 = arg2 + 1 ; } }
Set < ResourceGroupEntity > function ( String arg0 ) { return resourceGroupService . loadAllResourcesByType ( arg0 ) ; }
void function ( ListElement arg0 ) { listElements . add ( arg0 ) ; }
Object [ ] [ ] function ( ) { return columnNames ; }
void function ( Class < E > arg0 , E arg1 ) { if ( handlers . containsKey ( arg0 ) ) { handlers . get ( arg0 ) . handle ( arg1 ) ; } else { arg1 . dispatch ( ) ; } }
void function ( boolean arg0 ) { this . useCriterion4 = arg0 ; }
void function ( Author arg0 ) { addContent ( arg0 , CREATOR ) ; }
void function ( ) { _total = 0 ; Iterator loc0 = _map . values ( ) . iterator ( ) ; while ( loc0 . hasNext ( ) ) { DefaultMapItem loc1 = ( DefaultMapItem ) loc0 . next ( ) ; if ( ! loc1 . isCompleted ( ) ) { loc0 . remove ( ) ; } else { _total += loc1 . count ( ) ; } } _current = 0 ; }
String function ( ) { return "srini_string" ; }
Identifier function ( String arg0 , String arg1 , String arg2 , String arg3 , String arg4 ) { return new BasicIdentifier ( arg0 , arg1 , arg2 , arg3 , arg4 ) ; }
void function ( ) { sClipboardQueue . clear ( ) ; }
String function ( String arg0 ) { return arg0 ( null , arg0 , null ) ; }
ITypeHierarchy function ( IType arg0 ) { if ( arg0 == null ) return null ; return findTypeHierarchyInCache ( arg0 ) ; }
void function ( ) { fContent = null ; fIsHashCached = false ; }
int function ( List < Term > arg0 ) { int loc0 = 0 ; for ( Term loc1 : arg0 ) { loc0 = loc0 + loc1 . getValue ( ) ; } return loc0 ; }
void function ( ) { }
void function ( double arg0 , double arg1 ) { this . leftBound = arg0 ; this . rightBound = arg1 ; fireBoundsChangeEvent ( ) ; }
ParentTree < Tag > function ( Tag arg0 ) { return new ParentTree < Tag > ( arg0 ) ; }
void function ( ) { final Stack < Element > loc0 = workerContextImpl . getStackOwner ( ) ; assertNotNull ( loc0 ) ; assertTrue ( li . end ( ) instanceof ListItem ) ; }
void function ( Collection arg0 , Object ... arg1 ) { final Iterator loc0 = arg0 . iterator ( ) ; while ( loc0 . hasNext ( ) ) { final Object loc1 = loc0 . next ( ) ; if ( ! ( loc1 instanceof Object ) ) { fail ( "srini_string" + loc1 + "srini_string" ) ; } } }
int function ( String arg0 , String arg1 ) { return getInteger ( arg0 , arg1 , 1 ) ; }
int function ( ASTNode arg0 ) { switch ( arg0 . getSelectionMode ( ) ) { case BEFORE : return INTERSECTS ; case AFTER : return BEFORE ; case SELECTED : return AFTER ; case BEFORE_SELECTED : return BEFORE_SELECTED ; case AFTER_SELECTED : return AFTER_SELECTED ; default : return 0 ; } }
void function ( boolean arg0 ) { started_ = arg0 ; }
IJavaSearchScope function ( IJavaScriptElement arg0 ) { return RefactoringScopeFactory . create ( arg0 , true ) ; }
Object function ( BigInteger arg0 ) { Object loc0 = _curr . get ( arg0 ) ; if ( loc0 == null ) { loc0 = init ( arg0 ) ; _curr . put ( arg0 , loc0 ) ; } return loc0 ; }
InputStream function ( String arg0 , String arg1 , AuthenticatedURL . Token arg2 , String arg3 ) { return execute ( arg0 , arg1 , arg2 , arg3 , IF_NONE_MATCH ) ; }
void function ( ) { TopLevelBean loc0 = lookup ( "srini_string" , TopLevelBean . class ) ; loc0 . induceCreationViaJNDILookup ( ) ; }
int function ( int arg0 ) { delete ( arg0 ) ; return delete ( arg0 ) ; }
String function ( ) { return id ; }
long function ( ) { return allocationLimit . get ( ) ; }
int function ( ) { return addends . size ( ) ; }
ColumnMetaData [ ] function ( ) { return metaData . rootColumns ( ) ; }
Residue < C > function ( ) { return negate ( 1 ) ; }
String function ( ) { return baseID ; }
Set < Asset > function ( Set < Asset > arg0 ) { return arg0 . stream ( ) . filter ( asset -> ! asset . getVendor ( ) . isEmpty ( ) ) . collect ( toSet ( ) ) ; }
String function ( ) { return this . catalogKey ; }
RDD < Citations > function ( RDD < Citations > arg0 ) { if ( ! arg0 . isVector ( ) ) { throw new IllegalArgumentException ( "srini_string" ) ; } return arg0 . map ( new Function < Citations , Citations > ( ) { @ Override public Citations apply ( Citations arg1 ) { return arg1 . getCitations ( ) ; } } ) ; }
void function ( Figure arg0 ) { this . _message = arg0 ; }
IntListIterator function ( ListIterator arg0 ) { if ( arg0 == null ) { return null ; } return new IntListIterator ( arg0 ) ; }
Closure function ( Closure arg0 ) { return new ClosureWrapper ( arg0 ) ; }
int function ( ) { return val . size ( ) ; }
boolean function ( final HttpMessage arg0 ) { return isResponseFresh ( arg0 ) || getExpiresValue ( arg0 ) <= 0 ; }
InputStream function ( InputStream arg0 , long arg1 , int arg2 ) { return new NioInputStream ( arg0 , arg1 , arg2 ) ; }
boolean function ( ) { return instantiated ; }
void function ( int arg0 ) { this . keyPopularity . add ( arg0 ) ; if ( this . keyPopularity . size ( ) > 1 ) { this . rankPopularity . clear ( ) ; this . rankPopularity . addAll ( this . keyPopularity ) ; } }
Hessian2Deserializer function ( ) { return new Hessian2Deserializer ( _serializerFactory ) ; }
void function ( IWidgetAdapter arg0 ) { adapters . put ( arg0 . getClass ( ) , arg0 ) ; }
void function ( double arg0 ) { this . numHosts = arg0 ; }
void function ( CryptoRecord arg0 ) { arg0 . populatePayload ( ) ; }
void function ( Object arg0 ) { if ( is12 ) { getLogger ( ) . log ( FQCN , ( Priority ) Level . TRACE , arg0 , null ) ; } else { getLogger ( ) . log ( FQCN , Level . TRACE , arg0 ) ; } }
boolean function ( ) { return ( langTable [ MATRA_AA ] == langTable [ MATRA_AI ] || langTable [ MATRA_HLR ] == langTable [ MATRA_HLRR ] ) ; }
void function ( String arg0 ) { this . fileName = arg0 ; }
Throwable function ( ) { return state . getThrowable ( ) ; }
boolean function ( T arg0 , boolean arg1 ) { try { if ( arg0 == null ) return false ; withTransaction ( arg0 , arg1 , "srini_string" ) ; return true ; } catch ( SQLException loc0 ) { throw new RuntimeException ( "srini_string" , loc0 ) ; } }
List < Tag > function ( Tag arg0 ) { List < Tag > loc0 = new ArrayList < Tag > ( ) ; if ( arg0 != null ) { for ( Tag loc1 : arg0 . getParentTags ( ) ) { loc0 . add ( loc1 ) ; } } return loc0 ; }
void function ( ) { DefaultValidatorFactory loc0 = slsb . buildDefaultValidatorFactory ( ) ; Assert . assertTrue ( "srini_string" , loc0 instanceof DefaultValidatorFactory ) ; }
Collection function ( ) { return bag ; }
int function ( ) { return accounts . length ; }
void function ( String arg0 ) { }
void function ( int arg0 , int arg1 ) { _robot . keyDown ( arg0 , arg1 ) ; }
Object function ( Object arg0 , Closure arg1 ) { if ( arg1 == null ) { return arg0 ; } else { try { return iClosure . call ( arg0 ) ; } catch ( Exception loc0 ) { return loc0 ; } } }
int function ( ) { return coveredBranches ; }
AlgebraicNumber < C > function ( ) { return new AlgebraicNumber < C > ( java . lang . Math . gcd ( getVal ( ) , getVal ( ) ) ) ; }
T function ( ) { return key ; }
void function ( final GeneralArchive < ? > arg0 , final XACMLPolicySet arg1 ) { addXACMLPoliciesToArchive ( arg0 , arg1 , SUBST_SUBJECT_ID ) ; }
LinearLayout function ( String arg0 ) { LinearLayout loc0 = new LinearLayout ( ) ; loc0 . setLayoutData ( new Object [ ] { arg0 } ) ; return loc0 ; }
MessageSource function ( ) { return messageSourceMock ; }
boolean function ( String arg0 ) { return _values . containsKey ( arg0 ) ; }
Integer function ( ) { return precision ; }
void function ( SemanticAssert arg0 , String arg1 , String arg2 ) { assertEquals ( arg0 , arg1 , arg2 , null ) ; }
void function ( Color arg0 ) { color = arg0 ; Canvas . getInstance ( ) . repaint ( ) ; }
List < PropertyDeclaration > function ( ) { if ( properties == null ) { properties = new ArrayList < PropertyDeclaration > ( ) ; } return this . properties ; }
void function ( Element arg0 , ComplexType arg1 ) { writeSimpleType ( arg0 , arg1 . toString ( ) ) ; }
String function ( ) { return getIdentitiesZNode ( ) + "srini_string" ; }
void function ( KeyStore arg0 , String arg1 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( REVIEW_MESSAGE ) ; } if ( arg1 == null ) { throw new IllegalArgumentException ( REVIEW_MESSAGE ) ; } }
CQLStatementTupleMapper function ( Tuple arg0 , String arg1 , Object ... arg2 ) { return new CQLStatementTupleMapper ( arg0 , arg1 , arg2 ) ; }
byte function ( int arg0 ) { return list . get ( arg0 ) ; }
void function ( ) { }
void function ( ) { String loc0 = dao . getCustomerSchemaName ( ) ; dao . deleteCustomerSchema ( loc0 ) ; }
boolean function ( ) { return percentage ; }
boolean function ( ) { return session != null && session . isConnectedToSession ( ) ; }
IWidgetLocator function ( T arg0 ) { return new WidgetLocator ( arg0 ) ; }
int [ ] function ( MVariable arg0 ) { List < MStatement > loc0 = new ArrayList < > ( ) ; for ( MStatement loc1 : statements ) { if ( loc1 . getInputs ( ) . contains ( arg0 ) ) { loc0 . add ( loc1 ) ; } } int loc2 = 0 ; for ( MStatement loc1 : loc0 ) { if ( ! loc1 . isInput ( ) ) { loc2 ++ ; } } return loc2 ; }
String function ( ) { if ( this . body != null ) { return this . body . exec ( ) ; } return null ; }
void function ( ) { MessageSender loc0 = new MessageSender ( ) ; loc0 . sendMessage ( "srini_string" ) ; }
void function ( mg . ConstPool arg0 , String arg1 ) { if ( ! is_local_variable_type_table ( arg0 ) ) { return ; } arg0 . remove_const_table_attribute ( arg1 ) ; }
Document function ( ) { return updateBuffer ( false ) ; }
void function ( final File arg0 , final File arg1 ) { compareFiles ( arg0 , arg1 , CVSFILTER ) ; }
Rectangle2D function ( ) { return new Rectangle2D . Float ( startPoint . x , startPoint . y , endPoint . x , endPoint . y ) ; }
void function ( ) { File loc0 = new File ( this . testFolder . getRoot ( ) , "srini_string" ) ; assertFalse ( loc0 . exists ( ) ) ; new FileWriter ( loc0 , "srini_string" ) . write ( "srini_string" ) ; assertTrue ( loc0 . exists ( ) ) ; }
UnsupportedOperationException function ( ) { return new UnsupportedOperationException ( "srini_string" ) ; }
Asn1ParseResult function ( byte [ ] arg0 ) { return decode ( arg0 , 0 , arg0 . length ) ; }
Duration function ( Timestamp arg0 , Duration arg1 ) { return new Duration ( arg0 . getSeconds ( ) - arg1 . getSeconds ( ) , arg0 . getNanos ( ) - arg1 . getNanos ( ) ) ; }
void function ( int arg0 , String arg1 ) { defaults . put ( arg0 , arg1 ) ; }
Object function ( ) { return debug ; }
ContextEntity function ( ContextEntity arg0 ) { if ( arg0 == null ) { return globalContext ; } return arg0 ; }
String function ( ) { return classInfo . name ( ) ; }
byte [ ] function ( InputStream arg0 ) { if ( consumedLength == - 1 ) { byte [ ] loc0 = new byte [ 1024 ] ; arg0 . read ( loc0 ) ; consumedLength = loc0 . length ; } return loc0 ; }
int function ( ) { return 37 * getClass ( ) . hashCode ( ) ; }
Token [ ] function ( ) { return getTokens ( null ) ; }
void function ( boolean arg0 ) { fStatementsRecovery = arg0 ; }
boolean function ( final GenPolynomial < C > arg0 ) { return getPolynomial ( ) . equals ( arg0 . getPolynomial ( ) ) ; }
Set function ( ) { return composites ; }
void function ( ) { _size = _size + 1 ; }
void function ( Throwable arg0 ) { invalidScriptError = arg0 ; }
void function ( File arg0 , String arg1 ) { Preconditions . checkNotNull ( arg0 ) ; try ( BufferedWriter loc0 = Files . newWriter ( arg0 , StandardCharsets . UTF_8 ) ) { loc0 . write ( arg1 ) ; } }
boolean function ( Object arg0 ) { if ( ! ( arg0 instanceof JcVal ) ) return false ; JcVal loc0 = ( JcVal ) arg0 ; return compareTo ( loc0 . val ) == 0 ; }
int function ( ) { return stack . size ( ) ; }
boolean function ( ) { return type == Type . VIRTUAL_MACHINE ; }
ResourceEditPropertyBuilder function ( String arg0 ) { this . fcExternalLink = arg0 ; return this ; }
boolean function ( ) { return isKeyOptional ; }
SourceViewer function ( ) { return fSourceViewer ; }
List < List < VectorXZ >> function ( Collection < Triangle > arg0 ) { return texCoordLists ( arg0 . toArray ( new Triangle [ arg0 . size ( ) ] ) ) ; }
void function ( EObject arg0 ) { if ( EcoreUtil . equals ( arg0 . eResource ( ) , PermissionService . class ) ) { String loc0 = arg0 . eClass ( ) . getEPackage ( ) . getNsURI ( ) ; verifyChuckNorris ( loc0 ) ; } else { verifyDeletableByOwner ( arg0 ) ; } }
List < T > function ( Enumeration < ? > arg0 ) { return new ArrayList < T > ( arg0 ) ; }
int function ( ) { return size ; }
int function ( ) { if ( ! allowTcp ( ) ) { return - 1 ; } return checkGetKdcTcpPort ( startupOptions , kdcConfig . getTcpPort ( ) ) ; }
String function ( Class arg0 ) { return arg0 . getName ( ) ; }
boolean function ( final Script arg0 ) { boolean loc0 = this . list . remove ( arg0 ) ; if ( loc0 ) { this . list . trimToSize ( ) ; } return loc0 ; }
void function ( ) { if ( buffer [ pointer ] ) { buffer [ pointer ] = false ; } }
ShortListIterator function ( final ShortListIterator arg0 ) { return UnmodifiableShortListIterator . unmodifiableShortListIterator ( arg0 ) ; }
void function ( ) { output = new PrintStream ( System . out , true ) ; error = new PrintStream ( System . err , true ) ; singleton = new FileLoggerModule ( ) ; }
boolean function ( double arg0 , double arg1 ) { if ( ! isSubset ( arg0 , arg1 ) ) return false ; if ( arg0 > arg1 ) return true ; return false ; }
String function ( ) { return name ; }
ClassLoader function ( ) { return ( getCatalog ( ) != null ? getCatalog ( ) . getClassLoader ( ) : null ) ; }
Local < C > function ( int arg0 ) { return sqrt ( new Local < C > ( arg0 ) ) ; }
boolean function ( ) { return false ; }
T function ( List < T > arg0 ) { if ( arg0 . isEmpty ( ) ) { return null ; } return arg0 . get ( Random . nextInt ( arg0 . size ( ) ) ) ; }
boolean function ( ) { return _freeStack . get ( ) != 0 ; }
ClientTopology function ( String arg0 , int arg1 , HazelcastInstance arg2 ) { return new ClientTopology ( arg0 , arg1 , arg2 ) ; }
Object function ( Object arg0 , Class < ? > arg1 ) { if ( ! ( arg0 instanceof Constant ) ) { throw new IllegalArgumentException ( "srini_string" + arg0 + "srini_string" + arg1 + "srini_string" ) ; } return ( ( Constant ) arg0 ) . getValue ( arg1 ) ; }
void function ( File arg0 ) { if ( arg0 . isSymbolicLink ( ) ) { deleteOrThrow ( arg0 ) ; } else { arg0 . delete ( ) ; } }
void function ( ) { singleton = null ; }
HashCodeBuilder function ( float arg0 ) { return appendFloat ( arg0 , true ) ; }
void function ( Integer arg0 ) { this . deptId = arg0 ; }
CQLStatementTupleMapper function ( String arg0 ) { return arg0 ( arg0 , null ) ; }
boolean function ( ) { boolean loc0 = false ; if ( po != null ) { loc0 = po . testContent ( context ) ; } return loc0 ; }
void function ( ) { cache . clear ( ) ; }
K function ( ) { if ( k == - 1 ) return null ; return kSmallest . getKey ( ) ; }
void function ( GridBagConstraints arg0 ) { this . constraints = arg0 ; }
MetricsAggregate function ( ) { return peerVariation ; }
boolean function ( Object arg0 ) { Residue < C > loc0 = ( Residue < C > ) arg0 ; if ( this == loc0 ) return true ; if ( ! ( arg0 instanceof Residue < C > ) ) return false ; Residue < C > loc1 = ( Residue < C > ) arg0 ; return ( this . isField && loc1 . isField && this . modul == loc1 . modul ) ; }
boolean function ( String arg0 , char arg1 , char arg2 ) { if ( arg0 . length ( ) != 2 && arg1 . length ( ) != 2 ) { return false ; } else if ( arg0 . charAt ( 1 ) > arg1 . charAt ( 1 ) && arg0 . charAt ( 0 ) > arg2 ) { return true ; } return false ; }
void function ( String arg0 ) { this . outOfServiceByRelease = arg0 ; }
LoadPlan function ( String arg0 ) { return new LoadPlan ( arg0 , null ) ; }
void function ( Document ... arg0 ) { for ( Document loc0 : arg0 ) { if ( loc0 != null ) { collection . add ( loc0 ) ; } } }
BigDecimal function ( java . math . BigDecimal arg0 ) { this . val = arg0 ; return this ; }
int function ( ) { return iterationCount ; }
void function ( WidgetLocator arg0 ) { _parentInfo = arg0 ; }
void function ( ) { list . clear ( ) ; }
void function ( ) { checkLoopback ( ) ; delegate . writeLock ( ) . lock ( ) ; }
void function ( RenderContext arg0 ) { for ( RenderFilter loc0 : filters ) { loc0 . render ( arg0 ) ; } }
Object function ( Class arg0 ) { return map . remove ( arg0 ) ; }
CompositeData function ( ) { try { return new CompositeDataSupport ( COMPOSITE_TYPE , ITEM_NAMES , new Object [ ] { roleName , description , fetchCount , recreateCount , updateCount , removeCount } ) ; } catch ( OpenDataException loc0 ) { throw new RuntimeException ( loc0 ) ; } }
int function ( int arg0 ) { return ( arg0 < MAX_RUNNING_EVENTS ) ? 1 : 0 ; }
List function ( String arg0 ) { ArrayList loc0 = new ArrayList ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0 , _delimeter ) ; while ( loc1 . hasMoreTokens ( ) ) { loc0 . add ( loc1 . nextToken ( ) ) ; } return loc0 ; }
Point function ( ) { return new Point ( startNode . getCenter ( ) , endNode . getCenter ( ) ) ; }
ArrayList < GenPolynomial < C >> function ( ) { return P ; }
void function ( BufferFlag arg0 ) { flags . add ( arg0 ) ; }
boolean function ( T arg0 , List < T > arg1 ) { for ( T loc0 : arg1 ) { if ( arg0 . equals ( loc0 ) ) { return true ; } } return false ; }
UnivPowerSeries < C > function ( BigInteger arg0 ) { return random ( ) . constant ( arg0 ) ; }
void function ( Change arg0 ) { fParent = arg0 ; }
int function ( int arg0 ) { return - 1 ; }
PdfImageObject function ( ) { return imageObject ; }
void function ( Object arg0 ) { removeCallback ( instances , arg0 ) ; }
void function ( ) { if ( mDidChange ) { mDidChange = false ; mMenu . post ( mMenuItemClickListener ) ; } }
void function ( final String arg0 ) { m_isMajorTick = true ; m_label = arg0 ; }
String function ( int arg0 , int arg1 ) { String loc0 = arg0 + "srini_string" + arg1 ; return StringUtils . capitalize ( loc0 ) ; }
boolean function ( final Menu arg0 ) { return arg0 . getMenu ( ) instanceof SwTHierarchy ; }
ConditionMonitor function ( ) { return INSTANCE ; }
void function ( Object arg0 , Object arg1 , Object arg2 ) { try { Field loc0 = arg0 . getClass ( ) . getDeclaredField ( arg1 ) ; loc0 . setAccessible ( true ) ; loc0 . set ( arg0 , arg2 ) ; } catch ( Exception loc0 ) { throw new RuntimeException ( "srini_string" + arg1 + "srini_string" + arg0 , loc0 ) ; } }
HashMap < BigDecimal , MetricsSubCoordinatorInfo > function ( ) { return listOfSubCoordinators ; }
boolean function ( Object arg0 , Object arg1 ) { if ( arg0 == null ) { return arg1 == null ; } return arg0 . equals ( arg1 ) ; }
Duration function ( int arg0 ) { return withWindowLength ( Duration . ofDays ( arg0 ) ) ; }
void function ( ) { SecurityConfiguration . getApplicationPolicy ( "srini_string" ) ; }
Map < String , String > function ( ) { return parasMap ; }
Boolean function ( ResourceEntity arg0 , Release arg1 ) { return isBestMatching ( arg0 , arg1 , null ) ; }
Owner function ( ) { return owner ; }
String function ( ) { if ( hostname != null ) { return hostname ; } else { return toURI ( ) . getHostAddress ( ) . toString ( ) ; } }
void function ( String arg0 ) { add_implied_vis ( arg0 ) ; }
TLinkable function ( ) { return _next ; }
int function ( ) { return ( available - leased ) + leased ; }
List < String > function ( ) { if ( tags == null ) { tags = new ArrayList < String > ( ) ; } return this . tags ; }
void function ( PdfReader arg0 , PdfWriter arg1 ) { fc . addDocument ( arg0 , arg1 ) ; }
int function ( ) { return ( int ) ( val . hashCode ( ) * 31 ) ; }
List < Sentence > function ( String arg0 , boolean arg1 ) { return parse ( arg0 , arg1 , null ) ; }
Message function ( ) { try { return blkQueue . take ( ) ; } catch ( InterruptedException loc0 ) { LOGGER . error ( "srini_string" , loc0 ) ; return null ; } }
List < ColumnMetaData > function ( Schema arg0 ) { return columns . get ( arg0 ) ; }
VectorXYZ function ( final double arg0 , final double arg1 , final double arg2 , final double arg3 ) { final double loc0 = angleTo ( arg0 , arg1 , arg2 ) ; final double loc1 = angleTo ( arg3 , arg0 , arg1 , arg2 ) ; return new VectorXYZ ( x * loc0 + y * loc1 + z * loc1 , z * loc0 + x * loc1 + y * loc1 + z * loc0 ) ; }
boolean function ( ) { if ( tokeniser == null ) tokeniser = new PRTokeniser ( ) ; return tokeniser . nextToken ( ) ; }
void function ( Long arg0 ) { this . endIp = arg0 ; }
List < EntityAndPendingNotifications < BE , ? >> function ( ) { EntityAndPendingNotifications < BE , ? > loc0 = getSentNotifications ( ) ; List < EntityAndPendingNotifications < BE , ? >> loc1 = new ArrayList < EntityAndPendingNotifications < BE , ? >> ( loc0 . size ( ) ) ; for ( EntityAndPendingNotifications < BE , ? > loc2 : loc0 ) { loc1 . add ( loc2 ) ; } return loc1 ; }
List < WPTreeNode > function ( WPTreeNode arg0 ) { if ( arg0 == null ) { return Collections . emptyList ( ) ; } return children ; }
boolean function ( int arg0 ) { return ( indStore != null ) ? indStore . containsKey ( arg0 ) : false ; }
int function ( ) { return i_initialSize ; }
void function ( ITestIdentifier arg0 ) { if ( _runningTest != null ) { _runningTest . start ( arg0 ) ; } }
void function ( java . awt . Component arg0 ) { bugList . add ( arg0 ) ; }
void function ( ) { started = true ; }
int function ( ) { return size ; }
boolean function ( ) { return locator . isShowing ( ui ) ; }
void function ( String arg0 , String ... arg1 ) { negatedParameters . add ( new NegatedParameter ( arg0 , arg1 ) ) ; }
GenVector < C > function ( GenVector < C > arg0 ) { return leftScalarProduct ( arg0 ) . rightScalarProduct ( arg0 ) ; }
List < String > function ( File arg0 ) { return getFactory ( ) . getNamespaces ( arg0 ) ; }
String function ( ) { return null ; }
BigInteger function ( ) { checkBounds ( ) ; return bigInt ; }
BigInteger function ( ) { return new BigInteger ( - 1 ) ; }
Iterator < PptTopLevel > function ( ) { return asCollection ( ppt_all_iterator ( ) ) ; }
BigDecimal function ( java . io . Reader arg0 ) { return parse ( arg0 , DEFAULT_CONTEXT ) ; }
void function ( ) { example . advanceAnimation ( ) ; }
List function ( String arg0 ) { ArrayList loc0 = new ArrayList ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0 , _delimeter ) ; while ( loc1 . hasMoreTokens ( ) ) { loc0 . add ( loc1 . nextToken ( ) ) ; } return loc0 ; }
void function ( ) { name . unregister ( ) ; server . unregisterMBean ( name ) ; }
boolean function ( String arg0 ) { return arg0 . length ( ) > 3 && arg0 . charAt ( 3 ) == '-' ; }
void function ( int arg0 ) { int loc0 = binarySearch ( arg0 ) ; if ( loc0 >= 0 ) { mData [ loc0 ] = DELETED ; mGarbage = true ; } }
byte [ ] function ( ) { return data ; }
boolean function ( List < Check > arg0 , List < Check > arg1 ) { if ( arg0 . size ( ) != arg1 . size ( ) ) { return false ; } int loc0 = 0 ; for ( Check loc1 : arg0 ) { if ( loc1 . getFailureIndex ( ) != arg1 . get ( loc0 ) . getFailureIndex ( ) ) { return false ; } loc0 ++ ; } return true ; }
boolean function ( ) { return false ; }
boolean function ( Class < ? > arg0 ) { return isPrimitive ( arg0 ) ; }
HttpRequestHandler function ( final String arg0 ) { return this . matcher . matches ( arg0 ) ? this . matcher . next ( ) : null ; }
Iterable4 function ( final Iterable4 arg0 ) { return flatten ( arg0 , Object :: iterator ) ; }
void function ( Lockscope arg0 ) { this . lockscope = arg0 ; }
void function ( RatNum arg0 ) { checkRep ( arg0 ) ; this . numer = arg0 . numer ; this . denom = arg0 . denom ; }
int function ( CharSequence arg0 , CharSequence arg1 ) { return compareCharacter ( arg0 ) - compareCharacter ( arg1 ) ; }
void function ( int arg0 ) { this . n = arg0 ; }
void function ( String arg0 ) { this . links . add ( arg0 ) ; }
Resourcetype function ( ) { return resourcetype ; }
String function ( ) { return m_Language ; }
double function ( double arg0 ) { if ( arg0 <= 0.0 ) { throw new IllegalArgumentException ( "srini_string" ) ; } return 1.0 / ( 1.0 + Math . exp ( - arg0 ) ) ; }
void function ( Test arg0 ) { fTests . addElement ( arg0 ) ; }
void function ( Closure arg0 ) { if ( arg0 == null ) { throw new NullPointerException ( ) ; } for ( int loc0 = 0 ; loc0 < iPredicates . length ; loc0 ++ ) { if ( iPredicates [ loc0 ] . evaluate ( arg0 ) ) { return ; } } }
Property < V > function ( Class < ? > arg0 , String arg1 ) { return getPrototype ( arg0 ) . createProperty ( arg1 ) ; }
Throwable function ( ) { return cause ; }
String function ( Lang arg0 , String arg1 ) { Set < String > loc0 = stopwords . get ( arg0 ) ; if ( loc0 == null ) { return arg1 ; } else { return loc0 . contains ( arg1 ) ? arg1 : null ; } }
PdfIndirectReference function ( PdfDictionary arg0 ) { if ( arg0 != null ) { views . put ( arg0 . getName ( ) , arg0 ) ; } return this ; }
int function ( int arg0 ) { return arg0 % ( hashArray . length * 5 ) ; }
List < T > function ( List < T > arg0 , Transformer < T , T > arg1 ) { List < T > loc0 = new ArrayList < T > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 . size ( ) ; loc1 ++ ) { loc0 . add ( arg1 . transform ( arg0 . get ( loc1 ) ) ) ; } return loc0 ; }
byte [ ] function ( ) { int loc0 = buf . length ; byte [ ] loc1 = new byte [ loc0 ] ; System . arraycopy ( buf , 0 , loc1 , 0 , pos ) ; return loc1 ; }
Person function ( ) { return built ; }
byte [ ] function ( ) { return data ; }
void function ( ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( String loc1 : files ) { loc0 . add ( loc1 ) ; } files = loc0 ; }
String function ( ) { return cacheName ; }
GenMatrix < C > function ( ) { return random ( 1.0f ) ; }
void function ( int arg0 ) { this . level = arg0 ; }
GenVector < C > function ( ) { return ZERO ; }
String function ( ) { return order + "srini_string" + var ; }
ResourceEditPropertyBuilder function ( Integer arg0 ) { this . cardinalityProperty = arg0 ; return this ; }
ClassLoader function ( ClassLoader arg0 ) { if ( arg0 == null ) { arg0 = ClassLoader . getSystemClassLoader ( ) ; } if ( arg0 == null ) { arg0 = Thread . currentThread ( ) . getContextClassLoader ( ) ; } return ( arg0 != null ? arg0 : ClassLoader . getSystemClassLoader ( ) ) ; }
Object function ( ) { return last . getKey ( ) ; }
void function ( ) { }
Predicate function ( Predicate [ ] arg0 ) { return new Predicate [ arg0 . length ] ; }
String function ( long arg0 ) { return arg0 / UNIT_MILLISECONDS + "srini_string" ; }
boolean function ( ) { return iterator . hasNext ( ) ; }
void function ( ValueChangeEvent arg0 ) { String loc0 = arg0 . getNewValue ( ) . toString ( ) ; if ( loc0 . contains ( "srini_string" ) ) { gui . removeValueChangeListener ( this ) ; } gui . repaint ( ) ; }
int function ( ) { return nLiveMethods ; }
void function ( Vector2f arg0 ) { rotateY ( arg0 . x ) ; rotateZ ( arg0 . y ) ; }
void function ( String arg0 ) { this . clusterId = arg0 ; }
Message function ( ByteBuffer arg0 , MessageType arg1 ) { Message loc0 = new Message ( arg0 ) ; loc0 . type = arg1 ; loc0 . data = arg0 . slice ( ) ; return loc0 ; }
SummaryStatistics function ( ) { return new SummaryStatistics ( ) ; }
Object function ( ) { return childFirst ; }
void function ( ) { if ( ! isTimerRunning ( ) ) { theTimer = new Timer ( ) ; theTimer . start ( ) ; } }
void function ( ) { Widget loc0 = _tableTester . testElement ( ) ; assertTrue ( loc0 != null ) ; _tableTester . waitForVisible ( loc0 , REVEAL_WAIT ) ; }
String function ( ) { return stack . toString ( ) ; }
String function ( String arg0 ) { char loc0 = arg0 . charAt ( 0 ) ; if ( loc0 == '/' ) { arg0 = arg0 . substring ( 1 ) ; } return arg0 ; }
String [ ] function ( ) { String [ ] loc0 = new String [ cellArray . length ] ; for ( int loc1 = 0 ; loc1 < loc0 . length ; loc1 ++ ) { loc0 [ loc1 ] = cellArray [ loc1 ] . toString ( ) ; } return loc0 ; }
String function ( String arg0 ) { String loc0 = MAP . get ( arg0 ) ; if ( loc0 != null ) { return loc0 ; } else { return arg0 ; } }
Object function ( ) { if ( myList == null ) throw new IndexOutOfBoundsException ( ) ; return myList . get ( myList . size ( ) - 1 ) ; }
Map < Method , InterceptorFactory > function ( ) { return componentInterceptors ; }
CouchDB function ( ) { return Mockito . mock ( CouchDB . class ) ; }
void function ( Class arg0 , Parser arg1 ) { if ( parsers . containsKey ( arg0 ) ) { return ; } else { Parser loc0 = findParser ( arg0 ) ; parsers . put ( arg0 , loc0 ) ; } }
List < MetricsAggregate > function ( ) { return metricsHistory ; }
Label function ( ) { return defaultTarget ; }
boolean function ( String arg0 , String arg1 ) { return arg0 . startsWith ( arg1 ) && arg0 . endsWith ( arg1 ) ; }
void function ( ) { }
DoubleListIterator function ( ListIterator arg0 ) { if ( arg0 == null ) { return null ; } return new DoubleListIterator ( arg0 ) ; }
String [ ] function ( ) { return new String [ 0 ] ; }
HandlerMethodArgumentResolver function ( ) { return new HandlerMethodArgumentResolver ( ) ; }
void function ( Region arg0 ) { if ( fIsEclipseNLS ) { fTagPosition = arg0 ; fIsEclipseNLS = false ; } }
void function ( String [ ] arg0 ) { printCapitalized ( "srini_string" ) ; }
String function ( ) { return name ; }
IJavaScriptElement function ( IResource arg0 ) { Assert . isTrue ( arg0 . exists ( ) , "srini_string" ) ; return new JavaScriptElement ( elementToHandle ( arg0 ) ) ; }
CssResolver function ( ) { return ResolverManager . getResolver ( ) ; }
StatementBuilder function ( ) { builder . append ( "srini_string" ) ; return this ; }
BigInteger function ( ) { return random ( ) . random ( ) ; }
void function ( T arg0 ) { checkState ( started , "srini_string" ) ; if ( isProcessing ) { throw new IllegalStateException ( "srini_string" ) ; } queuedEvents . add ( arg0 ) ; }
int function ( D arg0 , D arg1 ) { int loc0 = 0 ; for ( D loc1 : arg0 ) { if ( isSubset ( arg1 , loc1 ) ) { loc0 ++ ; } } return loc0 ; }
short function ( int arg0 ) { return list . getShort ( arg0 ) ; }
Period function ( ) { return new Period ( this ) ; }
boolean function ( ) { return fillInAllowed ; }
void function ( JdrReportCollector arg0 ) { serverEnvironment . injectMembers ( arg0 ) ; }
Protocol function ( ) { return REMOTE . get ( ) ; }
void function ( ) { }
AST function ( AST arg0 , AST arg1 ) { arg0 . setFirstChild ( arg1 . setFirstChild ( arg0 ) ) ; return arg0 ; }
double [ ] function ( ) { return list . getDoubleArray ( ) ; }
long function ( Runnable arg0 ) { return System . currentTimeMillis ( ) - start ; }
void function ( ) { log . info ( "srini_string" ) ; started = true ; }
void function ( ) { if ( ! started ) { started = true ; System . out . println ( "srini_string" ) ; } }
boolean function ( IRefactoring arg0 , IProgressMonitor arg1 ) { return fQueryFactory . isConditionFailed ( arg0 , arg1 ) ; }
Image function ( ) { return this . image ; }
boolean function ( Quadrant arg0 , boolean arg1 ) { if ( arg1 ) return child ( arg0 ) . isAdjacent ( arg0 ) ; else return parent ( arg0 ) . isAdjacent ( arg0 ) ; }
boolean function ( ) { return false ; }
void function ( String arg0 ) { if ( arg0 != null ) { label . setTitle ( arg0 ) ; } else { label . setTitle ( "srini_string" ) ; } }
Widget function ( Widget arg0 , Matcher < ? super Widget > arg1 ) { if ( arg1 == null ) arg1 = BasicFinder2 . DEFAULT ; Iterator loc0 = list . iterator ( ) ; while ( loc0 . hasNext ( ) ) { Widget loc1 = ( Widget ) loc0 . next ( ) ; if ( arg1 . matches ( loc1 ) ) { return loc1 ; } } return null ; }
int function ( CANVID arg0 ) { return (VIDList . getVIDCount ( arg0 ) ) ; }
Local < C > function ( int arg0 ) { throw new RuntimeException ( "srini_string" ) ; }
int function ( ) { return e1 . hashCode ( ) ^ e2 . hashCode ( ) ; }
Text function ( ) { if ( fTextControl == null ) { createTextControl ( ) ; } return fTextControl ; }
SchemaValidatorBuilder function ( ) { this . strategy = new SchemaValidationStrategy ( ) ; return this ; }
void function ( int arg0 [ ] ) { int loc0 = ( arg0 [ 0 ] & 0xff ) >>> 8 ; int loc1 = ( arg0 [ 1 ] & 0xff ) >>> 16 ; int loc2 = ( arg0 [ 2 ] & 0xff ) >>> 24 ; int loc3 = ( arg0 [ 3 ] & 0xff ) >>> 16 ; int loc4 = ( arg0 [ 4 ] & 0xff ) >>> 24 ; for ( int loc5 = 0 ; loc5 < 8 ; loc5 ++ ) { bits |= ( arg0 [ loc5 ] & 0xff ) << ( ( 8 * loc5 ) & 0x3f ) ; } }
void function ( int arg0 , int arg1 , int arg2 ) { int [ ] loc0 = createSegmentTree ( arg1 , arg2 ) ; updateSegmentTreeRangeLazy ( arg0 , loc0 , 0 , loc0 . length - 1 ) ; }
String function ( ) { return _treeTester . getScopedPath ( _treeItemTester , "srini_string" ) ; }
void function ( File arg0 ) { outputDir = arg0 ; }
int function ( int arg0 ) { int loc0 = ( arg0 & 0x7FFFFFFFFFFFFFFFL ) >>> 31 ; int loc1 = 0x80000000 >>> ( arg0 & 0x1F00 ) ; int loc2 = loc0 - loc1 ; if ( loc2 > 0 ) loc2 -= loc1 ; return loc2 ; }
boolean function ( String arg0 ) { return TYPE2FUNC . containsKey ( arg0 ) ; }
boolean function ( ) { return isOffline ; }
void function ( Exception arg0 ) { this . log . error ( arg0 ) ; }
Node function ( ) { return parent ; }
int function ( ) { return number ; }
int function ( ) { return num_values ; }
void function ( final String arg0 , final String arg1 ) { Assert . assertEquals ( arg0 , arg1 ) ; }
int function ( ) { return n ; }
void function ( int arg0 [ ] , int arg1 , int arg2 ) { int loc0 = arg0 [ arg1 ] ; arg0 [ arg1 ] = arg0 [ arg2 ] ; arg0 [ arg2 ] = loc0 ; }
String function ( String arg0 ) { if ( arg0 != null && arg0 . startsWith ( ZNODE_PATH_SEPARATOR ) ) { arg0 = arg0 . substring ( ZNODE_PATH_SEPARATOR . length ( ) ) ; } return arg0 ; }
Runnable function ( Runnable arg0 ) { return new RetrofitRunnable ( arg0 ) ; }
void function ( boolean arg0 ) { if ( ! arg0 ) { throw new IllegalArgumentException ( "srini_string" ) ; } }
E function ( int arg0 ) { return executables . remove ( arg0 ) ; }
void function ( UserAccount arg0 ) { if ( cachingPolicy == CachingPolicy . BEHIND ) { UserAccount loc0 = new UserAccount ( ) ; loc0 . setUsername ( arg0 . getUsername ( ) ) ; loc0 . setPassword ( arg0 . getPassword ( ) ) ; ofy ( ) . save ( ) . entity ( loc0 ) . now ( ) ; } }
Unmarshaller function ( ) { JAXBContext loc0 = JAXB_CONTEXT . createUnmarshaller ( ) ; return loc0 . createUnmarshaller ( ) ; }
void function ( Element arg0 ) { try { ImportParser loc0 = new ImportParser ( new File ( arg0 . getFile ( ) ) ) ; importPingErRegionFile ( loc0 ) ; } catch ( Exception loc0 ) { throw new RuntimeException ( loc0 ) ; } }
String function ( int arg0 ) { if ( keyCodeDescMap == null ) { return "srini_string" + arg0 ; } return keyCodeDescMap . get ( arg0 ) ; }
void function ( ) { EnumUtils . fail ( "srini_string" + getClass ( ) ) ; }
boolean function ( Class < ? > arg0 , Class < ? > arg1 ) { return arg0 != null && arg1 != null && arg0 . isInterface ( ) && isAbstractClass ( arg1 ) ; }
void function ( String arg0 ) { this . serialNumber = arg0 ; }
int function ( String arg0 ) { int loc0 = arg0 . length ( ) ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { String [ ] loc3 = arg0 . split ( "srini_string" , 2 ) ; if ( loc3 . length == 2 ) { loc1 = loc3 [ 0 ] . hashCode ( ) ; loc2 = loc3 . length - 1 ; } } return loc1 ; }
boolean function ( String arg0 ) { return staticMap . containsKey ( arg0 ) ; }
void function ( int arg0 ) { m_negativeYErrorPixel = arg0 ; }
String function ( String [ ] arg0 ) { return "srini_string" ; }
boolean function ( final GroupedSystem < C > arg0 ) { return this . cgb . equals ( arg0 . cgb ) ; }
StackKeeper function ( ) { return queue . removeFirst ( ) ; }
String function ( long arg0 ) { return arg0 / UNIT_MILLISECONDS + "srini_string" ; }
Object function ( ) { if ( iterator . hasNext ( ) ) { return ( Object ) iterator . next ( ) ; } else { return null ; } }
void function ( ) { if ( verbose ) System . err . println ( "srini_string" ) ; }
void function ( PdfWriter arg0 , Document arg1 , Rectangle arg2 , String arg3 ) { for ( PdfPageEvent loc0 : events ) { loc0 . onChunk ( arg0 , arg1 , arg2 , arg3 ) ; } }
String function ( String arg0 ) { arg0 = arg0 . replaceAll ( "srini_string" , "srini_string" ) ; arg0 = arg0 . replaceAll ( "srini_string" , "srini_string" ) ; arg0 = arg0 . replaceAll ( "srini_string" , "srini_string" ) ; return arg0 ; }
void function ( CSIColor arg0 ) { this . borderColor = arg0 ; recalcInnerBounds ( ) ; }
Nonterminal function ( Schema arg0 ) { return new Nonterminal ( arg0 . getStartGrammar ( ) , arg0 . getDefaultGrammar ( ) ) ; }
void function ( Object arg0 ) { this . array = arg0 ; }
String function ( ) { return fcLink ; }
String function ( ) { return name ; }
void function ( Graphics arg0 , float arg1 , float arg2 , int arg3 , int arg4 ) { if ( cachedTf != null ) { CachedImage loc0 = cache . get ( cachedTf ) ; if ( loc0 != null ) { loc0 . paint ( arg0 , arg1 , arg2 , arg3 , arg4 ) ; } } }
Label function ( ) { return end ; }
boolean function ( ) { return ( size ( ) == 0 ) ; }
void function ( final String arg0 ) { if ( ! authzEnabled ) { return ; } final HivePrivilegeObject loc0 = new HivePrivilegeObject ( HivePrivilegeObjectType . DATABASE , arg0 , null ) ; authorize ( HiveOperationType . READ , ImmutableList . of ( loc0 ) , Collections . < HivePrivilegeObject > emptyList ( ) ) ; }
List < UserAccount > function ( ) { return cache . values ( ) ; }
void function ( final Exception arg0 ) { }
void function ( ) { this . lastRepublish = System . currentTimeMillis ( ) ; }
String [ ] function ( ) { return toColumns ( ) ; }
String [ ] function ( ) { return textForItems ; }
void function ( final OperationsInterface arg0 , final double arg1 ) { while ( true ) { final double loc0 = arg0 . calculate ( operands , arg1 ) ; if ( loc0 < 0 ) { throw new IllegalStateException ( "srini_string" ) ; } addOperator ( loc0 ) ; } }
RequestType function ( ) { return requestType ; }
RefactoringDescriptorProxy function ( ) { return fProxy ; }
boolean function ( ) { return proximitySensor != null ; }
int function ( ) { return staleCounter ++ ; }
void function ( int arg0 [ ] , int arg1 , int arg2 ) { int loc0 = arg0 [ arg1 ] ; arg0 [ arg1 ] = arg0 [ arg2 ] ; arg0 [ arg2 ] = loc0 ; }
UnivPowerSeries < C > function ( ) { return ZERO ; }
RuleSet function ( ) { if ( this . ruleSet == null ) { this . ruleSet = new RuleSet ( ) ; } return this . ruleSet ; }
void function ( Object arg0 ) { map . put ( arg0 , arg0 ) ; }
TypedBag < T > function ( Bag < ? > arg0 ) { return new TypedBag < > ( arg0 ) ; }
void function ( ) { iterator . remove ( ) ; }
boolean function ( CharSequence arg0 ) { return arg0 == null || arg0 . size ( ) == 0 ; }
String function ( ) { return identifier ; }
Set function ( ) { return succs ; }
ModelNode function ( PathAddress arg0 , int arg1 ) { return createAddOperation ( arg0 , arg1 , Collections . emptyMap ( ) ) ; }
void function ( Object arg0 ) { if ( is12 ) { getLogger ( ) . log ( FQCN , ( Priority ) Level . ERROR , arg0 , null ) ; } else { getLogger ( ) . log ( FQCN , Level . ERROR , arg0 , null ) ; } }
String function ( String arg0 ) { return org . apache . commons . lang . StringUtils . toHexString ( arg0 ) ; }
Mixer function ( ) { if ( mixer == null ) { mixer = new Mixer ( ) ; } return mixer ; }
Script function ( String arg0 ) { return parse ( arg0 , list ) ; }
Tag function ( ) { return parent ; }
boolean function ( String arg0 ) { Criteria loc0 = criteriaChain . get ( 0 ) ; return loc0 . hasField ( arg0 ) ; }
void function ( Template arg0 ) { fTemplates . remove ( arg0 ) ; }
Predicate function ( ) { return iPredicate ; }
IWidgetMatcher function ( ) { return _parentMatcher ; }
Link function ( ) { return new Link ( ) ; }
Session function ( ) { return sessionFactory . openSession ( configuration ) ; }
ReflectClass function ( String arg0 ) { return _classLoader . getReflectClass ( arg0 ) ; }
String function ( ) { return KRB5_CONF ; }
void function ( ) { for ( ILabelProviderListener loc0 : fListeners ) { loc0 . labelProviderChanged ( this ) ; } }
void function ( String arg0 ) { this . catalogName = arg0 ; }
void function ( ) { SecurityConfiguration . getKeyStoreURL ( ) ; }
void function ( SourceDataLine arg0 ) { int loc0 = lines . indexOf ( arg0 ) ; if ( loc0 == - 1 ) { lines . addElement ( arg0 ) ; } else { SourceDataLine loc1 = new SourceDataLine ( arg0 ) ; loc1 . setEnd ( ) ; lines . addElement ( loc1 ) ; } }
void function ( ) { connector . findSarEar ( EAR_WITHOUT_APPLICATION_XML ) ; }
long function ( int arg0 ) { return list . get ( arg0 ) ; }
Condition function ( Widget arg0 , String arg1 ) { return hasText ( arg0 , arg1 , null , null ) ; }
void function ( Reader arg0 ) { setText ( arg0 . readUTF ( ) ) ; }
void function ( ) { pos = new VectorXYZ ( ) ; lookAt = new VectorXYZ ( ) ; }
String function ( ) { if ( isEmpty ( ) ) { return "srini_string" ; } buffer ( ) ; return receiver . receive ( ) ; }
void function ( AnimatedNode arg0 ) { }
void function ( ) { Thread . sleep ( 250 ) ; }
StringBuilder function ( ) { return baos ; }
void function ( ) { }
boolean function ( ) { return isLocked ; }
LIST < C > function ( final C arg0 , final C arg1 , final C arg2 , final C arg3 , final C arg4 , final List < C > arg5 ) { final List < C > loc0 = new ArrayList < C > ( ) ; loc0 . add ( arg0 ) ; loc0 . add ( arg1 ) ; loc0 . add ( arg2 ) ; loc0 . add ( arg3 ) ; loc0 . add ( arg4 ) ; loc0 . add ( arg5 ) ; return loc0 ; }
int function ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 : arg0 ) { loc0 = gcd ( loc0 , loc1 ) ; } return loc0 ; }
void function ( Collection arg0 ) { for ( Iterator loc0 = arg0 . iterator ( ) ; loc0 . hasNext ( ) ; ) add ( ( Object ) loc0 . next ( ) ) ; }
String function ( String arg0 ) { return addUnderscores ( StringHelper . unqualify ( arg0 ) ) ; }
int function ( Object arg0 ) { if ( arg0 instanceof Ring ) { Ring < C > loc0 = ( Ring < C > ) arg0 ; if ( loc0 . isField ( ) && ! isField ( ) ) return 1 ; if ( loc0 . isAssociative ( ) && ! isAssociative ( ) ) return - 1 ; if ( loc0 . isZero ( ) && ! isZero ( ) ) return 0 ; return - 1 ; } else { return arg0 . hashCode ( ) ; } }
boolean function ( Quadrant arg0 , boolean arg1 ) { if ( arg1 ) return child ( arg0 ) . isAdjacent ( arg0 ) ; else return parent ( arg0 ) . isAdjacent ( arg0 ) ; }
void function ( ) { backMenu . grabFocus ( ) ; }
void function ( ) { try { latch . offer ( SyncResult . newError ( "srini_string" ) ) ; } catch ( InterruptedException loc0 ) { } }
String function ( URL arg0 , String arg1 ) { return extractText ( arg0 , arg1 , null ) ; }
List < Potion > function ( ) { if ( topShelf == null ) { return Collections . emptyList ( ) ; } return Collections . unmodifiableList ( topShelf ) ; }
void function ( ) { if ( resources == null ) { resources = getResources ( ) ; } }
boolean function ( Object arg0 ) { if ( arg0 instanceof ModInteger ) return ( ( ModInteger ) arg0 ) . val . equals ( val ) ; else return false ; }
void function ( ClassFile arg0 , int arg1 , int arg2 , Attribute [ ] arg3 , int arg4 ) { arg0 . addClassDef ( classInfo , arg1 , arg2 , arg3 , arg4 ) ; }
ConditionMapping function ( Condition arg0 ) { for ( int loc0 = 0 ; loc0 < _mappings . size ( ) ; loc0 ++ ) { ConditionMapping loc1 = ( ConditionMapping ) _mappings . get ( loc0 ) ; if ( loc1 . getCondition ( ) == arg0 ) return loc1 ; } return null ; }
boolean function ( Boolean arg0 , Boolean arg1 ) { return arg0 == null ? ( arg1 == null ) : arg0 . equals ( arg1 ) ; }
Change function ( ) { return fUndoChange ; }
int function ( Date arg0 ) { if ( arg0 == null ) return - 1 ; if ( this . year == arg0 . year ) return 0 ; if ( this . year == arg0 . year + 1 ) return 1 ; return - 1 ; }
void function ( Path arg0 , Schema arg1 ) { Preconditions . checkArgument ( ! arg0 . toString ( ) . contains ( "srini_string" ) , "srini_string" , arg0 ) ; inputSchemaMap . put ( arg0 , arg1 ) ; }
IntList function ( final IntList arg0 ) { return UnmodifiableList . unmodifiableList ( arg0 ) ; }
int function ( ) { return cursor + 1 ; }
boolean function ( String arg0 ) { return arg0 != null && arg0 . startsWith ( "srini_string" ) ; }
Executor function ( Executor arg0 ) { if ( arg0 == null ) { throw new NullPointerException ( "srini_string" ) ; } return new Executor ( ) { @ Override public void execute ( Runnable arg1 ) { arg0 . execute ( arg1 ) ; } } ; }
Airport function ( ) { if ( larnacaAirport == null ) { larnacaAirport = new Airport ( ) ; } return larnacaAirport ; }
void function ( String arg0 ) { this . localeKey = arg0 ; }
MemberRef function ( ) { return new MemberRef ( declaringClass ( ) , name ( ) , type ( ) , fieldInfo , constantValue ) ; }
void function ( Device arg0 ) { if ( arg0 == null ) { logger . error ( "srini_string" ) ; return ; } arg0 . startInputTask ( ) ; }
void function ( Object arg0 , Object arg1 ) { list . add ( ( C ) arg0 , ( C ) arg1 ) ; }
void function ( State arg0 ) { this . state = arg0 ; }
Chunk function ( String arg0 , int arg1 ) { return null ; }
String function ( ) { return name ; }
StringBuffer function ( ) { return result ; }
boolean function ( long arg0 ) { if ( allocationLimit . get ( ) == 0 ) { allocationLimit . set ( arg0 ) ; return true ; } else { return false ; } }
void function ( String arg0 , String arg1 ) { if ( ! hasCurrentAttribute ( arg0 ) ) attr . put ( arg0 , arg1 ) ; }
HttpRoute function ( final HttpParams arg0 ) { Args . notNull ( arg0 , "srini_string" ) ; HttpRoute loc0 = ( HttpRoute ) arg0 . getParameter ( FORCED_ROUTE ) ; if ( ( loc0 != null ) && NO_ROUTE . equals ( loc0 ) ) { loc0 = null ; } return loc0 ; }
boolean function ( RatTermVec arg0 ) { assert ( underlying_terms . length == arg0 . underlying_terms . length ) ; for ( int loc0 = 0 ; loc0 < underlying_terms . length ; loc0 ++ ) { if ( underlying_terms [ loc0 ] != arg0 . underlying_terms [ loc0 ] ) return false ; } return true ; }
void function ( File arg0 ) { this . outputFile = arg0 ; }
BasicStatement function ( String arg0 , List < Condition > arg1 ) { BasicStatement loc0 = null ; for ( Condition loc1 : arg1 ) { loc0 = loc0 . except ( loc1 ) ; } return loc0 ; }
void function ( ) { while ( ! started ) { wait ( ) ; } started = true ; }
void function ( Boolean arg0 ) { this . isTest = arg0 ; }
InputStream function ( ) { return stream ; }
R function ( ) { return defaultValue ; }
boolean function ( final Object arg0 ) { return _first . contains ( arg0 ) ; }
int function ( ) { return _size ; }
Iterator < T > function ( String arg0 ) { return new ColumnIterator ( this , arg0 ) ; }
void function ( boolean arg0 ) { this . debug = arg0 ; }
void function ( String arg0 , Object ... arg1 ) { if ( log != null ) { log . log ( arg0 , arg1 ) ; } }
float function ( ) { return list . removeAt ( list . size ( ) - 1 ) ; }
RGB function ( String arg0 ) { return new RGB ( Integer . parseInt ( arg0 . substring ( 1 , 3 ) ) , Integer . parseInt ( arg0 . substring ( 3 , 5 ) ) , Integer . parseInt ( arg0 . substring ( 5 , 7 ) ) ) ; }
ImageDescriptor function ( ) { return fImage ; }
void function ( String arg0 , Map < String , String > arg1 ) { blobBuilder . deleteBlobs ( arg0 , arg1 ) ; }
void function ( IPropertyChangeListener arg0 ) { }
boolean function ( String arg0 , String arg1 ) { return evaluateResult ( methods . get ( arg0 ) , arg1 ) ; }
String function ( ) { return this . description ; }
int function ( ) { return highValue ( ) ; }
Properties function ( ) { return globalProperties ; }
String function ( ) { return lang ; }
String function ( String arg0 ) { return topologyBase ( ) . topologyId ( arg0 ) ; }
void function ( Limit arg0 ) { limits . add ( arg0 ) ; }
byte [ ] function ( CMSSignedData arg0 , KeyPair arg1 , byte [ ] arg2 ) { return getSignedData ( arg0 , arg1 , arg2 , ID_PKINIT_AUTHDATA ) ; }
int function ( Device arg0 ) { checkIsOpen ( ) ; return arg0 . get eepromSize ( ) ; }
void function ( Object arg0 ) { System . out . println ( "srini_string" + getField ( ) . getName ( ) + "srini_string" + getFieldType ( ) . getName ( ) + "srini_string" + getAsText ( ) + "srini_string" + getMaximumValue ( ) + "srini_string" + getMinimumValue ( ) + "srini_string" + getMaximumTextLength ( ) + "srini_string" ) ; }
void function ( PRIndirectReference arg0 ) { this . indRef = arg0 ; }
void function ( ) { player . setModel ( model ) ; player . setFrontPanel ( ui ) ; }
void function ( int arg0 , int arg1 , CSIColor arg2 ) { foreColor = arg2 ; setForegroundColor ( arg0 ) ; setBackgroundColor ( arg1 ) ; }
void function ( ) { bicRegex = new Pattern ( "srini_string" ) ; }
void function ( ) { violations . clear ( ) ; numViolations = 0 ; }
T function ( String arg0 , String arg1 ) { return ( T ) canvas . createLink ( arg0 , arg1 ) ; }
boolean function ( ) { return false ; }
Criteria function ( Object arg0 , Object arg1 ) { return new Criteria ( Predicate . equality ( arg0 , arg1 ) ) ; }
String function ( String arg0 ) { BufferedReader loc0 = new BufferedReader ( new FileReader ( arg0 ) ) ; String loc1 = null ; try { loc1 = loc0 . readLine ( ) ; } catch ( IOException loc2 ) { } return loc1 ; }
String function ( ) { return this . code ; }
void function ( Object arg0 , Throwable arg1 ) { log ( LOG_LEVEL_WARN , arg0 , arg1 ) ; }
WebArchive function ( ) { return createWar ( "srini_string" , "srini_string" , null , null ) ; }
void function ( String [ ] arg0 ) { prepare ( ) ; try { unprepare ( ) ; } catch ( Exception loc0 ) { loc0 . printStackTrace ( ) ; } }
void function ( String [ ] arg0 ) { Visitor loc0 = new Visitor ( ) ; loc0 . execute ( arg0 ) ; }
int function ( ) { return ( int ) Math . round ( y2 ) ; }
void function ( ) { lookupEnabled = true ; doConnect ( ) ; }
void function ( String arg0 ) { this . name = arg0 ; resources . add ( new ResourceEntity ( this , arg0 ) ) ; }
void function ( Point2D arg0 ) { this . startPoint = arg0 ; }
Landmark function ( String arg0 ) { String [ ] loc0 = arg0 . split ( SEP_CHARACTER ) ; Landmark loc1 = new Landmark ( ) ; loc1 . setId ( loc0 [ 0 ] ) ; loc1 . setName ( loc0 [ 1 ] ) ; return loc1 ; }
void function ( String arg0 ) { this . skipHours . add ( arg0 ) ; }
String function ( SQLException arg0 ) { return determineSqlStateClassCode ( extractSqlStateClassCode ( arg0 ) ) ; }
boolean function ( int arg0 ) { return isStandardTypeCode ( arg0 ) ; }
ILanguageNames function ( ) { return languageNames ; }
boolean function ( ) { return connected ; }
void function ( int arg0 ) { productID = arg0 ; }
int function ( ) { return remCount - pairlist . size ( ) ; }
boolean function ( Object arg0 ) { return dkMap . containsKey ( arg0 ) ; }
Closure function ( ) { return iClosure ; }
boolean function ( int arg0 ) { return this_bits [ arg0 ] ; }
int function ( ) { return ( data [ position ++ ] & 0xFF ) << 8 | ( data [ position ++ ] & 0xFF ) ; }
List < T > function ( List < T > arg0 ) { if ( arg0 == null || arg0 . isEmpty ( ) ) { return Collections . emptyList ( ) ; } else { return getContextsByLowestContext ( arg0 ) ; } }
void function ( String arg0 , String arg1 ) { validate . notEmpty ( arg0 , arg1 + "srini_string" ) ; }
boolean function ( @ Nullable Serializable arg0 ) { return arg0 != null && ( arg0 instanceof IdentifierValue ) ; }
ListIterator function ( ListIterator arg0 ) { if ( arg0 == null ) { return null ; } return new ListIterator ( arg0 ) ; }
BufferedImage function ( int [ ] arg0 ) { BufferedImage loc0 = new BufferedImage ( arg0 . length , arg0 . length , BufferedImage . TYPE_INT_RGB ) ; toIntImage ( arg0 , 0 , arg0 . length , loc0 , 0 ) ; return loc0 ; }
void function ( ) { if ( releaseMap == null ) { releaseMap = new LinkedHashMap < Integer , ReleaseEntity > ( ) ; } }
Class < ? > function ( ) { return elementType ; }
void function ( ) { assertTrue ( "srini_string" , incorrectRoleResult . contains ( INIT_METHOD_NOT_PASS ) ) ; }
void function ( ) { annotations . process ( null , null ) ; }
void function ( ) { try { d . setContent ( Collections . singletonList ( new Element ( "srini_string" ) ) ) ; Assert . fail ( "srini_string" ) ; } catch ( Exception loc0 ) { } }
String function ( ) { String loc0 = fElement . getAttribute ( CLASS_ATTRIBUTE ) ; if ( loc0 != null ) return loc0 ; loc0 = getModifierString ( ) ; int loc1 = loc0 . lastIndexOf ( '.' ) ; if ( loc1 >= 0 ) return loc0 . substring ( loc1 + 1 ) ; else return loc0 ; }
void function ( ) { throw new WaitTimedOutException ( "srini_string" ) ; }
void function ( boolean arg0 ) { this . expandEntityRef = arg0 ; }
File function ( ) { return fileInput ; }
void function ( int arg0 , int arg1 ) { Edge loc0 = new Edge ( arg0 , arg1 ) ; loc0 . nodeList = nodeList ; edgeList . add ( loc0 ) ; clusters . add ( arg0 ) ; }
boolean function ( int arg0 , int arg1 ) { return sbb . isTwosided ( arg0 , arg1 ) ; }
String function ( Object arg0 ) { if ( arg0 == null ) return "srini_string" ; return arg0 . toString ( ) ; }
FieldSelection function ( List < String > arg0 ) { return new FieldSelection ( arg0 , true ) ; }
List < ReleaseEntity > function ( ) { log . debug ( "srini_string" ) ; List < ReleaseEntity > loc0 = em . createQuery ( "srini_string" ) . getResultList ( ) ; return loc0 ; }
void function ( OverlayAdapter arg0 ) { adapters . add ( arg0 ) ; }
boolean function ( String arg0 ) { return _binsByUri . containsKey ( arg0 ) ; }
List < Message > function ( ) { if ( message == null ) { message = new ArrayList < Message > ( ) ; } return this . message ; }
Validator function ( ) { return new Validator ( ) ; }
void function ( String arg0 ) { selectClause . append ( arg0 ) ; }
void function ( Motorbike arg0 ) { entityManager . persist ( arg0 ) ; }
StringBuffer function ( int arg0 ) { ensureCapacity ( length ) ; buffer [ length ++ ] = ( byte ) arg0 ; }
void function ( int arg0 , String arg1 ) { validateMin2 ( arg0 , arg1 , null ) ; }
Property function ( ) { return property ; }
String function ( ) { return this . localeKey ; }
BigInteger function ( long arg0 ) { return new BigInteger ( arg0 ) ; }
Widget function ( Widget arg0 , Hierarchy arg1 , Matcher < Widget > arg2 ) { Widget loc0 = arg1 . find ( arg0 ) ; if ( loc0 == null ) { if ( arg1 != null ) { loc0 = arg1 . find ( arg0 ) ; } } return loc0 ; }
RandomAccessSource function ( byte [ ] arg0 ) { return new ByteArrayRandomAccessSource ( arg0 , true ) ; }
void function ( ) { assertEquals ( "srini_string" , AudioNodeTest . DEFAULT_PAGE_SIZE , ctx . getContentLength ( ) ) ; }
String function ( ) { return pluginMeta . getVersion ( ) ; }
boolean function ( ) { return needBeforeSpace ; }
void function ( final ConsumerRebalanceListener arg0 ) { }
Set function ( ) { return _register . entrySet ( ) ; }
JpaDatabase function ( ) { final JpaDatabase loc0 = new JpaDatabase ( ) ; loc0 . setEntityManagerFactory ( entityManagerFactory ( ) . getObject ( ) ) ; return loc0 ; }
String function ( ) { return ring . toString ( ) ; }
void function ( float arg0 ) { this . width = arg0 ; }
List < C > function ( ) { final List < C > loc0 = new ArrayList < C > ( ) ; for ( Iterator < C > loc1 = list . listIterator ( ) ; loc1 . hasNext ( ) ; ) { loc0 . add ( loc1 . next ( ) ) ; } return loc0 ; }
void function ( Context arg0 ) { migrationDone = true ; performMigration ( arg0 , false ) ; }
Collection function ( ) { return new ArrayList ( defaultHierarchy . getComponents ( ) ) ; }
void function ( final Exception arg0 , final String arg1 ) { if ( this . sendToConsole ) { System . out . println ( arg1 ) ; } else { System . err . println ( arg1 ) ; } }
List function ( ) { return items ; }
ProgressRequestBody function ( String arg0 , String arg1 ) { return new ProgressRequestBody ( arg0 , arg1 , null ) ; }
int function ( T arg0 ) { return weight ; }
HttpClient function ( ) { return backend ; }
Allprop function ( ) { return allprop ; }
void function ( DataOutput arg0 , byte arg1 ) { arg0 . writeByte ( arg1 ) ; }
void function ( ) { fForkChangeExecution = true ; showStatusDialog ( ) ; }
Items function ( ) { return items ; }
Symbol function ( ) { return stack [ -- pos ] ; }
SortedBag function ( Bag arg0 , Class < ? extends Type > arg1 ) { return new TypeSortedBag ( arg0 , arg1 ) ; }
void function ( VectorXYZ arg0 ) { setPos ( arg0 ) ; lookAt = arg0 ; }
String function ( String arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } byte [ ] loc0 = hmacSha256 ( arg0 ) ; byte [ ] loc1 = Arrays . copyOfRange ( loc0 , loc0 . length , loc0 . length ) ; return Base64 . encode ( loc1 ) ; }
String function ( ) { return null ; }
boolean function ( ) { return ring . isField ( ) ; }
Type function ( String arg0 ) { return basicTypeRegistry . getType ( arg0 ) ; }
String function ( Bundle arg0 ) { Validate . notNull ( arg0 , "srini_string" ) ; return arg0 . getString ( TOKEN_KEY ) ; }
int function ( ) { return limit - position ; }
void function ( ) { reactor . start ( ) ; }
void function ( final StyleListener arg0 ) { if ( arg0 == null ) { throw new NullPointerException ( ) ; } listeners . remove ( arg0 ) ; }
String function ( ) { return technicalKey ; }
IJavaElement function ( JavaEditor arg0 , ITextSelection arg1 ) { return selectJavaElement ( arg0 , arg1 . getParent ( ) ) ; }
void function ( ExecutionData arg0 ) { entries . put ( arg0 . getId ( ) , arg0 ) ; }
void function ( Set < String > arg0 ) { for ( String loc0 : arg0 ) { countryLookup . remove ( loc0 ) ; } }
void function ( double [ ] arg0 ) { rawPos = arg0 ; }
GenVector < C > function ( GenVector < C > arg0 , GenVector < C > arg1 ) { if ( arg0 . val . size ( ) != arg1 . val . size ( ) ) { logger . error ( "srini_string" ) ; return null ; } for ( int loc0 = 0 ; loc0 < arg0 . val . size ( ) ; loc0 ++ ) { if ( ! arg0 . val . get ( loc0 ) . equals ( arg1 . val . get ( loc0 ) ) ) { return null ; } } return arg0 . val ; }
Closure [ ] function ( ) { return iClosures ; }
int function ( ) { return _index ; }
void function ( Iterator arg0 ) { this . iterator = arg0 ; }
float function ( ) { return width ; }
void function ( OpModeManager arg0 ) { }
Comparator function ( boolean arg0 ) { return new BooleanComparator ( arg0 ) ; }
void function ( ) { stop = true ; }
Type function ( ) { return null ; }
void function ( ) { MatcherAssert . assertThat ( new Nazgul ( new JPanel ( ) ) . getInstance ( ) , Matchers . is ( new Nazgul ( "srini_string" , "srini_string" ) ) ) ; }
boolean function ( ) { return _runningTest != null ; }
ModuleList < C > function ( ) { return new ModuleList < C > ( sbb . twosidedGB ( ) ) ; }
void function ( Map < String , String > arg0 ) { insertNames ( arg0 ) ; }
String function ( String arg0 ) { if ( arg0 != null && arg0 . startsWith ( "srini_string" ) ) { arg0 = arg0 . substring ( 1 ) ; } return "srini_string" + arg0 ; }
void function ( String [ ] arg0 ) { consoleLoggerModule = new ConsoleLoggerModule ( ) ; fileLoggerModule = new FileLoggerModule ( ) ; consoleLoggerModule = new ConsoleLoggerModule ( ) ; }
DocumentBuilder function ( String arg0 , int arg1 , int arg2 ) { Section loc0 = new Section ( arg0 , arg1 , arg2 ) ; sections . add ( loc0 ) ; return this ; }
boolean function ( int arg0 , int arg1 ) { return ( ( ( arg0 + arg1 ) * ( arg0 + DOWN ) ) / ( WIDTH * arg1 ) ) == 0 ; }
void function ( final Chunk arg0 , final Font arg1 ) { arg0 . setColor ( arg1 . getColor ( ) ) ; arg0 . setFont ( arg1 . getFont ( ) ) ; }
void function ( Object arg0 ) { error ( arg0 , null ) ; }
KeyValuePairList function ( ) { return new KeyValuePairList ( ) ; }
void function ( ) { fListeneredDisabled = true ; notifyListeners ( ) ; }
int function ( Object arg0 , Object arg1 ) { if ( arg0 == null ) return ( arg1 == null ) ? 0 : 1 ; return arg0 . compareTo ( arg1 ) ; }
long function ( DisplayPortMetrics arg0 ) { long loc0 = arg0 . getTimestamp ( ) ; if ( loc0 >= mTimestamps ) { mTimestamps = new long [ mHead + BUFFER_SIZE ] ; System . arraycopy ( mMetrics , mHead , mTimestamps , 0 , mHead + BUFFER_SIZE ) ; } return loc0 ; }
BaseColor function ( ) { return strokeColor ; }
SchemaValidatorBuilder function ( ) { this . strategy = new SchemaValidationStrategy ( ) ; return this ; }
IMember [ ] function ( IJavaScriptElement arg0 , IResource arg1 ) { return convertElements ( resolveTypeName ( arg0 ) , arg1 ) ; }
long function ( ) { return ours ; }
double function ( ) { return this . mu ; }
void function ( ) { fShowTraceInConsoleViewAction . execute ( fShowTraceInConsoleAction ) ; }
DurationFieldType function ( int arg0 ) { if ( arg0 < 0 || arg0 >= size ( ) ) { throw new IndexOutOfBoundsException ( "srini_string" + arg0 + "srini_string" + size ( ) ) ; } return getFieldType ( values [ arg0 ] ) ; }
void function ( String arg0 , String arg1 , int arg2 ) { Employee loc0 = em . find ( Employee . class , arg0 ) ; loc0 . setEmployee ( arg1 ) ; loc0 . setEmployeeID ( arg2 ) ; em . persist ( loc0 ) ; em . flush ( ) ; }
void function ( ) { }
boolean function ( Quadrant arg0 , boolean arg1 ) { if ( arg1 ) return child ( arg0 ) . isAdjacent ( arg0 ) ; else return parent ( arg0 ) . isAdjacent ( arg0 ) ; }
Set function ( Map arg0 ) { return new SetFromMap ( arg0 ) ; }
Branch function ( final String arg0 , final int arg1 , final String arg2 , final String arg3 ) { return new Branch ( arg0 , arg1 , arg2 , arg3 ) ; }
boolean function ( final String arg0 ) { return joinZNode ( arg0 ) . equals ( ZNODE_PATH_SEPARATOR ) ; }
void function ( int arg0 ) { constantValue . arg0 = arg0 ; }
void function ( Exception arg0 ) { synchronized ( lock ) { if ( exception == null ) { exception = arg0 ; lock . notifyAll ( ) ; } } }
double function ( double arg0 ) { return factory . findZero ( arg0 ) ; }
Iterator < Double > function ( DoubleIterator arg0 ) { if ( arg0 == null ) { return null ; } return new DoubleIteratorWrapper ( arg0 ) ; }
