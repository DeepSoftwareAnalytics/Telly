void function ( ) { SchemaRegistry loc0 = new SchemaRegistry ( ) ; loc0 . canWrite ( new AromaticSchema ( "srini_string" ) ) ; SchemaRegistry loc1 = new SchemaRegistry ( ) ; loc1 . canWrite ( new AromaticSchema ( "srini_string" ) ) ; }
void function ( String arg0 ) { String loc0 = dvdProperties . getProperty ( arg0 ) ; if ( loc0 != null ) { dvdProperties . remove ( arg0 ) ; } }
List < SpringConfig > function ( ) { return new ArrayList < SpringConfig > ( mSpringConfigMap . values ( ) ) ; }
File function ( ) { return Libraries . getLibraryDirectory ( ) ; }
boolean function ( ) { return coalescing ; }
void function ( final HttpServerInvocationContext arg0 ) { if ( arg0 . getPrincipal ( ) == null ) { throw new IllegalStateException ( "srini_string" ) ; } arg0 . setPrincipal ( arg0 . getPrincipal ( ) . toString ( ) ) ; }
void function ( Object arg0 , Exception arg1 ) { if ( getLogger ( ) . isTraceEnabled ( ) ) { getLogger ( ) . trace ( String . valueOf ( arg0 ) , arg1 ) ; } }
Object function ( ) { return instance ; }
boolean function ( ) { return true ; }
void function ( long arg0 ) { markAsOverriden ( "srini_string" ) ; this . evictionWakeUpInterval = arg0 ; }
IProduct function ( ) { return product ; }
String function ( ASN1Primitive arg0 ) { try { return arg0 . getString ( 0 ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( loc0 ) ; } }
int function ( InputStream arg0 ) { return ( int ) readInt16LE ( arg0 ) ; }
boolean function ( ClassDoc arg0 , String arg1 ) { return false ; }
LongList function ( ) { return unmodifiableLongList ( EMPTY_LONG_LIST ) ; }
Getcontentlanguage function ( ) { return getcontentlanguage ; }
void function ( String arg0 , String arg1 ) { KerberosAdmin loc0 = new KerberosAdmin ( arg0 , arg1 ) ; System . out . println ( "srini_string" + loc0 . getUsername ( ) + "srini_string" + loc0 . getPassword ( ) ) ; }
List < NamePart > function ( String arg0 ) { if ( arg0 == null ) { return Collections . emptyList ( ) ; } String [ ] loc0 = arg0 . split ( "srini_string" ) ; if ( loc0 . length != 2 ) { return Collections . emptyList ( ) ; } return Collections . singletonList ( new NamePart ( loc0 [ 0 ] , loc0 [ 1 ] ) ) ; }
Location function ( Element arg0 ) { Location loc0 = new Location ( ) ; loc0 . setLatitude ( arg0 . getLatitudeLongitude ( ) ) ; loc0 . setLongitude ( arg0 . getLongitude ( ) ) ; return loc0 ; }
boolean function ( ) { return _matcher . matches ( ) ; }
void function ( String arg0 , String arg1 ) { if ( arg0 == null ) { throw new XMPException ( "srini_string" , XMPError . BADPARAM ) ; } if ( arg1 == null ) { throw new XMPException ( "srini_string" , XMPError . BADPARAM ) ; } }
void function ( ) { m_trace . clear ( ) ; m_negativeXErrorPixel = 0 ; m_positiveYErrorPixel = 0 ; m_negativeYErrorPixel = 100 ; }
String function ( ) { return reason ; }
void function ( String arg0 ) { }
int function ( ) { return getFormat ( ) . getSampleDuration ( ) ; }
void function ( final RecordBatch arg0 , final int arg1 ) { if ( arg0 instanceof SyncRecordBatch ) { executeMethodLogic ( ( ( SyncRecordBatch ) arg0 ) . getRecords ( arg1 ) ; } else { executeMethodLogic ( arg0 ) ; } }
boolean function ( ) { return bankToCustomerStatement != null && ( document . getDocumentType ( ) == DocumentTypes . CAMPAIGN || document . getDocumentType ( ) == DocumentTypes . TRANSFER || document . getDocumentType ( ) == DocumentTypes . CAMPAIGN_SUB ) ; }
long function ( ) { return cacheHitCount ; }
Dialog function ( Activity arg0 , String arg1 ) { return ( new AlertDialog . Builder ( arg0 ) ) . setMessage ( arg1 ) . setTitle ( "srini_string" ) . setNeutralButton ( android . R . string . ok , null ) . create ( ) ; }
Section function ( int arg0 ) { return sections . get ( arg0 ) ; }
Product function ( ) { return new Product ( ) ; }
FigureInfo function ( IFigure arg0 , String arg1 ) { return new FigureInfo ( arg0 , arg1 ) ; }
Integer function ( Cursor arg0 , int arg1 ) { return arg0 . getInt ( arg1 ) ; }
ProvidedNodeId function ( ) { return new ProvidedNodeId ( ) ; }
boolean function ( String arg0 , String arg1 ) { return findKeyword ( arg0 , arg1 , 0 ) ; }
int function ( ProtocolVersion arg0 ) { return this . protocol . compareTo ( arg0 . protocol ) ; }
void function ( Fum arg0 ) { this . fum = arg0 ; }
void function ( int arg0 , String arg1 ) { }
void function ( ) { SecurityConfiguration . getCipherKey ( ) ; }
int function ( Map < String , Object > arg0 ) { return ( arg0 == null ) ? 0 : arg0 . size ( ) ; }
void function ( Point2D arg0 ) { this . startPoint = arg0 ; }
int function ( int arg0 ) { int loc0 = arg0 % 2 ; if ( loc0 == 0 ) { loc0 = 1 ; } return loc0 ; }
void function ( String [ ] arg0 ) { System . out . println ( getImplementation ( ) ) ; System . exit ( 0 ) ; }
void function ( String arg0 , Object arg1 , Serializable arg2 ) { if ( channelLock . isHeldByCurrentThread ( ) ) { lockChannel ( ) ; } getRemote ( ) . request ( arg0 , arg1 , arg2 ) ; }
void function ( Collection < ? > arg0 , Collection < E > arg1 , Comparator < ? super E > arg2 , int arg3 ) { List < E > loc0 = new ArrayList < > ( arg1 ) ; for ( int loc1 = 0 ; loc1 < arg3 ; loc1 ++ ) { if ( arg2 . compare ( arg0 . get ( loc1 ) , arg0 . get ( loc1 ) ) > 0 ) { loc0 . add ( arg0 . get ( loc1 ) ) ; } }
long function ( ) { return timestamp ; }
String function ( ) { return this . name ; }
Piece function ( int arg0 ) { return pieces [ arg0 ] ; }
String function ( String arg0 ) { return myself . bundle . getString ( arg0 ) ; }
void function ( ISourceFileLocator arg0 ) { delegates . add ( arg0 ) ; }
void function ( ) { final double loc0 = getRelativeAccuracy ( ) ; if ( loc0 > 0.0 ) { throw new IllegalArgumentException ( "srini_string" ) ; } }
Integer function ( ) { return repeated ; }
Description function ( Description arg0 ) { fChildren . add ( arg0 ) ; return arg0 ; }
byte [ ] function ( short arg0 ) { byte [ ] loc0 = new byte [ 2 ] ; loc0 [ 0 ] = ( byte ) ( arg0 >>> 8 ) ; loc0 [ 1 ] = ( byte ) ( arg0 ) ; return loc0 ; }
Criteria function ( ) { return new Criteria ( ) ; }
Builder function ( ConfigLoader arg0 ) { this . configLoader = arg0 ; return this ; }
Integer [ ] function ( int [ ] arg0 ) { Integer [ ] loc0 = new Integer [ arg0 . length ] ; for ( int loc1 = 0 ; loc1 < arg0 . length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }
Map function ( ) { if ( ! loaded ) { loadMaps ( ) ; } return keyStrokeMap ; }
double function ( int arg0 ) { double loc0 = 0.0 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 += polynomialSplineDerivative ( loc1 ) ; } return loc0 ; }
ValidatorConfiguration function ( final String arg0 , final String arg1 ) { properties . put ( arg0 , arg1 ) ; return this ; }
void function ( ) { validateChain ( "srini_string" , "srini_string" , "srini_string" ) ; }
CookieAttributeHandler function ( final String arg0 ) { return this . attribHandlerMap . get ( arg0 ) ; }
void function ( ) { state = PREPARED ; fireStateChanged ( ) ; }
void function ( String [ ] arg0 ) { System . out . println ( AbMd . main ( arg0 ) ) ; }
void function ( String arg0 ) { this . className = arg0 ; }
int function ( final Object arg0 , final Object arg1 ) { return arg0 . compareTo ( arg1 ) ; }
void function ( ) { dao = mock ( DbCustomerDao . class ) ; exception = null ; }
String function ( ) { String loc0 = doSendApiRequest ( "srini_string" , "srini_string" ) ; return loc0 ; }
String function ( ) { return responseHeaders . get ( responseCode ) ; }
GenMatrix < C > function ( ) { for ( int loc0 = 0 ; loc0 < matrix . size ( ) ; loc0 ++ ) { if ( ! ( matrix . get ( loc0 ) . get ( 0 ) == 0 ) ) { matrix . get ( loc0 ) . add ( new ArrayList < C > ( ) ) ; } matrix . get ( loc0 ) . get ( 0 ) = new ArrayList < C > ( ) ; } return this ; }
void function ( Graphics2D arg0 ) { arg0 . drawRect ( 0 , 0 , obstacleSize , obstacleHeigth ) ; arg0 . drawInt ( 0 , 0 , obstacleSize , obstacleHeigth ) ; arg0 . drawInt ( 0 , 0 , obstacleSize , 0 ) ; }
AuditCriterion function ( AuditCriterion arg0 , AuditCriterion arg1 ) { return new LogicalAuditExpression ( arg0 , arg1 , "srini_string" ) ; }
T function ( T arg0 , String arg1 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( arg1 + "srini_string" ) ; } return arg0 ; }
void function ( String arg0 ) { myTopType = arg0 ; }
 quadrant ( quadrant ( ) ) { return this ; }
void function ( String arg0 ) { this . fcKey = arg0 ; }
Double function ( ) { return xValue ; }
void function ( ) { trimToSize ( _maxSize ) ; }
float function ( ) { return 0.5f ; }
GnpPosition function ( ) { return gnpPosition ; }
String [ ] [ ] function ( String arg0 ) { return collectionPropertyMappingByRole . get ( arg0 ) ; }
Collection < Table > function ( List < String > arg0 ) { return getTablesByNames ( arg0 , null ) ; }
void function ( ) { }
UnivPowerSeries < C > function ( ) { return random . nextBoolean ( ) ? this : ZERO ; }
EditPartFactory function ( ) { return editorSite . getEditPartFactory ( ) ; }
void function ( boolean arg0 ) { fResolveBindings = arg0 ; }
double function ( Node arg0 , Node arg1 , Node arg2 , double arg3 ) { arg3 = hackcofm ( arg3 ) ; double loc0 = arg3 * arg3 ; if ( arg0 . p != null ) loc0 += arg0 . p . value0 * ( arg1 . p . value0 + arg2 . p . value0 ) ; else loc0 += arg1 . p . value0 * arg3 ; if ( arg2 . p . value0 != 0 ) loc0 += arg2 . p . value0 * arg3 ; return loc0 ; }
void function ( PastryContact arg0 ) { if ( arg0 != null ) { cwNodes . remove ( arg0 ) ; ccwNodes . remove ( arg0 ) ; } }
boolean function ( ) { checkNotStarted ( ) ; return anyHasNext ( ) ; }
DateTimeFieldTypeFieldType ... arg0 ) { int [ ] loc0 = new int [ arg0 . length ] ; for ( int loc1 = 0 ; loc1 < arg0 . length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] . getFieldType ( ) ; } return fromFieldType ( loc0 ) ; }
ActiveLock function ( ) { return new ActiveLock ( ) ; }
Product < C > function ( Reader arg0 ) { return parse ( arg0 , null ) ; }
void function ( String arg0 , String arg1 ) { if ( cwd_ . get ( ) . exists ( arg0 ) ) { return ; } File loc0 = new File ( arg0 ) ; if ( ! loc0 . exists ( ) ) { warn ( "srini_string" + arg0 ) ; return ; } loc0 . createNewFile ( arg1 ) ; }
void function ( ) { if ( pdfxConformance != PdfWriter . PDFXNONE ) { throw new IOException ( "srini_string" ) ; } }
boolean function ( JEditorPane arg0 ) { return arg0 != null && arg0 . getEditor ( ) != null && ! arg0 . getEditor ( ) . isReadOnly ( ) ; }
void function ( ) { if ( fFilesSaved ) return ; fFilesSaved = true ; }
double function ( List < Double > arg0 ) { double loc0 = 0 ; for ( double loc1 : arg0 ) { loc0 += loc1 * loc1 ; } return loc0 ; }
void function ( ) { I1z = 1 ; I2z = 2 ; I3 = 3 ; I4 = 4 ; }
void function ( String arg0 , Collection < ? > arg1 , Collection < ? > arg2 ) { if ( arg1 != null && arg2 != null ) { for ( Object loc0 : arg1 ) { assertFail ( arg0 , loc0 , arg2 ) ; } } }
Collection < EvaluationListener > function ( ) { return this . evaluationListeners ; }
Callable < T > function ( ) { return new ThrowingCallable < T > ( ) ; }
boolean function ( BigInteger arg0 ) { return signum ( ) == arg0 . signum ( ) ; }
Events function ( ) { return getListener ( ) . getEvents ( ) ; }
int function ( Context arg0 , int arg1 , int arg2 ) { TypedArray loc0 = arg0 . getTheme ( ) . obtainStyledAttributes ( new int [ ] { arg1 , arg2 } ) ; int loc1 = loc0 . getDimensionPixelSize ( 0 ) ; loc0 . recycle ( ) ; return loc1 ; }
H2Schema function ( Class < ? extends Object > arg0 ) { return new H2SchemaImpl ( arg0 ) ; }
String [ ] function ( ) { return columnNames ; }
Closure function ( Closure arg0 ) { return new ClosureIteratorIterator < Object > ( arg0 ) ; }
void function ( double arg0 ) { if ( arg0 < Double . NaN ) { throw new ArithmeticException ( "srini_string" ) ; } }
short function ( ) { return vid . getVID ( ) ; }
void function ( int arg0 ) { definesEncryptionData = true ; sampleEncryptionDataLength = arg0 ; sampleEncryptionDataNeedsFill = false ; }
void function ( int arg0 ) { m_value -= arg0 ; }
boolean function ( ) { return onlineCheckingAllowed ; }
int function ( int arg0 ) { return childRanges [ arg0 ] ; }
void function ( int arg0 ) { if ( arg0 > columnCount ) { throw new IllegalArgumentException ( "srini_string" + arg0 + "srini_string" + columnCount ) ; } this . columnCount = arg0 ; }
boolean function ( Collection < K > arg0 ) { return putAll ( arg0 , null ) ; }
void function ( final Image arg0 ) { this . background = arg0 ; }
TemplateContextType function ( ) { return fContextType ; }
void function ( float arg0 ) { list . add ( arg0 ) ; }
void function ( Object arg0 ) { myList . setItem ( arg0 ) ; }
LocalContainerEntityManagerFactoryBean function ( ) { return entityManagerFactory ; }
ICondition function ( Object arg0 ) { return new WidgetCondition ( arg0 ) ; }
ReflectConstructorSpec function ( Object [ ] arg0 ) { return new ReflectConstructorSpec ( arg0 ) ; }
void function ( ) { pos ++ ; }
byte [ ] function ( Object arg0 ) { if ( arg0 == null ) { return null ; } return toJson ( arg0 , false ) ; }
JobStatus function ( JobId arg0 ) { Optional < JobStatus > loc0 = jobStatuses ( ) . stream ( ) . filter ( j -> j . getId ( ) . equals ( arg0 ) ) . findFirst ( ) . orElse ( null ) ; if ( loc0 . isPresent ( ) ) { return loc0 . get ( ) ; } else { return null ; } }
Codec [ ] function ( Format arg0 ) { return getCodec ( arg0 . getClassName ( ) ) ; }
void function ( int arg0 ) { weight = arg0 ; }
int [ ] function ( ) { return aVueltas ; }
PdfIndirectReference function ( String arg0 , PdfDictionary arg1 ) { PdfIndirectReference loc0 = writer . addToBody ( arg1 ) ; assetsmap . put ( arg0 , loc0 ) ; return loc0 ; }
void function ( Set < IResource > arg0 ) { resources . addAll ( arg0 ) ; }
String function ( ) { String loc0 = "srini_string" ; loc0 += this . getLeftDistance ( ) + "srini_string" + this . getTopDistance ( ) + "srini_string" ; return loc0 ; }
void function ( final double arg0 ) { this . numericalZero = arg0 ; }
void function ( int arg0 ) { doKeyUp ( arg0 , null ) ; }
void function ( String arg0 ) { this . city = arg0 ; }
String function ( String arg0 , String arg1 , String arg2 , String arg3 ) { String loc0 = "srini_string" ; loc0 += "srini_string" + arg0 + "srini_string" + arg1 + "srini_string" + arg2 + "srini_string" + arg3 ; return doSendApiRequest ( loc0 ) ; }
SkyNetNodeInfoId function ( ) { return nodeInfo . getId ( ) ; }
HandshakeRequest function ( ) { return requestCallMeta ; }
List < ColumnMetaData > function ( ) { return columns ; }
String function ( String arg0 ) { if ( arg0 != null ) { int loc0 = arg0 . indexOf ( '#' ) ; if ( loc0 >= 0 ) { return arg0 . substring ( 0 , loc0 ) ; } else { return arg0 ; } } return null ; }
long function ( Duration arg0 ) { return arg0 . getSeconds ( ) * NANOS_PER_SECOND + arg0 . getNanos ( ) ; }
String function ( Object arg0 ) { XMLOutputter loc0 = new XMLOutputter ( "srini_string" ) ; try { return loc0 . outputString ( arg0 ) ; } catch ( Exception loc1 ) { loc1 . printStackTrace ( ) ; return null ; } }
void function ( ) { for ( int loc0 = 0 ; loc0 < runwaysArray . length ; loc0 ++ ) { runwaysArray [ loc0 ] . free ( ) ; } }
void function ( BigInteger arg0 ) { this . nresults = arg0 ; }
long function ( ) { return SystemClock . uptimeMillis ( ) ; }
void function ( BeanDeploymentArchive arg0 , Module arg1 ) { if ( arg0 . getBeanDeploymentArchives ( ) == null ) { arg0 . setBeanDeploymentArchives ( new HashSet < BeanDeploymentArchiveImpl > ( ) ) ; } Collections . sort ( arg0 . getBeanDeploymentArchives ( ) ) ; if ( ! arg0 . getBeanDeploymentArchives ( ) . isEmpty ( ) ) { addWeldService ( arg0 , arg1 ) ; } }
ITracePoint2D function ( ) { return m_previousPoint ; }
Object function ( ) { return value ; }
List < Integer > function ( ) { return initialAvailableNumer ; }
ModInteger function ( Integer arg0 ) { return new ModInteger ( val . modPow ( arg0 , - 1 ) ) ; }
String function ( ) { return name ; }
float function ( Vector3f arg0 , Vector3f arg1 ) { float loc0 = ( float ) ( arg0 . x * arg1 . x - arg0 . y * arg1 . y ) ; float loc1 = ( float ) ( arg0 . x * arg1 . x - arg0 . y * arg1 . y ) ; return loc0 * loc0 + loc1 * loc1 ; }
boolean function ( GroupCategory ... arg0 ) { return containsAll ( Arrays . asList ( arg0 ) ) ; }
GenMatrix < C > function ( Reader arg0 ) { return fromReader ( arg0 , GenMatrix . class ) ; }
boolean function ( ) { return ( type == NULL ) ; }
ByteBuffer function ( ByteBuffer arg0 , int arg1 , int arg2 ) { throw new UnsupportedOperationException ( "srini_string" ) ; }
String function ( ) { return toXML ( ) ; }
LinkedList function ( cfg ) { LinkedList loc0 = calcFrontier ( cfg ) ; return loc0 ; }
String function ( String arg0 ) { int loc0 = arg0 . lastIndexOf ( CODE_DELIMITERS ) ; if ( loc0 >= 0 ) { return arg0 . substring ( 0 , loc0 ) ; } return arg0 ; }
SolvervableGroebnerBase < C > function ( ) { return new SolvableGroebnerBase < C > ( pairList ( ) ) ; }
List function ( ) { return ones ; }
String function ( ) { return entityName ; }
void function ( Type arg0 ) { if ( arg0 . isInterface ( ) ) { return ; } interfaceTypes . add ( arg0 ) ; }
BatchCQLStatementTupleMapper function ( StatementBuilder ... arg0 ) { return newBatchStatement ( BatchCQLStatementTupleMapper . of ( arg0 ) ) ; }
void function ( String arg0 ) { files . add ( arg0 ) ; }
int [ ] function ( int [ ] arg0 ) { int [ ] loc0 = redHistogram ( arg0 ) ; return redHistogram ( loc0 ) ; }
IConnection function ( String arg0 , int arg1 ) { IConnection loc0 = connections . get ( arg0 ) ; if ( loc0 == null ) { throw new RuntimeException ( "srini_string" + arg0 + "srini_string" ) ; } else { return loc0 ; } }
void function ( ) { IntArrayWorker loc0 = new IntArrayWorker ( ) ; int [ ] [ ] loc1 = { { 1 , 2 , 3 } , { 4 , 5 , 6 } } ; loc0 . setMatrix ( loc1 ) ; int loc2 = loc0 . getColTotal ( ) ; assertTrue ( loc2 == 4 ) ; }
URL function ( String arg0 ) { if ( arg0 == null ) return null ; return new URL ( getResource ( arg0 ) . toURI ( ) ) ; }
boolean function ( ) { return isField ; }
void function ( Shell arg0 ) { if ( arg0 != null && arg0 . getShell ( ) != null ) { arg0 . getShell ( ) . moveToTop ( ) ; } }
String function ( String arg0 ) { if ( arg0 . endsWith ( "srini_string" ) ) { return arg0 . substring ( 0 , arg0 . length ( ) - 6 ) ; } return arg0 ; }
GeonetMenu function ( ) { return mMenuPopup . getMenu ( ) ; }
ResourceEditPropertyBuilder function ( String arg0 ) { this . propertyComment = new Clob ( arg0 ) ; return this ; }
void function ( int arg0 ) { if ( arg0 < 0 || arg0 >= size ( ) ) throw new IndexOutOfBoundsException ( "srini_string" + arg0 + "srini_string" + size ( ) ) ; stack . remove ( arg0 ) ; }
WorkerContextImpl function ( ) { return context . get ( ) ; }
Environment function ( Environment arg0 ) { populateEnvironment ( arg0 , null ) ; return arg0 ; }
String function ( ) { return fMethodSignature ; }
String function ( String arg0 , String arg1 ) { if ( arg0 == null ) arg0 = "srini_string" ; if ( arg1 == null ) arg1 = "srini_string" ; String loc0 = "srini_string" + arg0 + "srini_string" + arg1 + "srini_string" ; return loc0 ; }
OSMElement function ( ) { return objectWithTags ; }
void function ( final int arg0 ) { for ( Partitioner loc0 : partitioners ) { if ( loc0 . isLastBatch ( ) ) { loc0 . getBatch ( arg0 ) ; } else { loc0 . getBatch ( arg0 + 1 ) ; } } }
void function ( Object arg0 , Exception arg1 ) { log ( Level . WARN , arg0 , arg1 ) ; }
boolean function ( ) { return false ; }
void function ( Object arg0 ) { error ( arg0 , null ) ; }
URI function ( ) { return uri ; }
void function ( ) { assertAllColoredSystem ( ) ; assertAllConditions ( ) ; }
int [ ] function ( ) { return FennecNativeHelper . getAbiScore ( getLibsDirectory ( ) ) ; }
CRL function ( byte [ ] arg0 ) { try { CertificateFactory loc0 = CertificateFactory . getInstance ( "srini_string" ) ; return ( CRL ) loc0 . generateCRL ( new ByteArrayInputStream ( arg0 ) ) ; } catch ( Throwable loc0 ) { } return null ; }
void function ( ) { int loc0 = items . length ; int loc1 = loc0 * 2 ; Object [ ] loc2 = new Object [ loc1 ] ; System . arraycopy ( items , 0 , loc2 , 0 , size ) ; items = loc2 ; }
State function ( ) { return state ; }
boolean function ( ) { return mForegroundNotificationId != - 1 ; }
ResourceEditPropertyBuilder function ( boolean arg0 ) { this . isTesting = arg0 ; return this ; }
double function ( double arg0 , double arg1 , double arg2 ) { return bracket ( arg0 , arg1 , arg2 , initial ) ; }
String function ( ) { return String . format ( "srini_string" , this ) ; }
ObjectContainer function ( String arg0 , ObjectContainer arg1 ) { return arg1 . open ( arg0 , false ) ; }
RawFragmentBatch function ( Alloc Alloc Alloc AllocatedFragmentAllocator arg0 , int arg1 ) { return new RawFragmentBatch ( arg0 , header , arg1 ) ; }
String function ( String arg0 ) { return fAttributes . get ( arg0 ) ; }
List < T > function ( Collection < T > arg0 ) { return CollectionUtils . unmodifiableList ( new ArrayList < T > ( arg0 ) ) ; }
int function ( ) { return bankToCustomerStatement . getStatementNum ( ) ; }
boolean function ( ) { return true ; }
MSG_TYPE function ( ) { return msgType ; }
String function ( String arg0 ) { return map . get ( arg0 ) ; }
void function ( ) { receivedMsg ++ ; }
Element function ( Node arg0 , String arg1 ) { NodeList loc0 = arg0 . getElementsByTagName ( arg1 ) ; if ( loc0 . getLength ( ) > 0 ) { return ( Element ) loc0 . item ( 0 ) ; } return null ; }
int function ( int [ ] arg0 , int [ ] arg1 ) { return indexOf ( arg0 , arg1 , 0 ) ; }
String function ( final Member arg0 ) { return getClassDescriptor ( arg0 . getType ( ) ) ; }
Object function ( final Name arg0 ) { final int loc0 = arg0 . size ( ) - 1 ; if ( loc0 < 0 ) { return null ; } return arg0 . get ( loc0 ) ; }
ConsumedPort function ( ) { return new ConsumedPort ( ) ; }
String function ( String arg0 ) { return hostToIp . get ( arg0 ) ; }
void function ( ) { }
void function ( ) { final Resource loc0 = createDeployment ( "srini_string" , "srini_string" ) ; assertTrue ( loc0 . isDirectory ( ) ) ; }
void function ( Socket arg0 ) { ensureOpen ( ) ; arg0 . setSoTimeout ( getSocketTimeout ( ) ) ; this . socket = arg0 ; open = true ; }
void function ( ) { Student loc0 = readStudent ( ) ; writeSession ( loc0 ) ; }
boolean function ( IResource arg0 ) { if ( arg0 == null ) return false ; if ( fMap . containsKey ( arg0 ) ) { fMap . remove ( arg0 . getName ( ) ) ; } return true ; }
Request function ( ) { return new ErrorReportingRunner ( ) ; }
void function ( final String arg0 ) { if ( arg0 . length ( ) != 0 ) { out . append ( arg0 ) ; } }
void function ( InputEvent arg0 ) { release ( ) ; }
int function ( boolean arg0 ) { return list . indexOf ( arg0 ) ; }
File function ( ) { return file ; }
Date function ( Date arg0 ) { if ( arg0 == null ) return null ; if ( DATE_CLEANUP_PATTERN_WRONG_TIMEZONE . matcher ( arg0 . toString ( ) ) . matches ( ) ) { arg0 = DateUtils . parseDate ( arg0 . toString ( ) , DATE_CLEANUP_PATTERN_LOWER_CASE ) ; } return arg0 ; }
ArrayList < Byte > function ( File arg0 ) { ArrayList < Byte > loc0 = new ArrayList < Byte > ( ) ; BufferedReader loc1 = new BufferedReader ( new FileReader ( arg0 ) ) ; String loc2 = null ; while ( ( loc2 = loc1 . readLine ( ) ) != null ) { loc0 . add ( loc2 ) ; } loc1 . close ( ) ; return loc0 ; }
String function ( ) { return this . charset ; }
Phenotype function ( String arg0 , String arg1 ) { return getPhenotype ( arg0 , arg1 , 1 ) ; }
void function ( Context arg0 , Name arg1 , Object arg2 ) { arg0 . rebind ( arg1 , arg2 ) ; }
void function ( byte arg0 [ ] ) { ensureCapacity ( length + arg0 . length ) ; System . arraycopy ( arg0 , 0 , buffer , length , arg0 . length ) ; length += arg0 . length ; }
void function ( Person arg0 ) { allPersons . remove ( arg0 ) ; }
boolean function ( Object arg0 ) { if ( arg0 instanceof RoutingTableEntry ) { return this == arg0 ; } return false ; }
void function ( String arg0 ) { ExtendedJSONObject loc0 = getObsoleteIds ( ) ; loc0 . putString ( PrefKey . ID , arg0 ) ; setObsoleteIds ( loc0 ) ; }
boolean function ( String arg0 ) { return _register . remove ( arg0 ) != null ; }
void function ( Host arg0 , double arg1 , int arg2 ) { if ( ! argToMonitors . containsKey ( arg0 ) ) { LinkedList < Double > loc0 = new LinkedList < Double > ( ) ; loc0 . add ( arg1 ) ; loc0 . add ( arg2 ) ; argToMonitors . put ( arg0 , loc0 ) ; } else { double loc1 = argToMonitors . get ( arg0 ) ; if ( loc1 < arg1 ) { arg1 = loc1 ; } } }
boolean function ( Piece arg0 ) { for ( int loc0 = 0 ; loc0 < MAX_BOARD_SIZE ; loc0 ++ ) { if ( arg0 . board [ loc0 ] == this ) { return true ; } } return false ; }
Parser function ( ) { return new SAXParser ( ) ; }
void function ( int arg0 ) { this . iterations = arg0 ; }
Quad quadrant ( Square arg0 , Square arg1 ) { return quadrant ( arg0 , arg1 , true ) ; }
List < GenPolynomial < C >> function ( int arg0 , int arg1 , int arg2 , double arg3 , double arg4 , double arg5 , double arg6 , double arg7 ) { List < GenPolynomial < C >> loc0 = new ArrayList < > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 . add ( new GenPolynomial < C > ( arg3 , arg4 , arg5 , arg6 , arg7 ) ) ; } return loc0 ; }
ValidationContext function ( ) { return new ValidationContext ( ) ; }
Set < String > function ( ) { return Collections . unmodifiableSet ( namedDescriptorMap . keySet ( ) ) ; }
SpringConfig function ( Map < String , ? > arg0 ) { Map < String , ? > loc0 = new HashMap < String , ? > ( ) ; loc0 . putAll ( arg0 ) ; return new SpringConfig ( loc0 ) ; }
Response . ResponseBuilder function ( Uri arg0 ) { throw new ConnectionException ( "srini_string" + arg0 + "srini_string" ) ; }
void function ( String arg0 , Exception arg1 ) { checkPermissionAndFireCheckedException ( arg0 , arg1 ) ; }
boolean function ( String arg0 ) { return userFunctions . containsKey ( arg0 ) ; }
VectorXZ function ( double arg0 , double arg1 ) { return X_UNIT . add ( X_UNIT , arg0 , arg1 ) ; }
String function ( Element arg0 , Attribute arg1 ) { return VALUE . parse ( arg0 . getAttribute ( arg1 . getName ( ) ) ) ; }
void function ( ) { if ( isEmpty ( ) ) throw new NoSuchElementException ( "srini_string" ) ; Node loc0 = first ; first = loc0 . next ; loc0 . next = null ; size -- ; }
void function ( String arg0 ) { this . inputInfo = arg0 ; }
void function ( Bundle arg0 ) { assertEquals ( "srini_string" , arg0 . length ( ) , BUNDLE_EXTRA_STRING_MESSAGE ) ; assertEquals ( "srini_string" , arg0 . getString ( "srini_string" ) , BUNDLE_EXTRA_STRING_MESSAGE ) ; }
long function ( ) { return asKey . getTimestamp ( ) ; }
Date function ( ) { return bankToCustomerStatement . getStatementEnd ( ) ; }
Quotient < C > function ( C arg0 ) { return new Quotient < C > ( num - arg0 ,den - arg0 ) ; }
boolean function ( int arg0 ) { LocalStore loc0 = ( LocalStore ) LocalStore . get ( arg0 ) ; if ( loc0 == null ) return false ; else return loc0 . ind_var . equals ( arg0 ) ; }
UnivPowerSeries < C > function ( ) { return random . nextDouble ( ) ; }
Duration function ( Duration arg0 , Duration arg1 ) { return normalizedDuration ( arg0 . getSeconds ( ) + arg1 . getSeconds ( ) , arg0 . getNanos ( ) + arg1 . getNanos ( ) ) ; }
IAnnotationCreator function ( ) { if ( instance == null ) { synchronized ( IAnnotationCreator . class ) { if ( instance == null ) { instance = new IAnnotationCreator ( ) ; } } } return instance ; }
boolean function ( double [ ] arg0 ) { checkArray ( arg0 , arg0 . length ) ; if ( arg0 . length == 0 ) { return false ; } for ( int loc0 = 0 ; loc0 < arg0 . length ; loc0 ++ ) { if ( Double . isNaN ( arg0 [ loc0 ] ) ) { return false ; } } return true ; }
HazelcastInstanceServer function ( ) { return hazelcastInstance . createServer ( MASTER_SERVER ) ; }
boolean function ( java . math . BigInteger arg0 ) { return signum ( arg0 ) == 0 ; }
String function ( String arg0 ) { return createRedirectViewPath ( arg0 , true ) ; }
Optional < Section > function ( ) { return sections . isEmpty ( ) ? Optional . empty ( ) : sections . get ( sections . size ( ) - 1 ) ; }
boolean function ( ) { return timespan >= System . currentTimeMillis ( ) ; }
boolean function ( ) { return ( size == 0 ) ; }
void function ( Document arg0 , SimpleBookmark arg1 ) { fc . set bookmarks ( arg0 , arg1 . getIterator ( ) ) ; }
void function ( int arg0 ) { this . lineJoinStyle = arg0 ; }
int function ( ) { return red . length ( ) + green . length ( ) + 7 ; }
void function ( ICommandStack arg0 ) { }
void function ( int arg0 ) { setScreenBrightness ( ( int ) arg0 ) ; }
void function ( ) { upcomingReleaseId = releaseService . getNextReleaseId ( ) ; }
Date function ( ) { return DateUtils . toDate ( this ) ; }
boolean function ( ) { return escapeText ; }
PutSettings function ( Settings arg0 ) { return new PutSettings ( arg0 ) ; }
BasicDevice function ( String arg0 ) { if ( ( arg0 == null ) || ( arg0 . trim ( ) . equals ( "srini_string" ) ) ) { throw new NullIdException ( ) ; } return ( BasicDevice ) devices . get ( arg0 ) ; }
void function ( TLinkable arg0 ) { _next = arg0 ; }
void function ( Hessian2Serializer arg0 ) { _serializerFactory . serialize ( arg0 , true ) ; }
TagState function ( ) { return state ; }
String function ( ) { return getKeyTypeZNode ( getBaseZNode ( ) ) ; }
void function ( PropertyChangeListener arg0 ) { pcsDelegate . addPropertyChangeListener ( arg0 ) ; }
void function ( final T arg0 , final long arg1 ) { put ( arg0 , arg1 , null ) ; }
void function ( ITestRunSession arg0 , String arg1 ) { exportTestRunSession ( arg0 , arg1 , JUNIT_CONTAINER_PATH ) ; }
void function ( final Object arg0 ) { iterator . add ( arg0 ) ; }
boolean function ( ) { return fCheckable ; }
float function ( ) { return this . getGradationInfo ( ) . getBorderStyleThickness ( ) ; }
void function ( FreeMarkerProperty arg0 , String arg1 , String arg2 ) { Map < String , FreeMarkerProperty > loc0 = properties . get ( arg1 ) ; if ( loc0 == null ) { loc0 = new HashMap < String , FreeMarkerProperty > ( ) ; properties . put ( arg1 , loc0 ) ; } loc0 . put ( arg2 , arg0 ) ; }
boolean function ( ) { return ( this . type == STRING ) ; }
void function ( Throwable arg0 ) { throw arg0 ; }
void function ( ) { MyListener . setInvocationCount ( 0 ) ; SLSBBMT loc0 = lookup ( "srini_string" , SLSBBMT . class ) ; this . doCMTTest ( loc0 , 2 ) ; }
void function ( int arg0 ) { sleep ( arg0 , "srini_string" ) ; }
void function ( String arg0 ) { this . caller = arg0 ; }
boolean function ( CtClass arg0 ) { return arg0 . getAnnotationPresent ( Entity . class ) ; }
Region function ( ) { return fTagPosition ; }
ColorPolynomial < C > function ( int arg0 , int arg1 ) { return new ColorPolynomial < C > ( arg0 , arg1 , true ) ; }
void function ( GraphModel arg0 , MouseEvent arg1 ) { resetTimer ( ) ; }
void function ( ImagePanel arg0 ) { arg0 . removeImagePanel ( this ) ; }
Block function ( final Block arg0 ) { return arg0 . getParent ( ) . getParent ( ) ; }
void function ( String arg0 , Object arg1 ) { if ( arg0 . startsWith ( "srini_string" ) ) { writeParameter ( arg1 . toString ( ) ) ; } else { mParameters . put ( arg0 , arg1 ) ; } }
StubStrategy function ( Class < ? > [ ] arg0 , String arg1 , Class < ? > arg2 ) { return new StubStrategy ( arg0 , arg1 , arg2 ) ; }
void function ( ) { Customer loc0 = dao . getCustomer ( 1 ) ; assertNull ( "srini_string" , loc0 ) ; }
boolean function ( ) { return valid ; }
File [ ] function ( File arg0 ) { return findFiles ( arg0 , true ) ; }
AlgebraicNumber < C > function ( java . io . Reader arg0 ) { return parse ( new java . io . InputStreamReader ( arg0 ) ) ; }
float function ( final String arg0 , final float arg1 ) { if ( arg0 . equals ( "srini_string" ) ) { return arg1 ; } else { return Units . toRadians ( arg0 ) ; } }
String function ( ) { return "srini_string" ; }
AccountIdentification32 function ( ) { return new AccountIdentification32 ( ) ; }
XMLParser function ( State arg0 ) { return setState ( specialChar , arg0 ) ; }
boolean function ( ) { return ring . isCommutative ( ) ; }
String function ( String arg0 ) { if ( arg0 == null ) { return null ; } return arg0 . replace ( "srini_string" , "srini_string" ) ; }
String [ ] function ( ) { return keyAliases ; }
int function ( ) { return list . indexOf ( get ( ) , 0 ) ; }
void function ( ) { synchronizerDelegate . start ( ) ; }
boolean function ( ) { return fEnabled ; }
void function ( final FieldChangeEvent arg0 ) { if ( fLabel != null ) { fLabel . setEnabled ( isOkToUse ( ) ) ; } }
BigDecimal function ( ) { return random . nextDouble ( ) ; }
BSONObject function ( Map < String , Object > arg0 , String arg1 , Object arg2 ) { Object loc0 = arg0 . get ( arg1 ) ; if ( loc0 == null ) { loc0 = new Object ( ) ; arg0 . put ( arg1 , loc0 ) ; } loc0 . put ( arg1 , arg2 ) ; return this ; }
void function ( ) { if ( parentCoordinator != null ) { parentCoordinator . removeTreeHandler ( this ) ; } if ( skyNetNode != null ) { skyNetNode . removeTreeHandler ( this ) ; } }
IWidgetLocator function ( ) { return click ( ) ; }
Type function ( ) { return superclass ; }
WebArchive function ( ) { return deployer . createWebArchive ( MODULE_WEB ) ; }
String function ( Tree arg0 , boolean arg1 ) { if ( arg1 ) { return serialize ( arg0 . getLeft ( ) , true ) ; } else { return serialize ( arg0 . getRight ( ) , true ) ; } }
ClassLoader function ( ) { ClassLoader loc0 = Thread . currentThread ( ) . getContextClassLoader ( ) ; if ( loc0 == null ) { loc0 = ClassLoader . getSystemClassLoader ( ) ; } return ( loc0 != null ? loc0 : System . getClassLoader ( ) ) ; }
void function ( List < Writable > arg0 ) { for ( Writable loc0 : arg0 ) { queue . offer ( loc0 ) ; } }
GenVector < C > function ( ) { return GenVector . copyFrom ( random , cols ) ; }
int function ( ) { return marcador ; }
MathUtil function ( ) { return instance ; }
void function ( ) { final DB loc0 = getRawAgencyTx ( ) ; if ( loc0 != null ) { tx . begin ( loc0 ) ; } else { throw new RuntimeException ( "srini_string" ) ; } }
Change function ( ChangeType arg0 , ClasspathFixProposal [ ] arg1 , String arg2 ) { Change loc0 = new Change ( arg0 , arg1 ) ; loc0 . addPath ( new Path ( arg2 ) ) ; return loc0 ; }
void function ( Interpolator arg0 ) { if ( ! isAnimating ) { activeInterpolators . addElement ( arg0 ) ; } else { animationThread . start ( ) ; } }
String function ( ) { return entry . getId ( ) ; }
int function ( ) { return index ; }
Map < String , String > function ( final String arg0 ) { if ( arg0 == null || arg0 . isEmpty ( ) ) { return new HashMap < String , String > ( ) ; } return new HashMap < String , String > ( Arrays . asList ( arg0 . split ( DEFAULT_KEY_AND_VALUE_SEPARATOR ) ) ) ; }
StringBuilder function ( StringBuilder arg0 , char arg1 ) { arg0 . append ( langTable [ arg1 ] ) ; arg0 . append ( langTable [ langTable [ MATRA_AA ] ] ) ; arg0 . append ( langTable [ MATRA_AI ] ) ; arg0 . append ( langTable [ MATRA_HLR ] ) ; arg0 . append ( langTable [ MATRA_HLRR ] ) ; return arg0 ; }
void function ( ) { probes = new boolean [ 0 ] ; }
Map < String , ArrayList < String >> function ( ) { return values ; }
String [ ] function ( ) { final String [ ] loc0 = getVariables ( ) ; final String [ ] loc1 = new String [ loc0 . length ] ; System . arraycopy ( loc0 , 0 , loc1 , 0 , loc1 . length ) ; return loc1 ; }
String function ( String arg0 ) { if ( arg0 == null ) { return null ; } return new String ( decode ( arg0 ) ) ; }
Set < Object > function ( ) { return globalMutex ; }
void function ( float arg0 ) { this . offset = arg0 ; }
Quotient < C > function ( ) { return new Quotient < C > ( ring . random ( ) ) ; }
Dialog function ( Shell arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 , int arg6 , int arg7 ) { return createRefactoringStatusDialog ( arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , null , null , null ) ; }
String function ( ) { return operations . showEntityCommand ( this ) ; }
DocumentWrapper function ( DocumentWrapper arg0 ) { DocumentWrapper loc0 = null ; try { loc0 = DocumentWrapper . clone ( arg0 ) ; } catch ( Exception loc1 ) { log . error ( "srini_string" , loc1 ) ; } return loc0 ; }
T function ( final Class < T > arg0 ) { return create ( arg0 , new Class < ? > [ ] { } , new Object [ ] { } ) ; }
boolean function ( PdfName arg0 ) { return viewerPreferences . containsKey ( arg0 ) ; }
Local < C > function ( String arg0 ) { return parse ( new java . io . StringReader ( arg0 ) ) ; }
TypedSortedBag < T > function ( Class < T > arg0 , Iterable < T > arg1 ) { return new TypedSortedBag < > ( arg0 , arg1 ) ; }
boolean function ( ) { return enabledMetrics . size ( ) > 0 ; }
void function ( final Window arg0 ) { this . runner = new GUIRunner ( arg0 ) ; }
ISDVInfo function ( ) { return new ISDVInfo ( ) ; }
ITrace2D function ( ) { if ( m_trace == null ) { m_trace = new Trace2D ( this ) ; } return m_trace ; }
Image function ( String arg0 , Class arg1 ) { if ( m_ClassImageMap . containsKey ( arg0 ) ) { return ( Image ) m_ClassImageMap . get ( arg0 ) ; } else { return null ; } }
void function ( OutputStream arg0 ) { sessionInfos . save ( arg0 ) ; executionData . save ( arg0 ) ; }
Residue < C > function ( ) { int loc0 = loc0 ( ) ; return new Residue < C > ( ring , loc0 , loc0 ) ; }
OSCByteStream function ( ) { if ( isByteArrayComputed ) { computeByteArray ( ) ; } return new OSCByteStream ( byteArray ) ; }
void function ( int arg0 ) { deposit ( arg0 , - 1 ) ; }
Dialog function ( Shell arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 , int arg6 , int arg7 ) { return createRefactoringStatusDialog ( arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , null , null ) ; }
boolean function ( ) { return useThetaStyle ; }
void function ( Element arg0 ) { if ( arg0 . hasAttribute ( "srini_string" ) ) { String loc0 = arg0 . getAttribute ( "srini_string" ) ; String loc1 = arg0 . getAttribute ( "srini_string" ) ; if ( loc1 . startsWith ( "srini_string" ) ) { int loc2 = Integer . parseInt parseInt ( loc1 ) ; out . print ( "srini_string" ) ; out . print ( loc2 ) ; out . print ( "srini_string" ) ; } else { out . print ( loc1 ) ; out . print ( "srini_string" ) ; } } }
boolean function ( IConfigurationElement arg0 ) { String loc0 = arg0 . getAttribute ( "srini_string" ) ; if ( loc0 . equals ( "srini_string" ) ) { return false ; } else { return true ; } }
DateTime function ( ) { return toDateTime ( DateTimeZone . UTC , getZone ( ) ) ; }
Quotient < C > function ( int arg0 ) { return new Quotient < C > ( num . times ( arg0 ) . multiply ( den ) ) ; }
boolean function ( Type arg0 , Type arg1 ) { return false ; }
Limit function ( ) { return new Limit ( ) ; }
IHoverInfo function ( final IWidget arg0 , final IProgressMonitor arg1 ) { return new MouseHoverInfo ( arg0 , arg1 ) ; }
int function ( ) { return ( int ) Math . round ( label . getPosX ( ) ) ; }
boolean function ( Block arg0 ) { if ( arg0 . y + Block . HEIGHT > y ) { if ( arg0 . x + Block . WIDTH - 1 > x x x ; } else { return false ; } } return true ; }
void function ( String arg0 ) { this . rowData = arg0 ; }
int function ( ) { if ( beforeFirst ) { throw new NoSuchElementException ( ) ; } previousCalled = true ; return nextIndex ( ) ; }
void function ( ) { Assert . assertTrue ( "srini_string" , this . slsb . isInjected ( ) ) ; }
Iterator < ? > function ( FloatIterator arg0 ) { if ( arg0 == null ) { return null ; } else { return new FloatIterator ( arg0 ) ; } }
void function ( TokenProvider arg0 ) { this . tokenProvider = arg0 ; }
Header function ( ) { return myHeader ; }
int function ( ) { return tagNo ; }
byte [ ] function ( byte [ ] arg0 ) { return saslClient != null ? saslClient . evaluateResponse ( arg0 ) : new byte [ 0 ] ; }
Iterator < D > function ( ) { return reader . iterator ( ) ; }
void function ( Composite arg0 ) { Text loc0 = new Text ( filterString ( ) ) ; Text loc1 = new Text ( filterString ( ) ) ; arg0 . add ( loc0 , loc1 ) ; fComposite . setLayout ( arg0 ) ; }
JoinSequence function ( QueryableCollection arg0 ) { return createJoinSequence ( arg0 , false ) ; }
void function ( @ ArquillianResource ( TxControlServlet . class ) URL arg0 ) { testURL ( arg0 , true , false ) ; }
void function ( String [ ] arg0 ) { System . out . println ( AbMd . main ( arg0 ) ) ; }
Exception function ( ) { return this . error ; }
void function ( MetricsAggregate arg0 ) { this . conditionVarition = arg0 ; }
byte [ ] function ( Drawable arg0 ) { if ( arg0 == null ) { return null ; } ByteArrayOutputStream loc0 = new ByteArrayOutputStream ( ) ; arg0 . draw ( loc0 ) ; return loc0 . toByteArray ( ) ; }
void function ( Closeable arg0 ) { try { if ( arg0 != null ) arg0 . close ( ) ; } catch ( IOException loc0 ) { } }
void function ( final boolean arg0 , final String arg1 ) { if ( ! arg0 ) { throw new IllegalArgumentException ( "srini_string" + arg1 + "srini_string" ) ; } }
Residue < C > function ( java . io . Reader arg0 ) { return parse ( new BufferedReader ( arg0 ) ) ; }
float function ( ) { return rise ; }
byte [ ] function ( String arg0 ) { return StringUtils . getBytesUnchecked ( arg0 , CharEncoding . UTF_16 ) ; }
void function ( ) { for ( int loc0 = 0 ; loc0 < this . grid . length ; loc0 ++ ) { for ( int loc1 = 0 ; loc1 < this . grid [ 0 ] . length ; loc1 ++ ) { this . grid [ loc0 ] [ loc1 ] = 0 ; } } }
Student function ( String arg0 ) { Student loc0 = null ; try { loc0 = Student . read ( new FileInputStream ( arg0 ) ) ; } catch ( Exception loc1 ) { loc1 . printStackTrace ( ) ; } return loc0 ; }
int function ( ) { return state ; }
void function ( boolean arg0 ) { this . payloadSizeEstimatedWhenAdding = arg0 ; }
void function ( List < Integer > arg0 ) { takeLock . lock ( ) ; try { boltMsgQueue . addAll ( arg0 ) ; boltMsgQueue . notifyAll ( ) ; } finally { takeLock . unlock ( ) ; } }
int function ( long [ ] arg0 ) { return _list . toArray ( arg0 ) ; }
int function ( ) { return type ; }
void function ( ) { Assert . assertNull ( "srini_string" , "srini_string" ) ; }
boolean function ( ) { return num == 1 ; }
String function ( File arg0 ) { return readFully ( arg0 , Charsets . UTF_8 ) ; }
UUID function ( byte [ ] arg0 ) { byte [ ] loc0 = buildPsshAtom ( arg0 ) ; if ( loc0 != null ) { UUID loc1 = UUID . fromString ( loc0 ) ; return loc1 ; } return null ; }
List function ( ) { return list ; }
void function ( Component arg0 ) { this . component = arg0 ; }
Pipeline < ? > function ( ) { return getNext ( ) ; }
String function ( AbstractPlugIn arg0 ) { return arg0 != null ? arg0 . getIdentifier ( ) : null ; }
PMMLML function ( InputStream arg0 ) { return newPMMLML ( IOUtil . toInputStream ( arg0 ) ) ; }
int function ( ) { return classInfo . hashCode ( ) ; }
boolean function ( IProject arg0 ) { if ( arg0 == null ) return false ; return _project . exists ( ) && _project . getId ( ) . equals ( arg0 . getId ( ) ) ; }
void function ( String arg0 ) { this . style = arg0 ; }
void function ( final HttpParams arg0 , final boolean arg1 ) { Args . notNull ( arg0 , "srini_string" ) ; arg0 . setBooleanParameter ( CoreConnectionPNames . SO_KEEPALIVE , arg1 ) ; }
void function ( int arg0 , int arg1 , int arg2 ) { if ( gridData [ arg1 ] [ arg0 ] == FISH ) { return ; } else { gridData [ arg1 ] [ arg0 ] = FISH ; } }
List < ResourceGroupEntity > function ( String arg0 ) { return resourceGroupService . findAllByType ( arg0 ) ; }
void function ( ListElement arg0 ) { listElements . add ( arg0 ) ; }
Object [ ] [ ] function ( ) { Object [ ] [ ] loc0 = new Object [ columnNames . length ] [ rowMap . size ( ) ] ; for ( int loc1 = 0 ; loc1 < columnNames . length ; loc1 ++ ) { loc0 [ loc1 ] = new Object [ rowMap . size ( ) ] [ loc1 ] ; for ( int loc2 = 0 ; loc2 < columnNames . length ; loc2 ++ ) { loc0 [ loc1 ] [ loc2 ] = rowMap . get ( loc2 ) ; } return loc0 ; }
void function ( Class < E > arg0 , E arg1 ) { handlers . get ( arg0 ) . handle ( arg1 ) ; }
void function ( boolean arg0 ) { this . useCriterion4 = arg0 ; }
void function ( String arg0 , String arg1 , int arg2 ) { addAuthor ( new MetaData ( arg0 , arg1 , arg2 ) ) ; }
void function ( ) { while ( hasNext ( ) ) { Object loc0 = next ( ) ; if ( loc0 != null ) { _total = loc0 ; } } }
String function ( ) { return getFreemarkerHeader ( true ) ; }
Identifier function ( String arg0 , String arg1 , String arg2 ) { return new Identifier ( arg0 , arg1 , arg2 ) ; }
void function ( ) { clear ( null ) ; }
String function ( Object ... arg0 ) { return String . format ( values , arg0 ) ; }
ITypeHierarchy function ( IType arg0 ) { return findTypeHierarchyInCache ( arg0 ) ; }
void function ( ) { if ( fIsHashCached ) { fDetector . reset ( ) ; fIsHashCached = false ; } fBuffer . clear ( ) ; }
int function ( List < Integer > arg0 ) { int loc0 = 0 ; for ( Integer loc1 : arg0 ) { loc0 += loc1 ; } return loc0 ; }
void function ( ) { }
void function ( double arg0 , double arg1 ) { double loc0 = Math . min ( arg0 , arg1 ) ; if ( loc0 < leftBound ) { leftBound = loc0 ; } if ( loc0 > rightBound ) { rightBound = loc0 ; } }
List < Tag > function ( Tag arg0 ) { List < Tag > loc0 = new ArrayList < Tag > ( ) ; if ( arg0 != null ) { while ( arg0 . getParent ( ) != null ) { loc0 . add ( arg0 ) ; arg0 = arg0 . getParent ( ) ; } loc0 . add ( arg0 ) ; } return loc0 ; }
void function ( ) { assertEquals ( OrderedUnorderedListItem . class , workerContextImpl . getElementType ( ) ) ; }
void function ( Collection arg0 , Object [ ] arg1 , Object [ ] arg2 ) { if ( ! testContains ( arg0 , arg1 , arg2 ) ) { fail ( "srini_string" + Arrays . toString ( arg1 ) + "srini_string" + Arrays . toString ( arg0 ) + "srini_string" ) ; } }
int function ( String arg0 , String arg1 ) { return getIntegerParameter ( arg0 , arg1 , 1 ) ; }
int function ( ASTNode arg0 ) { return Selection . getSelectionMode ( arg0 ) ; }
void function ( boolean arg0 ) { started_ = arg0 ; }
IJavaSearchScope function ( IJavaElement arg0 ) { return RefactoringScopeFactory . create ( arg0 , true ) ; }
Object function ( BigInteger arg0 ) { synchronized ( this ) { return _curr . get ( arg0 ) ; } }
Response function ( RepositorySession arg0 , String arg1 , byte [ ] arg2 ) { return execute ( arg0 , arg1 , arg2 , null ) ; }
void function ( ) { TopLevelBean loc0 = lookup ( "srini_string" , TopLevelBean . class ) ; loc0 . induceCreationViaJNDILookup ( ) ; }
int function ( long arg0 ) { Date loc0 = new Date ( arg0 ) ; PendingIntent loc1 = buildPendingIntent ( loc0 ) ; context . startActivity ( loc1 ) ; return delete ( loc0 ) ; }
String function ( ) { return id ; }
long function ( ) { return allocationLimit . get ( ) ; }
int function ( ) { return getAddends ( ) . size ( ) ; }
ColumnMetaData [ ] function ( ) { columnCount = 0 ; return columnsByName . values ( ) . toArray ( new ColumnMetaData [ columnCount ] ) ; }
Residue < C > function ( ) { int loc0 = signum ( ) ; if ( loc0 == 0 ) return this ; return new Residue < C > ( ring . negate ( ) , loc0 ) ; }
String function ( ) { return baseID ; }
Set < Asset > function ( Set < Asset > arg0 ) { final Set < Asset > loc0 = new HashSet < Asset > ( arg0 ) ; final String loc1 = getExtension ( loc0 ) ; if ( loc1 != null ) { loc0 . remove ( new Asset ( loc1 ) ) ; } return loc0 ; }
String function ( ) { return catalogKey ; }
RDD < Citations > function ( RDD < Citations > arg0 ) { if ( ! arg0 . isRDD ( ) ) { throw new IllegalArgumentException ( "srini_string" ) ; } return arg0 . map ( new Function < Citations , Citations > ( ) { public Citations apply ( Citations arg1 ) { return arg1 . getCitations ( ) ; } } ) ; }
void function ( Figure arg0 ) { _message = arg0 ; }
IntListIterator function ( ListIterator arg0 ) { if ( arg0 == null ) { return null ; } return new ListIteratorImpl ( arg0 ) ; }
Closure function ( Method arg0 , Object arg1 ) { return new MethodClosure ( arg0 , arg1 ) ; }
int function ( ) { return val . size ( ) ; }
boolean function ( final HttpServletResponse arg0 ) { return ( isResponseFresh ( arg0 ) && ( getLastModifiedValue ( arg0 ) == null || getFreshnessLifetimeSecs ( arg0 ) >= getHeuristicFreshnessLifetimeSecs ( ) ) ) ; }
InputStream function ( InputStream arg0 , long arg1 , String arg2 ) { return new BufferedInputStream ( extractBytes ( arg0 , arg1 , arg2 ) ) ; }
boolean function ( ) { return instantiated ; }
boolean function ( List < Integer > arg0 ) { if ( keyPopularity == null ) { return false ; } else { return keyPopularity . addAll ( arg0 ) ; } }
Decoder function ( ) { return _serializerFactory . createDecoder ( ) ; }
WidgetReference < T > function ( Class < T > arg0 , Object arg1 ) { Assert . notNull ( arg0 , "srini_string" ) ; adapters . put ( arg0 , arg1 ) ; return this ; }
void function ( double arg0 ) { this . numHosts = arg0 ; }
void function ( String arg0 , byte [ ] arg1 ) { String loc0 = Base64 . encodeToString ( arg1 , Base64 . DEFAULT ) ; Record loc1 = new Record ( ) ; loc1 . setID ( arg0 ) ; loc1 . setPayload ( loc0 ) ; assertNull ( loc1 . getTimestamp ( ) ) ; loc1 . setSortIndex ( sortIndex ) ; loc1 . setAndroidID ( androidID ) ; assertEquals ( loc0 , loc1 . getPayload ( ) ) ; }
void function ( Object arg0 ) { if ( is12 ) { getLogger ( ) . log ( FQCN , ( Priority ) Level . TRACE , arg0 , null ) ; } else { getLogger ( ) . log ( FQCN , Level . TRACE , arg0 , null ) ; } }
boolean function ( char arg0 ) { return ( langTable [ arg0 ] == langTable [ MATRA_AA ] ) ; }
void function ( String arg0 ) { this . fileName = arg0 ; }
Throwable function ( ) { return state . getException ( ) ; }
boolean function ( T arg0 , OrmContext arg1 ) { return helper . update ( arg0 , arg1 ) ; }
List < Tag > function ( Tag arg0 ) { List < Tag > loc0 = new ArrayList < Tag > ( ) ; if ( arg0 != null ) { while ( arg0 . getParent ( ) != null ) { loc0 . add ( arg0 . getParent ( ) ) ; arg0 = arg0 . getParent ( ) ; } loc0 . add ( arg0 ) ; } return loc0 ; }
void function ( ) { Assert . assertTrue ( "srini_string" , this . slsb . getValidatorFactory ( ) . isValid ( ) ) ; }
Collection function ( ) { return bag ; }
double function ( ) { return accounts . length ; }
void function ( String arg0 ) { }
void function ( int arg0 , int arg1 ) { try { _robot . keyDown ( arg0 , arg1 ) ; } catch ( Exception loc0 ) { loc0 . printStackTrace ( ) ; } }
Result function ( Source arg0 , Result arg1 ) { if ( iClosure == null ) { return new Result ( arg0 , arg1 ) ; } else { return iClosure . evaluate ( arg0 , arg1 ) ; } }
int function ( ) { return coveredBranches ; }
AlgebraicNumber < C > function ( ) { return ring . gcd ( this ) ; }
T function ( ) { return key ; }
void function ( final Archive < ? > arg0 ) { arg0 . addClass ( XACMLPolicies . class ) ; }
LinearLayout function ( String arg0 ) { LinearLayout loc0 = new LinearLayout ( ) ; loc0 . setLayoutSize ( 4 , 4 ) ; loc0 . setLayout ( GridView . WRAP_CONTENT ) ; loc0 . setLayout ( arg0 , 0.5 ) ; return loc0 ; }
MessageSource function ( ) { return messageSourceMock ; }
boolean function ( String arg0 ) { return _register . containsKey ( arg0 ) ; }
Integer function ( ) { return intervalQualifier == null ? 0 : intervalQualifier . get fractionalSecondPrecision ( ) ; }
void function ( Tag arg0 , Tag arg1 ) { Assert . assertEquals ( arg0 . getTagName ( ) , arg1 . getTagName ( ) ) ; }
void function ( Color arg0 ) { color = arg0 ; Canvas . getInstance ( ) . repaint ( ) ; }
List < PropertyDeclaration > function ( ) { if ( properties == null ) { properties = new ArrayList < PropertyDeclaration > ( ) ; } return this . properties ; }
void function ( ComplexType arg0 , XMLStreamWriter arg1 ) { writeSimpleType ( arg0 , arg1 , false ) ; }
String function ( ) { return getIdentitiesZNode ( true ) ; }
void function ( KeyStore arg0 ) { if ( arg0 == null ) { throw new KeyStoreException ( REVIEW_MESSAGE ) ; } }
CQLValueTupleMapper function ( Tuple arg0 , String arg1 , FieldSelector arg2 , boolean arg3 ) { return new CQLValueTupleMapper ( arg0 , arg1 , arg2 , arg3 , null ) ; }
byte function ( int arg0 ) { if ( arg0 < size ( ) ) { return list . get ( arg0 ) ; } else { return list . get ( size ( ) - arg0 - 1 ) ; } }
void function ( ) { }
void function ( ) { createSchema ( ) ; dao . deleteCustomerSchema ( "srini_string" ) ; }
boolean function ( ) { return percentage ; }
Boolean function ( ) { return this . session . isConnectedToSession ( ) ; }
IWidgetLocator function ( Class < T > arg0 , Object arg1 ) { return new ReferenceLocator ( arg0 , arg1 ) ; }
int [ ] function ( MVariable arg0 ) { List < Integer > loc0 = new ArrayList < > ( statements . size ( ) ) ; for ( int loc1 = 0 ; loc1 < statements . size ( ) ; loc1 ++ ) { MStatement loc2 = statements . get ( loc1 ) ; if ( loc2 . getInputs ( ) . isEmpty ( ) ) { loc0 . add ( loc1 ) ; } } return loc0 . toArray ( new int [ loc0 . size ( ) ] ) ; }
String function ( ) { invokeBody ( ) ; return ( hasTrimmed ) ? trim ( ) : body . toString ( ) ; }
void function ( ) { setup ( "srini_string" , initialContext , "srini_string" , null ) ; }
void function ( Module arg0 , String arg1 ) { try { arg0 . remove_local_variable_type_table ( arg1 ) ; } catch ( NullPointerException loc0 ) { } }
Document function ( ) { return fDocument ; }
void function ( File arg0 , File arg1 ) { try ( InputStream loc0 = new FileInputStream ( arg0 ) ) { compareFile ( loc0 , arg1 ) ; } }
Rectangle function ( ) { return new Rectangle ( startPoint . copy ( ) , endPoint . copy ( ) , Math . toRadians ( 0 ) ) ; }
void function ( ) { assertNotNull ( testFolder . newFile ( "srini_string" ) ) ; }
UserInterfaceContext function ( ) { return new UserInterfaceContextImpl ( ) ; }
ASN1Encodable function ( byte [ ] arg0 ) { return decode ( arg0 ) ; }
Duration function ( Timestamp arg0 , Duration arg1 ) { return Durations . fromMillis ( subtract ( arg0 . getTime ( ) , arg1 . getTime ( ) ) ) ; }
void function ( int arg0 , String arg1 ) { defaults . put ( arg0 , arg1 ) ; }
Object function ( ) { return debug ; }
ContextEntity function ( ContextEntity arg0 ) { return arg0 == null ? globalContext : arg0 ; }
String function ( ) { return classInfo . name ( ) ; }
byte [ ] function ( ) { if ( consumedLength > 0 ) { return consumedData ; } byte [ ] loc0 = new byte [ remainingLength ] ; System . arraycopy ( data , 0 , loc0 , 0 , consumedLength ) ; consumedLength -= loc0 . length ; return loc0 ; }
int function ( ) { return 31 * getClass ( ) . hashCode ( ) ; }
Token [ ] function ( ) { return getTokens ( ) ; }
void function ( boolean arg0 ) { fStatementsRecovery = arg0 ; }
boolean function ( Env < ? , ? > arg0 ) { return getPolynomial ( ) . equals ( arg0 . getPolynomial ( ) ) ; }
Set function ( ) { return composites ; }
void function ( ) { trimToSize ( _maxSize ) ; }
void function ( Throwable arg0 ) { invalidScriptError = arg0 ; }
void function ( File arg0 , String arg1 ) { Preconditions . checkNotNull ( arg0 ) ; Preconditions . checkNotNull ( arg1 ) ; try { close ( new FileOutputStream ( arg0 ) ) ; } catch ( IOException loc0 ) { throw new RuntimeException ( "srini_string" + arg0 , loc0 ) ; } }
int function ( Object arg0 ) { return compareTo ( ( BigDecimal ) arg0 ) ; }
int function ( ) { return stack . size ( ) ; }
boolean function ( ) { return type == Type . SmartMachine || type == Type . VirtualMachine ; }
ResourceEditPropertyBuilder function ( String arg0 ) { this . fcExternalLink = arg0 ; return this ; }
boolean function ( ) { if ( isKeyOptional == null ) { return false ; } else { return isKeyOptional ; } }
SourceViewer function ( ) { return fSourceViewer ; }
List < List < VectorXZ >> function ( Collection < Triangle > arg0 ) { return texCoordLists ( arg0 , null , null ) ; }
void function ( User arg0 , User arg1 ) { if ( arg0 == null ) { throw new UserNotFoundException ( "srini_string" ) ; } if ( arg1 == null ) { throw new UserNotFoundException ( "srini_string" ) ; } PermissionService loc0 = permissionService . getPermissionService ( ) ; User loc1 = arg0 ; if ( ! loc0 . hasUserRole ( loc1 ) ) { throw new UserNotFoundException ( "srini_string" ) ; } }
ArrayList < T > function ( Iterator < ? > arg0 ) { ArrayList < T > loc0 = new ArrayList < T > ( ) ; while ( arg0 . hasNext ( ) ) { loc0 . add ( arg0 . next ( ) ) ; } return loc0 ; }
int function ( ) { return size ; }
int function ( ) { return checkGetKdcTcpPort ( startupOptions . getKdcPort ( ) ) ; }
Object function ( Object arg0 , String arg1 ) { return arg0 ; }
boolean function ( final Script arg0 ) { if ( arg0 == null ) { throw new NullPointerException ( ) ; } return list . remove ( arg0 ) ; }
void function ( ) { if ( buffer [ 0 ] ) buffer [ 0 ] = false ; buffer [ 1 ] = false ; }
ShortListIterator function ( ShortListIterator arg0 ) { return UnmodifiableShortListIterator . unmodifiableShortListIterator ( arg0 ) ; }
void function ( String [ ] arg0 ) { LOGGER . info ( "srini_string" ) ; }
boolean function ( D1 arg0 , D1 arg1 ) { double loc0 = arg0 . getRatio ( ) ; double loc1 = arg1 . getRatio ( ) ; if ( loc0 < loc1 ) { return false ; } if ( loc0 == loc1 ) { return true ; } else if ( loc0 > loc1 ) { return true ; } else { return false ; } }
String function ( ) { return name ; }
ClassLoader function ( Class < ? > arg0 ) { ClassLoader loc0 = null ; SoftReference loc1 = ( SoftReference ) factories . get ( arg0 ) ; if ( loc1 != null ) { loc0 = ( ClassLoader ) loc1 . get ( ) ; } return ( loc0 != null ? loc0 : arg0 . getClassLoader ( ) ) ; }
Local < C > function ( final C arg0 ) { return new Local < C > ( arg0 , false ) ; }
boolean function ( ) { return false ; }
T function ( List < T > arg0 ) { if ( arg0 . isEmpty ( ) ) { return null ; } Random loc0 = new Random ( ) ; return arg0 . get ( loc0 . nextInt ( arg0 . size ( ) ) ) ; }
boolean function ( int arg0 ) { return _freeStack . get ( ) != 0 ; }
Topology function ( String arg0 , String arg1 , HazelcastInstance arg2 ) { return new Topology ( arg0 , arg1 , arg2 ) ; }
Object function ( Object arg0 , String arg1 ) { return BASIC_PROPERTY_ACCESSOR . getValue ( arg0 , arg1 ) ; }
void function ( File arg0 ) { if ( arg0 . isDirectory ( ) ) { deleteDir ( arg0 ) ; } else { arg0 . delete ( ) ; } }
void function ( ) { running = false ; monitored . reset ( ) ; }
HashCodeBuilder function ( float arg0 ) { return append ( Float . floatToIntBits ( arg0 ) ) ; }
void function ( Integer arg0 ) { this . deptId = arg0 ; }
ContextQuery function ( String arg0 ) { return query ( arg0 , null ) ; }
void function ( ) { assertEquals ( "srini_string" , po . getContents ( ) ) ; }
void function ( ) { cache . clear ( ) ; }
K function ( ) { return kSmallest . minimumKey ( ) ; }
void function ( GridBagConstraints arg0 ) { this . constraints = arg0 ; }
ComplexityComplexityity function ( ) { return complexityity ; }
int function ( Object arg0 ) { if ( arg0 instanceof Residue ) return ( ( Residue < C > ) arg0 ) . hashCode ( ) ; else return - 1 ; }
boolean function ( char arg0 , char arg1 ) { return ( arg0 >= arg1 && arg0 <= arg1 + 2 ) ; }
void function ( String arg0 ) { this . outOfServiceByRelease = arg0 ; }
LoadPlan function ( ) { return new LoadPlan ( ) ; }
void function ( Document ... arg0 ) { try { for ( Document loc0 : arg0 ) { add ( loc0 ) ; } } catch ( Exception loc0 ) { throw new RuntimeException ( loc0 ) ; } }
BigDecimal function ( BigDecimal arg0 ) { return new BigDecimal ( arg0 . toString ( ) ) ; }
int function ( ) { return iterationCount ; }
void function ( WidgetLocator arg0 ) { _parentInfo = arg0 ; }
void function ( ) { list . clear ( ) ; }
void function ( ) { checkLoopback ( ) ; delegate . writeLock ( ) . lock ( ) ; }
void function ( RenderEvent arg0 ) { delegate . onRender ( arg0 ) ; }
Object function ( final Class arg0 ) { return this . map . remove ( arg0 ) ; }
CompositeData function ( ) { try { return new CompositeDataSupport ( COMPOSITE_TYPE , ITEM_NAMES , new Object [ ] { roleName , loadCount , removeCount , updateCount , fetchCount , computeStats ( ) } ) ; } catch ( OpenDataException loc0 ) { throw new RuntimeException ( loc0 ) ; } }
boolean function ( int arg0 ) { return eventPool . get ( arg0 ) != 0 ; }
List function ( ) { return _items ; }
Coordinate function ( ) { return new Coordinate ( startNode . getCenter ( ) , endNode . getCenter ( ) ) ; }
ArrayList < GenPolynomial < C >> function ( ) { return P ; }
void function ( BufferFlag arg0 ) { flags . set ( arg0 ) ; }
boolean function ( T arg0 , Hasher arg1 ) { return arg1 . equals ( arg0 . hashCode ( ) ) ; }
UnivPowerSeries < C > function ( BigInteger arg0 ) { return new UnivPowerSeries < C > ( java . math . BigInteger . valueOf ( arg0 . longValue ( ) ) , random , truncate , null ) ; }
void function ( Change arg0 ) { fParent = arg0 ; }
void function ( int arg0 , int arg1 ) { if ( listeners_ != null && arg0 != 0 && arg1 != 0 ) { listeners_ . firePropertyChange ( "srini_string" , new Integer ( arg0 ) , new Integer ( arg1 ) ) ; } }
PdfImageObject function ( ) { return imageObject ; }
void function ( Object arg0 ) { removeCallback ( arg0 , false ) ; }
void function ( ) { mShouldDispatchChanges = false ; }
void function ( boolean arg0 ) { m_isMajorTick = arg0 ; }
String function ( int arg0 ) { return arg0 + "srini_string" + this . toString ( ) ; }
boolean function ( ) { return ( _hierarchy == null ) ; }
ConditionMonitor function ( ) { return INSTANCE ; }
void function ( Object arg0 , Object arg1 , Object arg2 ) { java . lang . reflect . Array . set ( arg0 , arg1 , arg2 ) ; }
HashMap < BigDecimal , MetricsSubCoordinatorInfo > function ( ) { return listOfSubCoordinators ; }
boolean function ( Object arg0 , Object arg1 ) { if ( arg0 == null ) { return arg1 == null ; } return arg0 . equals ( arg1 ) ; }
Duration function ( int arg0 ) { return Durations . of ( arg0 ) ; }
void function ( ) { SecurityConfiguration . getApplicationPolicy ( "srini_string" ) ; }
Map < String , String > function ( ) { return parasMap ; }
Boolean function ( ResourceEntity arg0 , ReleaseEntity arg1 ) { return resourceReleaseComparator . isBestMatchingReleaseTime ( arg0 , arg1 ) ; }
Owner function ( ) { return owner ; }
String function ( ) { return this . hostname ; }
void function ( String arg0 ) { if ( arg0 != null && ! arg0 . isEmpty ( ) ) { add_implied_vis ( arg0 ) ; } }
TLinkable function ( ) { return _next ; }
int function ( ) { return available ; }
List < String > function ( ) { if ( tags == null ) { tags = new ArrayList < String > ( ) ; } return this . tags ; }
void function ( PdfReader arg0 , PdfWriter arg1 ) { fc . addDocument ( arg0 , arg1 ) ; }
int function ( ) { return ( int ) ( val . hashCode ( ) ^ ( int ) val . hashCode ( ) ) ; }
List < Sentence > function ( File arg0 ) { return parse ( new File ( arg0 ) ) ; }
Message function ( ) { try { return blkQueue . take ( ) ; } catch ( InterruptedException loc0 ) { LOGGER . error ( "srini_string" ) ; return null ; } }
List < ColumnMetaData > function ( Schema arg0 ) { return columns . get ( arg0 ) ; }
VectorXYZ function ( final double arg0 , final double arg1 , final double arg2 , final double arg3 ) { final double loc0 = ( double ) Math . cos ( arg1 ) ; final double loc1 = ( double ) Math . sin ( arg0 ) ; return new VectorXYZ ( loc0 * loc0 + loc1 * loc1 , loc1 * loc1 + loc0 * loc0 , arg2 * arg2 + arg3 * arg3 ) ; }
String function ( ) { return tokeniser . readString ( ) ; }
void function ( Long arg0 ) { this . endIp = arg0 ; }
ResultWithNotifications < BE , ? > function ( ) { return new ResultWithNotifications < > ( context , inTx ( ) , sentNotifications ) ; }
List < WPTreeNode > function ( WPTreeNode arg0 ) { if ( arg0 == null ) arg0 = this ; return children ; }
boolean function ( int arg0 ) { return ( ind_store . get ( arg0 ) != null ) ; }
int function ( ) { return i_initialSize ; }
void function ( ITestIdentifier arg0 ) { _runningTest = arg0 ; if ( _runningTest != null ) { _runningTest . start ( ) ; } }
boolean function ( java . awt . Component arg0 ) { return bugList . contains ( arg0 ) ; }
void function ( ) { started = true ; }
int function ( ) { return size ; }
boolean function ( ) { return ui . isVisible ( locator ) ; }
void function ( String ... arg0 ) { if ( ! arg0 . length == 0 ) { negatedParameters . add ( new Parameters ( arg0 ) ) ; } }
GenVector < C > function ( GenVector < C > arg0 ) { if ( this . val . isEmpty ( ) || arg0 . val . isEmpty ( ) ) { logger . info ( "srini_string" ) ; return GenVector . empty ( ) ; } return val . add ( arg0 . val ) ; }
List < String > function ( File arg0 ) { return getFactory ( ) . getNamespaceUris ( arg0 ) ; }
int function ( ) { throw new UnsupportedOperationException ( ) ; }
BigInteger function ( ) { checkBounds ( ) ; return bigInt . setBit ( 0 ) ; }
BigInteger function ( ) { return BigInteger . ONE . negate ( ) ; }
Iterable < String > > function ( Iterable < String > arg0 ) { return Iterables . filter ( arg0 , new Predicate < String > ( ) { @ Override public boolean apply ( String arg1 ) { return nameToPpt . containsKey ( arg1 ) ; } } ) ; }
BigDecimal function ( java . io . Reader arg0 ) { return parse ( arg0 , DEFAULT_CONTEXT ) ; }
void function ( ) { if ( ! isAnimated ( ) ) { return ; } show ( ) ; }
List function ( ) { return _items ; }
void function ( ) { name . unregister ( ) ; }
boolean function ( int arg0 ) { return arg0 > 0 && ( ( arg0 % 2 != 0 ) || ( arg0 < 1 ) ) ; }
void function ( int arg0 ) { int loc0 = binarySearch ( mFieldNumbers , arg0 ) ; if ( loc0 >= 0 ) { mData [ loc0 ] = null ; } }
byte [ ] function ( ) { return data ; }
boolean function ( List < Check > arg0 , List < Check > arg1 ) { int loc0 = 0 ; for ( Check loc1 : arg0 ) { int loc2 = loc1 . getFailureIndex ( ) ; if ( loc2 != loc0 ) { return false ; } loc0 ++ ; } for ( Check loc1 : arg1 ) { if ( loc1 . getFailureIndex ( ) != loc0 ) { return false ; } } return true ; }
boolean function ( ) { return false ; }
boolean function ( Class < ? > arg0 ) { Boolean loc0 = isPrimitiveCached . get ( arg0 ) ; if ( loc0 == null ) { loc0 = primitiveType ( arg0 ) ; isPrimitiveCached . put ( arg0 , loc0 ) ; } return loc0 ; }
HttpRequestHandler function ( final String arg0 ) { return matcher . match ( arg0 ) ; }
Object [ ] function ( Object [ ] arg0 ) { return flatten ( new Array4 ( arg0 ) ) ; }
void function ( Lockscope arg0 ) { this . lockscope = arg0 ; }
void function ( String arg0 ) { checkRep ( arg0 ) ; }
boolean function ( CharSequence arg0 , CharSequence arg1 ) { return arg0 . equals ( arg1 ) ; }
void function ( int arg0 ) { this . n = arg0 ; }
void function ( String arg0 ) { links . add ( arg0 ) ; }
Getcontenttype function ( ) { return getcontenttype ; }
String function ( ) { return m_Language ; }
double function ( double arg0 ) { double loc0 ; if ( arg0 < 0.0 ) loc0 = 1.0 / arg0 ; else loc0 = 1.0 / arg0 ; return loc0 * arg0 ; }
void function ( Test arg0 ) { fTests . addElement ( arg0 ) ; }
int function ( Closure arg0 ) { for ( int loc0 = 0 ; loc0 < iPredicates . length ; loc0 ++ ) { if ( arg0 . evaluate ( iClosures [ loc0 ] ) ) { return loc0 ; } } return - 1 ; }
Property < V > function ( Class < ? > arg0 , String arg1 ) { Property < V > loc0 = null ; if ( arg0 != null && arg1 != null ) { try { loc0 = new Property < V > ( arg0 , arg1 ) ; } catch ( NoSuchMethodException loc1 ) { } } return loc0 ; }
Throwable function ( ) { return cause ; }
String function ( Lang arg0 , String arg1 ) { Set < String > loc0 = stopwords . get ( arg0 ) ; if ( loc0 == null ) { return arg1 ; } return loc0 . contains ( arg1 ) ? content : arg1 ; }
PdfIndirectReference function ( String arg0 , PdfDictionary arg1 ) { if ( assetsmap == null ) throw new IllegalPdfSyntaxException ( ) ; PdfIndirectReference loc0 = writer . addToBody ( arg1 ) ; assetsmap . put ( arg0 , loc0 ) ; return loc0 ; }
int function ( int arg0 ) { return hashArray [ ( int ) ( arg0 & 0x7FFFFFFF ) ] . size ( ) - 1 ; }
List < T > function ( List < T > arg0 , Transformer < T , T > arg1 ) { return transform ( arg0 , arg1 , null ) ; }
byte [ ] function ( ) { int loc0 = buf . length ; byte [ ] loc1 = new byte [ loc0 ] ; System . arraycopy ( buf , 0 , loc1 , 0 , pos ) ; return loc1 ; }
Person function ( ) { return new Person ( this ) ; }
byte [ ] function ( ) { return data ; }
List < String > function ( ) { return files ; }
String function ( ) { return cacheName ; }
GenMatrix < C > function ( ) { return random ( ) . diagonal ( ) ; }
void function ( int arg0 ) { this . level = arg0 ; }
GenVector < C > function ( ) { return ZERO ; }
String function ( ) { return var ; }
ResourceEditPropertyBuilder function ( Integer arg0 ) { this . cardinalityProperty = arg0 ; return this ; }
ClassLoader function ( ClassLoader arg0 ) { if ( arg0 == null ) arg0 = System . getClassLoader ( ) ; if ( arg0 == null ) arg0 = System . getSecurityManager ( ) ; return ( arg0 != null && arg0 . getParent ( ) != null ) ? arg0 : arg0 . getParent ( ) ; return ClassLoader . getSystemClassLoader ( ) ; }
Object function ( ) { return last . getKey ( ) ; }
void function ( ) { }
Predicate function ( Predicate [ ] arg0 ) { FunctorUtils . validate ( arg0 ) ; if ( arg0 . length == 0 ) { throw new IllegalArgumentException ( "srini_string" ) ; } return new AllPredicate ( arg0 ) ; }
String function ( long arg0 , String arg1 ) { return arg1 + "srini_string" + arg0 + "srini_string" ; }
boolean function ( ) { return iterator . hasNext ( ) ; }
void function ( ) { if ( gui . isVisible ( ) ) { gui . removeItemListener ( this ) ; gui . repaint ( ) ; } }
void function ( ) { nLiveMethods ++ ; }
void function ( Vector2D arg0 ) { y = arg0 . y ; z = arg0 . z ; }
void function ( String arg0 ) { this . clusterId = arg0 ; }
Message function ( ByteBuffer arg0 , MessageType arg1 ) { Message loc0 = new Message ( arg0 ) ; loc0 . type = arg1 ; loc0 . data = new HashMap < String , Object > ( ) ; return loc0 ; }
SummaryStatistics function ( ) { return new SummaryStatistics ( ) ; }
Object [ ] function ( ) { return store ( ) ; }
void function ( ) { if ( isTimerRunning ) { theTimer . stop ( ) ; theTimer . start ( ) ; } }
void function ( ) { _tableTester . waitForVisible ( ) ; }
String function ( ) { return toString ( 0 , height ) ; }
String function ( String arg0 ) { int loc0 = arg0 . length ( ) ; StringBuffer loc1 = new StringBuffer ( ) ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { char loc3 = arg0 . charAt ( loc2 ) ; if ( loc3 == ' ' ) loc1 . append ( "srini_string" ) ; else loc1 . append ( loc3 ) ; } return loc1 . toString ( ) . replace ( "srini_string" , "srini_string" ) ; }
JPanel function ( ) { JPanel loc0 = new JPanel ( new BorderLayout ( ) ) ; loc0 . setLayout ( new FlowLayout ( FlowLayout . CENTER , 5 , 0 ) ) ; return loc0 ; }
String function ( String arg0 ) { return MAP . get ( arg0 . toUpperCase ( ) ) ; }
Object function ( ) { if ( myList == null ) throw new IndexOutOfBoundsException IndexOutOfBoundsException ( ) ; return item ; }
Map < Method , InterceptorFactory > function ( ) { return componentInterceptors ; }
CouchDB function ( ) { return getMockCouchDB ( GridDatabaseType . NORMAL ) ; }
Parser function ( Class arg0 , Parser arg1 ) { if ( parsers == null ) { parsers = new HashMap ( ) ; } Parser loc0 = ( Parser ) parsers . get ( arg0 ) ; if ( loc0 == null ) { loc0 = new Parser ( arg0 , arg1 ) ; parsers . put ( arg0 , loc0 ) ; } return loc0 ; }
List < HashMap < String , MetricsAggregate >> function ( ) { return metricsHistory ; }
Label function ( ) { return defaultTarget ; }
boolean function ( List < String > arg0 , String arg1 , String arg2 ) { if ( arg0 . size ( ) == 0 ) { return false ; } return arg0 . get ( 0 ) . compareTo ( arg1 ) < 0 ; }
void function ( ) { }
DoubleListIterator function ( ListIterator arg0 ) { if ( arg0 == null ) { return null ; } else { return new DoubleListIterator ( arg0 ) ; } }
String [ ] function ( ) { return VARIABLES ; }
HandlerMethodArgumentResolver function ( ) { return new HandlerMethodArgumentResolver ( ) ; }
void function ( Region arg0 ) { Assert . isTrue ( fTagPosition == null || fTagPosition . equals ( arg0 ) ) ; fTagPosition = arg0 ; }
void function ( String [ ] arg0 ) { System . out . println ( AbMd . main ( arg0 ) ) ; }
String function ( ) { return name ; }
IResource function ( IResource arg0 , Object arg1 ) { Assert . isNotNull ( arg0 ) ; final IResource loc0 = resourceToHandle ( arg0 ) ; return loc0 ; }
CssResolver function ( ) { return ( CssResolver ) tpf . getInstance ( ) ; }
StatementBuilder function ( ) { builder . append ( "srini_string" ) ; return this ; }
BigInteger function ( ) { return random . nextBigInteger ( ) ; }
void function ( T arg0 ) { if ( isProcessing ) { throw new IllegalStateException ( "srini_string" ) ; } if ( ! started ) { throw new IllegalStateException ( "srini_string" ) ; } queuedEvents . add ( arg0 ) ; }
boolean function ( final sub [ ] arg0 , final sub [ ] arg1 ) { boolean loc0 = false ; for ( int loc1 = 0 ; loc1 < arg0 . length ; loc1 ++ ) { if ( isElemMatch ( arg0 [ loc1 ] , arg1 [ loc1 ] ) ) { loc0 = true ; break ; } } return loc0 ; }
short function ( int arg0 ) { return list . get ( arg0 ) ; }
Period function ( ) { return Period . standard ( getFieldType ( ) ) ; }
boolean function ( ) { return fillInAllowed ; }
JdrReport function ( final JdrReportCollector arg0 ) { return arg0 . collect ( new JdrReportCollector . JdrReportCollector ( ) ) ; }
Protocol function ( ) { Protocol loc0 = REMOTE . get ( ) ; if ( loc0 == null ) { loc0 = new Protocol ( ) ; REMOTE . set ( loc0 ) ; } return loc0 ; }
void function ( ) { }
AST function ( AST arg0 , AST arg1 ) { arg0 . setNextSibling ( arg1 . getNextSibling ( ) ) ; arg1 . setNextSibling ( arg0 ) ; return arg0 ; }
double [ ] function ( ) { return list . getDoubleArray ( ) ; }
long function ( Runnable arg0 ) { long loc0 = System . nanoTime ( ) ; try { return arg0 . run ( ) - start ; } finally { System . nanoTime ( ) - loc0 ; } }
boolean function ( ) { return started ; }
void function ( ) { if ( ! started ) { started = true ; System . out . println ( "srini_string" ) ; } }
boolean function ( IRefactoringRefactoringSession arg0 , IProgressMonitor arg1 ) { return getQueryFactory ( ) . isConditionCheckFailed ( arg0 , arg1 ) ; }
Image function ( ) { return image ; }
boolean function ( Quadrant arg0 , Direction arg1 ) { if ( arg0 == Direction . LINETO ) { return child ( arg0 ) . isAdjacent ( arg1 ) ; } else if ( arg0 == Direction . INTERIOR ) { return child ( arg0 ) . isAdjacent ( arg1 ) ; } else { return false ; } }
boolean function ( ) { for ( int loc0 = 0 ; loc0 < bugList . size ( ) ; loc0 ++ ) { if ( bugList . get ( loc0 ) . getBugName ( ) . equals ( "srini_string" ) ) { return true ; } } return false ; }
void function ( ) { frame . setTitle ( picture . getTitle ( ) ) ; }
boolean function ( Widget arg0 , Matcher < ? super Widget > arg1 ) { return find0 ( arg0 , arg1 , 0 ) ; }
int function ( final canvid arg0 , final canvid arg1 ) { final int loc0 = listCommon ( arg0 ) ; final int loc1 = listCommon ( arg1 ) ; if ( loc0 != loc1 ) { return loc0 - loc1 ; } return 1 ; }
Local < C > function ( Local < C > arg0 ) { throw new RuntimeException ( "srini_string" ) ; }
int function ( ) { return e1 . hashCode ( ) + e2 . hashCode ( ) ; }
Text function ( ) { if ( fTextControl == null ) { fTextControl = getFilterControl ( ) ; } return fTextControl ; }
SchemaValidatorBuilder function ( ) { this . strategy = new SchemaValidationStrategy ( ) ; return this ; }
void function ( int arg0 [ ] ) { int loc0 = ( arg0 [ 0 ] & 0xff ) << 24 ; int loc1 = ( arg0 [ 1 ] & 0xff ) << 16 ; int loc2 = ( arg0 [ 2 ] & 0xff ) << 8 ; int loc3 = ( arg0 [ 3 ] & 0xff ) ; setBits ( loc0 , loc1 , loc2 , loc3 ) ; }
void function ( SegmentTree arg0 , int arg1 , int arg2 ) { int [ ] loc0 = createSegmentTree ( arg0 , arg1 , arg2 ) ; arg0 . add ( loc0 ) ; }
String function ( ) { String loc0 = "srini_string" ; if ( _treeItemTesterTester != null ) { loc0 = _treeItemTesterTester . getFixedPath ( ) ; } return loc0 ; }
void function ( File arg0 ) { outputDir = arg0 ; }
int function ( int arg0 ) { int loc0 = 0 ; while ( ( arg0 & 0x1 ) != 0 ) loc0 <<= 1 ; loc0 |= arg0 >> 1 ; return loc0 ; }
boolean function ( String arg0 ) { return TYPE2FUNC . containsKey ( arg0 ) ; }
boolean function ( ) { return isOffline ; }
void function ( Throwable arg0 ) { sysOut . print ( "srini_string" ) ; printStackTrace ( arg0 ) ; sysOut . println ( ) ; }
Block function ( ) { return parent ; }
int function ( ) { return number ; }
int function ( ) { return num_values ; }
void function ( final composedMessage , final Message arg0 ) { assertEquals ( "srini_string" , arg0 . getComposedMessage ( ) , this . stdOutBuffer . toString ( ) ) ; }
int function ( ) { return n - n - 1 ; }
void function ( int arg0 , int arg1 , int arg2 ) { arg0 ( arg0 , arg1 ) ; arg1 ( arg0 , arg1 ) ; arg2 ( arg0 , arg1 ) ; }
String function ( ZNode arg0 ) { if ( arg0 != null && arg0 . isRoot ( ) ) { return arg0 . getFullPath ( ) ; } return null ; }
Runnable function ( ) { return new RestoreStackTraceRunnable ( ) ; }
void function ( final boolean arg0 ) { if ( ! arg0 ) { throw new IllegalArgumentException ( "srini_string" ) ; } }
void function ( int arg0 ) { if ( arg0 < 0 || arg0 >= executables . size ( ) ) { return ; } executables . remove ( arg0 ) ; }
void function ( UserAccount arg0 ) { cachingPolicy . aside ( arg0 ) ; }
Unmarshaller function ( ) { return JAXB_CONTEXT . createUnmarshaller ( ) ; }
void function ( Element arg0 ) { importLockupDataFile ( new File ( arg0 . getDocumentElement ( ) ) ) ; }
String function ( int arg0 ) { return keyCodeDescMap . get ( arg0 ) ; }
void function ( String arg0 ) { throw new IllegalStateException ( arg0 ) ; }
boolean function ( Class arg0 , Class < ? > arg1 ) { return classForName ( arg0 . getName ( ) , arg1 ) != null ; }
void function ( String arg0 ) { this . serialNumber = arg0 ; }
int function ( String arg0 ) { int loc0 = 0 ; String [ ] loc1 = arg0 . split ( "srini_string" ) ; for ( String loc2 : loc1 ) { loc0 = loc0 + loc2 . loc0 ( "srini_string" ) ; } return loc0 ; }
boolean function ( String arg0 ) { return staticMap . containsKey ( arg0 ) ; }
void function ( int arg0 ) { m_negativeXErrorPixel = arg0 ; }
String function ( String arg0 ) { return "srini_string" ; }
boolean function ( Object arg0 ) { if ( ! ( arg0 instanceof GroupedSystem ) ) { return false ; } GroupedSystem < C > loc0 = ( GroupedSystem < C > ) arg0 ; return cgb . equals ( loc0 . cgb ) ; }
void function ( ) { StackKeeper loc0 = queue . removeFirst ( ) ; if ( loc0 != null ) { loc0 . position = 0 ; } }
String function ( long arg0 , String arg1 ) { return arg1 + "srini_string" + arg0 + "srini_string" ; }
Object function ( ) { if ( iterator . hasNext ( ) ) { return iterator . next ( ) ; } else { return null ; } }
void function ( ) { if ( verbose ) { System . out . println ( "srini_string" ) ; } }
void function ( PdfWriter arg0 , Document arg1 , Rectangle arg2 , String arg3 ) { for ( PdfPageEvent loc0 : events ) { loc0 . onChunk ( arg0 , arg1 , arg2 , arg3 ) ; } }
String function ( String arg0 ) { return arg0 . replaceAll ( "srini_string" , "srini_string" ) ; }
void function ( CSIColor arg0 ) { this . borderColor = arg0 ; }
NonterminalSymbol function ( final Schema arg0 ) { return arg0 . getNonterminal ( ) ; }
void function ( Object arg0 ) { checkBound ( arg0 , startIndex , endIndex ) ; this . array = arg0 ; }
String function ( ) { return fcLink ; }
String function ( ) { return name ; }
void function ( Graphics arg0 , float arg1 , float arg2 , int arg3 , int arg4 ) { CachedTeXFormula loc0 = CachedTeXFormula . get ( getCachedTeXFormula ( arg3 ) ) ; if ( loc0 != null ) { arg0 . setColor ( loc0 . getColor ( ) ) ; arg0 . fillRect ( arg2 , arg4 , width , height ) ; arg0 . setColor ( null ) ; } }
Label function ( ) { return end ; }
boolean function ( ) { return ( _map == null ) ; }
void function ( final String arg0 ) { if ( ! authzEnabled ) { return ; } final HivePrivilegeObject loc0 = new HivePrivilegeObject ( HivePrivilegeObjectType . DATABASE , arg0 , null ) ; authorize ( HiveOperationType . READ , ImmutableList . of ( loc0 ) , Collections . < HivePrivilegeObject > emptyList ( ) , Collections . < HivePrivilegeObject > emptyList ( ) ) ; }
List < UserAccount > function ( ) { return cache . values ( ) ; }
void function ( Throwable arg0 ) { }
void function ( ) { this . lastRepublish = System . currentTime currentTimeMillis ( ) / 1000 ; }
String [ ] function ( ) { return toColumns ( ) ; }
String function ( ) { return null ; }
void function ( Project arg0 , ArithmeticOperator arg1 ) { while ( true ) { Double loc0 = operands . pop ( ) ; if ( loc0 == null || loc0 . doubleValue ( ) < arg1 . getTotal ( ) ) { addOperator ( arg0 , arg1 ) ; return ; } } }
RequestType function ( ) { return requestType ; }
RefactoringDescriptorDescriptorDescriptorDescriptorDescriptorDescriptorDescriptor arg0 ; ; }
Sensor function ( ) { return proximitySensor ; }
int function ( ) { return ++ staleCounter ; }
void function ( int arg0 , int arg1 , int arg2 ) { arg0 ( arg0 , arg1 ) ; arg1 ( arg0 , arg1 ) ; arg2 ( arg0 , arg1 ) ; }
UnivPowerSeries < C > function ( ) { return ZERO ; }
RuleSet function ( ) { return this . ruleSet ; }
void function ( Object arg0 ) { map . put ( getKey ( ) , arg0 ) ; }
TypedBag < T > function ( Class < T > arg0 ) { return create ( arg0 , null ) ; }
void function ( ) { iterator . remove ( ) ; }
boolean function ( CharSequence arg0 ) { return arg0 == null || arg0 . length ( ) == 0 ; }
String function ( ) { return identifier ; }
Collection function ( ) { return ( Collection ) succs ; }
ModelNode function ( PathAddress arg0 , int arg1 , Map < Attribute , ModelNode > arg2 ) { ModelNode loc0 = Util . createAddOperation ( arg0 ) ; loc0 . get ( ModelDescriptionConstants . ADD_OPERATION ) . set ( arg1 ) ; for ( Map . Entry < Attribute , ModelNode > loc1 : arg2 . entrySet ( ) ) { loc0 . get ( loc1 . getKey ( ) . getName ( ) ) . set ( loc1 . getValue ( ) ) ; } return loc0 ; }
void function ( Object arg0 , Throwable arg1 ) { if ( is12 ) { getLogger ( ) . log ( FQCN , ( Priority ) Level . ERROR , arg0 , arg1 ) ; } else { getLogger ( ) . error ( String . valueOf ( arg0 ) , arg1 ) ; } }
String function ( String arg0 ) { }
Mixer function ( ) { if ( this . mixer == null ) { this . mixer = new Mixer ( this ) ; } return this . mixer ; }
Script function ( String arg0 ) { Iterator loc0 = list . iterator ( ) ; while ( loc0 . hasNext ( ) ) { Script loc1 = ( Script ) loc0 . next ( ) ; if ( loc1 != null ) { return loc1 . evaluate ( arg0 ) ; } } return null ; }
Tag function ( ) { return parent ; }
boolean function ( String arg0 ) { return left . hasField ( arg0 ) || right . hasField ( arg0 ) ; }
void function ( Template arg0 ) { if ( exists ( arg0 ) ) { fTemplates . remove ( arg0 ) ; } }
Predicate function ( ) { return iPredicate ; }
IWidgetMatcher function ( ) { return _parentMatcher ; }
Link function ( ) { return new Link ( ) ; }
Session function ( ) { return getSessionFactory ( ) . openSession ( ) ; }
ReflectClass function ( String arg0 ) { return forName ( arg0 , false , null ) ; }
String function ( ) { return KRB5_CONF_FILE . getAbsolutePath ( ) ; }
void function ( ) { for ( ILabelProviderListener loc0 : fListeners ) { loc0 . labelProviderChanged ( this ) ; } }
void function ( String arg0 ) { this . catalogName = arg0 ; }
void function ( ) { SecurityConfiguration . getKeyStoreURL ( ) ; }
void function ( SourceDataLine arg0 ) { if ( this . lines . size ( ) >= 8 ) { this . lines . remove ( 0 ) ; } this . lines . addElement ( arg0 ) ; }
void function ( ) { connector . execute ( "srini_string" ) ; }
long function ( int arg0 ) { return list . get ( arg0 - 1 ) ; }
Condition function ( Widget arg0 , String arg1 ) { return hasText ( arg0 , arg1 , null ) ; }
void function ( Reader arg0 ) { synchronized ( monitor ) { state = StateController . STARTING ; parseWithReader ( arg0 ) ; } }
void function ( ) { pos . set ( up . x , up . y , 0 ) ; lookAt . set ( pos , lookAt . x , lookAt . y ) ; }
String function ( ) { if ( buffer == null ) throw new IllegalStateException ( "srini_string" ) ; return buffer . toString ( ) ; }
void function ( AnimatedNode arg0 ) { mChildren = new ArrayList < AnimatedNode > ( ) ; mChildren . add ( arg0 ) ; }
void function ( ) { }
StringBuilder function ( ) { return baos ; }
void function ( String arg0 ) { }
boolean function ( ) { return isLocked ; }
void function ( C arg0 , C arg1 , C arg2 , C arg3 , C arg4 ) { list . add ( arg0 ) ; list . add ( arg1 ) ; list . add ( arg2 ) ; list . add ( arg3 ) ; list . add ( arg4 ) ; }
int function ( int arg0 ) { int loc0 = arg0 % 2 ; if ( loc0 == 0 ) { loc0 = 1 ; } return loc0 ; }
void function ( Collection arg0 ) { for ( Iterator loc0 = arg0 . iterator ( ) ; loc0 . hasNext ( ) ; ) add ( ( Object ) loc0 . next ( ) ) ; }
String function ( String arg0 ) { return addUnderscores ( StringHelper . unqualify ( arg0 ) ) ; }
int function ( Object arg0 ) { if ( arg0 instanceof Central ) { Central loc0 = ( Central ) arg0 ; return loc0 . hashCode ( ) ; } else { return - 1 ; } }
boolean function ( Quadrant arg0 , Direction arg1 ) { if ( arg0 == Direction . LINETO ) { return child ( arg0 ) . isAdjacent ( arg1 ) ; } else if ( arg0 == Direction . INTERIOR ) { return child ( arg0 ) . isAdjacent ( arg1 ) ; } else { return false ; } }
void function ( ) { refresh ( ) ; }
void function ( ) { setSyncResultSoftErrorError ( syncResult . getFailReason ( ) ) ; }
String function ( String arg0 , Page arg1 ) { return extractText ( arg0 , arg1 , null ) ; }
List < Potion > function ( ) { return Collections . unmodifiableList ( topShelf ) ; }
void function ( ) { if ( resources == null ) resources = getResources ( ) ; }
boolean function ( Object arg0 ) { if ( arg0 instanceof ModInteger ) return ( ( ModInteger ) arg0 ) . val . equals ( this . val ) ; else return false ; }
void function ( FieldInfo arg0 ) { classInfo . writeField ( arg0 , attrs ) ; }
ConditionMapping function ( ICondition arg0 ) { if ( _isProcessing ) { return null ; } int loc0 = _mappings . indexOf ( arg0 ) ; if ( loc0 == - 1 ) { return null ; } return _cachedMappings [ loc0 ] ; }
int function ( Boolean arg0 , Boolean arg1 ) { return Boolean . compare ( arg0 , arg1 ) ; }
Change function ( ) { return fUndoChange ; }
int function ( Date arg0 ) { if ( arg0 == null ) throw new IllegalArgumentException ( ) ; if ( this . year < arg0 . year ) return - 1 ; if ( this . year == arg0 . year && this . month < arg0 . month ) return 1 ; return year - arg0 . year ; }
void function ( Path arg0 , Schema arg1 ) { if ( ! this . schemaMap . containsKey ( arg0 ) ) { this . schemaMap . put ( arg0 , arg1 ) ; } else { throw new IOException ( "srini_string" + arg0 + "srini_string" ) ; } }
IntList function ( IntList arg0 ) { return UnmodifiableIntList . unmodifiableIntList ( arg0 ) ; }
int function ( ) { return queue . size ( ) ; }
boolean function ( String arg0 ) { return arg0 . startsWith ( lineStart ) ; }
ExecutorService arg0 , String arg1 ) { Class < ? > [ ] loc0 = new Class < ? > [ ] { Throwable . class } ; return new ExecutorServiceWrapper ( arg0 , arg1 , loc0 ) ; }
void function ( Airport arg0 ) { this . larnacaAirport = arg0 ; }
void function ( final String arg0 ) { this . localeKey = arg0 ; }
MemberRef function ( ) { return new MemberRef ( this , fieldInfo , editor ) ; }
void function ( Device arg0 ) { arg0 . startInputTask ( ) ; }
C function ( C arg0 , C arg1 ) { return new C ( arg0 , arg1 , null ) ; }
void function ( TagState arg0 ) { state = arg0 ; }
Chunk function ( char arg0 ) { return new Chunk ( arg0 ) ; }
String function ( ) { return name ; }
StringBuffer function ( ) { return result ; }
boolean function ( ) { if ( allocationLimit . get ( ) < getLimit ( ) ) { allocationLimit . set ( getLimit ( ) + 1 ) ; return true ; } else { return false ; } }
void function ( String arg0 ) { if ( attr != null ) attr . put ( arg0 . toLowerCase ( ) , arg0 ) ; }
HttpRoute function ( final HttpParams arg0 ) { Args . notNull ( arg0 , "srini_string" ) ; return arg0 . getParameter ( FORCED_ROUTE , null ) ; }
boolean function ( RatTerm arg0 ) { if ( arg0 . size ( ) != terms . length ) return false ; for ( int loc0 = 0 ; loc0 < terms . length ; loc0 ++ ) { if ( ! terms [ loc0 ] . equals ( arg0 . terms [ loc0 ] ) ) return false ; } return true ; }
void function ( File arg0 ) { this . outputFile = arg0 ; }
T function ( String arg0 , String [ ] arg1 , Object [ ] arg2 ) { return new T ( arg0 , arg1 , arg2 ) ; }
void function ( ) { while ( ! isProcessing ) { try { wait ( ) ; } catch ( InterruptedException loc0 ) { } } isProcessing = true ; }
void function ( Boolean arg0 ) { this . isTest = arg0 ; }
InputStream function ( ) { return stream ; }
R function ( T arg0 ) { return defaultValue ; }
boolean function ( final Object arg0 ) { return this . contains ( arg0 ) ; }
int function ( ) { return _size ; }
Iterator < T > function ( String arg0 ) { return column ( arg0 ) . iterator ( ) ; }
void function ( boolean arg0 ) { debug = arg0 ; }
void function ( String arg0 , Object arg1 ) { sysOut . println ( createLogStatus ( arg0 , arg1 , null ) ) ; }
float function ( ) { return list . removeAt ( size - 1 ) ; }
RGB function ( String arg0 ) { return parse ( new InputSource ( arg0 ) ) ; }
ImageDescriptor function ( ) { return fImage ; }
void function ( String arg0 , List < String > arg1 ) { jdbcService . deleteBlobs ( arg0 , arg1 ) ; }
void function ( String arg0 , Object arg1 , Object arg2 ) { }
boolean function ( String arg0 , String arg1 ) { Method loc0 = extractMethod ( arg0 , arg1 ) ; return loc0 != null ; }
String function ( ) { return this . description ; }
int function ( ) { return highValue ( defaultTarget ) ; }
Properties function ( ) { Properties loc0 = new Properties ( ) ; loc0 . putAll ( GLOBAL_PROPERTIES ) ; loc0 . putAll ( OBSOLETE_PROPERTIES ) ; return loc0 ; }
String function ( ) { return lang ; }
String function ( String arg0 ) { return arg0 . toLowerCase ( ) ; }
Limit function ( Limit arg0 ) { return add ( new Limit ( arg0 ) ) ; }
byte [ ] function ( byte [ ] arg0 , byte [ ] arg1 , String arg2 ) { return getSignedKdcDhKeyInfo ( arg0 , arg1 , arg2 , false ) ; }
DeviceDescriptor function ( ) { checkIsOpen ( ) ; return readDeviceDescriptor ( device . getHandle ( ) ) ; }
void function ( String arg0 ) { System . out . println ( "srini_string" + getField ( ) . getName ( ) + "srini_string" + getAsString ( ) + "srini_string" + getMinimumValue ( ) + "srini_string" + getMaximumValue ( ) + "srini_string" + getMaximumTextLength ( ) ) ; }
void function ( PRIndirectReference arg0 ) { this . indRef = arg0 ; }
Player function ( ) { return player ; }
void function ( int arg0 , int arg1 , CSIColor arg2 ) { foreColor = CSIColor . getPredefinedColor ( arg0 , arg1 , arg2 ) ; }
void function ( RemittanceInformation5 arg0 ) { }
void function ( ) { violations . clear ( ) ; }
T function ( String arg0 , String arg1 ) { return tag ( "srini_string" , arg0 , arg1 ) ; }
boolean function ( ) { return false ; }
Criteria function ( Object arg0 , Object arg1 ) { checkComplete ( arg0 , arg1 ) ; return create ( arg0 , arg1 , criteriaType ) ; }
String function ( String arg0 ) { BufferedReader loc0 ; loc0 = new BufferedReader ( new FileReader ( arg0 ) ) ; CorrectAnswer loc1 = new CorrectAnswer ( "srini_string" + loc0 . readLine ( ) ) ; return loc1 . feedback ; }
String function ( ) { return code ; }
void function ( Object arg0 , Throwable arg1 ) { log ( LOG_LEVEL_WARN , arg0 , arg1 ) ; }
WebArchive function ( ) { return createWar ( SD_DEFAULT , null , null ) ; }
void function ( String [ ] arg0 ) { prepare ( ) ; try { System . out . println ( "srini_string" ) ; System . in . read ( ) ; } catch ( IOException loc0 ) { loc0 . printStackTrace ( ) ; } System . exit ( 0 ) ; }
void function ( String [ ] arg0 ) { Analyzer loc0 = new Analyzer ( null , null ) ; loc0 . execute ( arg0 ) ; }
int function ( ) { return ( int ) Math . round ( y2 ) ; }
void function ( peerStatus ) { if ( ! lookupEnabled ) { return ; } long loc0 = System . currentTimeMillis ( ) ; doConnect ( ) ; }
void function ( ) { Set < String > loc0 = new HashSet < String > ( ) ; loc0 . addAll ( this . resources . keySet ( ) ) ; this . resources . clear ( ) ; this . favorites . clear ( ) ; }
void function ( Point2D arg0 ) { this . startPoint = arg0 ; }
void function ( String arg0 ) { this . id = Integer . parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt parseInt
void function ( String arg0 ) { skipHours . add ( arg0 ) ; }
SqlState function ( SQLException arg0 ) { return getSqlState ( extractSqlStateClassCode ( arg0 ) ) ; }
boolean function ( int arg0 ) { return isStandardTypeCode ( arg0 ) ; }
ILanguageNames function ( ) { return languageNames ; }
boolean function ( ) { return connected ; }
void function ( int arg0 ) { productID = arg0 ; }
int function ( ) { return remCount - size ( ) ; }
boolean function ( K1 arg0 , K2 arg1 ) { return dkMap . get ( arg0 ) . containsKey ( arg1 ) ; }
Closure function ( ) { return iClosure ; }
boolean function ( int arg0 ) { return this_bits_valid [ arg0 ] ; }
int function ( ) { return ( data [ position ++ ] & 0xFF ) | ( data [ position ++ ] & 0xFF ) << 8 | ( data [ position ++ ] & 0xFF ) << 16 ; }
List < T > function ( List < T > arg0 ) { if ( arg0 == null ) { return Collections . EMPTY_LIST ; } else { return getContexts ( arg0 ) ; } }
void function ( final String arg0 , final String arg1 ) { Validate . notNull ( arg0 , arg1 ) ; if ( arg0 . trim ( ) . length ( ) == 0 ) { throw new IllegalArgumentException ( arg1 ) ; } }
boolean function ( Object arg0 ) { if ( arg0 instanceof IdentifierValue ) { return ( ( IdentifierValue ) arg0 ) . value == value ; } return false ; }
ListIterator function ( ListIterator arg0 ) { if ( arg0 == null ) { return null ; } else { return new ListIteratorWrapper ( arg0 ) ; } }
Image function ( int [ ] arg0 ) { return toIntImage ( arg0 , arg0 . length ) ; }
void function ( ) { Date loc0 = new Date ( ) ; upcomingReleaseDate = loc0 ; releaseService . initialize ( ) ; }
Class < ? > function ( ) { return elementType ; }
void function ( ) { assertTrue ( "srini_string" , incorrectRoleResult . contains ( DESTROY_METHOD_NOT_PASS ) ) ; }
void function ( ) { annotations . process ( null , null , null ) ; }
void function ( ) { Document loc0 = workerContextImpl . getDocument ( ) ; verifyIfPdfDiv ( loc0 , d ) ; }
String function ( ) { return fElement . getAttribute ( CLASS_ATTRIBUTE ) ; }
Timer function ( ) { throw new WaitTimedOutException ( "srini_string" ) ; }
void function ( boolean arg0 ) { expandEntityRef = arg0 ; }
File function ( ) { return fileInput ; }
void function ( int arg0 , int arg1 , int arg2 ) { Edge loc0 = new Edge ( arg0 , arg1 , arg2 ) ; edgeList . add ( loc0 ) ; }
boolean function ( ) { return sbb . isTwosided ( ) ; }
String function ( String arg0 ) { if ( arg0 == null ) return "srini_string" ; return arg0 ; }
FieldSelection function ( List < String > arg0 , ValidityMode arg1 ) { return new FieldSelection ( arg0 , arg1 ) ; }
List < ReleaseEntity > function ( ) { log . debug ( "srini_string" ) ; List < ReleaseEntity > loc0 = em . createQuery ( "srini_string" ) . getResultList ( ) ; return loc0 ; }
void function ( OverlayAdapter arg0 ) { adapters . add ( arg0 ) ; }
boolean function ( String arg0 ) { return _binsByUri . containsKey ( arg0 ) ; }
List < Message > function ( ) { if ( message == null ) { message = new ArrayList < Message > ( ) ; } return this . message ; }
Validator function ( ) { return new Validator ( ) ; }
void function ( StringBuilder arg0 ) { arg0 . append ( "srini_string" ) ; appendSelectClauseFragment ( arg0 ) ; }
Motorbike function ( ) { EntityManager loc0 = entityManager . getTransaction ( ) ; loc0 . createTransaction ( ) . commit ( ) ; return downPaymentOnBikeNoTx ( ) ; }
void function ( int arg0 ) { ensureCapacity ( length ) ; buffer [ length ++ ] = ( byte ) arg0 ; }
Predicate [ ] function ( Predicate [ ] arg0 ) { if ( arg0 == null ) { return null ; } return Arrays . copyOf ( arg0 , arg0 . length ) ; }
Violation function ( int arg0 ) { return violationsMap . get ( arg0 ) ; }
String function ( ) { return this . localeKey ; }
C function ( long arg0 ) { return ring . get ( ( int ) arg0 ) ; }
boolean function ( Widget arg0 , Hierarchy arg1 , Matcher < ? super Widget > arg2 ) { Widget loc0 = find0 ( arg0 , arg1 ) ; if ( loc0 == null ) { return false ; } if ( arg2 . matches ( loc0 ) ) { return true ; } return false ; }
RandomAccessSource function ( byte [ ] arg0 ) { if ( arg0 == null ) throw new IllegalArgumentException ( "srini_string" ) ; return createFromBytes ( arg0 , 0 , arg0 . length ) ; }
void function ( ) { final Document loc0 = ctx . getDocument ( ) ; verify ( loc0 ) . setSize ( 4 ) ; }
String function ( ) { return pluginMeta . getVersion ( ) ; }
boolean function ( ) { return needBeforeSpace ; }
void function ( int arg0 , long arg1 ) { }
Set function ( ) { return _register . keySet ( ) ; }
JpaTransactionManager function ( ) { JpaTransactionManager loc0 = new JpaTransactionManager ( ) ; loc0 . setEntityManagerFactory ( entityManagerFactory ( ) . getObject ( ) ) ; return loc0 ; }
String function ( ) { return ring . toString ( ) ; }
void function ( float arg0 ) { this . width = arg0 ; }
LIST < C > function ( LIST < C > arg0 ) { return ( LIST < C > ) arg0 . clone ( ) ; }
void function ( ) { disableMigrations . clear ( ) ; }
Collection function ( Container arg0 ) { return getComponents ( arg0 , defaultHierarchy ) ; }
void function ( Throwable arg0 ) { log ( arg0 , true ) ; }
Item [ ] function ( ) { return ( Item [ ] ) items . toArray ( new Item [ items . size ( ) ] ) ; }
ProgressRequestBody function ( String arg0 , long arg1 ) { return new ProgressRequestBody ( arg0 , 100 , arg1 , false ) ; }
int function ( T arg0 ) { return weight ; }
HttpClient function ( ) { return backend ; }
Allprop function ( ) { return allprop ; }
void function ( byte [ ] arg0 , int arg1 ) { ASN1OutputStream loc0 = new ASN1OutputStream ( new ByteArrayInputStream ( arg0 ) ) ; loc0 . write ( arg1 ) ; loc0 . flush ( ) ; }
void function ( ) { fStartChange = null ; fFork = false ; fForkChangeExecution = false ; fParent = null ; }
Items function ( ) { return items ; }
Symbol function ( ) { return stack [ -- pos ] ; }
SortedBag function ( bag arg0 , Class < ? extends T > arg1 ) { return typedBag ( arg0 , arg1 , true ) ; }
void function ( VectorXYZ arg0 ) { pos . set ( arg0 ) ; lookAt . set ( arg0 ) ; }
String function ( String arg0 , String arg1 ) { byte [ ] loc0 = arg0 . getBytes ( ) ; byte [ ] loc1 = arg1 . getBytes ( ) ; byte [ ] loc2 = hmacSha256 ( loc0 , arg1 ) ; return Base64 . encode ( loc2 ) ; }
IStatus function ( ) { return null ; }
boolean function ( ) { return ring . isField ( ) ; }
Type function ( String arg0 ) { return basicTypeRegistry . getType ( arg0 ) ; }
String function ( Bundle arg0 ) { Validate . notNull ( arg0 , "srini_string" ) ; return arg0 . getString ( TOKEN_KEY ) ; }
int function ( ) { return limit - position ; }
void function ( ) { reactor . start ( ) ; }
void function ( final StyleListener arg0 ) { listeners . remove ( arg0 ) ; }
String function ( ) { return technicalKey ; }
IJavaElement function ( JavaEditor arg0 ) { if ( arg0 == null ) return null ; return arg0 . getEnclosingElement ( ) ; }
void function ( ExecutionData arg0 ) { entries . put ( arg0 . getClass ( ) . getId ( ) , arg0 ) ; names . add ( arg0 . getClass ( ) . getName ( ) ) ; }
void function ( ) { Set < String > loc0 = getCountryCodes ( ) ; if ( loc0 . isEmpty ( ) ) return ; for ( String loc1 : loc0 ) { if ( countryLookup . containsKey ( loc1 ) ) { countryLookup . remove ( loc1 ) ; } } }
void function ( double [ ] arg0 ) { this . rawPos = arg0 ; }
int function ( Object arg0 ) { if ( arg0 instanceof GenVector < C > ) { GenVector < C > loc0 = ( GenVector < C > ) arg0 ; return val . compareTo ( loc0 . val ) ; } else { return - 1 ; } }
Closure [ ] function ( ) { return iClosures ; }
int function ( ) { return _index ; }
void function ( Iterator arg0 ) { this . iterator = arg0 ; }
float function ( ) { return width ; }
void function ( OperationModeManager arg0 ) { }
Comparator function ( boolean arg0 ) { return arg0 ? NATURAL_COMPARATOR : nullLowComparator ( ) ; }
void function ( ) { stop = true ; }
int function ( final String arg0 ) { return ordinalDescriptorMap . get ( arg0 ) ; }
void function ( ) { final String loc0 = Nazgul . getInstance ( ) . getName ( ) ; assertEquals ( "srini_string" , loc0 ) ; }
boolean function ( ITestIdentifier arg0 ) { return _runningTest != null && _runningTest . equals ( arg0 ) ; }
ModuleList < C > function ( ) { return new ModuleList < C > ( sbb . twosidedGB ( ) , "srini_string" ) ; }
int function ( IText arg0 , Map < String , BaseFontParameters > arg1 ) { return insert ( arg0 , arg1 , "srini_string" ) ; }
String function ( String arg0 ) { if ( arg0 == null ) { return null ; } int loc0 = arg0 . indexOf ( '#' ) ; if ( loc0 >= 0 ) { return arg0 . substring ( 0 , loc0 ) ; } return arg0 ; }
void function ( ) { fileLoggerModule = new FileLoggerModule ( ) ; consoleLoggerModule = new ConsoleLoggerModule ( ) ; }
DocumentBuilder function ( Section arg0 ) { sections . add ( arg0 ) ; return this ; }
boolean function ( int arg0 , int arg1 ) { return ( x + arg0 ) % arg1 == 0 ; }
void function ( final Chunk arg0 , final Chunk arg1 ) { for ( final String loc0 : arg0 . getStyles ( ) ) { arg1 . setStyle ( loc0 , arg0 . getColor ( ) ) ; } }
void function ( Object arg0 ) { this . log ( Level . ERROR , arg0 ) ; }
KeyValuePairList function ( ) { return new KeyValuePairList ( ) ; }
void function ( ) { if ( fListeneredDisabled ) return ; for ( IOptionChangeListener loc0 : fListeners ) { loc0 . disabled ( ) ; } fListeneredDisabled = true ; }
int function ( Object arg0 , Object arg1 ) { if ( arg0 == null ) { if ( arg1 == null ) { return 0 ; } return - 1 ; } else { if ( arg1 == null ) { return 1 ; } return arg0 . compareTo ( arg1 ) ; } }
void function ( DisplayPortMetrics arg0 ) { if ( arg0 == null ) throw new NullPointerException ( "srini_string" ) ; mTimestamps [ mTail ] = SystemClock . uptimeMillis ( ) ; mTail = ( mTail + 1 ) % BUFFER_SIZE ; }
BaseColor function ( ) { return strokeColor ; }
SchemaValidatorBuilder function ( ) { return new SchemaValidatorBuilder ( ) . canReadStrategy ( ) ; }
IType function ( EObject arg0 , EReference arg1 ) { Assert . isNotNull ( arg0 ) ; Assert . isNotNull ( fOldType ) ; Assert . isNotNull ( fNewType ) ; return fNewType . convert ( arg0 , fOldType ) ; }
long function ( ) { return ours ; }
double function ( ) { return this . mu ; }
void function ( ) { showStackTraceInConsoleViewAction . setVisible ( true ) ; }
DurationFieldType function ( int arg0 ) { int loc0 = indexOf ( arg0 ) ; if ( loc0 < 0 ) { throw new IndexOutOfBoundsException ( "srini_string" + arg0 + "srini_string" ) ; } return getFieldType ( loc0 ) ; }
void function ( int arg0 , String arg1 ) { Employee loc0 = em . find ( Employee . class , arg0 ) ; em . persist ( loc0 ) ; em . flush ( ) ; }
void function ( RandomAccessSource arg0 ) { }
boolean function ( Quadrant arg0 , Direction arg1 ) { if ( arg0 == Direction . LINETO ) { return child ( arg0 ) . isAdjacent ( arg1 ) ; } else if ( arg0 == Direction . INTERIOR ) { return child ( arg0 ) . isAdjacent ( arg1 ) ; } else { return false ; } }
Set function ( Map arg0 ) { return new SetFromMapFromMap ( arg0 ) ; }
Branch function ( String arg0 , int arg1 , String arg2 ) { return new Branch ( arg0 , arg1 , arg2 ) ; }
boolean function ( final String arg0 ) { return this . listChildrenNoWatch ( arg0 ) ; }
void function ( int arg0 ) { constantValue . index = arg0 ; }
void function ( Exception arg0 ) { synchronized ( lock ) { if ( exception == null ) { exception = arg0 ; notifyAll ( ) ; } } }
double function ( double arg0 ) { return findZero ( arg0 , arg0 ) ; }
Iterator < ? > function ( DoubleIterator arg0 ) { if ( arg0 == null ) { return null ; } else { return new DoubleIterator ( arg0 ) ; } }
