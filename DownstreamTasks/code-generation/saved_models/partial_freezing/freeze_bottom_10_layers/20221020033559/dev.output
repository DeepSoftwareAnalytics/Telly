void function ( ) { Preconditions . checkState ( ! canRead ( ) , "srini_string" ) ; }
void function ( String arg0 ) { dvdProperties . remove ( arg0 ) ; }
Map < SpringConfig , String > function ( ) { Map < SpringConfig , String > loc0 = new HashMap < > ( ) ; for ( Map . Entry < SpringConfig , String > loc1 : mSpringConfigMap . entrySet ( ) ) { loc0 . put ( loc1 . getKey ( ) , loc1 . getValue ( ) ) ; } return loc0 ; }
File function ( File arg0 ) { if ( ! arg0 . exists ( ) ) { return new File ( arg0 , "srini_string" ) ; } return arg0 ; }
boolean function ( ) { return coalescing ; }
void function ( String arg0 , Object arg1 ) { delegatedUserKey . set ( arg0 , arg1 ) ; }
void function ( Object arg0 , Throwable arg1 ) { log ( Level . TRACE , String . valueOf ( arg0 ) , arg1 ) ; }
Object function ( ) { return instance ; }
boolean function ( ) { return true ; }
void function ( final int arg0 ) { markAsOverriden ( "srini_string" ) ; this . evictionWakeUpInterval = arg0 ; }
IProduct function ( ) { return product ; }
String function ( ASN1Primitive arg0 ) { try { return arg0 . toString ( ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new Error ( loc0 ) ; } }
void function ( ) { int loc0 = readInt24LE ( ) ; byte [ ] loc1 = new byte [ 2 ] ; int loc2 = readInt24LE ( ) ; int loc3 = readInt24LE ( ) ; for ( int loc4 = 0 ; loc4 < 2 ; loc4 ++ ) { loc1 [ loc4 ] = ( byte ) ( loc2 & 0xFF ) ; loc1 [ loc4 + 1 ] = ( byte ) ( loc3 & 0xFF ) ; } writeInt24LE ( loc1 ) ; }
boolean function ( ClassDoc arg0 , String arg1 ) { return find_enabled ( arg0 , arg1 ) ; }
LongList function ( ) { return unmodifiableLongList ( ) ; }
Getcontentlanguage function ( ) { return contentlanguage ; }
void function ( ) { SecurityManager loc0 = System . getSecurityManager ( ) ; if ( loc0 != null ) { System . setSecurityManager ( null ) ; } }
NameParts function ( String arg0 ) { return new QualifiedNameParts ( arg0 ) ; }
Location function ( Element arg0 ) { Input loc0 = new Input ( arg0 . getText ( ) ) ; return new Location ( loc0 ) ; }
boolean function ( ) { return _display . isShowing ( ) ; }
void function ( String arg0 , String arg1 ) { if ( arg0 == null ) { throw new XMPException ( "srini_string" + arg1 + "srini_string" ) ; } }
void function ( ) { m_trace . clear ( ) ; }
String function ( ) { return ReasonUtils . describeOS ( null ) ; }
boolean function ( Object arg0 ) { return false ; }
int function ( ) { return count ; }
void function ( final boolean arg0 ) { executor . setBoolean ( arg0 , arg0 ) ; }
boolean function ( ) { return document . getContent ( ) . getDecoration ( ) . isCopied ( ) ; }
long function ( ) { return executionHitCount ; }
Dialog function ( Activity arg0 , String arg1 ) { ( new AlertDialog . Builder ( arg0 ) ) . setTitle ( arg1 ) . setMessage ( arg1 ) . setNeutralButton ( android . R . string . ok , null ) . create ( ) ; return this ; }
Section function ( String arg0 ) { ensureNotBuilt ( ) ; sections . add ( arg0 ) ; return sections . get ( arg0 ) ; }
Product function ( ) { return new Product ( ) ; }
FigureInfo function ( ) { return _figure ; }
Integer function ( int arg0 ) { return arg0 ; }
ProvidedPort function ( ) { return new ProvidedPort ( ) ; }
String function ( String arg0 , String arg1 ) { int loc0 = 0 ; while ( loc0 < arg0 . length ( ) && arg0 . charAt ( loc0 ) == arg1 ) { loc0 ++ ; } return arg0 . substring ( loc0 ) ; }
int function ( ProtocolVersion arg0 ) { return this . protocol . compareTo ( arg0 . protocol ) ; }
void function ( Fum arg0 ) { this . fum = arg0 ; }
void function ( ByteBuffer arg0 ) { }
void function ( ) { SecurityConfiguration . getCipherKey ( ) ; }
int function ( Map < Object , Object > arg0 ) { return arg0 == null ? 0 : arg0 . size ( ) ; }
void function ( Point2D arg0 ) { this . startPoint = arg0 ; }
int function ( int arg0 , int arg1 ) { int loc0 = 0 ; while ( loc0 < arg0 ) { loc0 = arg0 % arg1 ; } return loc0 ; }
void function ( String [ ] arg0 ) { System . err . println ( "srini_string" ) ; System . exit ( 1 ) ; }
void function ( String arg0 , Object arg1 , MessageCallback arg2 ) { }
void function ( Collection < E > arg0 , Collection < E > arg1 , Comparator < E > arg2 ) { for ( int loc0 = 0 ; loc0 < arg1 . size ( ) ; loc0 ++ ) { E loc1 = arg1 . get ( loc0 ) ; if ( arg2 . compare ( loc1 , arg0 . get ( loc0 ) ) < 0 ) { arg0 . add ( loc1 ) ; } } }
long function ( ) { return timestamp ; }
String function ( ) { return name ; }
Piece function ( int arg0 , int arg1 ) { return this . pieces [ arg0 ] ; }
String function ( String arg0 ) { return ( String ) bundle . getString ( arg0 ) ; }
void function ( ISourceFileLocator arg0 ) { delegates . add ( arg0 ) ; }
void function ( double arg0 , double arg1 , double arg2 ) { if ( arg0 < arg1 ) { throw new IllegalArgumentException ( "srini_string" + arg0 + "srini_string" + arg1 + "srini_string" + arg2 ) ; } }
Integer function ( ) { return repeat ; }
Description function ( Annotation arg0 ) { return fChildren . add ( arg0 ) ; }
byte [ ] function ( short arg0 ) { byte [ ] loc0 = new byte [ 2 ] ; loc0 [ 0 ] = ( byte ) ( arg0 >>> 8 ) ; loc0 [ 1 ] = ( byte ) ( arg0 >>> 0 ) ; return loc0 ; }
Criteria function ( ) { checkComplete ( ) ; criteriaChain . add ( new Criteria ( type , prefixPath , "srini_string" ) ) ; return this ; }
Configuration function ( ) { return new Configuration ( ) ; }
Integer [ ] function ( int [ ] arg0 ) { Integer [ ] loc0 = new Integer [ arg0 . length ] ; for ( int loc1 = 0 ; loc1 < arg0 . length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }
void function ( String arg0 , char arg1 ) { loadMaps ( ) ; Character loc0 = new Character ( arg0 ) ; Generator loc1 = getGenerator ( arg1 ) ; if ( loc1 != null ) { loc1 . generateKeyStroke ( loc0 ) ; } }
double function ( ) { return this . polynomialSplineDerivative ; }
ValidatorConfiguration function ( String arg0 , String arg1 ) { properties . put ( arg0 , arg1 ) ; return this ; }
void function ( ) { testKdcChain ( "srini_string" , true ) ; }
CookieAttributeHandler function ( final String arg0 ) { return findAttribHandler ( arg0 , null ) ; }
void function ( ) { Object [ ] loc0 = this . state ; if ( loc0 != null && loc0 . length > 0 ) { Object [ ] loc1 = new Object [ loc0 . length ] ; for ( int loc2 = 0 ; loc2 < loc0 . length ; loc2 ++ ) { doRealized ( loc0 [ loc2 ] , loc1 ) ; } } }
void function ( String [ ] arg0 ) { try { System . out . println ( "srini_string" ) ; } catch ( Exception loc0 ) { loc0 . printStackTrace ( ) ; } }
void function ( String arg0 ) { this . className = arg0 ; }
int function ( final Comparable arg0 , final Comparable arg1 ) { return arg0 . compareTo ( arg1 ) ; }
void function ( ) { }
String function ( ) { return doSendApiRequest ( "srini_string" ) ; }
String function ( ) { return responseHeader ; }
GenMatrix < C > function ( ) { int loc0 = 0 ; for ( C loc1 : val ) loc0 += loc1 ; return new GenMatrix < C > ( loc0 ) ; }
void function ( int arg0 , int arg1 ) { obstacleHeigth = arg0 ; }
AuditCriterion < Object > function ( AuditCriterion arg0 , AuditCriterion arg1 ) { return new AuditCriterion < Object > ( arg0 , arg1 ) ; }
T function ( T arg0 , String arg1 ) { notNull ( arg0 , "srini_string" ) ; notNull ( arg1 , "srini_string" ) ; return arg0 ; }
void function ( @ NotNull MessageType arg0 ) { myMsgTypeByMd5Sum . put ( arg0 . getId ( ) , arg0 ) ; }
Node function ( Node arg0 ) { return arg0 ; }
void function ( String arg0 ) { this . fcKey = arg0 ; }
Double function ( ) { return xValue ; }
void function ( Hashtable < K , V > arg0 ) { }
float function ( ) { return textRectangle . get ( ) ; }
Long function ( ) { return idCounter ; }
String [ ] function ( String arg0 ) { return this . collectionPropertyMappingByRole . get ( arg0 ) ; }
Collection < Pair < String , ? extends Table >> function ( List < String > arg0 ) { throw new UnsupportedOperationException ( "srini_string" ) ; }
void function ( ) { }
UnivPowerSeries < C > function ( ) { return ONE ; }
EditPartFactory function ( ) { return editPartFactory ; }
void function ( boolean arg0 ) { fResolveBindings = arg0 ; }
double function ( double arg0 , double arg1 , double arg2 , double arg3 ) { return arg0 + ( arg1 - arg0 ) * ( arg2 - arg1 ) ; }
boolean function ( PastryContact arg0 ) { int loc0 = ccwNodes . indexOf ( arg0 ) ; if ( loc0 >= 0 ) { ccwNodes . remove ( loc0 ) ; } return cwNodes . remove ( loc0 ) ; }
boolean function ( ) { return lastReturned != - 1 ; }
DateTimeFieldType function ( int arg0 ) { return getField ( arg0 ) . getType ( ) ; }
ActiveLock function ( ) { return new ActiveLock ( ) ; }
Product < C > function ( java . io . Reader arg0 ) { return parse ( arg0 , null ) ; }
void function ( String arg0 ) { File loc0 = new File ( arg0 ) ; if ( loc0 . exists ( ) ) { boolean loc1 = loc0 . delete ( ) ; if ( ! loc1 ) { error ( "srini_string" + arg0 ) ; } } }
boolean function ( ) { return pdfxConformance > 3 ; }
boolean function ( ) { return anyUnsavedChanges0 ; }
boolean function ( ) { return fFilesSaved ; }
double function ( double [ ] arg0 , double [ ] arg1 , double [ ] arg2 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 . length ; loc1 ++ ) { loc0 += arg2 [ loc1 ] * arg0 [ loc1 ] ; } return loc0 ; }
void function ( ) { f1z = f1z + I1 ; f2z = f2z + I2 ; f3z = f3z + I3 ; f4z = f4z + I4 ; }
void function ( String arg0 , Collection < ? extends BaseViolation > arg1 , Collection < ? extends BaseViolation > arg2 ) { assertContainsOnly ( arg0 , arg1 , arg2 ) ; }
Collection < EvaluationListener > function ( ) { return evaluationListeners ; }
Callable < Throwable > function ( ) { return new Callable < Throwable > ( ) { @ Override public Throwable call ( ) { return findRootCause ( ) ; } } ; }
boolean function ( BigInteger arg0 ) { return compareTo ( arg0 ) == 0 ; }
Event [ ] function ( ) { return al . getLastEventTime ( ) ; }
int function ( Context arg0 , int arg1 ) { int loc0 = arg0 . getResources ( ) . getDimensionPixelSize ( arg1 ) ; return loc0 ; }
Schema function ( String arg0 ) { return new Schema ( arg0 ) ; }
String [ ] function ( ) { return columnNames ; }
Closure function ( Closure arg0 ) { return new Closure ( arg0 ) ; }
void function ( double arg0 ) { if ( Double . isNaN ( arg0 ) ) { throw new ArithmeticException ( "srini_string" + arg0 + "srini_string" ) ; } }
void function ( CanVID arg0 ) { this . vid = arg0 ; }
void function ( int arg0 ) { if ( arg0 < 0 || arg0 > sampleEncryptionDataLength ) { throw new IllegalArgumentException ( "srini_string" + arg0 + "srini_string" + sampleEncryptionDataLength ) ; } this . definesEncryptionData = true ; sampleEncryptionDataLength = arg0 ; }
void function ( int arg0 ) { m_value -= arg0 ; }
boolean function ( ) { return onlineCheckingAllowed ; }
int function ( PlanNode arg0 ) { return childRanges [ arg0 . getChildIndex ( ) ] ; }
void function ( int arg0 , long arg1 ) { if ( arg0 < 0 || arg0 > columnCount ) { throw new IllegalArgumentException ( "srini_string" + arg0 + "srini_string" + columnCount ) ; } if ( arg1 < 0 || arg1 > rowCount ) { throw new IllegalArgumentException ( "srini_string" + arg1 + "srini_string" + rowCount ) ; } writeSizeEstimate ( arg0 , arg1 ) ; }
boolean function ( Collection < ? extends K > arg0 ) { return putValues ( arg0 , null ) ; }
Menu function ( ) { return new Menu ( this ) ; }
TemplateContextType function ( ) { return fContextType ; }
void function ( float arg0 ) { int loc0 = list . size ; list . add ( arg0 ) ; }
void function ( Object arg0 ) { this . item = arg0 ; }
JdbcTemplateBean function ( ) { return new DefaultJdbcTemplateBean ( ) ; }
ICondition function ( Object arg0 ) { if ( arg0 == null ) { throw new NullPointerException ( "srini_string" ) ; } ICondition loc0 = ( ICondition ) getWidget ( arg0 ) ; return loc0 ; }
ReflectConstructorSpec function ( Object arg0 ) { return new ReflectConstructorSpec ( arg0 ) ; }
void function ( ) { pos ++ ; }
byte [ ] function ( Object arg0 ) { return toJson ( arg0 ) ; }
Optional < JobStatus > function ( @ PathVariable Long arg0 ) { Optional < JobStatus > loc0 = Optional . empty ( ) ; Optional < Job > loc1 = Optional . empty ( ) ; Optional < Job > loc2 = Optional . empty ( ) ; Optional < JobStatus > loc3 = Optional . empty ( ) ; Optional < JobStatus > loc4 = Optional . empty ( ) ; Optional < JobStatus > loc5 = Optional . empty ( ) ; Optional < JobStatus > loc6 = Optional . empty ( ) ; Optional < JobStatus > loc7 = Optional . empty ( ) ; Optional < JobStatus > loc8 = Optional . empty ( ) ; Optional < JobStatus > loc9 = Optional . empty
Codec [ ] function ( final String arg0 ) { final Codec [ ] loc0 = getCodecs ( ) ; for ( int loc1 = 0 ; loc1 < loc0 . length ; loc1 ++ ) { if ( loc0 [ loc1 ] . canDecode ( arg0 ) ) { return loc0 [ loc1 ] ; } } return null ; }
Opponent function ( int arg0 ) { setWeight ( arg0 ) ; return this ; }
float [ ] function ( ) { return calcularVueltas ( aVueltas , BILLETE_MINIMO ) ; }
PdfIndirectReference function ( PdfDictionary arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } PdfIndirectReference loc0 = new PdfIndirectReference ( arg0 ) ; this . configurations . add ( loc0 ) ; return loc0 ; }
void function ( Set < IResource > arg0 ) { this . resources = arg0 ; }
String function ( ) { return "srini_string" + _xDirection + "srini_string" + _yDirection + "srini_string" + _endTopDistance + "srini_string" + _leftDistance + "srini_string" + _topDistance + "srini_string" ; }
void function ( double arg0 ) { numericalZero = arg0 ; }
void function ( KeyEvent arg0 ) { doKeyUp ( arg0 ) ; }
void function ( String arg0 ) { this . city = arg0 ; }
String function ( ) { return m_Key ; }
String function ( ) { return nodeInfo . getNodeName ( ) ; }
Object function ( ) { return response ; }
ColumnFileMetaData function ( ) { return metaData ; }
String function ( String arg0 ) { int loc0 = arg0 . indexOf ( CODE_DELIMITERS ) ; if ( loc0 < 1 ) { return arg0 ; } else { return arg0 . substring ( loc0 + 1 ) ; } }
long function ( Duration arg0 ) { return Timestamps . toMicros ( arg0 ) ; }
String function ( Element arg0 ) { StringWriter loc0 = new StringWriter ( ) ; writeBack ( arg0 , loc0 ) ; return loc0 . toString ( ) ; }
void function ( ) { if ( checkForFreeRunways ( ) ) { for ( int loc0 = 0 ; loc0 < runwaysArray . length ; loc0 ++ ) { if ( checkForFreeRunway ( loc0 ) ) { return ; } } } }
void function ( BigInteger arg0 ) { this . nresults = arg0 ; }
int function ( ) { return iter . next ( ) ; }
boolean function ( final BeanDeploymentArchive arg0 ) { return Modifier . isAbstract ( arg0 . getModule ( ) . getModifiers ( ) ) ; }
ITracePoint2D function ( ) { return m_previousPoint ; }
Object function ( ) { return this . value ; }
Map < Integer , Integer > function ( ) { return initialAvailableNumer ; }
ModInteger function ( int arg0 ) { return new ModInteger ( this . val . mod ( arg0 ) ) ; }
String function ( ) { return name ; }
float function ( float arg0 , float arg1 , float arg2 ) { return ( float ) Math . sqrt ( ( arg0 * arg0 + arg1 * arg1 + arg2 * arg2 ) ) ; }
boolean function ( GroupCategory ... arg0 ) { for ( GroupCategory loc0 : arg0 ) { if ( contains ( loc0 ) ) { return true ; } } return false ; }
GenMatrix < C > function ( Reader arg0 ) { return parse ( arg0 , DEFAULT_DENSITY ) ; }
boolean function ( ) { return ( type == NAME ) ; }
ByteBuffer function ( final ByteBuffer arg0 , final int arg1 , final int arg2 ) { return new ByteBuffer ( arg0 ) . put ( arg1 , arg2 ) ; }
String function ( ) { return null ; }
LinkedList function ( CFG arg0 ) { LinkedList loc0 = new LinkedList ( ) ; while ( arg0 . hasNext ( ) ) { CFG loc1 = ( CFG ) arg0 . next ( ) ; loc0 . add ( calcFrontier ( loc1 ) ) ; } return loc0 ; }
String function ( String arg0 ) { return arg0 ; }
ModuleList < C > function ( int arg0 ) { if ( arg0 < 1 ) { throw new IllegalArgumentException ( "srini_string" + arg0 + "srini_string" ) ; } return rightGB . get ( arg0 ) ; }
List function ( ) { return ones ; }
String function ( ) { return entityName ; }
void function ( ClassInfo arg0 ) { if ( DEBUG ) System . out . println ( "srini_string" + arg0 . name + "srini_string" ) ; int loc0 = arg0 . modifiers ; if ( DEBUG ) System . out . println ( "srini_string" + arg0 . name + "srini_string" + loc0 ) ; addInterface ( arg0 ) ; }
BatchStatementMapper function ( Iterable < ? extends BatchStatementBuilder > arg0 ) { return new BatchStatementMapper ( arg0 ) ; }
void function ( String arg0 ) { files . add ( arg0 ) ; }
float [ ] function ( int arg0 ) { float [ ] loc0 = new float [ histogram . length ] ; for ( int loc1 = 0 ; loc1 < histogram . length ; loc1 ++ ) { loc0 [ loc1 ] = 0 ; } return loc0 ; }
void function ( String arg0 , IConnection arg1 ) { connections . put ( arg0 , arg1 ) ; }
void function ( ) { IntArrayWorker loc0 = new IntArrayWorker ( ) ; int [ ] [ ] loc1 = { { 1 , 2 , 3 } , { 4 , 5 , 6 } } ; loc0 . setMatrix ( loc1 ) ; loc0 . fillPattern1 ( ) ; loc0 . fillPattern2 ( ) ; }
URL function ( String arg0 ) { URL loc0 = null ; try { loc0 = new URL ( arg0 ) ; } catch ( MalformedURLException loc1 ) { } return loc0 ; }
boolean function ( ) { return isField ; }
void function ( Shell arg0 ) { this . getWorkbenchWindow ( ) . add ( arg0 ) ; }
String function ( String arg0 ) { return arg0 ; }
Menu function ( ) { return mMenuPopup ; }
ResourceEditPropertyBuilder function ( String arg0 ) { this . typeContextId = arg0 ; return this ; }
void function ( ) { if ( isEmpty ( ) ) throw new RuntimeException ( "srini_string" ) ; }
WorkerContextImpl function ( ) { return context . get ( ) ; }
Environment function ( Context arg0 ) { Environment loc0 = new Environment ( arg0 ) ; populateEnvironment ( arg0 , loc0 ) ; return loc0 ; }
String function ( ) { return getMethodSignature ( ) != null ? getMethodSignature ( ) : fMethod ; }
String function ( ) { String loc0 = "srini_string" ; String loc1 = "srini_string" ; String loc2 = "srini_string" ; String loc3 = "srini_string" ; String loc4 = "srini_string" ; String loc5 = "srini_string" ; String loc6 = "srini_string" ; String loc7 = "srini_string" ; String loc8 = "srini_string" ; String loc9 = "srini_string" ; String loc10 = "srini_string" ; String loc11 = "srini_string" ; String loc12 = "srini_string" ; String loc
OSMElement function ( ) { return objectWithTags ; }
PartitionOutgoingBatch function ( int arg0 ) { return partitionBatches . get ( arg0 ) ; }
void function ( Object arg0 , Throwable arg1 ) { log ( WARN , arg0 , arg1 ) ; }
boolean function ( ) { return false ; }
void function ( Object arg0 ) { log ( Level . ERROR , String . valueOf ( arg0 ) , null ) ; }
URI function ( ) { return uri ; }
boolean function ( List < ColoredSystem < C >> arg0 ) { for ( ColoredSystem < C > loc0 : arg0 ) { if ( ! isDetermined ( loc0 ) ) { return false ; } } return true ; }
List < AbiInfo > function ( Device arg0 , int arg1 ) { List < AbiInfo > loc0 = new ArrayList < AbiInfo > ( ) ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { loc0 . add ( new AbiInfo ( arg0 , arg1 , loc1 ) ) ; } return loc0 ; }
CRL function ( final X509Certificate arg0 ) { return getCRL ( arg0 , null ) ; }
void function ( int arg0 ) { if ( size == arg0 ) { return ; } size = arg0 ; }
State function ( ) { return state ; }
boolean function ( int arg0 ) { return mForegroundNotification . containsKey ( arg0 ) ; }
ResourceEditPropertyBuilder function ( boolean arg0 ) { this . isTesting = arg0 ; return this ; }
double function ( double arg0 , double arg1 , double arg2 , double arg3 , double arg4 , double arg5 , double arg6 , double arg7 ) { double loc0 = arg0 - arg1 ; double loc1 = arg0 + arg1 ; double loc2 = arg0 - arg2 ; double loc3 = arg0 - arg3 ; double loc4 = arg0 - arg4 ; double loc5 = arg0 - arg5 ; double loc6 = arg0 - arg6 ; double loc7 = arg0 - arg7 ; double loc8 = arg0 - arg8 ; loc0 = Math . sqrt ( loc0 * loc0 + loc1 * loc1 + loc2 * loc2
String function ( ) { StringBuilder loc0 = new StringBuilder ( ) ; loc0 . append ( "srini_string" ) ; if ( getChronology ( ) != null ) loc0 . append ( "srini_string" + getChronology ( ) . getISOPrinter ( ) ) ; loc0 . append ( "srini_string" ) ; return loc0 . toString ( ) ; }
ObjectContainer function ( String arg0 ) { return open ( new File ( arg0 ) ) ; }
RawFragmentBatch function ( allocator ) { return new RawFragmentBatch ( arg0 , arg1 ) ; }
String function ( String arg0 ) { return fAttributes . get ( arg0 ) ; }
List < T > function ( Collection < T > arg0 ) { List < T > loc0 = new ArrayList < T > ( ) ; for ( T loc1 : arg0 ) { loc0 . add ( loc1 ) ; } return loc0 ; }
int function ( ) { return stmt . sequentialNumber ; }
boolean function ( Image arg0 ) { return false ; }
MSG_TYPE function ( ) { return msgType ; }
String function ( String arg0 ) { if ( dataMap == null ) { dataMap = new HashMap < String , String > ( ) ; } return dataMap . get ( arg0 ) ; }
void function ( ) { receivedBytes = 0 ; receivedMsg = 0 ; }
Element function ( Node arg0 , String arg1 ) { if ( arg0 == null ) return null ; List < Element > loc0 = getAllChildElemsMatching ( arg0 , arg1 ) ; return loc0 . isEmpty ( ) ? null : loc0 . get ( 0 ) ; }
int function ( final int [ ] arg0 , final int [ ] arg1 ) { return arg0 . length - arg1 . length ; }
String function ( final Member arg0 ) { return getSignature ( arg0 . getName ( ) ) ; }
String function ( final Name arg0 ) { final String loc0 = arg0 . getNamespaceURI ( ) ; int loc1 = loc0 . lastIndexOf ( ':' ) ; if ( loc1 < 0 ) { return "srini_string" ; } else { return loc0 . substring ( loc1 + 1 ) ; } }
ConsumedPort function ( ) { return new ConsumedPort ( ) ; }
String function ( String arg0 ) { String loc0 = hostToIp . get ( arg0 ) ; if ( loc0 == null ) { loc0 = arg0 ; } return loc0 ; }
void function ( ) { if ( display != null ) { display . dispose ( ) ; } }
void function ( ) { final ResourceLoader < ? > loc0 = new ResourceLoader < > ( ) { @ Override public Class < ? > loadClass ( final String arg0 ) { return Class . forName ( arg0 ) ; } } ; assertEquals ( "srini_string" , loc0 . getResource ( "srini_string" ) . getName ( ) ) ; }
void function ( Socket arg0 ) { this . socket = arg0 ; }
void function ( final Session arg0 ) { writeSession ( arg0 ) ; readSession ( arg0 ) ; }
void function ( IFile arg0 ) { if ( arg0 != null ) { fMap . remove ( arg0 ) ; } }
Request function ( Class < ? > arg0 ) { return new RoundTripKitRunner ( arg0 ) ; }
void function ( String arg0 ) { out . append ( "srini_string" ) ; out . append ( arg0 ) ; }
void function ( ) { releaseCapture ( ) ; }
int function ( boolean arg0 ) { int loc0 = 0 ; for ( int loc1 = 1 ; loc1 < list . size ( ) ; loc1 ++ ) { if ( list . get ( loc1 ) == arg0 ) { loc0 = loc1 ; break ; } } return loc0 ; }
File function ( ) { return file ; }
Date function ( String arg0 ) { if ( arg0 == null ) { return null ; } SimpleDateFormat loc0 = new SimpleDateFormat ( DATE_CLEANUP_PATTERN_WRONG_TIMEZONE ) ; Date loc1 = loc0 . parse ( arg0 ) ; return loc1 ; }
ArrayList < byte [ ] > function ( RandomAccessFile arg0 ) { ArrayList < byte [ ] > loc0 = new ArrayList < byte [ ] > ( ) ; int loc1 ; while ( ( loc1 = arg0 . read ( bytes ) ) != - 1 ) { loc0 . add ( bytes [ loc1 ] ) ; } return loc0 ; }
String function ( ) { return this . charset ; }
Phenotype function ( String arg0 , String arg1 ) { return getPhenotypeByField ( arg0 , arg1 , null ) ; }
void function ( Context arg0 , Name arg1 ) { arg0 . rebind ( arg1 ) ; }
void function ( byte [ ] arg0 ) { ensureCapacity ( arg0 . length ) ; System . arraycopy ( arg0 , 0 , buffer , length , arg0 . length ) ; length += arg0 . length ; }
void function ( ) { allPersons . remove ( this ) ; allTags . remove ( this ) ; }
boolean function ( Object arg0 ) { if ( arg0 instanceof RoutingTableEntry ) { RoutingTableEntry < T > loc0 = ( RoutingTableEntry < T > ) arg0 ; return loc0 . getStaleCounter ( ) == staleCounter && loc0 . getStaleCounter ( ) == 0 ; } return false ; }
void function ( ExtendedJSONObject arg0 , String arg1 ) { sharedPrefs . edit ( ) . putLong ( arg0 . getLong ( LOG_TAG ) , arg1 ) . apply ( ) ; }
WidgetLocator function ( String arg0 ) { WidgetLocator loc0 = _register . remove ( arg0 ) ; if ( loc0 != null ) { return loc0 ; } return null ; }
void function ( Double arg0 ) { rttToMonitors . put ( arg0 , arg0 ) ; }
boolean function ( int arg0 , int arg1 ) { for ( int loc0 = 0 ; loc0 < arg0 ; loc0 ++ ) { for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { Piece loc2 = board [ loc0 ] ; if ( loc2 . getPiece ( ) . equals ( arg0 , arg1 ) ) { return true ; } } return false ; }
Parser function ( ) { return new Parser ( this ) ; }
void function ( int arg0 ) { this . iterations = arg0 ; }
Quad quadrantOf ( Square arg0 , Square arg1 ) { return quadrantOf ( arg0 , arg1 , true ) ; }
GenPolynomial < C > function ( final Class < C > arg0 , final int arg1 , final int arg2 , final int arg3 , final int arg4 , final int arg5 , final int arg6 , final int arg7 , final int arg8 , final int arg9 , final int arg10 , final int arg11 , final int arg12 , final int arg13 ) { if ( isGB ( arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , arg9 , arg10 , arg11 , arg12 , arg13 ) ) { return Reduction . Reduction . GD ; } else { return null ; } }
ValidationContext function ( ) { return new ValidationContext ( ) ; }
Set < String > function ( ) { return Collections . unmodifiableSet ( namedDescriptorMap . keySet ( ) ) ; }
SpringConfig function ( Object arg0 ) { return new SpringConfig ( arg0 ) ; }
URI function ( ) { throw new UnsupportedOperationException ( "srini_string" ) ; }
void function ( Permission arg0 ) { checkPermissionAndFireCheckedException ( "srini_string" , arg0 ) ; }
boolean function ( String arg0 ) { SQLFunction loc0 = userFunctions . get ( arg0 ) ; return loc0 != null ; }
Vector function ( final double arg0 ) { return new Vector ( x , y ) ; }
String function ( Element arg0 , String arg1 ) { Attribute loc0 = arg0 . getAttribute ( arg1 ) ; if ( loc0 == null ) { return null ; } return loc0 . getValue ( ) ; }
Item function ( ) { if ( isEmpty ( ) ) throw new RuntimeException ( "srini_string" ) ; Item loc0 = first . item ; first = first . next ; size -- ; return loc0 ; }
void function ( String arg0 ) { this . inputInfo = arg0 ; }
void function ( Bundle arg0 , String arg1 ) { Validate . notNull ( arg0 , "srini_string" ) ; Validate . notNull ( arg1 , "srini_string" ) ; arg0 . putString ( arg1 , arg1 ) ; }
KrbFastRequestState function ( ) { return fastRequestState ; }
Date function ( ) { return stmt . getEnd ( ) ; }
Quotient < C > function ( ) { return new Quotient < C > ( this ) ; }
VarDecl function ( int arg0 ) { return (VarDecl ) ssaGraph . getLocalVariable ( arg0 ) ; }
UnivPowerSeries < C > function ( int arg0 ) { return new UnivPowerSeries < C > ( arg0 ) ; }
Duration function ( Duration arg0 , Duration arg1 ) { return normalizedDuration ( checkNotNull ( arg0 ) + normalizedDuration ( arg1 ) ) ; }
AnnotationView function ( ) { if ( instance == null ) { instance = new AnnotationView ( ) ; } return instance ; }
boolean function ( double [ ] arg0 ) { return arg0 != null && arg0 . length > 0 ; }
HazelcastInstanceServer function ( ) { return new HazelcastInstanceServer ( ) ; }
boolean function ( java . math . BigInteger arg0 ) { return getModul ( ) . signum ( ) == 0 ; }
void function ( ) { LOGGER . debug ( "srini_string" ) ; }
Optional < Section > function ( ) { return sections . get ( sections . size ( ) - 1 ) ; }
boolean function ( ) { return this . timespan < this . timespan ; }
boolean function ( ) { return size ( ) == 0 ; }
void function ( List < SimpleBookmark > arg0 ) { this . fc = arg0 ; }
void function ( int arg0 ) { this . lineJoinStyle = arg0 ; }
int function ( final int arg0 , final int arg1 ) { if ( arg0 < 0 || arg1 < 0 ) { throw new IllegalArgumentException ( "srini_string" + arg0 + "srini_string" + arg1 ) ; } int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 += leadingMonomial . get ( loc1 ) . getRed ( ) ; } return loc0 ; }
void function ( SessionEvent arg0 ) { }
void function ( int arg0 ) { if ( arg0 >= 0 && arg0 < 256 ) { setSystemBrightness ( arg0 ) ; } }
void function ( ) { if ( upcomingReleaseDate == null ) { upcomingReleaseDate = new Date ( ) ; } }
Date function ( ) { return DateUtils . toMutableDateTime ( this ) ; }
Boolean function ( ) { return escapeText ; }
CacheManager function ( ) { return cacheManager ; }
BasicDevice function ( String arg0 ) { BasicDevice loc0 = ( BasicDevice ) devices . get ( arg0 ) ; if ( loc0 == null ) { return null ; } else { return loc0 ; } }
void function ( TLinkable arg0 ) { _next = arg0 ; }
void function ( boolean arg0 ) { _serializerFactory . reset ( ) ; }
TagState function ( ) { return tagState ; }
String function ( ) { return baseZNode ; }
void function ( PropertyChangeListener arg0 ) { pcsDelegate . addPropertyChangeListener ( arg0 ) ; }
void function ( T arg0 ) { lock . lock ( ) ; try { SoftReference < T > loc0 = map . get ( arg0 ) ; if ( loc0 != null ) { cache . put ( arg0 , loc0 ) ; } } finally { lock . unlock ( ) ; } }
void function ( final TestRunSession arg0 ) { addTestRunListener ( arg0 ) ; }
void function ( final ListIterator arg0 ) { this . iterator = arg0 ; }
boolean function ( ) { return fCheckable ; }
float function ( Context arg0 ) { if ( arg0 == null ) { return DEFAULT_CORNER_THICKNESS_PX ; } else { return ( float ) ( ( arg0 . getResources ( ) . getDisplayMetrics ( ) . density ) / arg0 . getResources ( ) . density ) ; } }
void function ( ResourceEntity arg0 , FreeMarkerProperty arg1 ) { Map < String , FreeMarkerProperty > loc0 = new HashMap < String , FreeMarkerProperty > ( ) ; loc0 . put ( arg0 . getIdentifier ( ) , arg1 ) ; loc0 . put ( arg0 . getAs ( ) , arg1 ) ; loc0 . put ( arg0 . getNode ( ) , arg1 ) ; }
boolean function ( ) { return ( type == STRING ) ; }
void function ( ) { throw new RuntimeException ( "srini_string" ) ; }
void function ( ) { MyListener . setInvocationCount ( 0 ) ; SFSBCMT loc0 = lookup ( "srini_string" , SFSBCMT . class ) ; this . doBMTTest ( loc0 , 1 ) ; }
void function ( int arg0 ) { if ( isTracing ( ) ) { trace ( "srini_string" , arg0 ) ; } setLog ( arg0 ) ; }
void function ( String arg0 ) { this . caller = arg0 ; }
CtField [ ] function ( CtField [ ] arg0 , CtField [ ] arg1 , CtField arg2 , String arg3 ) { return arg0 ; }
Region function ( ) { return fTagPosition ; }
ColorPolynomial < C > function ( double arg0 ) { return new ColorPolynomial < C > ( red , green , white , arg0 ) ; }
void function ( ) { }
void function ( ImagePanel arg0 ) { if ( colorDialog != null ) { colorDialog . removeImagePanel ( arg0 ) ; colorDialog = null ; } }
Block function ( ReturnBlock arg0 ) { return arg0 . getCaller ( ) ; }
void function ( String arg0 , Object arg1 ) { post ( arg0 , arg1 , null ) ; }
Object function ( Class < ? > arg0 , String arg1 ) { ExceptionReader loc0 = ( ExceptionReader ) exceptionMap . get ( arg0 ) ; if ( loc0 == null ) { return null ; } return loc0 . read ( arg0 , arg1 ) ; }
void function ( ) { }
boolean function ( ) { return true ; }
void function ( List < String > arg0 , List < String > arg1 ) { List < String > loc0 = Lists . newArrayList ( ) ; for ( String loc1 : arg1 ) { loc0 . add ( loc1 ) ; } assertNoMixedLineDelimiters ( loc0 ) ; }
AlgebraicNumber < C > function ( Reader arg0 ) { return parse ( new AlgebraicNumberReader ( arg0 ) ) ; }
float function ( Element arg0 , String arg1 ) { return parseDirection ( arg0 , arg1 , 0 ) ; }
String function ( ) { return "srini_string" ; }
String function ( String arg0 ) { return bicRegex . matcher ( arg0 ) . replaceAll ( "srini_string" ) ; }
XMLParser function ( State arg0 ) { if ( ! arg0 . isValid ( ) ) { throw new XHTMLException ( "srini_string" ) ; } setState ( arg0 ) ; return this ; }
boolean function ( ) { return isAssociative ; }
String function ( String arg0 ) { if ( arg0 == null ) { return null ; } return escapeExtraString ( arg0 ) ; }
String [ ] function ( ) { return elementAliases ; }
void function ( ) { int loc0 = list . size ( ) ; if ( loc0 == 0 ) return ; list . setAt ( loc0 - 1 , list . getAt ( loc0 ) ) ; }
void function ( ) { this . synchronizerDelegate . onSynchronizeStarted ( ) ; }
boolean function ( ) { return fEnabled ; }
void function ( FieldChange arg0 ) { if ( fDialogFieldListener != null ) { fDialogFieldListener . onFieldChange ( arg0 ) ; } }
BigDecimal function ( int arg0 ) { if ( arg0 < 0 || arg0 > this . val . length ( ) ) { throw new IllegalArgumentException ( "srini_string" + arg0 + "srini_string" + ( this . val . length ( ) - 1 ) + "srini_string" ) ; } return new BigDecimal ( this . val . substring ( arg0 ) ) ; }
Object function ( final Map < String , ? > arg0 , final String arg1 , final Object arg2 ) { final Object loc0 = get ( arg0 ) ; if ( loc0 == null ) { loc0 = new BSONObject ( arg1 , arg2 ) ; put ( arg0 , loc0 ) ; } return loc0 ; }
void function ( TreeHandlerImpl arg0 ) { this . treeHandlerDelegator = arg0 ; }
void function ( ) { }
Type function ( ) { return superclass ; }
void function ( ) { createWebApp ( false ) ; }
void function ( Node arg0 , Graph arg1 ) { serialize ( arg0 , arg1 , null ) ; }
ClassLoader function ( ) { ClassLoader loc0 = Thread . currentThread ( ) . getContextClassLoader ( ) ; if ( loc0 == null ) loc0 = ClassLoader . getSystemClassLoader ( ) ; return loc0 ; }
void function ( Collection < ? extends Writable > arg0 ) { queue . add ( arg0 ) ; }
GenVector < C > function ( int arg0 ) { Random loc0 = new Random ( ) ; return new GenVector < C > ( arg0 , loc0 ) ; }
Libro function ( ) { return marcador ; }
MathUtil function ( ) { return instance ; }
void function ( ) { tx . begin ( ) ; }
Change function ( ClasspathFixProposal [ ] arg0 ) { return addPath ( arg0 , Path . make ( ) ) ; }
void function ( Interpolator arg0 ) { if ( ! isAnimating ) { throw new GdxRuntimeException ( "srini_string" ) ; } animationThread = new Thread ( this , "srini_string" ) ; animationThread . start ( ) ; }
String function ( ) { return entry . getKey ( ) ; }
int function ( ) { return this . index ; }
Map < K , V > function ( K arg0 , V arg1 ) { return parseKeyValue ( arg0 , arg1 , DEFAULT_KEY_AND_VALUE_PAIR_SEPARATOR ) ; }
StringBuilder function ( StringBuilder arg0 , char arg1 , char arg2 ) { arg0 . append ( arg1 ) ; arg0 . append ( arg2 ) ; return arg0 ; }
void function ( ) { probes = false ; }
Map < String , ArrayList < String >> function ( ) { return values ; }
Map < String , String > function ( ) { Map < String , String > loc0 = new HashMap < String , String > ( ) ; for ( Entry < String , String > loc1 : descriptions . entrySet ( ) ) { loc0 . put ( loc1 . getKey ( ) , loc1 . getValue ( ) ) ; } return loc0 ; }
String function ( String arg0 ) { int loc0 = arg0 . length ( ) ; int loc1 = 0 ; while ( loc1 < loc0 ) { char loc2 = arg0 . charAt ( loc1 ) ; if ( ! isValidBase64Byte ( loc2 ) ) { loc1 ++ ; } } return arg0 . substring ( loc1 ) ; }
boolean function ( ) { return false ; }
void function ( float arg0 ) { this . offset = arg0 ; }
Quotient < C > function ( ) { return Quotient . INSTANCE ; }
Dialog function ( Object arg0 ) { return createRefactoringStatusDialog ( arg0 , null ) ; }
TypicalsecurityOperations function ( ) { return operations ; }
DocumentWrapper function ( DocumentWrapper arg0 ) { return arg0 . clone ( ) ; }
T function ( Object arg0 , Class < T > arg1 ) { return invokeMethod ( null , arg0 , arg1 ) ; }
boolean function ( String arg0 ) { for ( int loc0 = 0 ; loc0 < viewerPreferences . length ; loc0 ++ ) { if ( viewerPreferences [ loc0 ] . isValid ( arg0 ) ) { return true ; } } return false ; }
Local < C > function ( String arg0 ) { return parse ( new java . io . StringReader ( arg0 ) ) ; }
SortedSet < E > function ( E ... arg0 ) { SortedSet < E > loc0 = new TreeSet < E > ( ) ; for ( E loc1 : arg0 ) { loc0 . add ( loc1 ) ; } return loc0 ; }
boolean function ( ) { return enabledMetrics != null && ! enabledMetrics . isEmpty ( ) ; }
void function ( GUIRunner arg0 ) { this . runner = arg0 ; }
ISDVInfo function ( ) { return new ISDVInfo ( ) ; }
void function ( ITrace2D arg0 ) { m_trace = arg0 ; }
Image function ( String arg0 , String arg1 ) { return getImage ( arg0 , new File ( arg1 ) ) ; }
void function ( Closeable arg0 ) { try { arg0 . close ( ) ; } catch ( IOException loc0 ) { throw new RuntimeException ( "srini_string" , loc0 ) ; } }
Residue < C > function ( ) { Residue < C > loc0 = new Residue < C > ( this ) ; return loc0 ; }
byte [ ] function ( ) { return byteArray ; }
void function ( int arg0 ) { balance -= arg0 ; }
Dialog function ( ) { return createRefactoringStatusDialog ( SWT . NONE ) ; }
boolean function ( ) { return useThetaStyle ; }
void function ( Object arg0 , String arg1 ) { if ( reader . isArray ( arg0 ) ) { for ( int loc0 = 0 ; loc0 < arg0 . length ; loc0 ++ ) { Object loc1 = arg0 [ loc0 ] ; if ( loc1 instanceof PdfArray ) { this . inspectChildDictionary ( ( PdfArray ) loc1 , arg1 ) ; } } } }
boolean function ( Object arg0 ) { if ( arg0 instanceof IConfigurationElement ) { return getId ( ) . equals ( ( ( IConfigurationElement ) arg0 ) . getId ( ) ) ; } return false ; }
DateTime function ( ) { return DateUtils . toDateTime ( this ) ; }
Quotient < C > function ( ) { return new Quotient < C > ( this ) ; }
boolean function ( Type arg0 , Type arg1 ) { return arg0 . equals ( arg1 ) ; }
Limit function ( ) { return new Limit ( ) ; }
IHoverInfo function ( final String arg0 , final IHoverInfo arg1 , final int arg2 , final int arg3 , final boolean arg4 ) { return WidgetCommonUIUtil . getHoverInfo ( arg0 , arg1 , arg2 , arg3 , arg4 ) ; }
int function ( ) { return ( int ) Math . round ( x ) ; }
boolean function ( Block arg0 ) { return arg0 . x - x > 0 && arg0 . y - y > 0 ; }
void function ( String arg0 ) { rowData = arg0 ; }
int function ( ) { return previous ; }
void function ( ) { Context loc0 = new InitialContext ( ) ; final String loc1 = "srini_string" ; this . slsb . getBean ( ) . inject ( loc1 , loc0 ) ; }
FloatIterator function ( FloatIterator arg0 ) { if ( arg0 == null ) { return null ; } else { return new FloatIteratorWrapper ( arg0 ) ; } }
void function ( TokenProvider arg0 ) { this . tokenProvider = arg0 ; }
Header function ( ) { return myHeader ; }
int function ( ) { return tagNo ; }
byte [ ] function ( byte [ ] arg0 ) { return saslResponse . clone ( ) ; }
HeaderIterator function ( ) { return headerIn . iterator ( ) ; }
Composite function ( Composite arg0 , ImageDescriptor arg1 , ImageDescriptor arg2 , ImageDescriptor arg3 ) { arg0 . addImageControls ( arg1 ) ; arg0 . addImageControls ( arg2 ) ; arg0 . addImageControls ( arg3 ) ; return arg0 ; }
JoinSequence function ( CollectionPersister arg0 , String arg1 , String arg2 , String arg3 , String arg4 , String arg5 , String arg6 , String arg7 , String arg8 , String arg9 , String arg10 , String arg11 , String arg12 , String arg13 , String arg14 , String arg15 , String arg6 ) { return sfi . createJoinSequence ( arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , arg9 , arg10 , arg11 , arg12 , arg13 , arg14 ) ; }
void function ( @ ArquillianResource URL arg0 ) { testForwardCommit ( arg0 , STATUS_ACTIVE ) ; }
void function ( String [ ] arg0 ) { try { System . out . println ( "srini_string" ) ; } catch ( Exception loc0 ) { loc0 . printStackTrace ( ) ; } }
Exception function ( ) { return error ; }
void function ( int arg0 ) { this . counter = arg0 ; }
byte [ ] function ( Drawable arg0 ) { ByteArrayOutputStream loc0 = new ByteArrayOutputStream ( ) ; Gdx . graphics . ImageIO . write ( arg0 , "srini_string" , loc0 ) ; return loc0 . toByteArray ( ) ; }
void function ( Closable arg0 ) { if ( arg0 != null ) { try { arg0 . close ( ) ; } catch ( IOException loc0 ) { } } }
void function ( boolean arg0 , String arg1 ) { if ( ! arg0 ) { throw new IllegalArgumentException ( arg1 + "srini_string" ) ; } }
Residue < C > function ( final Reader arg0 ) { return parse ( arg0 , null ) ; }
float function ( ) { return rise ; }
byte [ ] function ( String arg0 ) { return StringUtils . getBytesUnchecked ( arg0 , CharEncoding . UTF_16 ) ; }
void function ( ) { resetMoved ( ) ; }
Student function ( String arg0 ) { Student loc0 = new Student ( ) ; loc0 . setName ( arg0 ) ; loc0 . setId ( arg0 ) ; return loc0 ; }
int function ( ) { return state ; }
void function ( boolean arg0 ) { this . payloadSizeEstimatedWhenAdding = arg0 ; }
void function ( List < Integer > arg0 ) { boltMsgQueue . put ( arg0 ) ; takeLock . lock ( ) ; try { boltMsgQueue . put ( null ) ; } finally { takeLock . unlock ( ) ; } }
int [ ] function ( ) { int [ ] loc0 = new int [ size ( ) ] ; System . arraycopy ( _list . _list , 0 , loc0 , 0 , size ( ) ) ; return loc0 ; }
int function ( ) { return type ; }
void function ( ) { Assert . assertTrue ( parent == null ) ; }
boolean function ( C arg0 ) { return this . num == arg0 . num && this . den == arg0 . den ; }
String function ( File arg0 ) { return readToString ( arg0 , "srini_string" ) ; }
byte [ ] function ( byte [ ] arg0 ) { return parsePsshAtom ( arg0 ) ; }
List function ( ) { return list ; }
void function ( Component arg0 ) { this . component = arg0 ; }
T function ( ) { T loc0 = null ; try { loc0 = next . get ( ) ; } catch ( InterruptedException loc1 ) { throw new RuntimeException ( loc1 ) ; } return loc0 ; }
String function ( PluginVersionIdentifier arg0 ) { return arg0 . getIdentifier ( ) ; }
PMML function ( InputStream arg0 ) { return new PMML ( arg0 ) ; }
int function ( ) { return this . classInfo . hashCode ( ) ; }
boolean function ( IProject arg0 ) { return _project . exists ( arg0 ) ; }
void function ( String arg0 ) { this . style = arg0 ; }
void function ( final HttpParams arg0 , final boolean arg1 ) { Args . notNull ( arg0 , "srini_string" ) ; arg0 . setBooleanParameter ( CoreConnectionPNames . SO_KEEPALIVE , arg1 ) ; }
void function ( Animal arg0 , int arg1 , int arg2 ) { arg0 . setCell ( arg1 , arg2 ) ; }
List < ResourceGroupEntity > function ( String arg0 ) { return resourceRepository . findAllByResourceType ( arg0 ) ; }
void function ( ListElement arg0 ) { this . listElements . add ( arg0 ) ; }
Object [ ] function ( ) { return columnNames ; }
void function ( Class < T > arg0 , Event arg1 ) { if ( handlers . containsKey ( arg0 ) ) { throw new IllegalArgumentException ( "srini_string" + arg0 ) ; } handlers . put ( arg0 , arg1 ) ; }
void function ( boolean arg0 ) { this . useCriterion4 = arg0 ; }
void function ( Author arg0 ) { if ( arg0 == null ) { throw new NullPointerException ( "srini_string" ) ; } if ( ! arg0 . equals ( CREATOR ) ) { throw new IllegalArgumentException ( "srini_string" ) ; } if ( ! arg0 . equals ( RELATION ) ) { throw new IllegalArgumentException ( "srini_string" ) ; } if ( ! arg0 . equals ( SOURCE ) ) { throw new IllegalArgumentException ( "srini_string" ) ; } }
void function ( ) { int loc0 = _support . size ( ) ; if ( _mods != 0 ) { int loc1 = _support . size ( ) ; loc0 = _support . get ( loc0 - 1 ) ; _total = _support . get ( loc0 ) ; } }
String function ( ) { return header ; }
Identifier function ( String arg0 , Object arg1 ) { return KeystoneUtil . safeIdentifier ( arg0 , arg1 ) ; }
void function ( ) { sClipboardQueue . clear ( ) ; }
String function ( ) { StringBuffer loc0 = new StringBuffer ( ) ; loc0 . append ( component ) ; loc0 . append ( "srini_string" ) ; loc0 . append ( messageId ) ; loc0 . append ( ts ) ; loc0 . append ( component ) ; return loc0 . toString ( ) ; }
ITypeHierarchy function ( IType arg0 ) { return fTypeHierarchy . getSuperTypeHierarchy ( arg0 ) ; }
char [ ] function ( ) { return fContent ; }
ListNode function ( ListNode arg0 ) { int loc0 = arg0 . size ( ) ; ListNode loc1 = arg0 . get ( 0 ) ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 . add ( arg0 . get ( loc2 ) ) ; } return loc1 ; }
void function ( DisplayThread arg0 ) { arg0 . setVisible ( true ) ; }
void function ( double arg0 , double arg1 , double arg2 ) { this . leftBound = arg0 ; this . rightBound = arg1 ; this . isDirty = arg2 ; }
List < Tag > function ( Tag arg0 ) { List < Tag > loc0 = new ArrayList < Tag > ( ) ; for ( Tag loc1 : arg0 . getTags ( ) ) { if ( ! loc0 . contains ( loc1 ) ) { loc0 . add ( loc1 ) ; } } return loc0 ; }
boolean function ( Class < ? extends OrderedUnorderedListItem > arg0 ) { return OrderedUnorderedListItem . class . isAssignableFrom ( arg0 ) ; }
void function ( Collection < ? > arg0 , String arg1 ) { int loc0 = 0 ; for ( Object loc1 : arg0 ) { assertTrue ( "srini_string" + loc0 + "srini_string" + loc1 + "srini_string" , contains ( loc1 , arg1 ) ) ; } }
int function ( String arg0 , int arg1 ) { return ( currentLanguage . get ( arg0 ) ) . getInt ( arg1 ) ; }
Selection function ( ASTNode arg0 ) { switch ( arg0 ) { case BEFORE : return BEFORE ; case SELECTED : return SELECTED ; case BEFORE + fLength : return BEFORE + fLength ; case AFTER : return AFTER ; default : return SELECTED ; } }
void function ( boolean arg0 ) { this . started_ = arg0 ; }
IJavaSearchScope function ( IJavaScriptElement arg0 , boolean arg1 ) { JavaElement [ ] loc0 = Lists . newArrayList ( ) ; addRelatedReferencing ( arg0 , loc0 ) ; return new JavaSearchScope ( loc0 , arg1 ) ; }
Object function ( BigInteger arg0 , Object arg1 ) { Object loc0 = _curr . get ( arg0 ) ; if ( loc0 == null ) { loc0 = arg1 ; _curr . put ( arg0 , loc0 ) ; } return loc0 ; }
T function ( ) { try { return mapper . readValue ( buildRequest ( ) , T . class ) ; } catch ( IOException loc0 ) { throw new RuntimeException ( loc0 ) ; } }
void function ( ) { TopLevelBean loc0 = lookup ( "srini_string" , TopLevelBean . class ) ; loc0 . put ( "srini_string" , lookup ( "srini_string" ) ) ; loc0 . put ( "srini_string" , lookup ( "srini_string" ) ) ; }
void function ( Task arg0 ) { batchDone . add ( arg0 ) ; }
String function ( ) { return id ; }
long function ( ) { return allocationLimit . get ( ) ; }
int function ( ) { return hops ; }
ColumnFileMetaData function ( ) { return metaData ; }
Residue < C > function ( ) { return new Residue < C > ( val , ring , isunit ) ; }
String function ( ) { return baseID ; }
Set < Asset > function ( Set < Asset > arg0 ) { Set < Asset > loc0 = new HashSet < Asset > ( ) ; for ( Asset loc1 : arg0 ) { loc0 . add ( loc1 ) ; } return loc0 ; }
String function ( ) { return this . catalogKey ; }
RDD < MatchableEntity > function ( String arg0 ) { JavaRDD < MatchableEntity > loc0 = convertDocuments ( arg0 ) ; return JavaRDD . create ( loc0 ) ; }
void function ( ) { _message = null ; notifyObservers ( ) ; }
IntListIterator function ( Iterator arg0 ) { return arg0 == null ? null : new IntListIterator ( arg0 ) ; }
Closure function ( final Closure arg0 ) { return new Closure ( ) { @ Override public Object invoke ( Closure arg1 ) { return arg0 . call ( arg1 ) ; } } ; }
int function ( ) { return this . val . size ( ) ; }
boolean function ( final HttpCacheEntry arg0 ) { return isResponseFresh ( arg0 ) || isHeaderFresh ( arg0 ) ; }
byte [ ] function ( InputStream arg0 , MediaType arg1 ) { return extractBytes ( arg0 , arg1 , Integer . MAX_VALUE ) ; }
boolean function ( ) { return instantiated ; }
void function ( List < Integer > arg0 ) { this . keyPopularity = arg0 ; }
void function ( SerializerFactory arg0 ) { _serializerFactory = arg0 ; }
WidgetReference < T > function ( Class < T > arg0 , T arg1 ) { adapters . put ( arg0 , arg1 ) ; return this ; }
void function ( double arg0 ) { numHosts = arg0 ; }
Record function ( String arg0 , String arg1 , String arg2 , String arg3 ) { if ( equalSortIndices ( ) ) { return new Record ( arg0 , arg1 , arg2 , arg3 ) ; } else { return new Record ( arg0 , arg1 , arg2 , arg3 , null ) ; } }
void function ( Object arg0 ) { getLogger ( ) . log ( FQCN , ( Priority ) Level . DEBUG , arg0 , null ) ; }
char [ ] function ( char arg0 ) { char [ ] loc0 = new char [ arg0 ] ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }
void function ( String arg0 ) { this . fileName = arg0 ; }
Throwable function ( ) { return ( state == null ) ? null : state . get ( ) ; }
void function ( T arg0 ) { update ( arg0 ) ; }
List < Tag > function ( Tag arg0 ) { List < Tag > loc0 = new ArrayList < Tag > ( ) ; for ( Tag loc1 : arg0 . getTags ( ) ) { if ( loc1 . getTagName ( ) . equals ( arg0 . getTagName ( ) ) ) { loc0 . add ( loc1 ) ; } } return loc0 ; }
void function ( ) { Assert . assertTrue ( "srini_string" , slsb . validate ( "srini_string" , "srini_string" ) ) ; }
Collection function ( ) { return this . bag ; }
double function ( ) { return accounts [ 0 ] ; }
void function ( String arg0 ) { if ( err != null ) err . println ( "srini_string" + arg0 + "srini_string" ) ; }
void function ( int arg0 , int arg1 ) { doKeyDown ( arg0 , arg1 ) ; }
Object function ( Closure arg0 ) { return transform ( arg0 , null ) ; }
int function ( ) { return coveredBranches ; }
AlgebraicNumber < C > function ( ) { return this . val ; }
int function ( ) { int loc0 = key . compareTo ( nodePosition . key ) ; if ( loc0 == 0 ) { return - 1 ; } return loc0 ; }
void function ( Archive arg0 , String arg1 ) { addJBossDeploymentStructureToArchive ( arg0 , arg1 , null ) ; }
LinearLayout function ( String arg0 ) { String [ ] loc0 = { "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" , "
MessageSource function ( ) { return messageSourceMock ; }
boolean function ( Object arg0 , String arg1 ) { if ( arg0 == null ) { return false ; } String [ ] loc0 = ( String [ ] ) _register . get ( arg0 ) ; if ( loc0 == null ) { return false ; } return ( loc0 . length == 1 ) && loc0 [ 0 ] . equals ( arg1 ) ; }
Integer function ( ) { return precision ; }
void function ( String arg0 , String arg1 ) { Assert . assertEquals ( arg0 , arg1 ) ; }
void function ( Color arg0 ) { color = arg0 ; Canvas . getInstance ( ) . repaint ( ) ; }
List < PropertyDeclaration > function ( ) { if ( properties == null ) { properties = new ArrayList < PropertyDeclaration > ( ) ; } return this . properties ; }
void function ( org . w3c . dom . Node arg0 , org . w3c . dom . Node arg1 , org . w3c . dom . Node arg2 ) { writeBackToXML ( arg0 , arg1 , arg2 , curRootNode ) ; }
String function ( ) { return getIdentityZNode ( baseZNode ) ; }
void function ( KeyStore arg0 ) { arg0 . close ( ) ; }
CQLStatementTupleMapper function ( Tuple arg0 , FieldSelector [ ] arg1 ) { return new CQLStatementTupleMapper ( arg0 , arg1 ) ; }
byte function ( int arg0 ) { return list . get ( arg0 ) ; }
void function ( ) { }
void function ( ) { existingCustomer . deleteCustomerSchema ( ) ; }
boolean function ( ) { return percentage ; }
boolean function ( ) { return this . readOnlyBeforeAttachedToSession ; }
WidgetLocatorLocator function ( Class < ? > arg0 ) { return new WidgetLocatorLocator ( arg0 ) ; }
List < Integer > function ( ) { List < Integer > loc0 = new ArrayList < Integer > ( statements . size ( ) ) ; for ( MStatement loc1 : statements ) { loc0 . add ( loc1 . getStatementID ( ) ) ; } return loc0 ; }
String function ( ) { if ( this . body != null ) { return this . body . toString ( ) ; } return null ; }
void function ( final String arg0 , final String arg1 , final String arg2 ) { Assert . notNull ( arg0 , "srini_string" ) ; Assert . notNull ( arg1 , "srini_string" ) ; Assert . notNull ( arg2 , "srini_string" ) ; setUp ( arg0 , arg1 , arg2 ) ; }
void function ( ) { }
TemplateDocument function ( ) { return fDocument ; }
void function ( IFile arg0 , IFile arg1 , FileFilter arg2 ) { InputStream loc0 = new FileInputStream ( arg0 ) ; OutputStream loc1 = new FileOutputStream ( arg1 ) ; try { IOUtils . copy ( loc0 , loc1 ) ; } finally { loc0 . close ( ) ; loc1 . close ( ) ; } }
LineSegment function ( Vector arg0 ) { float loc0 = ( float ) Math . cos ( Math . toRadians ( arg0 . getStart ( ) ) ) ; float loc1 = ( float ) Math . sin ( Math . toRadians ( arg0 . getStart ( ) ) ) ; float loc2 = ( float ) Math . cos ( Math . toRadians ( arg0 . getEnd ( ) ) ) ; return new LineSegment ( loc0 , loc1 , loc2 ) ; }
void function ( ) { String loc0 = this . testFolder . getAbsolutePath ( ) ; assertNotNull ( loc0 ) ; }
Context function ( ) { return new Context ( ) ; }
byte [ ] function ( byte [ ] arg0 ) { return decode ( arg0 , 0 , arg0 . length ) ; }
Duration function ( Timestamp arg0 , Duration arg1 ) { return subtract ( arg0 , arg1 , null ) ; }
void function ( Integer arg0 ) { defaults . put ( arg0 , new HashMap < Integer , String > ( ) ) ; }
Object function ( ) { return debug ; }
ContextEntity function ( ContextEntity arg0 ) { if ( arg0 == null ) { throw new NullPointerException ( "srini_string" ) ; } return arg0 ; }
String function ( ) { return classInfo . name ; }
byte [ ] function ( int arg0 ) { return getData ( consumedLength , arg0 ) ; }
int function ( ) { return 37 * 37 + this . compare ; }
Token [ ] function ( ) { return null ; }
void function ( boolean arg0 ) { fStatementsRecovery = arg0 ; }
boolean function ( Object arg0 ) { if ( ! ( arg0 instanceof Polynomial < ? > ) ) { return false ; } Polynomial < ? > loc0 = ( Polynomial < ? > ) arg0 ; return getPolynomial ( ) . equals ( loc0 . getPolynomial ( ) ) ; }
Set function ( ) { return composites ; }
void function ( Hashtable < K , V > arg0 ) { }
void function ( Throwable arg0 ) { invalidScriptError = arg0 ; }
void function ( final String arg0 , final File arg1 ) { LOG . debug ( "srini_string" + arg0 + "srini_string" + arg1 ) ; try { if ( arg1 . exists ( ) ) { LOG . debug ( "srini_string" + arg0 + "srini_string" ) ; arg1 . delete ( ) ; } } catch ( IOException loc0 ) { LOG . debug ( "srini_string" + arg0 ) ; } }
boolean function ( Object arg0 ) { if ( arg0 instanceof BigDecimal == false ) return false ; BigDecimal loc0 = ( BigDecimal ) arg0 ; return ( loc0 . signum ( ) == 0 ) && ( loc0 . compareTo ( val ) == 0 ) ; }
int function ( ) { return stack . size ( ) ; }
boolean function ( ) { return type == Type . VIRTUAL_MACHINE ; }
ResourceEditPropertyBuilder function ( String arg0 ) { this . fcExternalLink = arg0 ; return this ; }
boolean function ( ) { return isKeyOptional ; }
SourceViewer function ( ) { return fSourceViewer ; }
List < List < VectorXZ >> function ( Collection < TriangleMesh > arg0 , Collection < VectorXZ > arg1 ) { return TriangleMeshUtils . texCoordLists ( arg0 , arg1 ) ; }
boolean function ( Object arg0 ) { if ( ! ( arg0 instanceof Permissionable ) ) { return false ; } PermissionService loc0 = ( PermissionService ) PermissionServiceFactory . getPermissionService ( ) ; return loc0 . isOwnerOf ( arg0 ) ; }
ArrayList < T > function ( Enumeration < T > arg0 ) { ArrayList < T > loc0 = new ArrayList < T > ( ) ; while ( arg0 . hasMoreElements ( ) ) { loc0 . add ( ( T ) arg0 . nextElement ( ) ) ; } return loc0 ; }
int function ( ) { return size ; }
int function ( ) { return getKdcTcpPort ( ) ; }
void function ( Object arg0 , Reflector arg1 ) { }
void function ( Script arg0 ) { list . remove ( arg0 ) ; }
void function ( ) { buffer [ pointer ] = ( byte ) ( ( - 1 << pointer ) - 1 ) ; buffer [ pointer + 1 ] = ( byte ) ( - 1 << pointer ) ; buffer [ pointer + 2 ] = ( byte ) ( - 1 << pointer ) ; buffer [ pointer + 3 ] = ( byte ) ( - 1 << pointer ) ; }
ShortListIterator function ( final ShortListIterator arg0 ) { if ( arg0 == null ) { return EMPTY_SHORT_LIST_ITERATOR ; } return arg0 . iterator ( ) ; }
void function ( ) { unprepare ( ) ; }
boolean function ( double arg0 , double arg1 ) { if ( arg0 == arg1 ) return true ; if ( arg0 > arg1 ) return false ; if ( arg0 < arg1 ) return false ; return true ; }
String function ( ) { return name ; }
ClassLoader function ( ) { return ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; }
C function ( ) { return num ; }
boolean function ( ) { return false ; }
T function ( Collection < T > arg0 ) { return transformList ( arg0 , null ) ; }
boolean function ( ) { return _freeStack . get ( ) == null ; }
HazelcastInstance function ( Client arg0 ) { return new HazelcastInstance ( arg0 ) ; }
Object function ( Class < ? > arg0 ) { Method loc0 = getMethod ( arg0 ) ; if ( loc0 != null ) { return loc0 . invoke ( null , Object . class ) ; } return null ; }
void function ( File arg0 ) { if ( ! arg0 . exists ( ) ) { return ; } File [ ] loc0 = arg0 . listFiles ( ) ; if ( loc0 != null ) { for ( File loc1 : loc0 ) { if ( loc1 . isDirectory ( ) ) { deleteOrThrow ( loc1 ) ; } } } }
void function ( ) { running = false ; }
HashCodeBuilder function ( float arg0 ) { HashCodeBuilder loc0 = new HashCodeBuilder ( ) ; loc0 . append ( iConstant ) ; loc0 . append ( iTotal ) ; return loc0 ; }
void function ( Integer arg0 ) { this . deptId = arg0 ; }
ContextQuery function ( String arg0 , String arg1 ) { return namedByField ( arg0 , arg1 , false ) ; }
void function ( ) { if ( ! po . isProcessed ( ) ) throw new IllegalStateException ( ) ; }
void function ( ) { cache . clear ( ) ; }
K function ( ) { return kSmallest ; }
void function ( GridBagConstraints arg0 ) { this . constraints = arg0 ; }
int function ( QueryScores arg0 ) { int loc0 = 0 ; for ( QueryScores loc1 : arg0 . getPeers ( ) ) { loc0 += getCounter ( loc1 ) ; } return loc0 ; }
int function ( Object arg0 ) { if ( arg0 instanceof Residue < C > ) { return ( ( Residue < C > ) arg0 ) . getModul ( ) . compareTo ( modul ) ; } return compareTo ( arg0 ) ; }
boolean function ( String arg0 , char arg1 , char arg2 ) { int loc0 = arg0 . length ( ) ; char loc1 = arg1 ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0 . charAt ( loc2 ) == arg2 ) { return true ; } } return false ; }
void function ( String arg0 ) { this . outOfServiceByRelease = arg0 ; }
LoadPlan function ( ) { return new LoadPlan ( ) ; }
void function ( Object arg0 ) { try { client . insert ( collection , arg0 ) ; } catch ( Exception loc0 ) { throw new RuntimeException ( loc0 ) ; } }
BigDecimal function ( BigDecimal arg0 ) { if ( arg0 == null ) throw new IllegalArgumentException ( "srini_string" ) ; BigDecimal loc0 = BigDecimal . valueOf ( arg0 . intValue ( ) ) ; if ( loc0 . signum ( ) != 0 ) throw new IllegalArgumentException ( "srini_string" ) ; return loc0 ; }
int function ( ) { return iterationCount ; }
void function ( WidgetLocator arg0 ) { _parentInfo = arg0 ; }
void function ( ) { empty = true ; }
void function ( ) { checkLoopback ( ) ; delegate . writeLock ( ) . lock ( ) ; }
void function ( RenderListener arg0 ) { delegate . onRenderingError ( arg0 ) ; }
void function ( final String arg0 ) { map . remove ( arg0 ) ; }
CompositeData function ( ) { CompositeData loc0 = new CompositeData ( ) ; loc0 . setName ( COMPOSITE_TYPE ) ; loc0 . setDescription ( COMPOSITE_TYPE_DESCRIPTION ) ; loc0 . setRoleName ( COMPOSITE_TYPE_NAME ) ; loc0 . setDescription ( COMPOSITE_TYPE_DESCRIPTION ) ; return loc0 ; }
int function ( int arg0 ) { if ( arg0 < MIN_ID || arg0 > MAX_RUNNING_EVENTS ) { throw new IllegalArgumentException ( "srini_string" + arg0 + "srini_string" ) ; } return numOfCurrentlyRunningSyncEvent ( arg0 ) ; }
List function ( String arg0 ) { StringTokenizer loc0 = new StringTokenizer ( arg0 , "srini_string" ) ; List loc1 = new ArrayList ( ) ; while ( loc0 . hasMoreTokens ( ) ) { loc1 . add ( loc0 . nextToken ( ) ) ; } return loc1 ; }
MapNode function ( ) { return startNode ; }
ArrayList < GenPolynomial < C >> function ( ) { return pairlist ; }
void function ( int arg0 , int arg1 ) { flags . set ( arg0 , arg1 ) ; }
boolean function ( T arg0 , T arg1 ) { return arg0 . equals ( arg1 ) ; }
UnivPowerSeries < C > function ( BigInteger arg0 ) { return new UnivPowerSeries < C > ( arg0 . longValue ( ) ) ; }
void function ( Change arg0 ) { fParent = arg0 ; }
long function ( ) { return yPosition ; }
PdfDictionary function ( ) { return imageObject ; }
void function ( Callback arg0 ) { removeCallback ( arg0 ) ; }
void function ( ) { if ( mShouldDispatchChanges ) { mActionProvider . stop ( ) ; mShouldDispatchChanges = false ; } }
void function ( boolean arg0 ) { m_isMajorTick = arg0 ; }
String function ( Number arg0 , String arg1 ) { return arg0 + "srini_string" + arg1 ; }
boolean function ( ) { return _hierarchy . isSubmenuShowing ( ) ; }
IConditionMonitor function ( ) { return INSTANCE ; }
void function ( Object arg0 , Object arg1 , Object arg2 ) { Object loc0 = getArrayIndex ( arg0 , arg1 ) ; if ( loc0 == null ) { throw new UnknownPropertyException ( arg0 . getClass ( ) . getName ( ) , arg1 . getClass ( ) . getName ( ) ) ; } else { setArrayIndex ( arg0 , arg1 , loc0 ) ; } }
LinkedList < MetricsSubCoordinatorInfo > function ( ) { return listOfSubCoordinators ; }
int function ( Object arg0 , Object arg1 ) { if ( arg0 == null ) { return 0 ; } if ( arg1 == null ) { return - 1 ; } return arg0 . compareTo ( arg1 ) ; }
Duration function ( int arg0 ) { return new Duration ( this . value , arg0 ) ; }
void function ( ) { SecurityConfiguration . getApplicationPolicy ( ) ; }
Map < String , String > function ( ) { return parasMap ; }
Boolean function ( ResourceEntity arg0 , Resource arg1 ) { return this . resourceReleaseComparator . compare ( arg0 , arg1 ) ; }
Owner function ( ) { return owner ; }
String function ( ) { return this . hostname ; }
void function ( String arg0 ) { add_implied_vis ( arg0 ) ; }
TLinkable function ( ) { return _next ; }
int function ( ) { return leased ; }
List < String > function ( ) { if ( tags == null ) { tags = new ArrayList < String > ( ) ; } return this . tags ; }
void function ( PdfReader arg0 , PdfWriter arg1 ) { fc . addDocument ( arg0 , arg1 ) ; }
int function ( ) { return 31 * Arrays . hashCode ( val ) + 31 * val . hashCode ( ) ; }
void function ( File arg0 ) { try ( Reader loc0 = new BufferedReader ( new FileReader ( arg0 ) ) ) { initializeValidators ( ) ; runSentenceValidators ( ) ; } }
Message function ( ) { try { return blkQueue . poll ( ) ; } catch ( InterruptedException loc0 ) { LOGGER . error ( "srini_string" , loc0 ) ; return null ; } }
List < ColumnMetaData > function ( ) { return columns ; }
double function ( double arg0 , double arg1 , double arg2 , double arg3 ) { return rotateX ( arg0 , arg1 , arg2 , arg3 ) ; }
boolean function ( ) { return false ; }
void function ( Long arg0 ) { this . endIp = arg0 ; }
List < BE > function ( ) { return sentNotifications ; }
List < WPTreeNode > function ( ) { return children ; }
int function ( int arg0 ) { return ind_var [ arg0 ] ; }
int function ( ) { return i_initialSize ; }
void function ( ) { if ( _monitor != null ) { _monitor . testStart ( ) ; } }
boolean function ( JComponent arg0 , Event arg1 ) { return true ; }
void function ( ) { if ( started ) { throw new IllegalStateException ( "srini_string" ) ; } started = true ; }
int function ( ) { return size ; }
boolean function ( ) { if ( locator == null ) { return false ; } return ui . isShowing ( locator ) ; }
void function ( String arg0 ) { negatedParameters . add ( arg0 ) ; }
GenVector < C > function ( GenVector < C > arg0 ) { return new GenVector < C > ( val . leftScalarProduct ( arg0 . val ) ) ; }
String [ ] function ( File arg0 ) { return getFactory ( ) . getNamespaceURIs ( arg0 ) ; }
Set < String > function ( ) { return Collections . unmodifiableSet ( this . namedDescriptorMap . keySet ( ) ) ; }
BigInteger function ( ) { return config . getId ( ) ; }
BigInteger function ( BigInteger arg0 ) { this . val = ~ arg0 ; return this ; }
void function ( ) { for ( PptTopLevel loc0 : ppt_all_iterator ) { loc0 . trim ( ) ; } }
BigDecimal function ( java . io . Reader arg0 ) { return parse ( arg0 , null ) ; }
void function ( final double arg0 , final double arg1 , final double arg2 ) { ThreadUtils . runOnUiThreadBlocking ( new Runnable ( ) { public void run ( ) { Sample loc0 = new Sample ( arg0 , arg1 , arg2 ) ; loc0 . start ( ) ; } } ) ; }
List function ( String arg0 ) { StringTokenizer loc0 = new StringTokenizer ( arg0 , "srini_string" ) ; List loc1 = new ArrayList ( ) ; while ( loc0 . hasMoreTokens ( ) ) { loc1 . add ( loc0 . nextToken ( ) ) ; } return loc1 ; }
void function ( ObjectName arg0 ) { }
boolean function ( String arg0 ) { return arg0 . matches ( "srini_string" ) ; }
void function ( int arg0 ) { if ( mGarbage ) { gc ( ) ; } mFieldNumbers [ arg0 ] = DELETED ; }
byte [ ] function ( ) { return data ; }
boolean function ( List < Check > arg0 , List < Integer > arg1 ) { for ( Check loc0 : arg0 ) { if ( ! arg1 . contains ( loc0 ) ) { return false ; } } return true ; }
boolean function ( ) { return bugList . size ( ) == 0 ; }
boolean function ( Character arg0 ) { return Character . valueOf ( arg0 ) == Character . MIN_VALUE ; }
HttpRequestHandler function ( final String arg0 ) { return this . matcher . matches ( arg0 ) ; }
Iterable4 function ( Object ... arg0 ) { return flatten ( Arrays . asList ( arg0 ) ) ; }
void function ( Lockscope arg0 ) { this . lockscope = arg0 ; }
RatNum function ( RatNum arg0 ) { checkRep ( arg0 ) ; return arg0 ; }
int function ( Object arg0 , Object arg1 ) { return compareCharacter ( arg0 , ( CharSequence ) arg1 ) ; }
void function ( int arg0 ) { this . n = arg0 ; }
void function ( String arg0 ) { links . add ( arg0 ) ; }
ContentType function ( ) { return contentType ; }
String function ( ) { return m_Language ; }
double function ( double arg0 ) { return Math . pow ( 1 , arg0 ) ; }
void function ( Test arg0 ) { fTests . addElement ( arg0 ) ; }
Closure function ( Object arg0 ) { for ( int loc0 = 0 ; loc0 < iClosures . length ; loc0 ++ ) { if ( iClosures [ loc0 ] . evaluate ( arg0 ) ) { return iClosures [ loc0 ] ; } } return null ; }
Property < V > function ( Class < V > arg0 , String arg1 , Class < V > arg2 ) { return new Property < V > ( arg0 , arg1 , arg2 ) ; }
Throwable function ( ) { return cause ; }
String function ( String arg0 , String arg1 ) { if ( arg0 . equals ( arg1 ) ) { return null ; } return arg0 ; }
PdfIndirectReference function ( View arg0 ) { PdfIndirectReference loc0 = new PdfIndirectReference ( arg0 ) ; views . put ( loc0 , arg0 ) ; return loc0 ; }
int function ( int arg0 ) { int loc0 = ( arg0 & 0x7fffffff ) % hashArray . length ; return hashArray [ loc0 ] ; }
List < E > function ( Transformer < E > arg0 , List < E > arg1 ) { return arg0 . transform ( arg1 ) ; }
byte [ ] function ( ) { byte [ ] loc0 = new byte [ pos ] ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { loc0 [ loc2 ] = buf [ pos ++ ] ; } return loc0 ; }
Person function ( ) { return built ; }
byte [ ] function ( ) { return data ; }
ArrayList < String > function ( ) { return files ; }
String function ( ) { return cacheName ; }
GenMatrix < C > function ( ) { return fromList ( this ) ; }
void function ( int arg0 ) { this . level = arg0 ; }
GenVector < C > function ( ) { return ZERO ; }
String function ( ) { StringBuffer loc0 = new StringBuffer ( ) ; loc0 . append ( "srini_string" ) ; loc0 . append ( order ) ; loc0 . append ( "srini_string" ) ; return loc0 . toString ( ) ; }
Integer function ( ) { return cardinalityProperty ; }
ClassLoader function ( ClassLoader arg0 ) { ClassLoader loc0 = Thread . currentThread ( ) . getContextClassLoader ( ) ; if ( loc0 == null ) { loc0 = ClassLoader . getSystemClassLoader ( ) ; } return loc0 ; }
Object function ( ) { return map . get ( map . lastKey ( ) ) ; }
void function ( ) { }
Predicate function ( ) { return iPredicates ; }
String function ( long arg0 ) { return format ( arg0 , UNIT_MILLISECONDS ) ; }
boolean function ( ) { return iterator . hasNext ( ) ; }
void function ( JTable arg0 ) { String loc0 = arg0 . getToolTipText ( ) ; if ( loc0 != null ) { arg0 . setToolTipText ( null ) ; arg0 . repaint ( ) ; } }
int function ( ) { return nLiveMethods ; }
void function ( Vector3f arg0 ) { y = arg0 . y ; z = arg0 . z ; }
void function ( String arg0 ) { this . clusterId = arg0 ; }
HandshakeMessage function ( ByteBuffer arg0 ) { this . msg = arg0 ; this . type = MessageType . Handshake ; this . bits = arg0 . getInt ( ) ; return this ; }
SummaryStatistics function ( ) { return new SummaryStatistics ( ) ; }
void function ( String [ ] arg0 ) { Stomp loc0 = new Stomp ( ) ; loc0 . print ( "srini_string" ) ; loc0 . print ( ) ; loc0 . print ( ) ; loc0 . print ( "srini_string" ) ; loc0 . print ( ) ; loc0 . print ( ) ; loc0 . print ( "srini_string" ) ; loc0 . print ( ) ; loc0 . print ( ) ; loc0 . print ( ) ; loc0 . print ( ) ; loc0 . print ( ) ; }
Timer function ( ) { return theTimer ; }
void function ( ) { reveal ( ) ; }
String function ( ) { StringBuilder loc0 = new StringBuilder ( ) ; loc0 . append ( "srini_string" ) ; for ( int loc1 = 0 ; loc1 < size ( ) ; loc1 ++ ) loc0 . append ( "srini_string" ) ; loc0 . append ( stack . get ( loc1 ) ) ; return loc0 . toString ( ) ; }
String function ( char arg0 ) { }
void function ( int arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 , int arg6 ) { Element loc0 = new Element ( arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 ) ; Graphics2D loc1 = loc0 . createGraphics ( ) ; loc1 . setRenderingHint ( RenderingHints . KEY_TEXT_ANTIALIASING , RenderingHints . VALUE_TEXT_ANTIALIAS_ON ) ; loc1 . setRenderingHint ( RenderingHints . KEY_TEXT_ANTIALIASING , RenderingHints . VALUE_TEXT_ANTIALIAS_OFF ) ; loc1 . setRenderingHint ( Rendering
String function ( String arg0 ) { return getIanaEncoding ( arg0 , "srini_string" ) ; }
Object function ( ) { return item ; }
Map < Method , InterceptorFactory > function ( ) { return Collections . unmodifiableMap ( componentInterceptors ) ; }
MockCouchDb function ( ) { return getMockCouchDb ( ) ; }
void function ( Class arg0 , Parser arg1 ) { parsers . put ( arg0 , arg1 ) ; }
LinkedList < HashMap < String , MetricsAggregate >> function ( ) { return metricsHistory ; }
Label function ( ) { return defaultTarget ; }
boolean function ( String arg0 , String arg1 ) { if ( arg0 . equals ( arg1 ) ) { return true ; } return false ; }
void function ( ) { }
DoubleListIterator function ( Iterator arg0 ) { if ( arg0 == null ) { return null ; } else { return new TriDoubleListIterator ( arg0 ) ; } }
String [ ] function ( String arg0 ) { return this . body . get ( arg0 ) ; }
HandlerMethodArgumentResolver function ( Request arg0 ) { return new HandlerMethodArgumentResolver ( arg0 ) ; }
void function ( Region arg0 ) { Assert . isTrue ( fIsEclipseNLS ) ; fTagPosition = arg0 ; }
void function ( String [ ] arg0 ) { try { System . out . println ( "srini_string" ) ; } catch ( Exception loc0 ) { loc0 . printStackTrace ( ) ; } }
String function ( ) { return name ; }
IJavaElement function ( final IJavaScriptElement arg0 , final Object arg1 ) { return handleToJavaElement ( arg0 , arg1 , IResource . class ) ; }
CssResolver function ( ) { return null ; }
StatementBuilder function ( ) { return builder . openBracket ( ) ; }
BigInteger function ( ) { return BigInteger . valueOf ( ( int ) ( Math . random ( ) * 1 + 1 ) ) ; }
void function ( T arg0 ) { processEvent ( arg0 , null ) ; }
int function ( int [ ] arg0 , int arg1 , int arg2 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 . length ; loc1 ++ ) { if ( arg0 [ loc1 ] == arg1 ) { return loc1 ; } } return - 1 ; }
short function ( int arg0 ) { return list . get ( arg0 ) ; }
Period function ( ) { if ( iPeriod == 0 ) { throw new UnsupportedOperationException ( "srini_string" ) ; } return ( Period ) iPeriod . clone ( ) ; }
boolean function ( ) { return fillInAllowed ; }
void function ( final JdrReportCollector arg0 ) { arg0 . start ( ) ; }
Protocol function ( ) { return REMOTE . get ( ) ; }
void function ( ) { _buffer = null ; }
AST function ( AST arg0 , AST arg1 ) { arg0 . setFirstChild ( arg1 ) ; return arg0 ; }
double [ ] function ( int arg0 ) { return list . get ( arg0 ) ; }
long function ( Runnable arg0 ) { try { arg0 . run ( ) ; return System . currentTimeMillis ( ) - start ; } catch ( Throwable loc0 ) { return 0 ; } }
boolean function ( ) { return started ; }
void function ( ) { started = true ; }
void function ( IRefactoring arg0 , IProgressMonitor arg1 ) { if ( fQueryFactory . isDone ( ) ) { return ; } if ( arg1 . isCanceled ( ) ) { arg1 . abort ( ) ; } }
Image function ( ) { return image ; }
boolean function ( Quadrant arg0 , Quadrant arg1 , Quadrant arg2 , Quadrant arg3 ) { if ( arg0 == null ) return false ; if ( arg1 == null ) return false ; if ( arg2 == null ) return false ; if ( arg3 == null ) return false ; return true ; }
boolean function ( ) { return bugList . size ( ) == bugList . size ( ) ; }
void function ( String arg0 ) { frame . setTitle ( arg0 ) ; }
Widget function ( final Matcher < T > arg0 , final Matcher < T > arg1 ) { return ( Widget ) _searchScopeHelper . findWidget ( arg0 , arg1 ) ; }
int function ( Canvid arg0 ) { int loc0 = 0 ; for ( String loc1 : arg0 . listCommon ) { if ( ! allZero ( loc1 ) ) { loc0 ++ ; } } return loc0 ; }
int function ( int arg0 ) { throw new RuntimeException ( "srini_string" ) ; }
int function ( ) { return e1 . hashCode ( ) ^ e2 . hashCode ( ) ; }
Text function ( ) { return fTextControl ; }
SchemaValidatorBuilder function ( ) { this . strategy = strategy ; return this ; }
int function ( int arg0 , int arg1 ) { return ( arg0 << 24 ) | ( arg1 << 16 ) | ( arg0 << 8 ) | arg1 ; }
void function ( int arg0 , int arg1 , int arg2 ) { int [ ] loc0 = createSegmentTree ( arg0 , arg1 , arg2 ) ; int [ ] loc1 = createSegmentTree ( arg0 , arg1 , arg2 ) ; segmentTree [ loc0 [ 0 ] ] [ loc1 [ 0 ] ] += arg2 ; }
String function ( ) { String loc0 = "srini_string" ; if ( _treeItemTester != null ) { loc0 += "srini_string" + _treeItemTester ; } return loc0 ; }
void function ( File arg0 ) { _classSource = arg0 ; }
int function ( int arg0 ) { int loc0 = ( arg0 >>> 24 ) & 0xff ; int loc1 = ( arg0 >>> 16 ) & 0xff ; int loc2 = ( arg0 >>> 8 ) & 0xff ; int loc3 = ( arg0 >>> 0 ) & 0xff ; int loc4 = ( arg0 >>> 0 ) & 0xff ; int loc5 = ( arg0 >>> 4 ) & 0xff ; int loc6 = ( arg0 >>> 8 ) & 0xff ; int loc7 = ( arg0 >>> 16 ) & 0xff ; int loc8 = ( arg0 >>> 24 ) & 0xff ; int loc9 = ( arg0 >>> 32 ) & 0xff ; int loc
boolean function ( String arg0 , String arg1 ) { return arg0 != null && arg0 . indexOf ( arg1 ) >= 0 ; }
boolean function ( ) { return isOffline ; }
void function ( String arg0 , Throwable arg1 ) { log ( LogLevel . SEVERE , arg0 , arg1 ) ; }
Node function ( ) { return parent ; }
int function ( ) { return number ; }
LimitedSizeIntSet function ( int arg0 ) { this . num_values = arg0 ; return this ; }
void function ( final ComposedMessage arg0 ) { final ByteArrayInputStream loc0 = new ByteArrayInputStream ( standardOutBuffer . toByteArray ( ) ) ; ObjectInputStream loc1 = new ObjectInputStream ( new ByteArrayInputStream ( arg0 . getBody ( ) ) ) ; testMessageFromElves ( loc0 , loc1 ) ; }
int function ( ) { return n ; }
void function ( int arg0 ) { }
String function ( String arg0 ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "srini_string" + arg0 ) ; } return null ; }
Runnable function ( ) { return new Runnable ( ) { @ Override public void run ( ) { try { decorate . execute ( ) ; } finally { decorate . shutdown ( ) ; } } ; }
void function ( double arg0 , double arg1 , double arg2 ) { if ( arg0 < arg1 ) { throw new IllegalArgumentException ( "srini_string" + arg0 + "srini_string" + arg1 + "srini_string" ) ; } }
void function ( int arg0 ) { if ( arg0 < 0 || arg0 >= this . executables . size ( ) ) { throw new IndexOutOfBoundsException ( "srini_string" + arg0 + "srini_string" + this . executables . size ( ) ) ; } this . executables . remove ( arg0 ) ; }
void function ( UserAccount arg0 ) { System . out . println ( "srini_string" + arg0 . getUserId ( ) + "srini_string" ) ; }
Unmarshaller function ( ) { Unmarshaller loc0 = JAXB_CONTEXT . createUnmarshaller ( ) ; loc0 . setEventHandler ( this ) ; return loc0 ; }
void function ( String arg0 ) { try ( InputStream loc0 = new FileInputStream ( arg0 ) ) { importPingErCountryRegionFile ( loc0 ) ; } }
String function ( int arg0 ) { switch ( keyCodeDescMap . get ( arg0 ) ) { case LEFT_ARROW : return "srini_string" ; case RIGHT_ARROW : return "srini_string" ; case DOWN : return "srini_string" ; case UP : return "srini_string" ; case LEFT : return "srini_string" ; case RIGHT : return "srini_string" ; default : return "srini_string" ; } }
void function ( int arg0 ) { fail ( arg0 ) ; }
boolean function ( Class < ? > arg0 ) { return arg0 . isInterface ( ) ; }
void function ( String arg0 ) { this . serialNumber = arg0 ; }
int [ ] function ( String arg0 ) { int [ ] loc0 = new int [ arg0 . length ( ) ] ; for ( int loc1 = 0 ; loc1 < loc0 . length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 . loc1 ( loc1 ) ; } return loc0 ; }
boolean function ( String arg0 ) { return class_name . startsWith ( arg0 ) ; }
void function ( int arg0 ) { m_negativeYErrorPixel = arg0 ; }
String function ( String arg0 ) { return arg0 ; }
boolean function ( Object arg0 ) { if ( ! ( arg0 instanceof ColoredSystem < ? > ) ) { return false ; } ColoredSystem < ? > loc0 = ( ColoredSystem < ? > ) arg0 ; return loc0 . equals ( this . coloredSystem ) ; }
StackKeeper function ( ) { StackKeeper loc0 = stack . poll ( ) ; if ( loc0 != null ) { stack . trimToSize ( ) ; return loc0 ; } throw new EmptyStackException ( ) ; }
String function ( long arg0 ) { return format ( arg0 , UNIT_MILLISECONDS ) ; }
Object function ( ) { return iterator . next ( ) ; }
void function ( boolean arg0 ) { if ( verbose ) System . err . println ( "srini_string" + arg0 ) ; }
void function ( PdfWriter arg0 , Document arg1 , Rectangle arg2 ) { }
String function ( String arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; int loc1 = arg0 . length ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { char loc3 = arg0 . charAt ( loc2 ) ; if ( ( loc3 >= 'A' && loc3 <= 'Z' ) || ( loc3 >= 'a' && loc3 <= 'z' ) || ( loc3 >= '0' && loc3 <= '9' ) ) { loc0 . append ( loc3 ) ; } } return loc0 . toString ( ) ; }
void function ( boolean arg0 ) { border = arg0 ; }
Schema function ( ) { return actual ; }
void function ( Object arg0 ) { this . array = arg0 ; }
String function ( ) { return fcLink ; }
String function ( ) { return name ; }
void function ( String arg0 , Image arg1 , int arg2 ) { SoftReference < CachedImage > loc0 = cache . get ( new CachedTeXFormula ( arg0 , arg1 , arg2 ) ) ; if ( loc0 != null ) { CachedTeXFormula loc1 = loc0 . get ( ) ; if ( loc1 != null ) { loc1 . remove ( ) ; } } }
Label function ( ) { return handler ; }
boolean function ( ) { return _map . isEmpty ( ) ; }
void function ( final String arg0 , final String arg1 ) { if ( ! authzEnabled ) { throw new HiveAccessException ( arg0 , arg1 ) ; } }
List < Node > function ( ) { return cache . get ( userId ) ; }
void function ( Throwable arg0 ) { arg0 . printStackTrace ( ) ; }
void function ( long arg0 ) { lastRepublish = System . currentTimeMillis ( ) ; }
String [ ] function ( String [ ] arg0 ) { return toColumns ( arg0 ) ; }
String function ( ) { return items [ 0 ] ; }
void function ( OperationsInterface arg0 ) { while ( size == 0 ) { Double loc0 = arg0 . calculate ( ) ; arg0 . add ( loc0 ) ; } }
RequestType function ( ) { return requestType ; }
RefactoringDescriptorProxy function ( ) { return fProxy ; }
boolean function ( ) { return false ; }
int function ( ) { return staleCounter ++ ; }
void function ( int arg0 ) { }
UnivPowerSeries < C > function ( ) { return ZERO ; }
RuleSet function ( ) { return this . ruleSet ; }
void function ( Object arg0 ) { map . remove ( getKey ( arg0 ) ) ; }
Bag < T > function ( Class < T > arg0 ) { if ( arg0 == null ) { throw new NullPointerException ( "srini_string" ) ; } return new TypedBag < T > ( arg0 ) ; }
void function ( ) { this . iterator . remove ( ) ; }
boolean function ( CharSequence arg0 ) { return arg0 == null || arg0 . length ( ) == 0 ; }
String function ( ) { return identifier ; }
HashSet function ( ) { return preds ; }
ModelNode function ( PathAddress arg0 , int arg1 , Map < Attribute , ModelNode > arg2 ) { return createAddOperation ( arg0 , arg1 , arg2 ) ; }
void function ( Object arg0 , Throwable arg1 ) { getLogger ( ) . error ( FQCN , arg0 , arg1 ) ; }
String function ( String arg0 ) { return escape ( arg0 , false ) ; }
Mixer function ( ) { return mixer ; }
Script function ( String arg0 ) { Script loc0 = null ; NodeList loc1 = list . getChildNodes ( ) ; for ( int loc2 = 0 ; loc2 < loc1 . getLength ( ) ; loc2 ++ ) { Node loc3 = ( Node ) loc1 . item ( loc2 ) ; if ( loc3 . getNodeName ( ) . equals ( "srini_string" ) ) { loc0 = loc3 ; break ; } } return loc0 ; }
Tag function ( ) { return parent ; }
Criteria function ( ) { checkComplete ( ) ; return left ; }
void function ( Template arg0 ) { fTemplates . remove ( arg0 ) ; }
Predicate function ( ) { return iPredicate ; }
IWidgetMatcher function ( ) { return _parentMatcher ; }
Link function ( ) { return new Link ( ) ; }
Session function ( ) { HibernateSession loc0 = ( HibernateSession ) sessionFactory . getCurrentSession ( ) ; if ( loc0 == null ) { loc0 = getSessionFactory ( ) . getCurrentSession ( ) ; sessionFactory . setCurrentSession ( loc0 ) ; } return loc0 ; }
ReflectClass function ( String arg0 ) { return _config . getReflectClass ( arg0 ) ; }
String function ( ) { return new File ( "srini_string" ) . getAbsolutePath ( ) ; }
void function ( ) { for ( ILabelProviderListener loc0 : fListeners ) { loc0 . labelProviderChanged ( this ) ; } }
void function ( String arg0 ) { this . catalogName = arg0 ; }
void function ( ) { SecurityConfiguration . getKeyStoreURL ( ) ; }
void function ( SourceDataLine arg0 ) { loops . add ( arg0 ) ; }
void function ( ) { final String loc0 = EAR_WITHOUT_APPLICATION_XML ; final String loc1 = EAR_WITHOUT_APPLICATION_XML ; this . connector = new JMXConnector ( loc0 , loc1 ) ; }
long function ( int arg0 ) { return list . get ( arg0 ) ; }
Condition function ( Widget arg0 , String arg1 ) { return hasText ( arg0 , arg1 ) ; }
XMLParser function ( Reader arg0 ) { return parse ( arg0 , null ) ; }
void function ( ) { moveRight ( pos . x , pos . y ) ; }
void function ( ) { this . receiver = null ; this . sender = null ; }
void function ( AnimatedNode arg0 ) { }
void function ( ) { pause ( ) ; }
StringBuilder function ( ) { return currentEntity ; }
void function ( ) { app . lookupSucceeded ( ) ; }
boolean function ( ) { return isLocked ( ) ; }
C function ( final A1 arg0 , final A2 arg1 , final A3 arg2 , final A4 arg3 , final List < C > arg4 , final List < C > arg5 , final C arg6 ) { return CCONC ( arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 ) ; }
int function ( int arg0 , int arg1 ) { int loc0 = 0 ; while ( loc0 < arg0 ) { loc0 = arg0 % arg1 ; } return loc0 ; }
void function ( Collection arg0 ) { for ( Iterator loc0 = arg0 . iterator ( ) ; loc0 . hasNext ( ) ; ) add ( ( Map ) loc0 . next ( ) ) ; }
String function ( String arg0 ) { return addUnderscores ( arg0 , '_' ) ; }
boolean function ( Object arg0 ) { if ( arg0 == this ) { return true ; } if ( ! ( arg0 instanceof Local ) ) { return false ; } return equals ( ( Local ) arg0 ) ; }
boolean function ( Quadrant arg0 , Quadrant arg1 , Quadrant arg2 , Quadrant arg3 ) { if ( arg0 == null ) return false ; if ( arg1 == null ) return false ; if ( arg2 == null ) return false ; if ( arg3 == null ) return false ; return true ; }
boolean function ( ) { return advanceGraphicsInit ; }
void function ( ) { }
String function ( String arg0 ) { return extractText ( arg0 , null ) ; }
List < Potion > function ( ) { return Collections . unmodifiableList ( topShelf ) ; }
void function ( ) { resources = new Resources ( ) ; monitorCss = new Css ( ) ; }
boolean function ( java . math . BigInteger arg0 ) { return getModul ( arg0 ) == 0 ; }
void function ( String arg0 ) { classInfo . write ( arg0 ) ; attrs = new Attribute [ type ] ; }
IMapping function ( ) { return _mappings . get ( _parent ) ; }
int function ( Boolean arg0 , Boolean arg1 ) { return arg0 . valueCompare ( arg1 ) ; }
UndoChange function ( ) { if ( fChange != null ) { return fChange ; } return null ; }
int function ( Date arg0 ) { return daysInMonth ( arg0 ) - daysInYear ( arg0 ) ; }
void function ( Path arg0 , Class < ? extends AvroMapper > arg1 ) { Schema loc0 = getInputSchemaMap ( ) . get ( arg0 ) ; if ( loc0 == null ) { loc0 = new Schema ( ) ; getInputSchemaMap ( ) . put ( arg0 , loc0 ) ; } loc0 . setCustomSchema ( arg1 ) ; }
List < T > function ( List < T > arg0 ) { return Collections . unmodifiableList ( new ArrayList < T > ( arg0 ) ) ; }
int function ( ) { return cursor - 1 ; }
boolean function ( String arg0 ) { return arg0 . startsWith ( inlineMarkupDelimiters ) ; }
Executor function ( Executor arg0 ) { Assert . notNull ( arg0 , "srini_string" ) ; return new ExecutorWrapper ( arg0 ) ; }
void function ( Airport arg0 ) { this . larnacaAirport = arg0 ; }
void function ( String arg0 ) { this . localeKey = arg0 ; }
MemberRef function ( ) { return ( MemberRef ) fieldInfo . get ( ) ; }
void function ( Device arg0 ) { if ( logger . isInfoEnabled ( ) ) logger . info ( "srini_string" + arg0 . getSerialNumber ( ) ) ; startInputTask ( arg0 ) ; }
List < C > function ( @ Nullable C arg0 , @ Nullable L arg1 ) { return getList ( arg0 , arg1 , null ) ; }
void function ( State arg0 ) { this . tagState = arg0 ; }
Chunk function ( int arg0 ) { if ( arg0 < 0 || arg0 >= 64 ) return null ; return new Chunk ( arg0 ) ; }
String function ( ) { return name ; }
StringBuffer function ( ) { return result ; }
boolean function ( ) { if ( allocationLimit . get ( ) < peakAllocation . get ( ) ) { updatePeak ( ) ; return true ; } else { return false ; } }
void function ( String arg0 , String arg1 ) { if ( isHtml ) { attr . put ( arg0 , arg1 ) ; } else { attr . put ( arg0 , arg1 ) ; } }
HttpRoute function ( final HttpParams arg0 ) { Args . notNull ( arg0 , "srini_string" ) ; HttpHost loc0 = ( HttpHost ) arg0 . getParameter ( FORCED_ROUTE ) ; if ( NO_ROUTE . equals ( loc0 ) ) { loc0 = null ; } return loc0 ; }
boolean function ( RatTerm arg0 ) { for ( int loc0 = 0 ; loc0 < terms . length ; loc0 ++ ) { RatTerm loc1 = terms [ loc0 ] ; if ( ! loc1 . equals ( arg0 ) ) { return false ; } } return true ; }
void function ( File arg0 ) { this . outputImage = arg0 ; }
T function ( String arg0 , String [ ] arg1 , String [ ] arg2 ) { return buildObject ( arg0 , arg1 , arg2 ) ; }
void function ( ) { if ( ! started ) { throw new IllegalStateException ( "srini_string" ) ; } started = false ; }
void function ( Boolean arg0 ) { this . isTest = arg0 ; }
InputStream function ( ) { return stream ; }
R function ( String arg0 ) { return defaultValue ; }
boolean function ( final Object arg0 ) { if ( arg0 == null ) return false ; if ( arg0 instanceof Collection ) { final Collection loc0 = ( Collection ) arg0 ; return loc0 . contains ( arg0 ) ; } return arg0 . equals ( this ) ; }
int function ( ) { return _size ; }
Iterator < ColumnDescriptor > function ( ) { return columns . values ( ) . iterator ( ) ; }
void function ( boolean arg0 ) { debug = arg0 ; }
void function ( String arg0 , Object ... arg1 ) { printLogObject ( arg0 , arg1 ) ; }
float function ( ) { return list . removeAt ( size - 1 ) ; }
RGB function ( String arg0 ) { return new RGB ( arg0 ) ; }
ImageDescriptor function ( ) { return fImage ; }
void function ( BlobContainer arg0 ) { jdbcService . deleteBlobs ( arg0 ) ; }
void function ( Object arg0 ) { }
Object function ( String arg0 ) { Object loc0 = methods . get ( arg0 ) ; if ( loc0 == null ) { return evaluateResult ( arg0 ) ; } return loc0 ; }
String function ( ) { return this . description ; }
int function ( ) { return highValue ; }
Map < String , String > function ( Map < String , String > arg0 ) { Map < String , String > loc0 = new HashMap < String , String > ( ) ; loc0 . putAll ( arg0 ) ; return loc0 ; }
String function ( ) { return lang ; }
String function ( String arg0 ) { return topologyBase . getTopologyId ( arg0 ) ; }
Limit function ( Limit arg0 ) { return new Limit ( arg0 ) ; }
byte [ ] function ( byte [ ] arg0 ) { byte [ ] loc0 = getSignedKdcDhKeyInfo ( arg0 ) ; byte [ ] loc1 = getSignedKdcDhKeyInfo ( arg0 ) ; return getEd ( loc0 , loc1 ) ; }
DeviceDescriptor function ( ) { return deviceDescriptor ; }
String function ( String arg0 ) { return "srini_string" + arg0 + "srini_string" ; }
void function ( boolean arg0 ) { this . indirectRef = arg0 ; }
void function ( Player arg0 ) { this . player = arg0 ; }
void function ( CSIColor arg0 ) { this . borderColor = arg0 ; }
void function ( String arg0 ) { checkMax70Text ( arg0 ) ; }
void function ( ) { violations . clear ( ) ; numEvaluations ++ ; }
void function ( T arg0 ) { this . script = arg0 ; }
boolean function ( ) { return bugList . size ( ) > 0 ; }
Criteria function ( String arg0 , Object arg1 ) { checkComplete ( ) ; RelationalExpressionNode loc0 = new RelationalExpressionNode ( arg0 ) ; RelationalExpressionNode loc1 = new RelationalExpressionNode ( arg1 ) ; return new Criteria ( loc0 , loc1 ) ; }
String function ( String arg0 ) { return "srini_string" ; }
String function ( ) { return code ; }
void function ( Object arg0 ) { log ( LOG_LEVEL_WARN , arg0 ) ; }
void function ( ) { createSecurityDomainWithoutPermissionMapper ( ) ; createSecurityDomain ( ) ; }
void function ( String [ ] arg0 ) { try { final ExecutorService loc0 = Executors . newSingleThreadExecutor ( ) ; loc0 . execute ( new Runnable ( ) { @ Override public void run ( ) { consoleLoggerModule . info ( "srini_string" ) ; } } ) ; loc0 . shutdown ( ) ; } catch ( RejectedExecutionException loc0 ) { loc0 . printStackTrace ( ) ; } }
void function ( String [ ] arg0 ) { analyze ( arg0 ) ; }
int function ( ) { return ( int ) Math . round ( y2 ) ; }
void function ( String arg0 ) { PeerStatus loc0 = getPeerStatus ( arg0 ) ; if ( loc0 == null ) { log . warn ( "srini_string" + arg0 + "srini_string" ) ; } }
void function ( String arg0 ) { this . name = arg0 ; }
void function ( Point2D arg0 ) { this . startPoint = arg0 ; }
void function ( String arg0 ) { this . packedString = arg0 ; }
void function ( String arg0 ) { addItem ( "srini_string" , arg0 ) ; }
String function ( SQLException arg0 ) { return determineSqlStateClassCode ( extractSqlStateClassCode ( arg0 ) ) ; }
boolean function ( Integer arg0 ) { return isStandardTypeCode ( arg0 ) ; }
ILanguageNames function ( ) { return languageNames ; }
boolean function ( ) { return connected ; }
void function ( int arg0 ) { this . productID = arg0 ; }
int function ( ) { return pairlist . size ( ) ; }
boolean function ( K1 arg0 ) { return dkMap . containsKey ( arg0 ) ; }
Closure function ( ) { return iClosure ; }
void function ( ) { }
int function ( ) { return ( data [ position ++ ] & 0xFF ) << 24 | ( data [ position ++ ] & 0xFF ) << 16 | ( data [ position ++ ] & 0xFF ) << 8 | ( data [ position ++ ] & 0xFF ) ; }
List < T > function ( ) { return Collections . unmodifiableList ( getContexts ( ) ) ; }
void function ( CharSequence arg0 , String arg1 ) { if ( arg0 == null ) { throw new ValidateException ( arg1 ) ; } else if ( arg0 . length ( ) == 0 ) { throw new ValidateException ( arg1 ) ; } }
boolean function ( Object arg0 ) { if ( arg0 == null ) { return false ; } if ( arg0 instanceof IdentifierValue ) { return true ; } return false ; }
ListIterator function ( Iterator arg0 ) { if ( arg0 == null ) { return null ; } return new ListIterator ( arg0 ) ; }
BufferedImage function ( int [ ] arg0 , int arg1 , int arg2 ) { byte [ ] loc0 = new byte [ arg2 ] ; int loc1 = arg1 ; for ( int loc2 = 0 ; loc2 < arg2 ; loc2 ++ ) { loc0 [ loc2 ] = ( byte ) arg0 [ loc2 ] ; } return new BufferedImage ( loc1 , loc0 , BufferedImage . TYPE_INT_ARGB ) ; }
void function ( ) { if ( upcomingReleaseDate == null ) { upcomingReleaseDate = new Date ( ) ; } }
Class < ? > function ( ) { return elementType ; }
void function ( ) { assertTrue ( "srini_string" , incorrectRoleResult . contains ( INIT_METHOD_NOT_PASS ) ) ; }
void function ( ) { annotations . process ( null ) ; }
boolean function ( ) { return currentContent . size ( ) == 0 ; }
String function ( ) { return fElement . getAttribute ( CLASS_ATTRIBUTE ) ; }
void function ( ) { throw new WaitTimedOutException ( ) ; }
void function ( boolean arg0 ) { this . expandEntityRef = arg0 ; }
File function ( ) { return fileInput ; }
EdgeList function ( ) { return new EdgeList ( ) ; }
ModuleList < C > function ( int arg0 ) { return pairlist ( arg0 ) ; }
String function ( Object arg0 ) { return arg0 == null ? "srini_string" : arg0 . toString ( ) ; }
FieldSelection function ( List < String > arg0 ) { for ( String loc0 : arg0 ) { add ( loc0 ) ; } return this ; }
List < ReleaseEntity > function ( ) { return persistenceService . findAllReleases ( ) ; }
void function ( OverlayAdapter arg0 ) { this . adapters . add ( arg0 ) ; }
boolean function ( String arg0 ) { return _binsByUri . containsKey ( arg0 ) ; }
List < Message > function ( ) { if ( message == null ) { message = new ArrayList < Message > ( ) ; } return this . message ; }
Validator function ( ) { return new Validator ( ) ; }
void function ( StringBuilder arg0 ) { appendClause ( arg0 , dialect ) ; }
void function ( Motorbike arg0 ) { getEntityManager ( ) . persist ( arg0 ) ; }
int function ( byte arg0 ) { ensureCapacity ( length + 1 ) ; buffer [ length ++ ] = ( byte ) arg0 ; return length ; }
void function ( String arg0 ) { validate ( arg0 , "srini_string" ) ; }
void function ( Violation arg0 ) { this . property = arg0 ; }
String function ( ) { return this . localeKey ; }
C function ( long arg0 ) { return ring . get ( arg0 ) ; }
Widget function ( final Widget arg0 , final Matcher < ? super Widget > arg1 ) { return ( Widget ) _searchScopeHelper . find ( arg0 , arg1 ) ; }
RandomAccessSource function ( byte [ ] arg0 ) { return new ByteArrayRandomAccessSource ( arg0 ) ; }
void function ( ) { assertEquals ( "srini_string" , ctx . getResources ( ) . getString ( "srini_string" ) ) ; assertEquals ( "srini_string" , ctx . getResources ( ) . getString ( "srini_string" ) ) ; }
String function ( ) { return "srini_string" ; }
boolean function ( ) { return needBeforeSpace ; }
void function ( ConsumerRebalanceListener arg0 ) { }
WidgetLocatorSet function ( ) { if ( _register == null ) { throw new IllegalStateException ( "srini_string" ) ; } return new WidgetLocatorSet ( _register ) ; }
void function ( ) { System . setProperty ( "srini_string" , "srini_string" ) ; System . setProperty ( "srini_string" , "srini_string" ) ; System . setProperty ( "srini_string" , "srini_string" ) ; }
RingFactory < C > function ( ) { return ring ; }
void function ( float arg0 ) { width = arg0 ; }
List < C > function ( List < C > arg0 ) { return Collections . unmodifiableList ( new ArrayList < C > ( arg0 ) ) ; }
void function ( ) { migrateIfNecessary ( true ) ; }
Component [ ] function ( ) { return EMPTY ; }
void function ( Throwable arg0 ) { log ( arg0 . getMessage ( ) ) ; }
ArrayList function ( ) { return items ; }
RequestBody function ( ProgressRequestBody . Builder arg0 ) { return RequestBody . create ( arg0 ) ; }
int function ( T arg0 ) { return weight ; }
HttpClient function ( ) { return httpClient ; }
Allprop function ( ) { return allprop ; }
void function ( char [ ] arg0 , int arg1 , int arg2 ) { for ( int loc0 = arg1 ; loc0 < arg2 ; loc0 ++ ) { arg0 [ loc0 ] = arg0 [ loc0 - 1 ] ; } }
void function ( ) { fForkChangeExecution = true ; }
Items function ( ) { return items ; }
Symbol function ( ) { return stack [ pos ] ; }
SortedBag function ( final Class < ? extends T > arg0 ) { return new SortedBag ( arg0 ) ; }
void function ( VectorXYZ arg0 ) { pos . set ( arg0 ) ; lookAt . set ( arg0 ) ; }
String function ( String arg0 ) { if ( arg0 == null || arg0 . length ( ) == 0 ) { return "srini_string" ; } return Base64 . encodeToString ( arg0 . getBytes ( "srini_string" ) ) ; }
IStatus function ( ) { return null ; }
boolean function ( ) { return ring . isField ( ) ; }
Type function ( String arg0 ) { return basicTypeRegistry . getType ( arg0 ) ; }
String function ( Bundle arg0 ) { Validate . notNull ( arg0 , "srini_string" ) ; return arg0 . getString ( TOKEN_KEY ) ; }
int function ( ) { return limit - position ; }
void function ( ) { reactor = new NioReactor ( ) ; reactor . run ( ) ; }
void function ( final Object arg0 ) { listeners . remove ( arg0 ) ; }
String function ( ) { return technicalKey ; }
IJavaElement function ( JavaElement arg0 ) { JavaElement loc0 = arg0 . resolveEnclosingElement ( ) ; if ( loc0 instanceof JavaElement ) { return ( IJavaElement ) loc0 ; } return null ; }
void function ( Long arg0 , ExecutionData arg1 ) { for ( ExecutionData loc0 : entries . values ( ) ) { if ( loc0 . arg0 . equals ( arg0 ) && loc0 . arg1 . equals ( arg1 ) ) { return ; } } entries . put ( arg0 , arg1 ) ; }
void function ( ) { for ( String loc0 : countryLookup . keySet ( ) ) { for ( String loc1 : countryLookup . get ( loc0 ) ) { if ( loc1 . equals ( "srini_string" ) ) { continue ; } if ( loc1 . equals ( "srini_string" ) ) { countryLookup . remove ( loc0 ) ; } } }
void function ( double arg0 ) { this . torusDimensionSize = arg0 ; }
GenVector < C > function ( GenVector < C > arg0 ) { return lexicogaphicalCompare ( arg0 , val ) ; }
Closure [ ] function ( ) { return iClosures ; }
int function ( ) { return _index ; }
void function ( Iterator arg0 ) { this . iterator = arg0 ; }
float function ( ) { return width ; }
void function ( final OperationModeManager arg0 ) { }
Comparator function ( boolean arg0 ) { return arg0 ? NATURAL_COMPARATOR : null ; }
void function ( ) { stop = true ; }
Type function ( ) { return null ; }
boolean function ( String arg0 ) { return arg0 != null && arg0 . length ( ) > 0 && arg0 . charAt ( 0 ) == '$' ; }
boolean function ( ) { return _runningTest != null ; }
ModuleList < C > function ( ) { return twosidedGB ; }
void function ( ) { insertFile = insertName ( fontName ) ; }
String function ( String arg0 ) { int loc0 = arg0 . indexOf ( '/' ) ; if ( loc0 < 1 ) { return arg0 ; } else { return arg0 . substring ( 0 , loc0 ) ; } }
void function ( ) { }
Builder function ( Section arg0 ) { ensureNotBuilt ( ) ; sections . add ( arg0 ) ; return this ; }
boolean function ( int arg0 , int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < HEIGHT ; loc1 ++ ) { int loc2 = 0 ; for ( int loc3 = 0 ; loc3 < WIDTH ; loc3 ++ ) { int loc4 = 0 ; for ( int loc5 = 0 ; loc5 < moveY ; loc5 ++ ) { int loc6 = 0 ; for ( int loc7 = 0 ; loc7 < DOWN ; loc7 ++ ) { loc4 += arg0 * loc3 + arg1 * loc5 ; } } } return loc0 == arg1 ; }
void function ( Chunk arg0 ) { if ( arg0 . getFont ( ) != null ) { arg0 . setFont ( applyFontStyles ( arg0 . getFont ( ) , arg0 . getWidth ( ) , arg0 . getHeight ( ) ) ) ; } }
void function ( Object arg0 ) { getLogger ( ) . error ( String . valueOf ( arg0 ) , arg0 ) ; }
KeyValueValueList function ( ) { return new KeyValueValueList ( ) ; }
void function ( ) { fListeneredDisabled = true ; }
int function ( Object arg0 , Object arg1 ) { if ( arg0 == null && arg1 == null ) { return 0 ; } if ( arg0 != null && arg1 != null ) { return - 1 ; } if ( arg0 != null && arg1 != null ) { return 1 ; } return arg0 . compareTo ( arg1 ) ; }
void function ( DisplayPortMetrics [ ] arg0 ) { long loc0 = SystemClock . uptimeMillis ( ) ; for ( int loc1 = 0 ; loc1 < mMetrics . length ; loc1 ++ ) { if ( arg0 [ loc1 ] == null ) { mMetrics [ loc1 ] = arg0 [ loc1 ] ; } } }
BaseColor function ( ) { return strokeColor ; }
SchemaValidatorBuilder function ( boolean arg0 ) { this . strategy = arg0 ; return this ; }
IJavaScriptElement function ( IJavaScriptElement arg0 , Object arg1 , boolean arg2 ) { return convert ( arg0 , null , arg1 , null , arg2 ) ; }
long function ( ) { return ours ; }
double function ( ) { return mu ; }
void function ( ) { if ( fShowTraceInConsoleViewAction != null ) { fShowTraceInConsoleAction . execute ( ) ; } }
DurationFieldType function ( int arg0 ) { return ( arg0 >= 0 && arg0 < size ) ? getFieldType ( arg0 ) : null ; }
void function ( Employee arg0 ) { Employee loc0 = createEmployee ( arg0 ) ; em . persist ( loc0 ) ; em . flush ( ) ; }
void function ( ) { }
boolean function ( Quadrant arg0 , Quadrant arg1 , Quadrant arg2 , Quadrant arg3 ) { if ( arg0 == null ) return false ; if ( arg1 == null ) return false ; if ( arg2 == null ) return false ; if ( arg3 == null ) return false ; return true ; }
Set function ( Map arg0 ) { return new HashSet ( arg0 ) ; }
Branch function ( String arg0 ) { Branch loc0 = new Branch ( arg0 ) ; return loc0 ; }
boolean function ( String arg0 ) { boolean loc0 = false ; try { File loc1 = new File ( arg0 ) ; loc0 = loc1 . exists ( ) ; } catch ( Exception loc1 ) { } return loc0 ; }
void function ( int arg0 ) { constantValueIndex = arg0 ; }
AsyncResult < T > function ( Throwable arg0 ) { AsyncResult < T > loc0 = new AsyncResult < T > ( ) ; loc0 . exception = arg0 ; loc0 . callback = callback ; loc0 . arg0 = arg0 ; runProcess ( ) ; return loc0 ; }
double function ( double arg0 ) { return factory . findZero ( arg0 ) ; }
DoubleIterator function ( DoubleIterator arg0 ) { if ( arg0 == null ) { return null ; } else { return new DoubleIteratorWrapper ( arg0 ) ; } }
