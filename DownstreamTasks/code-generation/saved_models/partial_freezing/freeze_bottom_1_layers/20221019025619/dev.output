void function ( Schema arg0 , Schema arg1 ) { new Mutator ( arg0 , arg1 ) . run ( ) ; }
void function ( String arg0 ) { getProperties ( ) . remove ( arg0 ) ; dvdProperties . remove ( arg0 ) ; bookProperties . remove ( arg0 ) ; }
List < SpringConfig > function ( ) { return new ArrayList < SpringConfig > ( mSpringConfigMap . values ( ) ) ; }
File function ( ) { return Libraries . getLibsDirectory ( ) ; }
boolean function ( ) { return coalescing ; }
void function ( final Object arg0 ) { }
void function ( Object arg0 , Throwable arg1 ) { log ( Trace . TRACE , arg0 , arg1 ) ; }
Object function ( ) { return instance ; }
boolean function ( ) { return true ; }
void function ( long arg0 ) { markAsOverriden ( "srini_string" ) ; this . evictionWakeUpInterval = arg0 ; }
IProduct function ( ) { return product ; }
String function ( ASN1Primitive arg0 ) { try { return arg0 . getAsString ( ) ; } catch ( IOException loc0 ) { return null ; } }
int function ( InputStream arg0 ) { return ( int ) readInt24LE ( arg0 ) ; }
boolean function ( ClassDoc arg0 , String arg1 ) { return false ; }
LongList function ( ) { return unmodifiableLongList ( EMPTY_LONG_LIST ) ; }
GetContentlanguage function ( ) { return getcontentlanguage ; }
void function ( KOptions arg0 ) { }
NameParts function ( String arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } return new QualifiedNameParts ( arg0 , getSchemaName ( ) ) ; }
Location function ( Element arg0 ) { Location loc0 = new Location ( ) ; loc0 . setLatitude ( arg0 . getFloat ( "srini_string" ) ) ; loc0 . setLongitude ( arg0 . getFloat ( "srini_string" ) ) ; return loc0 ; }
boolean function ( ) { return _matcher . matches ( ) ; }
void function ( String arg0 , String arg1 ) { if ( arg1 == null ) { throw new XMPException ( "srini_string" , arg0 ) ; } }
void function ( ) { m_trace . clear ( ) ; m_negativeXErrorPixel = 0 ; m_positiveYErrorPixel = 0 ; m_negativeYErrorPixel = 0 ; }
String function ( ) { return reason ; }
void function ( InvalidOSDelegate arg0 ) { }
int function ( ) { return ( int ) Math . round ( outputBuffer . getSampleDuration ( ) ) ; }
void function ( final RecordBatch arg0 , final int arg1 ) { if ( partitioners != null && arg0 != null ) { for ( Partitioner loc0 : partitioners ) { loc0 . partitionBatch ( arg0 , arg1 ) ; } } }
boolean function ( ) { return document . getDocumentType ( ) == DocumentType . Copy ; }
long function ( ) { return cacheHitCount ; }
Dialog function ( Activity arg0 , String arg1 ) { return ( new AlertDialog . Builder ( arg0 ) ) . setTitle ( arg1 ) . setMessage ( arg1 ) . setNeutralButton ( android . R . string . ok , null ) . create ( ) ; }
Section function ( int arg0 ) { return sections . get ( arg0 ) ; }
Product function ( ) { return new Product ( ) ; }
FigureInfo function ( ) { return new FigureInfo ( this ) ; }
Integer function ( Cursor arg0 , int arg1 ) { return arg0 . getInt ( arg1 ) ; }
Providedportid function ( ) { return new Providedportid ( ) ; }
boolean function ( String arg0 , String arg1 ) { return findKeyword ( arg0 , arg1 , 0 ) ; }
int function ( ProtocolVersion arg0 ) { return this . protocol . compareTo ( arg0 . protocol ) ; }
void function ( Fum arg0 ) { this . fum = arg0 ; }
void function ( ServerResponse arg0 ) { }
void function ( ) { SecurityConfiguration . getCipherKey ( ) ; }
long function ( ) { return root . size ; }
void function ( Point2D arg0 ) { this . startPoint = arg0 ; }
int function ( int arg0 , int arg1 ) { if ( arg0 % arg1 == 0 ) return arg1 ; return gcd ( arg1 , arg0 % arg1 ) ; }
void function ( ) { System . err . println ( "srini_string" + Version . VERSION ) ; System . exit ( 0 ) ; }
void function ( String arg0 , Object arg1 , final CallBackInfo arg2 ) { lockChannel ( arg0 ) ; Protocol loc0 = getRemote ( arg0 ) ; if ( loc0 != null ) { loc0 . request ( arg1 , arg2 ) ; } }
void function ( Collection < ? extends E > arg0 , Collection < ? extends E > arg1 , Comparator < ? super E > arg2 , int arg3 ) { List < E > loc0 = new ArrayList < > ( arg0 . size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg3 ; loc1 ++ ) { if ( arg2 . compare ( arg0 . get ( loc1 ) , arg1 ) < 0 ) { loc0 . add ( arg0 . get ( loc1 ) ) ; } }
long function ( ) { return timestamp ; }
String function ( ) { return this . name ; }
Piece function ( int arg0 ) { return pieces [ arg0 ] ; }
String function ( String arg0 ) { return myself . bundle . getString ( arg0 ) ; }
void function ( ISourceFileLocator arg0 ) { delegates . add ( arg0 ) ; }
void function ( ) { if ( ! isSequence ( ) ) { throw new IllegalArgumentException ( "srini_string" ) ; } }
Integer function ( ) { return repeated ; }
Description function ( Description arg0 ) { if ( arg0 != null ) { fChildren . add ( arg0 ) ; } return this ; }
byte [ ] function ( short arg0 ) { byte [ ] loc0 = new byte [ 2 ] ; loc0 [ 0 ] = ( byte ) ( arg0 >>> 8 ) ; loc0 [ 1 ] = ( byte ) arg0 ; return loc0 ; }
Criteria function ( RelationalOperator arg0 , ValueNode arg1 , String arg2 ) { checkComplete ( ) ; return new Criteria ( arg0 , arg1 , arg2 ) ; }
StandardServiceRegistryBuilder function ( Map arg0 ) { this . settings = arg0 ; return this ; }
Integer [ ] function ( int [ ] arg0 ) { Integer [ ] loc0 = new Integer [ arg0 . length ] ; for ( int loc1 = 0 ; loc1 < arg0 . length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }
Map function ( String arg0 ) { loadMaps ( ) ; KeyStroke loc0 = ( KeyStroke ) characterMap . get ( arg0 ) ; if ( loc0 == null ) { loc0 = generateKeyStrokeMappings ( arg0 ) ; characterMap . put ( arg0 , loc0 ) ; } return loc0 ; }
UnivariateRealFunction function ( int arg0 ) { return polynomials [ arg0 ] . getDerivative ( ) ; }
ValidatorConfiguration function ( final String arg0 , final String arg1 ) { properties . put ( arg0 , arg1 ) ; return this ; }
void function ( ) { validateChain ( ) ; }
CookieAttributeHandler function ( final String arg0 ) { return this . attribHandlerMap . get ( arg0 ) ; }
void function ( ) { }
void function ( String [ ] arg0 ) { printCapitalized ( "srini_string" ) ; }
void function ( String arg0 ) { this . className = arg0 ; }
int function ( Comparable arg0 , Comparable arg1 ) { return arg0 . compareTo ( arg1 ) ; }
void function ( ) { dao = new DbCustomerDao ( ) ; exception = new ExpectedException ( EXCEPTION_CAUSE ) ; }
String function ( ) { String loc0 = doSendApiRequest ( "srini_string" , "srini_string" ) ; return loc0 ; }
String function ( ) { return responseHeaders . get ( responseCode ) ; }
GenMatrix < C > function ( ) { for ( int loc0 = 0 ; loc0 < matrix . size ( ) - 1 ; loc0 ++ ) { val . add ( matrix . get ( loc0 ) ) ; } return this ; }
void function ( MineGraphics arg0 ) { arg0 . drawRect ( x , y , obstacleSize , obstacleHeigth ) ; }
AuditCriterion function ( AuditCriterion arg0 , AuditCriterion arg1 ) { return new LogicalAuditExpression ( arg0 , arg1 , "srini_string" ) ; }
T function ( T arg0 , Object arg1 ) { if ( arg0 == null ) { throw new NullPointerException ( String . valueOf ( arg1 ) ) ; } return arg0 ; }
void function ( String arg0 ) { myTopType = arg0 ; }
 quadrant function ( Quadrant arg0 ) { if ( arg0 instanceof Ordinal ) return this ; else return arg0 . child ( ) ; }
void function ( String arg0 ) { this . fcKey = arg0 ; }
Double function ( ) { return xValue ; }
void function ( ) { _compact ( DEFAULT_LOAD_FACTOR ) ; }
float function ( ) { return textRectangle . getWidth ( ) ; }
GnpPosition function ( ) { long loc0 = idCounter . getAndIncrement ( ) ; String loc1 = "srini_string" + loc0 ; log . info ( "srini_string" , loc1 ) ; return new GnpPosition ( loc1 , loc0 ) ; }
String [ ] function ( CollectionRole arg0 ) { return getColumnNames ( arg0 . toString ( ) ) ; }
Collection < Table > function ( List < String > arg0 ) { return getTablesByNames ( arg0 , DEFAULT_BULK_LOAD ) ; }
void function ( ) { }
UnivPowerSeries < C > function ( ) { return random ( ) . getOne ( ) ; }
EditPartFactory function ( ) { return editorSite . getEditPartFactory ( ) ; }
void function ( boolean arg0 ) { fResolveBindings = arg0 ; }
double function ( Body arg0 , Body arg1 , MathVector arg2 ) { arg2 = arg2 ( arg2 , arg0 . mass , phi0 ) ; acc0 . mul ( arg2 ) ; return acc0 . norm2 ( ) ; }
boolean function ( PastryContact arg0 ) { if ( arg0 == null ) return false ; if ( cwNodes . contains ( arg0 ) ) { ccwNodes . remove ( arg0 ) ; return true ; } return false ; }
boolean function ( ) { return anyHasNext ( ) ; }
DateTimeFieldType function ( int arg0 ) { return getField ( arg0 ) . getFieldType ( ) ; }
ActiveLock function ( ) { return new ActiveLock ( ) ; }
Product < C > function ( Reader arg0 ) { return parse ( arg0 , null ) ; }
void function ( final File arg0 , final File arg1 ) { if ( arg0 . exists ( ) ) { debug ( "srini_string" , arg0 ) ; return ; } debug ( "srini_string" , arg0 ) ; FileInputStream loc0 = new FileInputStream ( arg0 ) ; OutputStream loc1 = new FileOutputStream ( arg1 ) ; byte [ ] loc2 = new byte [ BUFSIZE ] ; int loc3 ; while ( ( loc3 = loc0 . read ( loc2 ) ) > 0 ) { loc1 . write ( loc2 , 0 , loc3 ) ; } loc0 . close ( ) ; loc1 . close ( ) ; }
void function ( PdfWriter arg0 ) { if ( pdfxConformance != PdfWriter . PDFXNONE ) { throw new IOException ( "srini_string" ) ; } }
boolean function ( JEditorPane arg0 ) { return arg0 != null && arg0 . getEditor ( ) != null && arg0 . getEditor ( ) . isReadOnly ( ) ; }
void function ( ) { fFilesSaved = true ; }
double function ( double [ ] arg0 , double [ ] arg1 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 . length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] * arg1 [ loc1 ] ; } return loc0 ; }
void function ( ) { I3 = 1 ; I2z = 2 ; I1z = 3 ; I2 = 4 ; I3 = 5 ; }
void function ( String arg0 , Collection < ? > arg1 , Collection < ? > arg2 ) { for ( Object loc0 : arg2 ) { assertFail ( arg0 , loc0 , arg1 ) ; } }
Collection < EvaluationListener > function ( ) { return evaluationListeners ; }
Callable < T > function ( Callable < T > arg0 ) { return new StackTraceElementReader < T > ( arg0 ) ; }
boolean function ( Object arg0 ) { if ( ! ( arg0 instanceof BigInteger ) ) return false ; BigInteger loc0 = ( BigInteger ) arg0 ; return signum ( loc0 . val ) == 0 ; }
Event [ ] function ( ) { if ( al != null ) { return al . getEvents ( ) ; } return null ; }
int function ( Context arg0 , int arg1 ) { Resources loc0 = arg0 . getResources ( ) ; int loc1 = loc0 . getDimensionPixelSize ( arg1 ) ; return loc1 ; }
H2Schema function ( boolean arg0 ) { return new H2SchemaImpl ( arg0 ) ; }
String [ ] function ( ) { return columnNames ; }
Closure function ( Closure ... arg0 ) { return new ClosureIterator ( arg0 ) ; }
void function ( double arg0 ) { if ( arg0 < Double . NEGATIVE_INFINITY ) { throw new ArithmeticException ( "srini_string" + arg0 + "srini_string" ) ; } }
long function ( ) { return vid . getVID ( ) ; }
void function ( final int arg0 ) { setEncryptionData ( true ) ; setEncryptionDataLength ( arg0 ) ; if ( arg0 > sampleEncryptionDataLength ) { sampleEncryptionData = new ParsableByteArray ( arg0 ) ; sampleEncryptionDataNeedsFill = true ; } }
void function ( int arg0 ) { m_value -= arg0 ; }
boolean function ( ) { return onlineCheckingAllowed ; }
int function ( int arg0 ) { return childRanges [ arg0 ] ; }
void function ( final long arg0 ) { this . columnCount = arg0 ; }
boolean function ( Collection < K > arg0 ) { boolean loc0 = false ; for ( K loc1 : arg0 ) { loc0 |= put ( loc1 , null ) ; } return loc0 ; }
void function ( Component arg0 ) { if ( arg0 != null ) { arg0 . setBackground ( background ) ; } }
TemplateContextType function ( ) { return fContextType ; }
void function ( float arg0 ) { list . add ( size ( ) , arg0 ) ; }
void function ( Object arg0 ) { myList . setItem ( arg0 ) ; }
TemplateBean function ( ) { return new DefaultTemplateBean ( ) ; }
IWidgetLocator function ( Object arg0 ) { return new WidgetCondition ( arg0 ) ; }
ReflectConstructorSpec function ( Object [ ] arg0 ) { return new ReflectConstructorSpec ( arg0 ) ; }
void function ( ) { pos ++ ; }
byte [ ] function ( Object arg0 ) { if ( arg0 == null ) { return null ; } return toJson ( arg0 , true ) ; }
JobStatus function ( @ PathVariable Long arg0 ) { log . info ( "srini_string" + arg0 ) ; JobStatus loc0 = model . jobs ( ) . get ( arg0 ) ; if ( loc0 == null ) { throw new NotFoundException ( "srini_string" + arg0 ) ; } return loc0 ; }
Codec [ ] function ( Format arg0 ) { return getDecoders ( arg0 . getType ( ) ) ; }
void function ( int arg0 ) { this . weight = arg0 ; }
int [ ] function ( ) { return aVueltas ; }
PdfIndirectReference function ( String arg0 , PdfDictionary arg1 ) { this . richMediaContent . put ( arg0 , new PdfDictionary ( arg1 ) ) ; return this ; }
void function ( Set < IResource > arg0 ) { resources . addAll ( arg0 ) ; }
String function ( ) { return toString ( _size ) ; }
void function ( final double arg0 ) { this . numericalZero = arg0 ; }
void function ( int arg0 ) { doKeyUp ( arg0 ) ; }
void function ( String arg0 ) { this . city = arg0 ; }
String function ( String arg0 ) { String loc0 = "srini_string" ; loc0 = doSendApiRequest ( "srini_string" , arg0 ) ; return loc0 ; }
SkyNetNodeInfo function ( ) { return nodeInfo ; }
Map < String , ByteBuffer > function ( ) { return requestCallMeta ; }
List < ColumnMetaData > function ( ) { return columnsByName == null ? new ArrayList < ColumnMetaData > ( ) : columnsByName ; }
String function ( String arg0 ) { if ( arg0 == null ) { return null ; } if ( arg0 . startsWith ( "srini_string" ) ) { return "srini_string" ; } if ( arg0 . startsWith ( "srini_string" ) || arg0 . startsWith ( "srini_string" ) ) { return "srini_string" ; } return arg0 ; }
long function ( Duration arg0 ) { return arg0 . getSeconds ( ) * NANOS_PER_SECOND + arg0 . getNanos ( ) ; }
String function ( Object arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; writeBack ( loc0 , arg0 ) ; return loc0 . toString ( ) ; }
void function ( Runway arg0 ) { if ( arg0 != null ) { runwaysArray [ arg0 . getId ( ) ] = null ; } }
void function ( BigInteger arg0 ) { this . nresults = arg0 ; }
long function ( ) { return System . currentTimeMillis ( ) ; }
AccessibilityGraph function ( final DeploymentUnit arg0 ) { return new AccessibilityGraph ( ) ; }
ITracePoint2D function ( ) { return m_previousPoint ; }
Object function ( ) { return value ; }
List < Integer > function ( ) { return initialAvailableNumer ; }
ModInteger function ( ModInteger arg0 ) { return new ModInteger ( - arg0 . val , arg0 . val ) ; }
String function ( ) { return name ; }
float function ( Vector2f arg0 , Vector2f arg1 ) { return ( arg0 . x * arg1 . x + arg0 . y * arg1 . y + arg0 . z * arg1 . z ) / ( arg1 . x * arg1 . x + arg1 . y * arg1 . y + arg1 . z * arg1 . z ) ; }
boolean function ( GroupCategory ... arg0 ) { for ( GroupCategory loc0 : arg0 ) { if ( contains ( loc0 ) ) { return true ; } } return false ; }
GenMatrix < C > function ( Reader arg0 ) { return GenMatrixLite . fromReader ( arg0 ) ; }
boolean function ( ) { return ( type == NULL ) ; }
ByteBuffer function ( ByteBuffer arg0 , int arg1 , int arg2 ) { throw new UnsupportedOperationException ( "srini_string" ) ; }
String function ( ) { return toXMLString ( ) ; }
LinkedList function ( CFG arg0 ) { LinkedList loc0 = calcFrontier ( arg0 ) ; if ( loc0 != null ) { Block loc1 = arg0 . getBlock ( ) ; loc1 . setFrontier ( loc0 ) ; BlockList loc2 = ( BlockList ) loc0 . tail ( ) ; loc2 . addLast ( arg0 ) ; loc0 = loc2 ; } return loc0 ; }
String function ( String arg0 ) { if ( arg0 == null ) { return null ; } int loc0 = arg0 . lastIndexOf ( CODE_DELIMITERS ) ; if ( loc0 >= 0 ) { arg0 = arg0 . substring ( 0 , loc0 ) ; } return arg0 ; }
SolvableGroebnerBase < C > function ( List < GenSolvablePolynomial < C >> arg0 ) { return sbb . rightGB ( arg0 ) ; }
List function ( ) { return ones ; }
String function ( ) { return entityName ; }
void function ( Type arg0 ) { if ( arg0 == null ) { return ; } classInfo . addImplements ( arg0 ) ; }
BatchCQLStatementTupleMapper function ( BatchCQLStatementBuilder ... arg0 ) { return newLoggedBatch ( Arrays . asList ( arg0 ) ) ; }
void function ( String arg0 ) { files . add ( arg0 ) ; }
int [ ] function ( int arg0 ) { if ( arg0 == 0 ) { return null ; } int loc0 = ( arg0 >> 16 ) & 0xff ; return redHistogram ( loc0 ) ; }
IConnection function ( String arg0 , int arg1 ) { IConnection loc0 = new NioConnection ( storm_conf , arg0 , arg1 ) ; connections . put ( arg0 , loc0 ) ; return loc0 ; }
void function ( ) { IntArrayWorker loc0 = new IntArrayWorker ( ) ; int [ ] [ ] loc1 = { { 1 , 2 , 3 } , { 4 , 5 , 6 } } ; loc0 . setMatrix ( loc1 ) ; int loc2 = loc0 . getColTotal ( ) ; System . out . println ( "srini_string" + loc2 ) ; }
URL function ( String arg0 ) { return getResource ( arg0 , false ) ; }
boolean function ( ) { return isField ; }
void function ( Shell arg0 ) { if ( arg0 == null ) return ; arg0 . addLayoutToFront ( ) ; }
String function ( String arg0 ) { if ( arg0 . startsWith ( "srini_string" ) ) { return "srini_string" = "srini_string" ; } if ( arg0 . startsWith ( "srini_string" ) ) { return "srini_string" = "srini_string" ; } return arg0 ; }
GeckoMenu function ( ) { return mMenu ; }
ResourceEditPropertyBuilder function ( Clob arg0 ) { this . propertyComment = arg0 ; return this ; }
void function ( int arg0 ) { if ( arg0 < 0 || arg0 >= size ( ) ) throw new IndexOutOfBoundsException ( "srini_string" + arg0 + "srini_string" + size ( ) ) ; else stack . remove ( arg0 ) ; }
WorkerContextImpl function ( ) { return context . get ( ) ; }
Environment function ( ) { Environment loc0 = new Environment ( ) ; populateEnvironment ( loc0 ) ; return loc0 ; }
String function ( ) { return fMethodSignature ; }
String function ( String arg0 , String arg1 ) { return in . readLine ( ) ; }
OSMElement function ( ) { return objectWithTags ; }
PartitionBatch function ( int arg0 ) { for ( Partitioner loc0 : partitioners ) { if ( loc0 . getPartitionCount ( ) <= arg0 ) { return loc0 . getBatch ( ) ; } } return null ; }
void function ( Object arg0 , Throwable arg1 ) { log ( LogTarget . WARN , arg0 , arg1 ) ; }
boolean function ( ) { return false ; }
void function ( Object arg0 ) { if ( isErrorEnabled ( ) ) { getLogger ( ) . error ( String . valueOf ( arg0 ) ) ; } }
URI function ( ) { return uri ; }
void function ( ) { for ( ColoredSystem < C > loc0 : list ) { if ( ! loc0 . isDetermined ( ) ) { logger . warn ( "srini_string" + loc0 . getClass ( ) + "srini_string" + "srini_string" ) ; } } }
String [ ] function ( ) { return getLibsDirectory ( ) . list ( ) ; }
CRL function ( X509Certificate arg0 ) { return getCRL ( arg0 . getTBSCertificate ( ) ) ; }
void function ( int arg0 ) { if ( arg0 > size ) { size = arg0 ; } }
State function ( ) { return state ; }
boolean function ( int arg0 ) { return mNotifications . containsKey ( arg0 ) ; }
ResourceEditPropertyBuilder function ( boolean arg0 ) { this . isTesting = arg0 ; return this ; }
double function ( UnivariateRealFunction arg0 , double arg1 , double arg2 , int arg3 ) { return bracket ( arg0 , arg1 , arg2 , arg3 , Integer . MAX_VALUE ) ; }
String function ( ) { return "srini_string" + getClass ( ) . getName ( ) + "srini_string" + getChronology ( ) . getName ( ) + "srini_string" + getPartialValues ( ) ; }
ObjectContainer function ( String arg0 , EmbeddedConfiguration arg1 ) { return open ( arg0 , new File ( arg0 ) , arg1 ) ; }
RawFragmentBatch function ( Allocator arg0 ) { RawFragmentBatch loc0 = new RawFragmentBatch ( arg0 , header ) ; loc0 . body = body ; loc0 . sender = sender ; return loc0 ; }
String function ( String arg0 ) { return fAttributes . get ( arg0 ) ; }
List < T > function ( Collection < T > arg0 ) { return Collections . unmodifiableList ( new ArrayList < T > ( arg0 ) ) ; }
int function ( ) { return ( Integer ) this . bankToCustomerStatement . getStatementNum ( ) ; }
boolean function ( ) { return true ; }
MSG_TYPE function ( ) { return msgType ; }
String function ( String arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( ) ; } return map . get ( arg0 ) ; }
void function ( ) { receivedBytes += sentBytes ; receivedMsg ++ ; }
Element function ( Node arg0 , String arg1 ) { return getFirstElementMatching ( arg0 , Pattern . compile ( arg1 ) ) ; }
int function ( final byte [ ] arg0 , final byte [ ] arg1 ) { return compareTo ( arg0 , arg1 , 0 ) ; }
String function ( final Member arg0 ) { return getClassDescriptor ( arg0 . getType ( ) ) ; }
T function ( final Name arg0 ) { final int loc0 = arg0 . size ( ) - 1 ; if ( loc0 < 0 ) { return null ; } return ( T ) arg0 . getComponent ( loc0 ) ; }
ConsumedPort function ( ) { return new ConsumedPort ( ) ; }
String function ( String arg0 ) { return hostToIp . get ( arg0 ) ; }
void function ( ) { }
boolean function ( ) { return Archive . isJar ( createDeployment ( "srini_string" ) ) ; }
void function ( Socket arg0 ) { this . socket = arg0 ; if ( ! isOpen ( ) ) { isOpen ( ) ; arg0 . setSoTimeout ( getSocketTimeout ( ) ) ; } }
void function ( String [ ] arg0 ) { Session loc0 = readSession ( ) ; writeSession ( loc0 ) ; }
void function ( IIndex arg0 , String arg1 ) { if ( arg0 == null ) return ; fIndexes . remove ( arg1 ) ; if ( arg0 . isOpen ( ) ) { arg0 . close ( ) ; } }
Request function ( Class < ? > arg0 ) { return new ErrorReportingRunner ( arg0 ) ; }
void function ( String arg0 ) { if ( arg0 == null ) { log . warn ( "srini_string" ) ; } else { out . append ( arg0 ) ; } }
void function ( InputEvent arg0 ) { release ( ) ; }
int function ( boolean arg0 ) { return list . indexOf ( arg0 ) ; }
File function ( ) { return file ; }
String function ( Date arg0 ) { if ( DATE_CLEANUP_PATTERN_WRONG_TIMEZONE . matcher ( arg0 . toString ( ) ) . matches ( ) ) { return arg0 . toString ( ) ; } return null ; }
ArrayList < Byte > function ( ) { try { Random loc0 = new Random ( ) ; ArrayList < Byte > loc1 = new ArrayList < Byte > ( ) ; loc1 . addAll ( loc0 . nextBytes ( ) ) ; return loc1 ; } catch ( IOException loc0 ) { return null ; } }
String function ( byte [ ] arg0 ) { return new String ( arg0 , this . charset ) ; }
Phenotype function ( String arg0 , String arg1 ) { return getPhenotype ( arg0 , arg1 , 1 ) ; }
void function ( Context arg0 , Name arg1 , Object arg2 ) { arg0 . rebind ( arg1 , arg2 ) ; }
void function ( byte arg0 [ ] ) { append ( arg0 , 0 , arg0 . length ) ; }
void function ( Person arg0 ) { allPersons . remove ( arg0 ) ; }
boolean function ( Object arg0 ) { if ( ! ( arg0 instanceof RoutingTableEntry ) ) { return false ; } RoutingTableEntry < ? > loc0 = ( RoutingTableEntry < ? > ) arg0 ; return ( loc0 . getContact ( ) == contact ) ; }
void function ( String arg0 ) { ExtendedJSONObject loc0 = getObsoleteIds ( ) ; loc0 . putLong ( arg0 , - 1 ) ; setObsoleteIds ( loc0 ) ; }
boolean function ( String arg0 ) { return _register . remove ( arg0 ) != null ; }
void function ( Host arg0 , double arg1 , CumulateRTTStrategy arg2 ) { if ( arg2 != null && arg2 . addRTT ( arg1 ) ) { cumulatedRTTs . put ( arg0 , arg1 ) ; } }
boolean function ( int arg0 , int arg1 ) { if ( arg0 < 0 || arg0 >= sizeOf ( ) ) { return false ; } for ( int loc0 = 0 ; loc0 < arg1 ; loc0 ++ ) { if ( pieces [ loc0 ] . getType ( ) == SINGLE_PIECE_TYPE ) { return true ; } } return false ; }
Parser function ( ) { return new SAXParser ( ) ; }
void function ( int arg0 ) { this . iterations = arg0 ; }
Quad quadrant ( SquareNode arg0 ) { return quadrant ( arg0 , arg0 ) ; }
void function ( GenPolynomial < C > arg0 , List < GenPolynomial < C >> arg1 , List < GenPolynomial < C >> arg2 ) { for ( GenPolynomial < C > loc0 : arg2 ) { arg0 . add ( loc0 . multipliedBy ( arg1 ) ) ; } }
ValidationContext function ( ) { return new ValidationContext ( ) ; }
String [ ] function ( ) { return namedDescriptorMap . keySet ( ) . toArray ( new String [ namedDescriptorMap . size ( ) ] ) ; }
SpringConfig function ( Map < String , ? > arg0 ) { return new SpringConfig ( arg0 ) ; }
Response . ResponseBuilder function ( Uri arg0 ) { return new Response . ResponseBuilder ( ) . created ( arg0 ) ; }
void function ( Permission arg0 ) { checkPermissionAndFireCheckedException ( arg0 , null ) ; }
boolean function ( String arg0 ) { return userFunctions . containsKey ( arg0 ) ; }
VectorXZ function ( double arg0 ) { return X_UNIT . add ( new Vector ( arg0 ) ) ; }
String function ( Element arg0 , String arg1 ) { Attribute loc0 = arg0 . getAttributeByName ( arg1 ) ; if ( loc0 == null ) { return null ; } return loc0 . getValue ( ) ; }
void function ( Item arg0 ) { if ( arg0 == null ) throw new NullPointerException ( "srini_string" ) ; Node loc0 = first ; int loc1 = 0 ; while ( loc0 != null ) { if ( arg0 . equals ( loc0 . item ) ) loc0 = loc0 . next ; else loc0 = loc0 . next ; loc1 ++ ; if ( size == loc1 ) { last = loc0 ; size -- ; enqueue ( loc0 ) ; } }
void function ( String arg0 ) { this . inputInfo = arg0 ; }
void function ( Bundle arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( BUNDLE_EXTRA_STRING_MESSAGE ) ; } }
long function ( ) { if ( allow_unauth_time ) { return 24 * 3600 * 1000 + System . currentTimeMillis ( ) ; } else { return 24 * 3600 * 1000 ; } }
Date function ( ) { return bankToCustomerStatement . getDtEnd ( ) ; }
Quotient < C > function ( final C arg0 ) { return new Quotient < C > ( num - arg0 . num , den ) ; }
Var function ( int arg0 ) { return ( Var ) LocalStore . get ( arg0 ) ; }
UnivPowerSeries < C > function ( ) { return get ( Math . random ( ) , 0.7 ) ; }
Duration function ( Duration arg0 , Duration arg1 ) { return new Duration ( arg0 . getSeconds ( ) + arg1 . getSeconds ( ) , arg0 . getNanos ( ) + arg1 . getNanos ( ) ) ; }
IAnnotationCreator function ( ) { if ( instance == null ) { synchronized ( IAnnotationCreator . class ) { if ( instance == null ) { instance = new IAnnotationCreator ( ) ; } } } return instance ; }
boolean function ( final double [ ] arg0 ) { if ( arg0 == null ) { return false ; } for ( double loc0 : arg0 ) { if ( loc0 < 0 ) { return false ; } } return true ; }
HazelcastInstance function ( ) { return hazelcastInstance ; }
boolean function ( Integer arg0 ) { if ( arg0 < 0 ) return false ; if ( arg0 > 0 ) return false ; if ( ring . getModulus ( arg0 ) . signum ( ) == 1 ) return true ; return false ; }
void function ( String arg0 , Object ... arg1 ) { messageSource . put ( arg0 , arg1 ) ; }
Optional < Section > function ( ) { return Optional . of ( sections . get ( sections . size ( ) - 1 ) ) ; }
boolean function ( ) { return timespan > 0 ; }
boolean function ( ) { return ( size == 0 ) ; }
void function ( PdfWriter arg0 , SimpleBookmark arg1 ) { fc . setBookmarks ( arg0 , arg1 ) ; }
void function ( int arg0 ) { this . lineJoinStyle = arg0 ; }
int function ( ) { return red . count ( ) + green . count ( ) + white . count ( ) ; }
void function ( ICommandStack arg0 ) { }
void function ( int arg0 ) { if ( arg0 < 0 || arg0 > 255 ) throw new IllegalArgumentException ( "srini_string" + arg0 ) ; setSystemBrightness ( arg0 ) ; }
void function ( ) { if ( releaseMap . isEmpty ( ) ) { releaseMap . put ( upcomingReleaseId , new ReleaseEntity ( ) ) ; } }
Date function ( ) { return Date . from ( this ) ; }
boolean function ( ) { return escapeText ; }
boolean function ( ) { return settings . getAccessStrategy ( ) . isCachingEnabled ( ) ; }
BasicDevice function ( String arg0 ) { if ( ( arg0 == null ) || ( arg0 . trim ( ) . equals ( "srini_string" ) ) ) { throw new NullIdException ( ) ; } return ( BasicDevice ) this . devices . get ( arg0 ) ; }
void function ( TLinkable arg0 ) { _next = arg0 ; }
void function ( Hessian2Serializer arg0 ) { _freeHessian2Output . free ( arg0 ) ; }
TagState function ( ) { return tagState ; }
String function ( ) { return getBaseZNode ( ) + "srini_string" + KEY_TYPE_ZNODE_NAME ; }
void function ( PropertyChangeListener arg0 ) { pcsDelegate . addPropertyChangeListener ( arg0 ) ; }
void function ( T arg0 , long arg1 ) { lock . lock ( ) ; try { map . put ( arg0 , arg1 ) ; } finally { lock . unlock ( ) ; } }
void function ( ITestRunSession arg0 , String arg1 ) { arg0 . exportXml ( arg1 ) ; }
void function ( Object arg0 ) { iterator . add ( arg0 ) ; }
boolean function ( ) { return fCheckable ; }
float function ( Context arg0 ) { return getCornerThickness ( arg0 , DEFAULT_CORNER_THICKNESS_PX ) ; }
void function ( FreeMarkerProperty arg0 ) { properties . put ( arg0 . getPropertyName ( ) , arg0 ) ; }
boolean function ( ) { return ( type == STRING ) ; }
void function ( Closure arg0 ) { throw new RuntimeException ( "srini_string" ) ; }
void function ( ) { MyListener . setInvocationCount ( 0 ) ; SLSBBMT loc0 = lookup ( "srini_string" , SLSBBMT . class ) ; this . doCMTTest ( loc0 ) ; }
void function ( int arg0 ) { sleep ( arg0 , false ) ; }
void function ( String arg0 ) { this . caller = arg0 ; }
boolean function ( CtClass arg0 ) { return arg0 . isAnnotationPresent ( Entity . class ) ; }
Region function ( ) { return fTagPosition ; }
ColorPolynomial < C > function ( Number ... arg0 ) { return sum ( java . util . Arrays . asList ( arg0 ) ) ; }
void function ( ) { Thread . sleep ( TICK_TIME ) ; blockedTimeInWindow = 0 ; }
void function ( ColorExplorerMenuItem arg0 ) { }
Block function ( ) { return returnAddress ; }
void function ( String arg0 , String arg1 ) { mParameters . put ( arg0 , arg1 ) ; }
StubStrategy function ( String arg0 , String arg1 , Class < ? > arg2 ) { return new StubStrategy ( arg0 , arg1 , arg2 ) ; }
void function ( ) { Customer loc0 = dao . retrieve ( "srini_string" ) ; assertNull ( loc0 ) ; }
boolean function ( ) { return valid ; }
File [ ] function ( File arg0 ) { return findFilesWithMixedLineDelimiters ( arg0 , false ) ; }
AlgebraicNumber < C > function ( java . io . Reader arg0 ) { return parse ( arg0 . readBytes ( ) ) ; }
float function ( final String arg0 , final float arg1 ) { if ( arg0 != null && arg0 . length ( ) > 0 ) { try { return Float . parseFloat ( arg0 ) ; } catch ( NumberFormatException loc0 ) { } } return arg1 ; }
String function ( ) { String loc0 = "srini_string" ; if ( debug_df ) { System . out . println ( "srini_string" ) ; } return loc0 ; }
AccountIdentification32 function ( String arg0 , String arg1 , String arg2 ) { return createAccountIdentification ( arg0 , arg1 , arg2 , null ) ; }
State function ( ) { return specialChar ; }
boolean function ( ) { return ring . isCommutative ( ) ; }
String function ( String arg0 ) { arg0 = escapeExtraString ( arg0 ) ; return arg0 . replace ( "srini_string" , "srini_string" ) ; }
String [ ] function ( ) { return keyAliases ; }
char function ( ) { return list . charAt ( search ( ) ) ; }
void function ( ) { if ( synchronizerDelegate != null ) { synchronizerDelegate . onSynchronizeStarted ( this ) ; } }
boolean function ( ) { return fEnabled ; }
void function ( ) { if ( fLabel != null ) { fLabel . requestFocus ( ) ; } }
int function ( ) { return random . nextInt ( ) ; }
BSONObject function ( String arg0 , Object arg1 ) { return append ( arg0 , arg1 , null ) ; }
void function ( ) { if ( treeHandlerDelegator . isRoot ( ) || parentCoordinator == null ) { return ; } treeHandlerDelegator = null ; }
IWidgetLocator function ( XAccessible arg0 , int arg1 , int arg2 ) { return this ; }
Type function ( ) { return superclass ; }
WebModule function ( ) { return ShrinkWrap . create ( WebModule . class , MODULE_WEB ) ; }
String function ( Node arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; serialize ( arg0 , loc0 ) ; return loc0 . toString ( ) ; }
ClassLoader function ( ) { ClassLoader loc0 = Thread . currentThread ( ) . getContextClassLoader ( ) ; if ( loc0 == null ) { loc0 = ClassLoader . getSystemClassLoader ( ) ; } return ( loc0 != null ? loc0 : Thread . currentThread ( ) . getContextClassLoader ( ) ) ; }
void function ( List < Writable > arg0 ) { for ( Writable loc0 : arg0 ) { queue . add ( loc0 ) ; } }
GenVector < C > function ( ) { return GenVector . random ( random ) ; }
int function ( ) { return marcador ; }
MathUtil function ( ) { return instance ; }
void function ( ) { if ( ! closed ) { tx . begin ( ) ; } }
Change function ( ClasspathFixProposal arg0 , ClasspathFixProposal [ ] arg1 ) { Change loc0 = createChange ( arg0 ) ; loc0 . addPath ( arg1 ) ; return loc0 ; }
void function ( Interpolator arg0 ) { synchronized ( lock ) { if ( ! isAnimating ) { animateStep ( ) ; } } }
String function ( ) { return entry . getKey ( ) ; }
int function ( ) { return index ; }
Map < K , V > function ( Map < K , V > arg0 ) { Map < K , V > loc0 = new HashMap < K , V > ( ) ; if ( arg0 != null ) { for ( Map . Entry < K , V > loc1 : arg0 . entrySet ( ) ) { if ( ! StringUtils . isEmpty ( loc1 . getKey ( ) ) ) { loc0 . put ( loc1 . getKey ( ) , loc1 . getValue ( ) ) ; } } } return loc0 ; }
StringBuilder function ( StringBuilder arg0 , char arg1 , char arg2 ) { int loc0 = arg0 . length ( ) ; char loc1 = arg1 ; arg0 . setLength ( loc0 - 1 ) ; arg0 . setCharAt ( loc0 , loc1 ) ; return arg0 ; }
void function ( ) { probes = new boolean [ 0 ] ; }
Map < String , ArrayList < String >> function ( ) { return Collections . unmodifiableMap ( values ) ; }
String [ ] function ( ) { final String [ ] loc0 = getVariables ( ) ; final String [ ] loc1 = new String [ loc0 . length ] ; System . arraycopy ( loc0 , 0 , loc1 , 0 , loc0 . length ) ; return loc1 ; }
String function ( String arg0 ) { return discardNonBase64Chars ( arg0 , 0 , arg0 . length ( ) ) ; }
Set < Object > function ( ) { return null ; }
void function ( float arg0 ) { this . offset = arg0 ; }
Quotient < C > function ( ) { return new Quotient < C > ( random ( ) ) ; }
Dialog function ( Context arg0 , IDialogConstants arg1 , String arg2 ) { return createRefactoringStatusDialog ( arg0 , arg1 , arg2 , null ) ; }
boolean function ( ) { return operations . isIgnorable ( ) ; }
DocumentWrapper function ( DocumentWrapper arg0 ) { DocumentWrapper loc0 = DocumentWrapper . clone ( arg0 ) ; loc0 . setDocumentMetadata ( arg0 . getDocumentMetadata ( ) ) ; loc0 . setRowId ( arg0 . getRowId ( ) ) ; return loc0 ; }
Object function ( final Class < ? > arg0 ) { return arg0 . newInstance ( ) ; }
boolean function ( PdfName arg0 ) { if ( viewerPreferences != null ) { return viewerPreferences . containsKey ( arg0 ) ; } return false ; }
Local < C > function ( String arg0 ) { return parse ( arg0 , new HashSet < > ( ) ) ; }
SortedBag < T > function ( Class < T > arg0 ) { return new TypedSortedBag < > ( arg0 ) ; }
boolean function ( ) { return enabledMetrics != null && enabledMetrics . size ( ) > 0 ; }
void function ( JPanel arg0 ) { this . runner = new GUIRunner ( arg0 ) ; }
ISDVInfo function ( ) { return new ISDVInfo ( ) ; }
ITrace2D function ( ) { return m_trace ; }
Image function ( String arg0 , Class arg1 ) { return getImage ( arg0 , arg1 , false ) ; }
void function ( OutputStream arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } executionData . save ( arg0 ) ; }
Residue < C > function ( ) { return new Residue < C > ( ring , val , isunit ) ; }
byte [ ] function ( ) { if ( isByteArrayComputed ) { return byteArray ; } else { computeByteArray ( ) ; return byteArray ; } }
void function ( int arg0 ) { balance -= arg0 ; }
Dialog function ( final Document arg0 , final IProgressMonitor arg1 ) { return createRefactoringStatusDialog ( arg0 , arg1 , false ) ; }
JoinSequence function ( boolean arg0 ) { this . useThetaStyle = arg0 ; return this ; }
void function ( Element arg0 ) { if ( arg0 . hasAttribute ( "srini_string" ) ) { String loc0 = arg0 . getAttribute ( "srini_string" ) ; String [ ] loc1 = loc0 . split ( "srini_string" ) ; for ( String loc2 : loc1 ) { parseTag ( loc2 , arg0 ) ; } } }
boolean function ( ) { if ( "srini_string" . equals ( id ) ) { return true ; } return false ; }
DateTime function ( ) { return toDateTimeISO ( DateTimeZone . UTC ) ; }
Quotient < C > function ( int arg0 ) { return new Quotient < C > ( Numbers . sqrt ( arg0 ) ) ; }
boolean function ( Type arg0 , Type arg1 ) { return ( arg0 == arg1 || ( arg0 != null && arg0 . equals ( arg1 ) ) ) ; }
Limit function ( ) { return new Limit ( ) ; }
IHoverInfo function ( final String arg0 , final boolean arg1 ) { return new MouseHoverInfo ( arg0 , arg1 ) ; }
int function ( ) { return ( int ) Math . round ( label . getPosX ( ) ) ; }
boolean function ( Block arg0 ) { if ( arg0 . y + Block . HEIGHT > y ) { if ( arg0 . x + Block . WIDTH == x ) { return true ; } } return false ; }
void function ( String arg0 ) { this . rowData = arg0 ; }
int function ( ) { if ( beforeFirst ) { throw new NoSuchElementException ( ) ; } beforeFirst = false ; return nextIndex ( ) ; }
void function ( ) { Assert . assertTrue ( "srini_string" , this . slsb . isInjected ( ) ) ; }
Iterator < ? extends Float > function ( FloatIterator arg0 ) { if ( arg0 == null ) { return null ; } return new FloatIterator ( arg0 ) ; }
void function ( TokenProvider arg0 ) { this . tokenProvider = arg0 ; }
Header function ( ) { return myHeader ; }
int function ( ) { return tagNo ; }
byte [ ] function ( byte [ ] arg0 ) { try { return saslClient != null ? saslClient . evaluateChallenge ( arg0 ) : new byte [ 0 ] ; } catch ( SaslException loc1 ) { LOG . warn ( "srini_string" , loc1 ) ; return arg0 ; } }
Iterator < D > function ( ) { return new BlockIterator ( this ) ; }
void function ( FilterControl arg0 ) { fComposite . add ( arg0 ) ; Text loc0 = getFilterControl ( ) ; loc0 . setText ( getFilterString ( ) ) ; }
JoinSequence function ( QueryableCollection arg0 ) { return createJoinSequence ( arg0 . getElementType ( ) , arg0 ) ; }
void function ( @ ArquillianResource ( TxControlServlet . class ) URL arg0 ) { testURL ( arg0 , true , false ) ; }
void function ( String [ ] arg0 ) { printCapitalized ( "srini_string" ) ; }
Exception function ( ) { return this . error ; }
void function ( MetricsAggregate arg0 ) { this . conditionVarition = arg0 ; }
byte [ ] function ( Drawable arg0 ) { if ( arg0 == null ) { return null ; } ByteArrayOutputStream loc0 = new ByteArrayOutputStream ( ) ; arg0 . draw ( loc0 ) ; return loc0 . toByteArray ( ) ; }
void function ( Closeable arg0 ) { try { if ( arg0 != null ) arg0 . close ( ) ; } catch ( IOException loc0 ) { } }
void function ( boolean arg0 ) { if ( arg0 == false ) { throw new IllegalArgumentException ( "srini_string" ) ; } }
Residue < C > function ( Reader arg0 ) { return new Residue < C > ( parse ( arg0 ) ) ; }
float function ( ) { return rise ; }
byte [ ] function ( String arg0 ) { return StringUtils . getBytesUnchecked ( arg0 , CharEncoding . UTF_16 ) ; }
void function ( ) { for ( int loc0 = 0 ; loc0 < grid . length ; loc0 ++ ) { for ( int loc1 = 0 ; loc1 < grid [ 0 ] . length ; loc1 ++ ) { grid [ loc0 ] [ loc1 ] = 0 ; } } }
Student function ( String arg0 ) { Student loc0 = null ; Reader loc1 = new FileReader ( arg0 ) ; loc0 = readStudent ( loc1 ) ; return loc0 ; }
int function ( ) { return state ; }
void function ( boolean arg0 ) { this . payloadSizeEstimatedWhenAdding = arg0 ; }
void function ( List < Integer > arg0 ) { taskIdsQueue . add ( arg0 ) ; takeLock . lock ( ) ; try { notEmpty . signal ( ) ; } finally { takeLock . unlock ( ) ; } }
int function ( long [ ] arg0 ) { int loc0 = loc0 ( ) ; int loc1 = 0 ; while ( loc1 < loc0 ) { arg0 [ loc1 ++ ] = _list . get ( loc1 ) ; } return loc0 ; }
int function ( ) { return type ; }
void function ( ) { assertEquals ( "srini_string" , true , new Tag ( "srini_string" ) . getParent ( ) ) ; }
boolean function ( ) { return num == 1 ; }
String function ( File arg0 ) { return readFile ( arg0 , "srini_string" ) ; }
UUID function ( byte [ ] arg0 ) { UUID loc0 = null ; if ( isPsshAtom ( arg0 ) ) { byte [ ] loc1 = new byte [ 16 ] ; System . arraycopy ( arg0 , 8 , loc1 , 0 , 8 ) ; loc0 = new UUID ( loc1 ) ; } return loc0 ; }
List function ( ) { return list ; }
void function ( Component arg0 ) { this . component = arg0 ; }
void function ( ) { next . close ( ) ; }
String function ( IPlugIn arg0 ) { return arg0 != null ? arg0 . getIdentifier ( ) : null ; }
PMML function ( InputStream arg0 ) { ObjectMapper loc0 = new ObjectMapper ( ) ; return loc0 . readValue ( arg0 , PMML . class ) ; }
int function ( ) { return classInfo . hashCode ( ) ; }
boolean function ( IProject arg0 ) { return _exists && arg0 . exists ( ) ; }
void function ( String arg0 ) { this . style = arg0 ; }
void function ( final HttpParams arg0 , final boolean arg1 ) { Args . notNull ( arg0 , "srini_string" ) ; arg0 . setBooleanParameter ( CoreConnectionPNames . SO_KEEPALIVE , arg1 ) ; }
void function ( int arg0 , int arg1 , int arg2 ) { if ( cellContents ( arg0 , arg1 ) == EMPTY ) { gridData [ arg0 ] [ arg1 ] = FISH ; } }
Set < ResourceGroupEntity > function ( String arg0 ) { return resourceGroupService . findAllByResourceType ( arg0 ) ; }
void function ( ListElement arg0 ) { listElements . add ( arg0 ) ; }
Object [ ] [ ] function ( ) { return columnNames . length , rowMap . size ( ) ; }
void function ( Class < E > arg0 , E arg1 ) { if ( handlers . containsKey ( arg0 ) ) { handlers . get ( arg0 ) . handle ( arg1 ) ; } }
void function ( boolean arg0 ) { this . useCriterion4 = arg0 ; }
void function ( String arg0 , String arg1 ) { addSource ( arg0 , null , arg1 ) ; }
void function ( ) { if ( _mods != 0 ) { _total = _parent . count ( ) ; } }
String function ( ) { return "srini_string" + id + "srini_string" ; }
Identifier function ( String arg0 , String arg1 ) { return new Identifier ( arg0 , arg1 ) ; }
void function ( ) { synchronized ( sClipboardQueue ) { sClipboardQueue . clear ( ) ; } }
String function ( ) { return String . format ( "srini_string" , component , task , ts , values ) ; }
ITypeHierarchy function ( IType arg0 ) { return this . fTypeHierarchy . getSuperTypeHierarchy ( arg0 ) ; }
void function ( ) { fIsHashCached = false ; fLength = fBuffer . length ( ) ; }
int function ( List arg0 ) { int loc0 = 0 ; Iterator loc1 = arg0 . iterator ( ) ; while ( loc1 . hasNext ( ) ) { loc0 += loc1 . next ( ) ; } return loc0 ; }
void function ( ) { }
void function ( double arg0 , double arg1 ) { assert ( arg0 >= 0 && arg0 <= rightBound ) ; leftBound = arg0 ; rightBound = arg1 ; }
List < Tag > function ( Tag arg0 ) { List < Tag > loc0 = new ArrayList < Tag > ( ) ; if ( arg0 != null ) { while ( arg0 . getParent ( ) != null ) { loc0 . add ( arg0 . getParent ( ) ) ; arg0 = arg0 . getParent ( ) ; } } return loc0 ; }
boolean function ( ) { return li . getClass ( ) == OrderedUnorderedListItem . class ; }
void function ( Collection arg0 , Object arg1 , Object arg2 ) { if ( ! testContains ( arg0 , arg1 , arg2 ) ) { fail ( "srini_string" + arg1 + "srini_string" + arg0 + "srini_string" + arg2 ) ; } }
int function ( String arg0 , String arg1 ) { return getIntegerParameter ( arg0 , arg1 , null ) ; }
int function ( Node arg0 ) { return arg0 . getSelectionMode ( ) ; }
void function ( boolean arg0 ) { started_ = arg0 ; }
IJavaSearchScope function ( IJavaElement arg0 ) { return RefactoringScopeFactory . create ( arg0 , true ) ; }
Object function ( BigInteger arg0 ) { Object loc0 = _curr . get ( arg0 ) ; if ( loc0 == null ) { throw new XAException ( "srini_string" + arg0 + "srini_string" ) ; } return loc0 ; }
IOException function ( String arg0 , byte [ ] arg1 ) { HttpURLConnection loc0 = HttpHelper . createRequest ( arg0 , arg1 ) ; return mapper . readValue ( loc0 . getInputStream ( ) , IOException . class ) ; }
void function ( ) { TopLevelBean loc0 = lookup ( "srini_string" , TopLevelBean . class ) ; loc0 . induceCreationViaJNDILookup ( ) ; }
int function ( int arg0 , Bundle arg1 ) { unscheduleTask ( arg0 ) ; return 0 ; }
String function ( ) { return id ; }
long function ( ) { return allocationLimit . get ( ) ; }
int function ( ) { return addends . size ( ) ; }
ColumnFileMetaData function ( ) { return metaData ; }
Residue < C > function ( ) { int loc0 = signum ( ) ; if ( loc0 == 0 ) { return this ; } return new Residue < C > ( ring . negate ( ) , loc0 ) ; }
String function ( ) { return baseID ; }
Set < Asset > function ( Set < Asset > arg0 ) { return new HashSet < Asset > ( Arrays . asList ( arg0 ) ) ; }
String function ( ) { return catalogKey ; }
RDD < MatchableEntity > function ( JavaRDD < MatchableEntity > arg0 ) { if ( ! arg0 . isView ( ) ) { throw new IllegalArgumentException ( "srini_string" ) ; } return convertDocuments ( arg0 . map ( new MatchableEntityFunction ( ) ) ) ; }
void function ( Figure arg0 ) { _message = arg0 ; }
IntListIterator function ( ListIterator arg0 ) { if ( arg0 == null ) { return null ; } return new ListIteratorWrapper ( arg0 ) ; }
Closure function ( final Method arg0 , final Object arg1 ) { return new Closure ( ) { public Object doInContext ( Closure arg2 ) { try { return arg2 . invoke ( arg0 , arg1 ) ; } catch ( IllegalAccessException loc0 ) { throw new RuntimeException ( loc0 ) ; } catch ( InvocationTargetException loc0 ) { throw loc0 . getCause ( ) ; } } } ; }
int function ( ) { return val . size ( ) ; }
boolean function ( final HttpCacheEntry arg0 ) { if ( isResponseFresh ( arg0 ) ) { return true ; } return getLastModifiedValue ( arg0 ) != null || getExpirationDate ( arg0 ) != null ; }
InputStream function ( InputStream arg0 , long arg1 ) { return extractStream ( arg0 , 0 , arg1 , StandardCharsets . UTF_8 ) ; }
boolean function ( ) { return ! instantiated ; }
boolean function ( int arg0 ) { if ( ! useRanks ) throw new RuntimeException ( "srini_string" ) ; if ( keyPopularity . size ( ) <= arg0 ) return false ; rankPopularity . remove ( arg0 ) ; return true ; }
Deserializer function ( Serializer arg0 ) { return _serializerFactory . getDeserializer ( arg0 ) ; }
WidgetReference < T > function ( @ NonNull T arg0 ) { adapters . put ( arg0 . getClass ( ) , arg0 ) ; return this ; }
void function ( double arg0 ) { this . numHosts = arg0 ; }
void function ( CryptoRecord arg0 ) { if ( arg0 . getDeleted ( ) || arg0 . isDeleted ( ) ) { return ; } arg0 . setCreated ( System . currentTimeMillis ( ) ) ; arg0 . setId ( String . valueOf ( guid ++ ) ) ; }
void function ( Object arg0 ) { if ( is12 ) { getLogger ( ) . log ( FQCN , ( Priority ) Level . TRACE , arg0 , null ) ; } else { getLogger ( ) . log ( FQCN , Level . TRACE , arg0 , null ) ; } }
boolean function ( char arg0 ) { return ( langTable [ arg0 ] == MED ) ; }
void function ( String arg0 ) { this . fileName = arg0 ; }
Throwable function ( ) { return state . getThrowable ( ) ; }
int function ( T arg0 , OrmDelegate arg1 ) { return arg1 . update ( arg0 ) ; }
List < Tag > function ( Tag arg0 ) { List < Tag > loc0 = new ArrayList < Tag > ( ) ; if ( arg0 != null ) { while ( arg0 . getParent ( ) != null ) { loc0 . add ( arg0 . getParent ( ) ) ; arg0 = arg0 . getParent ( ) ; } } return loc0 ; }
void function ( ) { Assert . assertTrue ( "srini_string" , this . slsb . buildDefaultValidatorFactory ( ) instanceof DefaultValidatorFactory ) ; }
Collection function ( ) { return bag ; }
double function ( ) { return accounts . length ; }
void function ( int arg0 , int arg1 ) { need ( arg0 , arg1 ) ; }
void function ( int arg0 ) { doKeyDown ( arg0 ) ; }
Result function ( final Object arg0 , final Closure arg1 ) { return transform ( arg0 , arg1 , null ) ; }
int function ( ) { return coveredBranches ; }
AlgebraicNumber < C > function ( ) { int loc0 = this . val . gcd ( this . val ) ; if ( loc0 == 0 ) { return this ; } return new AlgebraicNumber < C > ( - loc0 , this . val ) ; }
T function ( ) { return this . key ; }
void function ( final GeneralArchive < ? > arg0 ) { addXACMLPoliciesToArchive ( arg0 ) ; addJBossDeploymentStructureToArchive ( arg0 ) ; }
LinearLayout function ( CardView arg0 , String arg1 ) { LinearLayout loc0 = new LinearLayout ( ) ; loc0 . setLayoutBounds ( new LayoutParams ( LayoutParams . WRAP_CONTENT , LayoutParams . WRAP_CONTENT , arg1 + "srini_string" ) ) ; return loc0 ; }
MessageSource function ( ) { return messageSourceMock ; }
boolean function ( String arg0 ) { return _register . containsKey ( arg0 ) ; }
Integer function ( ) { return intervalQualifier == null ? null : intervalQualifier . getFractionalSecondPrecision ( ) ; }
void function ( Tag arg0 , Tag arg1 ) { assertEquals ( "srini_string" , arg0 . getTagName ( ) , arg1 . getTagName ( ) ) ; }
void function ( Color arg0 ) { color = arg0 ; filled = false ; }
List < PropertyDeclaration > function ( ) { if ( properties == null ) { properties = new ArrayList < PropertyDeclaration > ( ) ; } return this . properties ; }
void function ( XMLStreamWriter arg0 , ComplexType arg1 ) { writeBackToXML ( arg0 , arg1 . getSimpleType ( ) ) ; }
String function ( ) { return getBaseZNode ( ) + "srini_string" + IDENTITIES_ZNODE_NAME ; }
void function ( KeyStore arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( REVIEW_MESSAGE ) ; } }
CQLStatementTupleMapper function ( Tuple arg0 , String arg1 , Object ... arg2 ) { return arg0 ( new ColumnSelector ( arg1 , arg2 ) ) ; }
byte function ( int arg0 ) { return list . get ( arg0 ) ; }
void function ( ) { }
void function ( ) { dao . deleteCustomerSchema ( "srini_string" ) ; }
boolean function ( ) { return percentage ; }
SessionImplementor function ( ) { checkTargetState ( ) ; return session ; }
IWidgetLocator function ( T arg0 ) { return new WidgetLocator ( arg0 , null ) ; }
List < Integer > function ( MVariable arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; for ( MStatement loc1 : statements ) { int loc2 = loc1 . getIndexOfInput ( arg0 ) ; if ( loc2 >= 0 ) { loc0 . add ( loc2 ) ; } } return loc0 ; }
String function ( ) { if ( this . hasTrimmed ) { this . trim ( ) ; } invokeBody ( ) ; return this . body . toString ( ) ; }
void function ( ) { setup ( initialContext ) ; }
void function ( mg , String arg0 ) { if ( ! is_local_variable_type_table ( mg , arg0 ) ) { throw new RuntimeException ( "srini_string" ) ; } mg . remove_attribute ( arg0 ) ; }
Document function ( ) { return fDocument ; }
void function ( final File arg0 , final File arg1 ) { compareFiles ( arg0 , arg1 , CVSFILTER ) ; }
Rectangle function ( ) { return new Rectangle ( startPoint , endPoint ) ; }
void function ( ) { Assert . assertNull ( this . . . writer ( ) ) ; }
UserInterfaceContext function ( ) { return new UserInterfaceContext ( ) ; }
Asn1Object function ( byte [ ] arg0 ) { return decode ( arg0 ) ; }
Duration function ( Timestamp arg0 , Duration arg1 ) { return subtract ( arg0 , arg1 , TimeUnit . NANOSECONDS ) ; }
void function ( int arg0 , String arg1 ) { defaults . put ( arg0 , arg1 ) ; }
Object function ( ) { return debug ; }
ContextEntity function ( ContextEntity arg0 ) { if ( arg0 == null ) { return globalContext ; } else { return arg0 ; } }
String function ( ) { return classInfo . name ( ) ; }
byte [ ] function ( ) { if ( consumedLength < 0 ) { consumedLength = 0 ; } return consumedData ; }
int function ( ) { int loc0 = 1 ; loc0 = 37 * loc0 + this . hashCode ( ) ; return loc0 ; }
Token [ ] function ( Connection arg0 ) { PreparedStatement loc0 = arg0 . prepareStatement ( "srini_string" ) ; return getTokens ( loc0 ) ; }
void function ( boolean arg0 ) { fStatementsRecovery = arg0 ; }
boolean function ( ColorPolynomial < C > arg0 ) { return getPolynomial ( ) . equals ( arg0 . getPolynomial ( ) ) ; }
Set function ( ) { return composites ; }
void function ( ) { _compact ( DEFAULT_LOAD_FACTOR ) ; }
void function ( Throwable arg0 ) { invalidScriptError = arg0 ; }
void function ( File arg0 , String arg1 ) { write ( arg0 , arg1 , true ) ; }
boolean function ( Object arg0 ) { return compareTo ( ( BigDecimal ) arg0 ) == 0 ; }
int function ( ) { return stack . size ( ) ; }
boolean function ( ) { return type == Type . VM ; }
ResourceEditPropertyBuilder function ( String arg0 ) { this . fcExternalLink = arg0 ; return this ; }
boolean function ( ) { if ( isKeyOptional == null ) { return false ; } else { return isKeyOptional ; } }
SourceViewer function ( ) { return fSourceViewer ; }
List < List < VectorXZ >> function ( Collection < Triangle > arg0 ) { return texCoordLists ( arg0 , null , null ) ; }
void function ( User arg0 ) { if ( isChuckNorris ( arg0 ) ) { denyAccess ( "srini_string" ) ; } else { denyAccess ( "srini_string" ) ; } }
List < T > function ( Enumeration < ? > arg0 ) { List < T > loc0 = new ArrayList < > ( ) ; while ( arg0 . hasMoreElements ( ) ) { loc0 . add ( arg0 . nextElement ( ) ) ; } return loc0 ; }
int function ( ) { return size ; }
int function ( ) { if ( kdcConfig != null && backendConfig != null ) { return kdcConfig . getKdcTcpPort ( ) ; } return 0 ; }
Object function ( String arg0 , Object arg1 , Class arg2 ) { return null ; }
boolean function ( final Script arg0 ) { if ( arg0 == null ) { throw new NullPointerException ( ) ; } return list . remove ( arg0 ) ; }
void function ( ) { this . state = State . DONE ; }
ShortListIterator function ( ShortListIterator arg0 ) { return UnmodifiableShortListIterator . unmodifiableShortListIterator ( arg0 ) ; }
void function ( ) { output = new PrintStream ( System . out , true ) ; error = new PrintStream ( System . err , true ) ; singleton = new FileLoggerModule ( OUTPUT_FILE ) ; }
boolean function ( double arg0 , double arg1 ) { return ( arg0 + arg1 ) * ( arg0 + arg1 ) <= max_ratio ; }
String function ( ) { return name ; }
ClassLoader function ( Class < ? > arg0 ) { ClassLoader loc0 = null ; SoftReference loc1 = ( SoftReference ) factories . get ( arg0 ) ; if ( loc1 != null ) loc0 = ( ClassLoader ) loc1 . get ( ) ; return ( loc0 != null ) ? loc0 : arg0 . getClassLoader ( ) ; }
Local < C > function ( MathContext arg0 ) { return local ( ) . multiply ( arg0 . den ) ; }
boolean function ( ) { return false ; }
T function ( List < T > arg0 ) { if ( arg0 . isEmpty ( ) ) { return null ; } return arg0 . get ( Random . nextInt ( arg0 . size ( ) ) ) ; }
void function ( Object arg0 ) { if ( _freeStack . get ( ) == null ) { System . err . println ( "srini_string" + arg0 ) ; } else { _freeStack . set ( null ) ; } }
Topology function ( String arg0 , int arg1 , HazelcastInstance arg2 ) { return new Topology ( arg0 , arg1 , arg2 ) ; }
Object function ( Object arg0 , String arg1 ) { if ( arg0 == null ) { return null ; } try { return ReflectionUtils . invokeMethod ( arg0 , arg1 ) ; } catch ( Exception loc0 ) { return null ; } }
void function ( File arg0 ) { if ( arg0 . isDirectory ( ) ) { deleteDir ( arg0 ) ; } else { deleteOrThrow ( arg0 . getAbsoluteFile ( ) ) ; } }
void function ( ) { running = false ; monitored = null ; }
HashCodeBuilder function ( float arg0 ) { return appendFloat ( arg0 , iConstant ) ; }
void function ( Integer arg0 ) { this . deptId = arg0 ; }
ContextQuery function ( String arg0 ) { return getConfig ( ) . query ( arg0 ) ; }
void function ( ) { p . run ( ) ; }
void function ( ) { cache . clear ( ) ; }
K function ( ValuePredicate < V > arg0 ) { if ( arg0 == null || kSmallest == null ) { return null ; } int loc0 = kSmallest . loc0 ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( kSmallest . containsKey ( loc1 ) ) { if ( kSmallest . get ( loc1 ) . containsValue ( arg0 ) ) { return kSmallest . get ( loc1 ) ; } } } return null ; }
void function ( GridBagConstraints arg0 ) { this . constraints = arg0 ; }
MetricsAggregate function ( ) { return peerVariation ; }
boolean function ( Object arg0 ) { if ( ! ( arg0 instanceof Residue ) ) return false ; Residue < C > loc0 = ( Residue < C > ) arg0 ; return this . isField == loc0 . isField && this . isField == loc0 . isField && this . characteristic == loc0 . characteristic ; }
boolean function ( char arg0 , char arg1 ) { return ( arg0 >= arg1 && arg0 <= arg1 + 2 ) ; }
void function ( String arg0 ) { this . outOfServiceByRelease = arg0 ; }
LoadPlan function ( ) { return new LoadPlan ( new RootEntityLoadPlan ( ) ) ; }
void function ( Document ... arg0 ) { for ( Document loc0 : arg0 ) { if ( loc0 != null ) { collection . insert ( loc0 ) ; } } }
BigDecimal function ( BigDecimal arg0 ) { this . val = arg0 . val ; return this ; }
int function ( ) { return iterationCount ; }
void function ( WidgetLocator arg0 ) { _parentInfo = arg0 ; }
void function ( ) { list . clear ( ) ; }
void function ( ) { checkLoopback ( ) ; delegate . writeLock ( ) . lock ( ) ; }
void function ( RenderEvent arg0 ) { delegate . render ( arg0 ) ; }
Object function ( final Class arg0 ) { return this . map . remove ( arg0 ) ; }
CompositeData function ( ) { try { return new CompositeDataSupport ( COMPOSITE_TYPE , ITEM_NAMES , ITEM_TYPES , new Object [ ] { roleName , fetchCount , updateCount , removeCount } ) ; } catch ( OpenDataException loc0 ) { throw new RuntimeException ( loc0 ) ; } }
boolean function ( int arg0 ) { return getEventPool ( ) . containsKey ( arg0 ) ; }
List function ( String arg0 ) { ArrayList loc0 = new ArrayList ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0 , _delimeter ) ; while ( loc1 . hasMoreTokens ( ) ) { loc0 . add ( loc1 . nextToken ( ) ) ; } return loc0 ; }
VectorXZ function ( ) { return direction ; }
List < GenPolynomial < C >> function ( ) { return P ; }
void function ( BufferFlag arg0 ) { flags . add ( arg0 ) ; }
boolean function ( List < T > arg0 , T arg1 ) { if ( arg0 == null || arg1 == null ) { return false ; } for ( T loc0 : arg0 ) { if ( loc0 == arg1 ) { return true ; } } return false ; }
UnivPowerSeries < C > function ( BigInteger arg0 ) { return univPowerSeries ( java . math . BigInteger . valueOf ( arg0 . longValue ( ) ) ) ; }
void function ( Change arg0 ) { fParent = arg0 ; }
long function ( int arg0 ) { long loc0 = arg0 - xPosition ; long loc1 = arg0 + yoffset ; return loc1 - loc0 ; }
PdfImageObject function ( ) { return imageObject ; }
void function ( Callback arg0 ) { removeCallback ( arg0 ) ; instances . remove ( arg0 ) ; }
void function ( ) { if ( mDidChange ) { mActionView . post ( new Runnable ( ) { public void run ( ) { mDidChange = false ; } } ) ; } }
void function ( boolean arg0 ) { m_isMajorTick = arg0 ; }
String function ( int arg0 , String arg1 ) { return "srini_string" + arg0 + "srini_string" + arg1 ; }
boolean function ( MMenu arg0 ) { return ( arg0 . getSubMenu ( ) != null ) ; }
ConditionMonitor function ( ) { return INSTANCE ; }
void function ( Object arg0 , Object arg1 , Object arg2 ) { try { PropertyUtils . setProperty ( arg0 , arg1 . toString ( ) , arg2 ) ; } catch ( Exception loc0 ) { throw new PropertyException ( arg0 . getClass ( ) . getName ( ) , "srini_string" + arg1 + "srini_string" + arg0 + "srini_string" + loc0 . getMessage ( ) ) ; } }
HashMap < BigDecimal , MetricsSubCoordinatorInfo > function ( ) { return listOfSubCoordinators ; }
boolean function ( Object arg0 , Object arg1 ) { if ( arg0 == null ) { return arg1 == null ; } return arg0 . equals ( arg1 ) ; }
Duration function ( int arg0 ) { return withSlidingInterval ( new Duration ( arg0 , DateTimeZone . UTC ) ) ; }
void function ( ) { SecurityConfiguration . getApplicationPolicy ( "srini_string" ) ; }
Map < String , String > function ( ) { return parasMap ; }
boolean function ( ResourceEntity arg0 , Release arg1 ) { return this . resourceReleaseComparator . isBestMatching ( arg0 , arg1 ) ; }
Owner function ( ) { return owner ; }
String function ( ) { if ( hostString != null ) { return hostString ; } else { return lcHostname ; } }
void function ( String arg0 ) { add_implied_vis ( arg0 ) ; }
TLinkable function ( ) { return _next ; }
int function ( ) { return available - getPending ( ) ; }
List < String > function ( ) { if ( tags == null ) { tags = new ArrayList < String > ( ) ; } return this . tags ; }
void function ( PdfReader arg0 , PdfDocument arg1 ) { fc . addDocument ( arg0 , arg1 ) ; }
int function ( ) { int loc0 ; loc0 = val . hashCode ( ) ; return loc0 ; }
void function ( File ... arg0 ) { parse ( Arrays . asList ( arg0 ) ) ; }
Message function ( ) { try { return blkQueue . take ( ) ; } catch ( InterruptedException loc0 ) { LOGGER . error ( "srini_string" , loc0 ) ; } return null ; }
List < ColumnMetaData > function ( Schema arg0 ) { return columns ; }
VectorXYZ function ( final double arg0 , final double arg1 , final double arg2 ) { final double loc0 = ( double ) this . x * arg0 + ( double ) this . y * arg1 + ( double ) this . z * arg2 ; return new VectorXYZ ( loc0 * loc0 + this . x * loc1 + this . y * loc2 , this . z * loc0 + this . x * loc1 + this . y * loc2 ) ; }
String function ( ) { if ( tokeniser == null ) return null ; return tokeniser . nextToken ( ) ; }
void function ( Long arg0 ) { this . endIp = arg0 ; }
List < BE > function ( ) { List < BE > loc0 = sentNotifications ; sentNotifications = null ; return loc0 ; }
List < WPTreeNode > function ( WPTreeNode arg0 ) { if ( arg0 == null ) arg0 = this ; return children ; }
Expr function ( int arg0 ) { if ( ind_var == null ) { return null ; } return ind_var . eq ( arg0 ) ; }
int function ( ) { return i_initialSize ; }
void function ( ITestIdentifier arg0 ) { _runningTest = arg0 ; if ( _runningTest != null ) { _runningTest . start ( ) ; } }
boolean function ( Component arg0 ) { return bugList . contains ( arg0 ) ; }
void function ( ) { started = true ; }
int function ( ) { return size ; }
boolean function ( ) { return locator . isVisible ( ui ) ; }
void function ( Parameters arg0 ) { if ( arg0 != null ) { negatedParameters . add ( arg0 ) ; } }
GenVector < C > function ( GenVector < C > arg0 ) { return new GenVector < C > ( this . val . mul ( arg0 . val ) , this . modul , this . signum ) ; }
List < String > function ( File arg0 ) { return getNamespaceUris ( new FileInputStream ( arg0 ) ) ; }
Type function ( String arg0 ) { return null ; }
BigInteger function ( ) { checkBounds ( ) ; return bigInt ; }
BigInteger function ( ) { return BigInteger . valueOf ( - 1 ) ; }
void function ( ) { Iterator < PptTopLevel > loc0 = ppt_all_iterator ( ) ; while ( loc0 . hasNext ( ) ) { loc0 . next ( ) . trim ( ) ; } }
BigDecimal function ( java . io . Reader arg0 ) { return parse ( arg0 , DEFAULT_PRECISION ) ; }
void function ( ) { if ( isAnimated ( ) ) { example . setAnimated ( false ) ; } else { example . setAnimated ( true ) ; } }
List function ( String arg0 ) { ArrayList loc0 = new ArrayList ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0 , _delimeter ) ; while ( loc1 . hasMoreTokens ( ) ) { loc0 . add ( loc1 . nextToken ( ) ) ; } return loc0 ; }
void function ( ) { if ( name != null ) { server . unregisterMBean ( name ) ; name = null ; } }
boolean function ( String arg0 ) { return arg0 . length ( ) == 1 && arg0 . charAt ( 0 ) == '-' ; }
void function ( int arg0 ) { int loc0 = binarySearch ( arg0 ) ; if ( loc0 >= 0 ) { mData [ loc0 ] = DELETED ; } }
byte [ ] function ( ) { return this . data ; }
boolean function ( List < Check > arg0 , List < Check > arg1 ) { int loc0 = 0 ; for ( Check loc1 : arg0 ) { if ( loc1 . getFailureIndex ( ) != loc0 ) { return false ; } loc0 ++ ; } return true ; }
boolean function ( ) { return hasBUG1Event ; }
boolean function ( Class < ? > arg0 ) { return isPrimitiveCached . containsKey ( arg0 ) ; }
HttpRequestHandler function ( final String arg0 ) { return this . matcher . match ( arg0 ) ; }
Iterable4 function ( ) { return flatten ( new Iterable4 ( ) ) ; }
void function ( Lockscope arg0 ) { this . lockscope = arg0 ; }
RatNum function ( String arg0 ) { checkRep ( arg0 ) ; this . numer = Integer . parseInt ( arg0 ) ; return this ; }
int function ( CharSequence arg0 , CharSequence arg1 ) { return compareCharacter ( arg0 , arg1 ) ; }
void function ( int arg0 ) { this . n = arg0 ; }
void function ( String arg0 ) { if ( this . links == null ) { this . links = new ArrayList < String > ( ) ; } this . links . add ( arg0 ) ; }
Getcontenttype function ( ) { return getcontenttype ; }
String function ( ) { return m_Language ; }
double function ( final double arg0 ) { return 1.0 / ( 1.0 + Math . exp ( - arg0 ) ) ; }
void function ( Test arg0 ) { fTests . addElement ( arg0 ) ; }
boolean function ( Object arg0 ) { for ( int loc0 = 0 ; loc0 < iPredicates . length ; loc0 ++ ) { if ( iPredicates [ loc0 ] . evaluate ( arg0 ) ) { return true ; } } return false ; }
Property < V > function ( Class < ? > arg0 , String arg1 ) { return ( new Property < V > ( arg0 , arg1 ) ) ; }
Throwable function ( ) { return cause ; }
String function ( Lang arg0 , String arg1 ) { if ( stopwords . containsKey ( arg0 ) ) { return extractTextFromPdf ( arg0 , arg1 ) ; } return arg1 ; }
PdfIndirectReference function ( PdfDictionary arg0 ) { if ( arg0 == null ) { throw new IllegalPdfSyntaxException ( "srini_string" ) ; } views . add ( arg0 ) ; return this ; }
int function ( int arg0 ) { return hashArray [ arg0 ] . size - 1 ; }
List < E > function ( List < ? extends E > arg0 , Function < ? super E , ? extends E > arg1 ) { List < E > loc0 = Lists . newArrayList ( ) ; for ( E loc1 : arg0 ) { loc0 . add ( arg1 . apply ( loc1 ) ) ; } return loc0 ; }
byte [ ] function ( ) { int loc0 = buf . length ; byte [ ] loc1 = new byte [ loc0 ] ; System . arraycopy ( buf , 0 , loc1 , 0 , pos ) ; return loc1 ; }
Person function ( ) { return new Person ( this ) ; }
byte [ ] function ( ) { return data ; }
ArrayList < String > function ( ) { return files ; }
String function ( ) { return cacheName ; }
GenMatrix < C > function ( ) { return random ( 1 , cols , blocksize ) ; }
void function ( int arg0 ) { this . level = arg0 ; }
GenVector < C > function ( ) { return random . nextFloat ( ) * ZERO ; }
String function ( ) { return var ; }
ResourceEditPropertyBuilder function ( Integer arg0 ) { this . cardinalityProperty = arg0 ; return this ; }
ClassLoader function ( ClassLoader arg0 ) { ClassLoader loc0 = arg0 ; if ( loc0 == null ) { loc0 = Thread . currentThread ( ) . getContextClassLoader ( ) ; } if ( loc0 == null ) { loc0 = ClassLoader . getSystemClassLoader ( ) ; } return ( loc0 != null && arg0 != null ) ? loc0 : arg0 ; }
Object function ( ) { return last . getKey ( ) ; }
void function ( int arg0 ) { }
Predicate function ( Predicate [ ] arg0 ) { return new AllPredicate ( arg0 ) ; }
String function ( long arg0 , String arg1 ) { return arg1 + "srini_string" + ( arg0 / 1000 ) ; }
boolean function ( ) { return iterator . hasNext ( ) ; }
void function ( ) { try { gui . setInput ( null ) ; gui . repaint ( ) ; } catch ( Exception loc0 ) { loc0 . printStackTrace ( ) ; } }
void function ( ) { nLiveMethods ++ ; }
void function ( float arg0 ) { y = arg0 ; }
void function ( String arg0 ) { this . clusterId = arg0 ; }
Message function ( ByteBuffer arg0 , MessageType arg1 ) { Message loc0 = new Message ( arg0 ) ; loc0 . type = arg1 ; loc0 . data = arg0 ; return loc0 ; }
SummaryStatistics function ( ) { return new SummaryStatistics ( ) ; }
Object function ( Object arg0 ) { return arg0 ; }
Timer function ( ) { if ( isTimerRunning ) return theTimer ; theTimer = new Timer ( ) ; theTimer . start ( ) ; return theTimer ; }
void function ( ) { Widget loc0 = reveal ( ) ; waitForAction ( loc0 , REVEAL_WAIT ) ; }
String function ( ) { return stack . toString ( ) ; }
String function ( String arg0 ) { if ( arg0 == null ) { return arg0 ; } return arg0 . replace ( "srini_string" , "srini_string" ) . replace ( "srini_string" , "srini_string" ) ; }
String [ ] function ( Element arg0 , int arg1 , int arg2 ) { String [ ] loc0 = new String [ arg2 ] ; for ( int loc1 = 0 ; loc1 < arg2 ; loc1 ++ ) { loc0 [ loc1 ] = getCellContents ( arg0 , arg1 + loc1 ) ; } return loc0 ; }
String function ( final String arg0 ) { return MAP . get ( arg0 ) ; }
Object function ( ) { if ( myList == null ) throw new IndexOutOfBoundsException ( ) ; return myList . item ( myList . size ( ) - 1 ) ; }
Map < Method , InterceptorFactory > function ( ) { return componentInterceptors ; }
CouchDB function ( ) { return getMockCouchdb ( Collections . singleton ( "srini_string" ) ) ; }
Parser function ( Class arg0 , Parser arg1 ) { if ( parsers . containsKey ( arg0 ) ) return ( Parser ) parsers . get ( arg0 ) ; else return null ; }
LinkedList < HashMap < String , MetricsAggregate >> function ( ) { return metricsHistory ; }
Label function ( ) { return defaultTarget ; }
boolean function ( String arg0 , String arg1 ) { return ( arg0 . compareTo ( arg1 ) >= 0 ) ; }
void function ( ) { }
DoubleListIterator function ( ListIterator arg0 ) { if ( arg0 == null ) { return null ; } return new DoubleListIterator ( arg0 . listIterator ( ) ) ; }
String [ ] function ( ) { return getVariables ( OTHER_MEMBERS_VARIABLE ) ; }
HandlerMethodArgumentResolver function ( ) { return new HandlerMethodArgumentResolver ( ) ; }
void function ( Region arg0 ) { Assert . isTrue ( arg0 != null , "srini_string" ) ; fTagPosition = arg0 ; }
void function ( String [ ] arg0 ) { printCapitalized ( "srini_string" ) ; }
String function ( ) { return name ; }
Object function ( IResource arg0 , Object arg1 ) { Assert . isTrue ( arg0 != null , "srini_string" ) ; IPath loc0 = arg0 . getFullPath ( ) ; return handleToResource ( loc0 , arg1 ) ; }
CSSResolver function ( ) { return new CSSResolver ( ) ; }
StatementBuilder function ( ) { builder . append ( "srini_string" ) ; return this ; }
BigInteger function ( ) { return random . nextBigInteger ( ) ; }
void function ( T arg0 ) { if ( isProcessing ) { throw new IllegalStateException ( "srini_string" ) ; } if ( ! started ) { throw new IllegalStateException ( "srini_string" ) ; } queuedEvents . add ( arg0 ) ; }
boolean function ( final CharSequence arg0 , final CharSequence arg1 , final int arg2 , final int arg3 , final boolean arg4 ) { return isSubset ( arg0 , arg1 , arg2 , arg3 , arg4 ) ; }
short function ( int arg0 ) { if ( arg0 < 0 || arg0 >= size ( ) ) return list . get ( 0 ) ; return list . get ( arg0 ) ; }
Period function ( ) { return new Period ( PeriodType . STANDARD , iPeriod ) ; }
boolean function ( ) { return fillInAllowed ; }
JdrReport function ( final JdrReportCollector arg0 ) { return JdrReportCollector . collectOutside ( arg0 , null ) ; }
Protocol function ( ) { Protocol loc0 = REMOTE . get ( ) ; if ( loc0 == null ) { loc0 = createRemoteProtocol ( ) ; REMOTE . set ( loc0 ) ; } return loc0 ; }
void function ( ) { setRef ( 0 ) ; }
AST function ( AST arg0 , AST arg1 ) { arg0 . setNextSibling ( arg1 . getNextSibling ( ) ) ; arg1 . setNextSibling ( arg0 ) ; return arg0 ; }
double [ ] function ( ) { return list . getDoubleArray ( ) ; }
long function ( Runnable arg0 ) { long loc0 = System . currentTimeMillis ( ) ; try { return arg0 . run ( ) - start ; } finally { start = loc0 ; } }
void function ( ) { started = true ; }
void function ( ) { if ( ! started ) { started = true ; deltaUs = System . nanoTime ( ) - positionUs ; } }
boolean function ( IRefactoring arg0 , IProgressMonitor arg1 ) { return fQueryFactory . validateResult ( arg0 , arg1 ) ; }
Image function ( ) { return image ; }
boolean function ( Quadrant arg0 , Direction arg1 ) { if ( this == arg0 ) return true ; if ( arg0 == null || ! ( arg0 . equals ( this ) ) ) return false ; Quadrant loc0 = arg0 . child ( this ) ; if ( loc0 == null || ! ( arg0 . equals ( loc0 ) ) ) return false ; return child ( loc0 ) != null ; }
boolean function ( ) { bugList . remove ( 0 ) ; return true ; }
void function ( String arg0 ) { frame . setTitle ( arg0 ) ; }
boolean function ( Widget arg0 , Matcher < ? super Widget > arg1 ) { return ( find0 ( arg0 , arg1 ) != null ) ; }
int function ( String arg0 , String arg1 ) { int loc0 = VID . indexOf ( arg0 ) ; int loc1 = VID . indexOf ( arg1 ) ; if ( loc0 == - 1 || loc1 == - 1 ) return - 1 ; return ( loc1 - loc0 ) ; }
Local < C > function ( ) { throw new RuntimeException ( ) ; }
int function ( ) { int loc0 = e1 . hashCode ( ) ; loc0 = 29 * loc0 + ( e2 != null ? e2 . hashCode ( ) : 0 ) ; return loc0 ; }
Text function ( ) { if ( fTextControl == null ) { fTextControl = getFilterControl ( ) ; } return fTextControl ; }
SchemaValidatorBuilder function ( ) { this . strategy = new SchemaValidationStrategy ( ) ; return this ; }
int function ( int arg0 ) { if ( arg0 < 0 || arg0 > 0x10FFFF ) throw new IllegalArgumentException ( "srini_string" ) ; return ( ( arg0 >> 16 ) & 0x00FFFFFF ) | ( ( arg0 >> 8 ) & 0x00FFFFFF ) | ( arg0 & 0x00FFFFFF ) ; }
void function ( int arg0 , int arg1 , int arg2 ) { int [ ] loc0 = createSegmentTree ( arg0 , arg1 ) ; SegmentTree loc1 = new SegmentTree ( loc0 ) ; loc1 . subTree ( arg2 ) ; }
String function ( ) { String loc0 = "srini_string" ; TreeItem loc1 = _treeItemTester . getRootNode ( ) ; while ( loc1 != null ) { loc0 += loc1 . getName ( ) ; loc1 = loc1 . getParent ( ) ; } return loc0 ; }
void function ( File arg0 ) { outputDir = arg0 ; }
int function ( int arg0 ) { if ( arg0 < 0 ) throw new IllegalArgumentException ( "srini_string" + arg0 ) ; int loc0 = 0 ; while ( ( arg0 & 0x1 ) == 0 ) loc0 ++ ; return loc0 ; }
boolean function ( String arg0 ) { return TYPE2FUNC . containsKey ( arg0 ) ; }
boolean function ( ) { return isOffline ; }
void function ( Throwable arg0 ) { printLog ( IStatus . ERROR , "srini_string" , arg0 ) ; }
Node function ( ) { return parent ; }
int function ( ) { return number ; }
int function ( ) { return num_values ; }
void function ( String arg0 , String arg1 ) { final String loc0 = "srini_string" ; Assert . assertEquals ( "srini_string" , arg1 , loc0 ) ; }
int function ( ) { return n ; }
void function ( int arg0 , int arg1 , int arg2 ) { int loc0 = arg1 ; while ( loc0 != arg0 ) { swap ( arg0 , loc0 , arg2 ) ; loc0 = arg1 ; } }
String function ( String arg0 ) { if ( arg0 . startsWith ( ZNODE_PATH_SEPARATOR ) ) { arg0 = arg0 . substring ( ZNODE_PATH_SEPARATOR . length ( ) ) ; } return joinZNode ( arg0 ) ; }
Runnable function ( Runnable arg0 ) { return new StackTraceElement [ ] { getStackContext ( arg0 ) } ; }
void function ( boolean arg0 ) { if ( ! arg0 ) { throw new IllegalArgumentException ( "srini_string" ) ; } }
void function ( int arg0 ) { executables . remove ( arg0 ) ; }
void function ( UserAccount arg0 ) { if ( cachingPolicy == CachingPolicy . BEHIND ) { System . out . println ( "srini_string" + arg0 . getUsername ( ) + "srini_string" ) ; } else { System . out . println ( "srini_string" + arg0 . getUsername ( ) + "srini_string" ) ; } }
Unmarshaller function ( ) { try { return JAXB_CONTEXT . createUnmarshaller ( ) ; } catch ( JAXBException loc0 ) { throw new IllegalStateException ( "srini_string" , loc0 ) ; } }
void function ( Element arg0 ) { importLockupDataFile ( new File ( arg0 . getAttribute ( "srini_string" ) ) ) ; }
String function ( int arg0 ) { if ( keyCodeDescMap == null ) { return "srini_string" ; } return keyCodeDescMap . get ( arg0 ) ; }
void function ( String arg0 ) { throw new IllegalStateException ( arg0 ) ; }
boolean function ( Class arg0 , Class < ? > arg1 ) { return arg0 != null && arg1 . isInterface ( ) ; }
void function ( String arg0 ) { this . serialNumber = arg0 ; }
HashMap < String , Integer > function ( String arg0 ) { HashMap < String , Integer > loc0 = new HashMap < String , Integer > ( ) ; String [ ] loc1 = arg0 . split ( "srini_string" ) ; for ( String loc2 : loc1 ) { String [ ] loc3 = loc2 . split ( "srini_string" , 2 ) ; mValue = loc3 [ 0 ] ; loc0 . put ( loc3 [ 1 ] , loc3 . length ) ; } return loc0 ; }
boolean function ( String arg0 ) { return staticMap . containsKey ( arg0 ) ; }
void function ( int arg0 ) { m_negativeYErrorPixel = arg0 ; }
String function ( ) { return "srini_string" ; }
boolean function ( ColoredSystem < C > arg0 ) { return list . equals ( arg0 . list ) ; }
Element function ( ) { StackKeeper loc0 = queue . removeFirst ( ) ; if ( loc0 != null ) { loc0 . pop ( ) ; } return loc0 . getElement ( ) ; }
String function ( long arg0 , String arg1 ) { return arg1 + "srini_string" + ( arg0 / 1000 ) ; }
Object function ( ) { if ( iterator . hasNext ( ) ) { return ( Object ) iterator . next ( ) ; } else { return null ; } }
void function ( ) { if ( DEBUG ) System . err . println ( "srini_string" ) ; }
void function ( PdfWriter arg0 , Document arg1 , Rectangle arg2 , boolean arg3 ) { for ( PdfPageEvent loc0 : events ) { loc0 . onChunk ( arg0 , arg1 , arg2 , arg3 ) ; } }
String function ( String arg0 ) { if ( arg0 . contains ( "srini_string" ) ) { return arg0 . replaceAll ( "srini_string" , "srini_string" ) ; } else { return arg0 ; } }
void function ( CSIColor arg0 ) { this . borderColor = arg0 ; }
NonTerminal function ( Schema arg0 ) { return new NonTerminal ( arg0 . getCardinality ( ) , arg0 . getRuleNames ( ) ) ; }
void function ( Object arg0 ) { this . array = arg0 ; }
String function ( ) { return fcLink ; }
String function ( ) { return name ; }
void function ( Graphics arg0 , float arg1 , float arg2 , int arg3 , int arg4 ) { CachedTeXFormula loc0 = CachedTeXFormula . getInstance ( arg0 , arg1 , arg2 , arg3 ) ; if ( cachedTf != null ) { loc0 . paint ( arg0 , arg4 ) ; } }
Label function ( ) { return end ; }
boolean function ( ) { return ( size ( ) == 0 ) ; }
void function ( final String arg0 ) { if ( ! authzEnabled ) { return ; } final HivePrivilegeObject loc0 = new HivePrivilegeObject ( HivePrivilegeObjectType . DATABASE , arg0 , null ) ; authorize ( HiveOperationType . READ , ImmutableList . of ( loc0 ) , Collections . < HivePrivilegeObject > emptyList ( ) ) ; }
List < UserAccount > function ( ) { return cache . values ( ) ; }
void function ( Test arg0 , Throwable arg1 ) { }
void function ( ) { this . lastRepublish = System . currentTimeMillis ( ) ; }
String [ ] function ( ) { return new String [ ] { "srini_string" } ; }
String function ( int arg0 ) { return null ; }
void function ( OperationsInterface arg0 ) { while ( operands . isEmpty ( ) ) { addOperand ( arg0 . calculate ( ) ) ; } addOperator ( arg0 ) ; }
RequestType function ( ) { return requestType ; }
RefactoringDescriptorProxy function ( ) { return fProxy ; }
Sensor function ( ) { return proximitySensor ; }
int function ( ) { return staleCounter ++ ; }
void function ( int arg0 , int arg1 , int arg2 ) { int loc0 = arg1 ; while ( loc0 != arg0 ) { swap ( arg0 , loc0 , arg2 ) ; loc0 = arg1 ; } }
UnivPowerSeries < C > function ( ) { return ZERO ; }
RuleSet function ( ) { if ( this . ruleSet == null ) { this . ruleSet = new RuleSet ( ) ; } return ( this . ruleSet ) ; }
void function ( Object arg0 ) { map . put ( ( String ) key , arg0 ) ; }
Bag < T > function ( Class < T > arg0 ) { return create ( arg0 , null ) ; }
void function ( ) { try { iterator . remove ( ) ; } catch ( Exception loc0 ) { throw new RuntimeException ( loc0 ) ; } }
boolean function ( Object ... arg0 ) { return arg0 != null && arg0 . length == 0 ; }
String function ( ) { return identifier ; }
Collection function ( ) { return succs ; }
ModelNode function ( PathAddress arg0 , ModelNode arg1 ) { return createAddOperation ( arg0 , arg1 , Collections . emptyMap ( ) ) ; }
void function ( Object arg0 , Throwable arg1 ) { if ( is12 ) { getLogger ( ) . log ( FQCN , ( Priority ) Level . ERROR , arg0 , arg1 ) ; } else { getLogger ( ) . log ( FQCN , Level . ERROR , arg0 , arg1 ) ; } }
String function ( String arg0 ) { if ( arg0 == null ) { return null ; } return new String ( Hex . encodeHex ( arg0 . toCharArray ( ) ) ) ; }
Line function ( ) { if ( mixer == null ) { mixer = new Line ( ) ; } return mixer ; }
boolean function ( String arg0 ) { boolean loc0 = false ; List loc1 = getScriptList ( arg0 ) ; if ( loc1 != null && loc1 . size ( ) > 0 ) { loc0 = loc1 . size ( ) > 0 ; } return loc0 ; }
Tag function ( ) { return parent ; }
boolean function ( String arg0 ) { return criteriaType . isField ( arg0 ) ; }
void function ( Template arg0 ) { if ( exists ( arg0 ) ) { fTemplates . remove ( arg0 ) ; } }
Predicate function ( ) { return iPredicate ; }
IWidgetMatcher function ( ) { return _parentMatcher ; }
Link function ( ) { return new Link ( ) ; }
Session function ( ) { return getSessionFactory ( ) . openSession ( ) ; }
ReflectClass function ( String arg0 ) { return _classLoader . forName ( arg0 ) ; }
String function ( ) { return KRB5_CONF_FILE . getAbsolutePath ( ) ; }
void function ( ) { for ( ILabelProviderListener loc0 : fListeners ) { loc0 . labelProviderChanged ( this ) ; } }
void function ( String arg0 ) { this . catalogName = arg0 ; }
void function ( ) { SecurityConfiguration . getKeyStoreURL ( ) ; }
void function ( SourceDataLine arg0 ) { if ( lines . size ( ) <= 8 ) { lines . addElement ( arg0 ) ; } }
void function ( ) { connector . test ( EAR_WITHOUT_APPLICATION_XML ) ; }
long function ( int arg0 ) { if ( arg0 > size ( ) ) { return list . get ( 0 ) ; } return list . get ( arg0 + 1 ) ; }
WidgetCondition function ( Widget arg0 , String arg1 ) { return new WidgetCondition ( arg0 , arg1 ) ; }
void function ( Reader arg0 ) { synchronized ( this ) { state = State . START ; parseWithReader ( arg0 ) ; } }
void function ( ) { pos . set ( lookAt ) ; lookAt . set ( pos ) ; }
String function ( ) { if ( isEmpty ( ) ) { return "srini_string" ; } return receive ( ) ; }
void function ( AnimatedNode arg0 ) { }
void function ( ) { waitFor ( 250 , TimeUnit . MILLISECONDS ) ; }
StringBuilder function ( ) { return baos ; }
void function ( String arg0 , Message arg1 ) { app = null ; }
boolean function ( ) { return isLocked ; }
LIST < C > function ( C arg0 , C arg1 , C arg2 , C arg3 , C arg4 ) { list . add ( arg0 ) ; list . add ( arg1 ) ; list . add ( arg2 ) ; list . add ( arg3 ) ; list . add ( arg4 ) ; return list ; }
int function ( int arg0 , int arg1 ) { if ( arg0 % arg1 == 0 ) return arg1 ; return gcd ( arg1 , arg0 % arg1 ) ; }
void function ( Collection arg0 ) { for ( Iterator loc0 = arg0 . iterator ( ) ; loc0 . hasNext ( ) ; ) add ( loc0 . next ( ) ) ; }
String function ( String arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( int loc1 = 0 ; loc1 < arg0 . length ( ) ; loc1 ++ ) { char loc2 = arg0 . charAt ( loc1 ) ; if ( Character . isUpperCase ( loc2 ) ) { loc0 . append ( "srini_string" ) ; } else { loc0 . append ( Character . toLowerCase ( loc2 ) ) ; } } return loc0 . toString ( ) ; }
boolean function ( Object arg0 ) { if ( arg0 instanceof Caliper ) { Caliper loc0 = ( Caliper ) arg0 ; return loc0 . isField ( ) && loc0 . isField ( ) ; } else { return false ; } }
boolean function ( Quadrant arg0 , Direction arg1 ) { if ( this == arg0 ) return true ; if ( arg0 == null || ! ( arg0 . equals ( this ) ) ) return false ; Quadrant loc0 = arg0 . child ( this ) ; if ( loc0 == null || ! ( arg0 . equals ( loc0 ) ) ) return false ; return child ( loc0 ) != null ; }
void function ( ) { }
void function ( String arg0 ) { Log . d ( ReactConstants . TAG , "srini_string" + arg0 ) ; setSyncResultHardError ( arg0 ) ; }
List < String > function ( String arg0 , Extractor arg1 , String arg2 ) { return extract ( arg0 , arg1 , arg2 , null ) ; }
List < Potion > function ( ) { if ( topShelf == null ) { fillShelves ( ) ; } return topShelf ; }
void function ( ) { resources = getResources ( ) ; }
boolean function ( ModInteger arg0 ) { return signum ( ) == arg0 . signum ( ) ; }
void function ( ClassFile arg0 , int arg1 , Attribute [ ] arg2 ) { this . classInfo = arg0 ; name = arg1 ; type = arg2 . length ; attrs = arg2 ; }
ConditionMapping function ( ICondition arg0 ) { if ( _isProcessing ) { return null ; } for ( int loc0 = 0 ; loc0 < _mappings . size ( ) ; loc0 ++ ) { ConditionMapping loc1 = _mappings . get ( loc0 ) ; if ( loc1 . test ( arg0 ) ) { return loc1 ; } } return null ; }
int function ( Boolean arg0 , Boolean arg1 ) { return Boolean . compare ( arg0 , arg1 ) ; }
Change function ( ) { return fUndoChange ; }
int function ( Date arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } return ( daysInYear ( arg0 ) - daysInYear ( arg0 ) ) ; }
void function ( Path arg0 , Schema arg1 ) { Preconditions . checkArgument ( ! "srini_string" . equals ( arg1 . toString ( ) ) , "srini_string" ) ; this . schemaKey = arg0 ; this . inputSchemaMap . put ( arg0 , arg1 ) ; }
IntList function ( IntList arg0 ) { return UnmodifiableList . unmodifiableIntList ( arg0 ) ; }
int function ( ) { return queue . size ( ) ; }
boolean function ( String arg0 ) { return arg0 . startsWith ( text ) ; }
Executor function ( Executor arg0 ) { if ( arg0 == null ) { arg0 = new ProcessExecutor ( 1 ) ; } return new Executor ( ) { @ Override public void execute ( Runnable arg1 ) { arg0 . execute ( arg1 ) ; } } ; }
void function ( Airport arg0 ) { this . larnacaAirport = arg0 ; }
void function ( String arg0 ) { this . localeKey = arg0 ; }
MemberRef function ( ) { return editor . getMemberRef ( this ) ; }
void function ( Device arg0 ) { arg0 . startInputTask ( ) ; }
int function ( Object arg0 , Object arg1 ) { return list . indexOf ( arg0 ) ; }
void function ( TagState arg0 ) { tagState = arg0 ; }
Chunk function ( int arg0 , int arg1 ) { return new Chunk ( arg0 , arg1 , false ) ; }
String function ( ) { return name ; }
String function ( ) { return result . toString ( ) ; }
boolean function ( ) { if ( getLimit ( ) < 0 ) { return false ; } allocationLimit . addAndGet ( 1L ) ; return ok ; }
void function ( String arg0 , String arg1 ) { if ( arg1 != null ) attr . put ( arg0 , arg1 ) ; }
HttpRoute function ( HttpParams arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } HttpRoute loc0 = ( HttpRoute ) arg0 . getParameter ( FORCED_ROUTE ) ; if ( ( loc0 == null ) ) { loc0 = NO_ROUTE ; } return loc0 ; }
boolean function ( RatTermVec arg0 ) { assert ( arg0 != null ) ; if ( arg0 . size ( ) != size ( ) ) { return false ; } for ( int loc0 = 0 ; loc0 < terms . length ; loc0 ++ ) { if ( ! terms [ loc0 ] . equals ( arg0 . terms [ loc0 ] ) ) { return false ; } } return true ; }
void function ( File arg0 ) { this . outputFile = arg0 ; }
QueryCondition function ( String arg0 , String [ ] arg1 , QueryCondition ... arg2 ) { QueryCondition loc0 = new QueryCondition ( ) ; loc0 . arg0 = arg0 ; loc0 . arg1 = arg1 ; loc0 . arg2 = arg2 ; loc0 . ds = ds ; return loc0 ; }
void function ( ) { isProcessing = true ; while ( ! isProcessing ) { try { wait ( ) ; } catch ( InterruptedException loc0 ) { } } }
void function ( Boolean arg0 ) { this . isTest = arg0 ; }
InputStream function ( ) { return stream ; }
R function ( T arg0 , P arg1 ) { return arg0 ; }
boolean function ( Object arg0 ) { int loc0 = _size ; if ( loc0 == 0 ) { return false ; } for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) if ( _last . equals ( arg0 ) ) return true ; return false ; }
int function ( ) { return _size ; }
Iterator < String > function ( int arg0 ) { return new ColumnIterator ( this , arg0 ) ; }
void function ( boolean arg0 ) { buildConfig . debug = arg0 ; }
void function ( String arg0 , Object arg1 ) { printLog ( IStatus . INFO , arg0 , arg1 ) ; }
float function ( ) { return list . removeAt ( size - 1 ) ; }
RGBA function ( String arg0 ) { try { return parseHTML ( arg0 ) ; } catch ( Exception loc0 ) { return new RGB ( 0 , 0 , 0 ) ; } }
ImageDescriptor function ( ) { return fImage ; }
void function ( String arg0 , long arg1 ) { blobBuilders . getContainer ( arg0 ) . deleteAll ( arg1 ) ; }
void function ( IPropertyChangeListener arg0 ) { }
boolean function ( String arg0 ) { Method loc1 = extractMethod ( arg0 ) ; return loc1 . invoke ( null , getArguments ( ) ) ; }
String function ( ) { return this . description ; }
int function ( ) { return highValue ( ) ; }
Properties function ( ) { Properties loc0 = new Properties ( ) ; verifyProperties ( loc0 ) ; return loc0 ; }
String function ( ) { return lang ; }
String function ( String arg0 ) { return topologyBases ( ) . get ( arg0 ) ; }
Limit function ( String arg0 , String arg1 ) { Limit loc0 = new Limit ( arg0 , arg1 ) ; limits . add ( loc0 ) ; return loc0 ; }
byte [ ] function ( byte [ ] arg0 , PrivateKey arg1 , String arg2 ) { return getSignedKdcDhKeyInfo ( arg0 , arg1 , arg2 , false ) ; }
int function ( ) { byte [ ] loc0 = new byte [ 4 ] ; loc0 [ 0 ] = ( byte ) ( device . getHandle ( ) & 0x0F ) ; return readDeviceDescriptor ( loc0 ) ; }
void function ( String arg0 ) { System . out . println ( "srini_string" + getName ( ) + "srini_string" + getAsText ( ) + "srini_string" + getMinimumValue ( ) + "srini_string" + getMaximumValue ( ) + "srini_string" + getMaximumTextLength ( ) + "srini_string" + getFieldType ( ) . getName ( ) + "srini_string" + getMaximumTextLength ( ) + "srini_string" + getFieldType ( ) . getName ( ) + "srini_string" + getMaximumValue ( ) + "srini_string" + getMaximumValueOverall ( ) + "
void function ( PRIndirectReference arg0 ) { this . indRef = arg0 ; }
Player function ( ) { return player ; }
void function ( int arg0 , int arg1 , CSIColor arg2 ) { foreColor = arg2 ; inWidth = arg0 ; inHeight = arg1 ; }
void function ( RemittanceInformation5 arg0 ) { }
void function ( ) { violations . clear ( ) ; numViolationsEmpty = 0 ; }
T function ( String arg0 , String arg1 ) { return open ( arg0 , arg1 , false ) ; }
boolean function ( ) { return false ; }
Criteria function ( Object arg0 , Object arg1 ) { checkComplete ( ) ; RelationalOperator loc0 = ( RelationalOperator ) criteriaType ; return loc0 . eq ( arg0 , arg1 ) ; }
String function ( String arg0 ) { BufferedReader loc0 = new BufferedReader ( new FileReader ( arg0 ) ) ; String loc1 = null ; try { loc1 = loc0 . readLine ( ) ; } catch ( IOException loc2 ) { } return loc1 ; }
String function ( ) { return code ; }
void function ( Object arg0 , Throwable arg1 ) { if ( isLevelEnabled ( LOG_LEVEL_WARN ) ) { log ( arg0 , arg1 ) ; } }
WebArchive function ( @ NotNull String arg0 , @ NotNull String arg1 ) { return createWar ( arg0 , arg1 , sd -> sd . getSecurityDomain ( ) ) ; }
void function ( String [ ] arg0 ) { prepare ( ) ; System . out . println ( "srini_string" ) ; System . in . read ( ) ; }
void function ( String [ ] arg0 ) { JOSMFixture . createUnitTestFixture ( ) . execute ( arg0 ) ; }
int function ( ) { return ( int ) Math . round ( y2 ) ; }
boolean function ( ) { return lookupEnabled ; }
void function ( ) { for ( ResourceEntity loc0 : resources ) { if ( loc0 . getName ( ) == null ) { setName ( loc0 . getName ( ) ) ; } } }
void function ( Point2D arg0 ) { this . startPoint = arg0 ; }
void function ( String arg0 ) { packedString = arg0 ; cat_id = Utils . getInt ( packedString . substring ( SEP_CHARACTER . length ( ) ) ) ; }
void function ( String arg0 ) { this . skipHours . add ( arg0 ) ; }
SqlState function ( SQLException arg0 ) { return determineSqlStateClassCode ( extractSqlStateClassCode ( arg0 ) ) ; }
boolean function ( int arg0 ) { return isStandardTypeCode ( arg0 ) ; }
ILanguageNames function ( ) { return languageNames ; }
boolean function ( ) { return connected ; }
void function ( int arg0 ) { productID = arg0 ; }
int function ( ) { return remCount - 1 ; }
boolean function ( K1 arg0 , K2 arg1 ) { Set < V > loc0 = dkMap . get ( arg0 ) ; if ( loc0 == null ) { return false ; } else { return loc0 . contains ( arg1 ) ; } }
Closure function ( ) { return iClosure ; }
boolean function ( int arg0 ) { return this_bits_valid [ arg0 ] ; }
int function ( ) { return ( data [ position ++ ] & 0xFF ) ; }
List < T > function ( List < T > arg0 ) { if ( arg0 == null ) { return Collections . EMPTY_LIST ; } else { return getContextsByLowestContext ( arg0 ) ; } }
boolean function ( final String arg0 , final String arg1 ) { notNull ( arg0 , arg1 ) ; if ( arg0 . length ( ) == 0 ) { throw new ValidationException ( arg1 ) ; } return true ; }
boolean function ( Object arg0 ) { if ( arg0 == null ) return false ; if ( ! ( arg0 instanceof IdentifierValue ) ) return false ; return ( ( IdentifierValue ) arg0 ) . value . equals ( value ) ; }
ListIterator function ( ListIterator arg0 ) { if ( arg0 == null ) { return null ; } return new ListIteratorWrapper ( arg0 ) ; }
Image function ( int [ ] arg0 ) { return toIntImage ( arg0 , BufferedImage . TYPE_INT_ARGB ) ; }
void function ( ) { if ( releaseMap . isEmpty ( ) ) { releaseMap . put ( upcomingReleaseId , new ReleaseEntity ( ) ) ; } }
Class < ? > function ( ) { return elementType ; }
void function ( ) { assertTrue ( "srini_string" , incorrectRoleResult . contains ( DESTROY_METHOD_NOT_PASS ) ) ; }
void function ( ) { annotations . process ( null , null , null ) ; }
void function ( ) { List < Element > loc0 = new ArrayList < > ( ) ; loc0 . add ( d ) ; loc0 . add ( currentContent ) ; this . d . setContent ( loc0 ) ; verifyIfPdfDiv ( ) ; }
String function ( ) { return fElement . getAttribute ( CLASS_ATTRIBUTE ) ; }
Timer function ( ) { throw new WaitTimeoutException ( "srini_string" ) ; }
void function ( boolean arg0 ) { expandEntityRef = arg0 ; }
File function ( ) { return fileInput ; }
void function ( int arg0 , int arg1 ) { DummyEdge loc0 = new DummyEdge ( arg0 , arg1 ) ; edgeList . add ( loc0 ) ; }
boolean function ( List < C > arg0 , List < C > arg1 ) { return sbb . isTwosided ( arg0 , arg1 ) ; }
String function ( Object arg0 ) { if ( arg0 == null ) return "srini_string" ; return arg0 . toString ( ) ; }
FieldSelection function ( List < String > arg0 , ValidityMode arg1 ) { return new FieldSelection ( arg0 , arg1 , true ) ; }
List < ReleaseEntity > function ( ) { log . debug ( "srini_string" ) ; List < ReleaseEntity > loc0 = persistenceService . findAllReleases ( ) ; return loc0 ; }
void function ( OverlayAdapter arg0 ) { this . adapters . add ( arg0 ) ; }
boolean function ( String arg0 ) { return _binsByUri . containsKey ( arg0 ) ; }
List < Message > function ( ) { if ( message == null ) { message = new ArrayList < Message > ( ) ; } return this . message ; }
Validator function ( ) { return new Validator ( ) ; }
void function ( StringBuilder arg0 ) { this . selectClause . append ( arg0 ) ; }
void function ( Motorbike arg0 ) { entityManager . persist ( arg0 ) ; }
void function ( int arg0 ) { ensureCapacity ( length + arg0 ) ; System . arraycopy ( buffer , arg0 , buffer , length , arg0 ) ; length += arg0 ; }
Predicate [ ] function ( Predicate [ ] arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } return arg0 ; }
Property function ( ) { return property ; }
String function ( ) { return this . localeKey ; }
Quotient < C > function ( long arg0 ) { return of ( ( C ) arg0 ) ; }
Widget function ( Widget arg0 , Container arg1 ) { Widget loc0 = find0 ( arg0 , arg1 ) ; if ( loc0 == null ) { if ( getHierarchy ( ) != null ) { loc0 = getHierarchy ( ) . find ( arg0 ) ; } } return loc0 ; }
RandomAccessSource function ( byte [ ] arg0 ) { return new ByteArrayRandomAccessSource ( arg0 , usePlainRandomAccess ) ; }
void function ( ) { assertEquals ( "srini_string" , ctx . pageSize ( ) , 4 ) ; }
String function ( ) { return pluginMeta . getVersion ( ) ; }
boolean function ( ) { return needBeforeSpace ; }
void function ( int arg0 , long arg1 ) { }
Set function ( ) { return _register . entrySet ( ) ; }
void function ( ) { LOGGER . info ( "srini_string" ) ; final JpaTransactionManager loc0 = new JpaTransactionManager ( entityManagerFactory ( ) ) ; loc0 . init ( ) ; }
RingFactory < C > function ( ) { return ring ; }
void function ( float arg0 ) { this . width = arg0 ; }
LIST < C > function ( List < C > arg0 ) { return ( List < C > ) arg0 . clone ( ) ; }
void function ( Context arg0 ) { migrationDone = false ; for ( Flags loc0 : disableMigrations ) { migrateIfNecessary ( arg0 , loc0 ) ; } }
Collection function ( ) { return EMPTY ; }
void function ( Throwable arg0 ) { log ( arg0 . getMessage ( ) ) ; arg0 . printStackTrace ( ) ; }
String [ ] function ( ) { return ( String [ ] ) this . items . toArray ( new String [ this . items . size ( ) ] ) ; }
ProgressRequestBody function ( String arg0 , String arg1 ) { return new ProgressRequestBody ( arg0 , arg1 , MediaType . APPLICATION_JSON , MediaType . APPLICATION_JSON ) ; }
int function ( T arg0 ) { return nodePosition . get ( arg0 ) ; }
HttpClient function ( ) { return backend ; }
Allprop function ( ) { return allprop ; }
void function ( byte [ ] arg0 , OutputStream arg1 ) { Asn1OutputStream loc0 = new Asn1OutputStream ( arg1 ) ; loc0 . write ( arg0 ) ; loc0 . flush ( ) ; }
void function ( ) { fExecContext = null ; fForkChangeExecution = true ; }
Items function ( ) { return items ; }
Symbol function ( ) { return stack [ -- pos ] ; }
SortedBag function ( Bag arg0 , Class < ? extends T > arg1 ) { return new TypeAdapterSortedBag < > ( arg0 , arg1 ) ; }
void function ( VectorXYZ arg0 ) { this . pos . set ( arg0 ) ; this . lookAt . set ( arg0 ) ; }
String function ( String arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } byte [ ] loc0 = arg0 . getBytes ( ) ; return sign ( loc0 ) ; }
IStatus function ( ) { return null ; }
boolean function ( ) { return ring . isField ( ) ; }
Type function ( String arg0 ) { return basicTypeRegistry . locate ( arg0 ) ; }
String function ( Bundle arg0 ) { Validate . notNull ( arg0 , "srini_string" ) ; return arg0 . getString ( TOKEN_KEY ) ; }
int function ( ) { return limit - position ; }
void function ( ) { reactor . start ( ) ; }
void function ( final StyleListener arg0 ) { if ( arg0 == null ) { throw new NullPointerException ( ) ; } listeners . remove ( 0 ) ; }
String function ( ) { return technicalKey ; }
IJavaElement function ( JavaEditor arg0 ) { return arg0 . getEnclosingElement ( ) ; }
void function ( ExecutionData arg0 ) { names . add ( arg0 . getClass ( ) . getName ( ) ) ; entries . put ( arg0 . getClass ( ) . getName ( ) , arg0 ) ; }
void function ( Set < String > arg0 ) { ArrayList < String > loc0 = new ArrayList < String > ( arg0 ) ; for ( String loc1 : loc0 ) { if ( ! loc1 . isEmpty ( ) ) { loc0 . remove ( loc1 ) ; } } }
void function ( int arg0 ) { this . torusDimensionSize = arg0 ; }
int function ( GenVector < C > arg0 ) { GenVector < C > loc0 = arg0 . copy ( ) ; return signum ( loc0 ) ; }
Closure [ ] function ( ) { return iClosures ; }
int function ( ) { return _index ; }
void function ( Iterator arg0 ) { this . iterator = arg0 ; }
float function ( ) { return width ; }
void function ( final OPModeManager arg0 ) { arg0 . register ( ) ; }
Comparator function ( boolean arg0 ) { return new OrderedBooleanComparator ( arg0 ) ; }
void function ( ) { stop = true ; }
int function ( String arg0 ) { throw new UnsupportedOperationException ( "srini_string" ) ; }
void function ( ) { final String loc0 = Nazgul . getInstance ( ) . getName ( ) ; assertEquals ( "srini_string" , loc0 ) ; }
boolean function ( ) { return _runningTest != null ; }
ModuleList < C > function ( ) { return Modules . weightWithValues ( sbb . twosidedGB ( ) ) ; }
void function ( Map < String , String > arg0 ) { insertNames ( arg0 ) ; insertAlias ( arg0 ) ; insertTtfArray ( arg0 ) ; }
String function ( String arg0 ) { if ( arg0 == null ) { return null ; } if ( arg0 . startsWith ( "srini_string" ) ) { return "srini_string" ; } if ( arg0 . startsWith ( "srini_string" ) ) { return "srini_string" ; } if ( arg0 . startsWith ( "srini_string" ) ) { return "srini_string" ; } return "srini_string" ; }
void function ( String arg0 , String arg1 ) { fileLoggerModule . init ( arg0 ) ; consoleLoggerModule . init ( arg1 ) ; }
DocumentBuilder function ( String arg0 ) { Section loc0 = new Section ( arg0 ) ; sections . add ( loc0 ) ; return this ; }
boolean function ( int arg0 , int arg1 ) { return ( ( arg0 * arg0 ) + ( arg1 * arg1 ) ) == 0 ; }
void function ( int arg0 , int arg1 , Chunk arg2 , Font arg3 , Color arg4 ) { setText ( arg0 , arg1 , arg2 . getString ( ) , arg3 , arg4 ) ; }
void function ( Object arg0 ) { log ( LogTarget . ERROR , arg0 ) ; }
KeyValuePairList function ( ) { return new KeyValuePairList ( ) ; }
void function ( ) { fListeneredDisabled = true ; notifyListeners ( ) ; }
int function ( Object arg0 , Object arg1 ) { if ( arg0 == null ) return - 1 ; if ( arg1 == null ) return 1 ; if ( arg0 . hashCode ( ) != arg1 . hashCode ( ) ) return arg0 . hashCode ( ) - arg1 . hashCode ( ) ; return 0 ; }
long function ( DisplayPortMetrics arg0 ) { long loc0 = arg0 . getTimestamp ( ) ; for ( int loc1 = mHead ; loc1 < mTail ; loc1 ++ ) { mTimestamps [ loc1 ] = loc0 ; } mHead = ( mTail + 1 ) % BUFFER_SIZE ; return loc0 ; }
BaseColor function ( ) { return strokeColor ; }
SchemaValidatorBuilder function ( ) { this . strategy = new SchemaValidationStrategy ( ) ; return this ; }
IJavaScriptElement function ( @ NotNull IJavaScriptElement arg0 , @ NotNull IType arg1 ) { return null ; }
long function ( ) { return ours ; }
double function ( ) { return this . mu ; }
void function ( String arg0 ) { if ( fShowTraceInConsoleViewAction != null ) { fShowTraceInConsoleAction . setVisible ( false ) ; fShowTraceInConsoleViewAction . requestFocus ( ) ; } }
DurationFieldType function ( int arg0 ) { if ( arg0 < 0 || arg0 >= size ( ) ) { throw new IndexOutOfBoundsException ( String . valueOf ( arg0 ) ) ; } return getFieldType ( arg0 . intValue ( ) ) ; }
void function ( Employee arg0 ) { em . persist ( arg0 ) ; em . flush ( ) ; }
void function ( long arg0 ) { }
boolean function ( Quadrant arg0 , Direction arg1 ) { if ( this == arg0 ) return true ; if ( arg0 == null || ! ( arg0 . equals ( this ) ) ) return false ; Quadrant loc0 = arg0 . child ( this ) ; if ( loc0 == null || ! ( arg0 . equals ( loc0 ) ) ) return false ; return child ( loc0 ) != null ; }
Set function ( Map arg0 ) { return new SetFromMap ( arg0 ) ; }
Branch function ( ) { return new Branch ( this ) ; }
boolean function ( ZNode arg0 ) { return arg0 . exists ( ) ; }
void function ( int arg0 ) { constantValue . setIndex ( arg0 ) ; }
AsyncResult < T > function ( Exception arg0 ) { synchronized ( lock ) { if ( exception == null ) { exception = arg0 ; notifyAll ( ) ; } } return this ; }
double function ( double arg0 ) { return findZero ( arg0 , factory . createRealSolver ( ) ) ; }
Iterator < ? extends Double > function ( DoubleIterator arg0 ) { if ( arg0 == null ) { return null ; } return new DoubleIterator ( arg0 ) ; }
