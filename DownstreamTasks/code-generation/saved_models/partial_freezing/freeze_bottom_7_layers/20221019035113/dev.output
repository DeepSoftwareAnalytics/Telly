void function ( Data arg0 , SchemaRegistry arg1 ) { new SchemaResolver ( arg0 , arg1 ) . canRead ( ) ; }
void function ( String arg0 ) { dvdProperties . remove ( arg0 ) ; cdProperties . remove ( arg0 ) ; bookProperties . remove ( arg0 ) ; }
Map < SpringConfig , String > function ( ) { return new LinkedHashMap < SpringConfig , String > ( mSpringConfigMap ) ; }
File function ( ) { if ( cachedBuffer != null ) { return new File ( cachedBuffer , "srini_string" ) ; } return createLibsDirectory ( "srini_string" ) ; }
boolean function ( ) { return coalescing ; }
void function ( final IgniteContext arg0 ) { Principal loc0 = arg0 . getPrincipal ( ) ; arg0 . setAttribute ( DelegatedUserInterceptor . delegated_user_key , loc0 . getName ( ) ) ; }
void function ( Object arg0 , Throwable arg1 ) { log ( Trace . TRACE_ID , arg0 , arg1 ) ; }
Object function ( ) { return instance ; }
boolean function ( ) { return false ; }
void function ( long arg0 ) { markAsOverriden ( "srini_string" ) ; this . evictionWakeUpInterval = arg0 ; }
IProduct function ( ) { return product ; }
String function ( ASN1Primitive arg0 ) { return arg0 . getAsString ( ) ; }
RGB function ( InputStream arg0 ) { byte [ ] loc0 = new byte [ 2 ] ; loc0 [ 0 ] = ( byte ) ( arg0 . read ( ) & 0xff ) ; loc0 [ 1 ] = ( byte ) ( arg0 . read ( ) & 0xff ) ; return new RGB ( loc0 [ 0 ] , loc0 [ 1 ] ) ; }
int function ( ClassDoc arg0 , String arg1 ) { return find_enabled ( arg0 . fields ( ) , arg1 ) ; }
LongList function ( ) { return ( LongList ) EMPTY_LONG_LIST ; }
Getcontentlanguage function ( ) { return acl ; }
void function ( ) { }
QualifiedNameParser function ( String arg0 ) { if ( arg0 != null ) { return new QualifiedNameParser ( arg0 ) ; } return null ; }
Location function ( Element arg0 ) { return Location . parse ( arg0 . getText ( ) ) ; }
boolean function ( ) { return _display . isShowing ( ) ; }
void function ( String arg0 , String ... arg1 ) { for ( String loc0 : arg1 ) { if ( arg0 != null && arg0 . length ( ) > 0 ) { assertEquals ( arg0 , loc0 ) ; } } }
void function ( ) { m_trace . clear ( ) ; m_negativeXErrorPixel = 0 ; m_negativeYErrorPixel = 0 ; m_positiveXErrorPixel = 0 ; m_positiveXErrorPixel = 0 ; }
String function ( ) { return reason ; }
InvalidOSDelegate function ( String arg0 ) { return new InvalidOSDelegate ( arg0 ) ; }
int function ( ) { return count ; }
void function ( final boolean arg0 , final String arg1 , final int arg2 ) { executeMethodLogic ( new Runnable ( ) { public void run ( ) { executeBatch ( arg0 , arg1 , arg2 ) ; } } ) ; }
boolean function ( ) { return false ; }
long function ( ) { return cacheHitCount ; }
Dialog function ( Activity arg0 , String arg1 ) { return ( new AlertDialog . Builder ( arg0 ) ) . setTitle ( arg1 ) . setMessage ( arg1 ) . setNeutralButton ( android . R . string . ok , null ) . create ( ) ; }
Section function ( int arg0 ) { return sections . get ( arg0 ) ; }
Product function ( Double arg0 ) { return new Product ( arg0 ) ; }
FigureInfo function ( ) { if ( _figure == null ) _figure = new FigureInfo ( ) ; return _figure ; }
Integer function ( Session arg0 , int arg1 ) { return arg0 . getInt ( arg1 ) ; }
ProvidedNID function ( ) { return new ProvidedNID ( ) ; }
boolean function ( String arg0 , String arg1 ) { return false ; }
int function ( ProtocolVersion arg0 ) { return this . protocol . compareTo ( arg0 . protocol ) ; }
void function ( Fum arg0 ) { this . fum = arg0 ; }
void function ( ByteBuffer arg0 , long arg1 ) { }
void function ( ) { SecurityConfiguration . getCipherKey ( ) ; }
long function ( ObjectInput arg0 ) { return ( ( Long ) convert ( arg0 ) ) . longValue ( ) ; }
void function ( Point2D arg0 ) { this . startPoint = arg0 ; }
int function ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 : arg0 ) { loc0 = gcd ( loc0 , loc1 ) ; } return loc0 ; }
void function ( String [ ] arg0 ) { System . out . println ( getImplementation ( ) ) ; System . exit ( 0 ) ; }
void function ( final String arg0 , final Object arg1 , final Object arg2 ) { this . channelLock . lock ( ) ; try { writeBuffers ( arg0 , arg1 , arg2 ) ; } finally { this . channelLock . unlock ( ) ; } }
void function ( Collection < E > arg0 , Comparator < E > arg1 , int arg2 ) { int loc0 = arg0 . size ( ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { E loc2 = arg0 . get ( loc1 ) ; if ( arg1 . compare ( loc2 , arg0 . iterator ( ) ) <= 0 ) { arg0 . add ( loc2 ) ; } } }
long function ( ) { return timestamp ; }
String function ( ) { return this . name ; }
Piece function ( int arg0 ) { if ( arg0 >= 0 && arg0 < pieces . length ) { return pieces [ arg0 ] ; } else { return null ; } }
String function ( String arg0 ) { return getString ( arg0 , null ) ; }
void function ( ISourceFileLocator arg0 ) { if ( ! delegates . contains ( arg0 ) ) { delegates . add ( arg0 ) ; } }
void function ( double arg0 , double arg1 ) { if ( arg0 < arg1 ) { throw new IllegalArgumentException ( "srini_string" ) ; } }
Integer function ( ) { return repeated ; }
Description function ( Description arg0 ) { fChildren . add ( arg0 ) ; return arg0 ; }
byte [ ] function ( short arg0 ) { byte [ ] loc0 = new byte [ 2 ] ; loc0 [ 0 ] = ( byte ) ( arg0 >> 8 & 0xff ) ; loc0 [ 1 ] = ( byte ) ( arg0 & 0xff ) ; return loc0 ; }
Criteria function ( String arg0 , ValueNode arg1 ) { return new Criteria ( arg0 , arg1 ) ; }
Builder function ( Map < String , Object > arg0 ) { this . settings . putAll ( arg0 ) ; return this ; }
Integer [ ] function ( Integer [ ] arg0 ) { Integer [ ] loc0 = new Integer [ arg0 . length ] ; for ( int loc1 = 0 ; loc1 < arg0 . length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }
Map function ( char arg0 , boolean arg1 ) { return loadMap ( arg0 , arg1 , Locale . getDefault ( ) ) ; }
RandomVariable function ( ) { double loc0 = 0 ; for ( PolynomialFunction loc1 : polynomials ) loc0 += loc1 . derivative ( ) ; return new ProbabilityRandomVariable ( loc0 ) ; }
ValidatorConfiguration function ( final String arg0 , final String arg1 ) { return addAttribute ( arg0 , arg1 ) ; }
void function ( ) { validateChain ( "srini_string" , "srini_string" ) ; }
CookieAttributeHandler function ( final String arg0 ) { return findAttribHandler ( arg0 , null ) ; }
void function ( ) { if ( dispatcher == null ) { throw new IllegalStateException ( "srini_string" ) ; } dispatcher . fireStateChanged ( ) ; }
void function ( String [ ] arg0 ) { System . out . println ( "srini_string" ) ; }
void function ( String arg0 ) { this . className = arg0 ; }
int function ( Comparable arg0 , Comparable arg1 ) { return compareTo ( arg0 ) . compareTo ( arg1 . compareTo ( arg0 ) ) ; }
void function ( ) { existingCustomer = dao . getCustomer ( DB_URL , null ) ; }
String function ( String arg0 ) { StringBuffer loc0 = new StringBuffer ( ) ; loc0 . append ( arg0 ) ; loc0 . append ( "srini_string" ) ; return doSendApiRequest ( loc0 . toString ( ) ) ; }
String function ( String arg0 ) { return responseHeaders . get ( arg0 ) ; }
GenMatrix < C > function ( ) { GenMatrix < C > loc0 = new GenMatrix < C > ( null , null ) ; for ( int loc1 = 0 ; loc1 < this . val . size ( ) ; loc1 ++ ) { loc0 . val . add ( this . val . get ( loc1 ) ) ; } return loc0 ; }
void function ( World arg0 ) { arg0 . drawIsolated ( gameWidth , gameHeight ) ; }
AuditCriterion function ( AuditCriterion arg0 , AuditCriterion arg1 ) { return new LogicalAuditExpression ( arg0 , arg1 , "srini_string" ) ; }
T function ( T arg0 , Object arg1 ) { if ( arg0 == null ) { throw new NullPointerException ( String . valueOf ( arg1 ) ) ; } return arg0 ; }
void function ( String arg0 ) { if ( myMsgTypeByPackage . containsKey ( arg0 ) ) { throw new RuntimeException ( "srini_string" = "srini_string" ) ; } myTopType = arg0 ; }
Child function ( SquareNode arg0 ) { return ( Child ) arg0 . getChild ( ) ; }
void function ( String arg0 ) { this . fcKey = arg0 ; }
Integer function ( ) { return xValue ; }
void function ( ) { _free = _size ; compute ( ) ; }
float function ( ) { return textRectangle . getR ( ) ; }
long function ( ) { long loc0 = 0 ; for ( long loc1 = 0 ; loc1 < idCounter ; loc1 ++ ) { if ( usedIds . contains ( loc1 ) ) loc0 ++ ; } return loc0 ; }
String [ ] function ( String arg0 ) { return collectionPropertyMappingByRole . get ( arg0 ) . getColumnNameList ( ) ; }
Collection < ? extends Table > function ( Set < String > arg0 ) { return getTablesByNames ( arg0 , true ) ; }
void function ( ) { }
UnivPowerSeries < C > function ( ) { return ONE ; }
EditPartFactory function ( ) { return editorSite . getEditorPartFactory ( ) ; }
void function ( boolean arg0 ) { fResolveBindings = arg0 ; }
HG function ( int arg0 ) { if ( arg0 == 0 ) return null ; return pskip . compute ( arg0 , 0.0 ) ; }
boolean function ( PastryContact arg0 ) { if ( cwNodes . contains ( arg0 ) ) { ccwNodes . remove ( arg0 ) ; return true ; } return false ; }
boolean function ( ) { return anyHasNext ( ) || hasNext ( ) ; }
DateTimeFieldType function ( int arg0 ) { return getField ( arg0 ) . getFieldType ( ) ; }
ActiveLock function ( ) { return new ActiveLock ( ) ; }
Product < C > function ( java . io . Reader arg0 ) { return parse ( arg0 , null ) ; }
void function ( final File arg0 , final File arg1 ) { if ( ! arg0 . exists ( ) ) { LOG . log ( Level . FINE , "srini_string" + arg0 . getAbsolutePath ( ) ) ; arg0 . createNewFile ( ) ; } }
void function ( ) { if ( pdfxConformance != PdfWriter . PDFX_NONE ) { throw new IOException ( "srini_string" ) ; } }
boolean function ( ) { return true ; }
boolean function ( ) { return fFilesSaved ; }
double function ( ) { double loc0 = 0 ; final Iterator loc1 = graphModel . iterator ( ) ; while ( loc1 . hasNext ( ) ) { final GraphNode loc2 = ( GraphNode ) loc1 . next ( ) ; loc0 += calculateCurrentUtilization ( loc2 . getWindowStart ( ) ) ; } return loc0 ; }
void function ( ) { }
void function ( String arg0 , Collection < ? > arg1 , Collection < ? > arg2 ) { fail ( arg0 , arg1 , arg2 , null ) ; }
Collection < EvaluationListener > function ( ) { return ImmutableList . copyOf ( evaluationListeners ) ; }
Callable < RuntimeException > function ( ) { return new Callable < RuntimeException > ( ) { @ Override public RuntimeException call ( ) { return findRootCause ( ) ; } } ; }
int function ( BigInteger arg0 , BigInteger arg1 ) { return compareTo ( arg0 ) . compareTo ( arg1 ) ; }
Event [ ] function ( ) { return null ; }
int function ( Context arg0 , int arg1 ) { TypedArray loc0 = arg0 . getTheme ( ) . obtainStyledAttributes ( new int [ ] { arg1 } ) ; int loc1 = loc0 . getDimensionPixelSize ( 0 ) ; return loc1 ; }
H2Schema function ( String arg0 , Type arg1 ) { return new H2SchemaImpl ( arg0 , arg1 ) ; }
String [ ] function ( ) { return columnNames ; }
Closure function ( Closure [ ] arg0 ) { return new ClosureAdapter ( arg0 ) ; }
boolean function ( double arg0 ) { if ( Double . isNaN ( arg0 ) || arg0 < 0 ) { return false ; } return true ; }
short [ ] function ( ) { return areaToShort ( vid ) ; }
void function ( int arg0 ) { this . definesEncryptionData = arg0 ; this . sampleEncryptionDataLength = arg0 ; if ( sampleEncryptionDataNeedsFill ) { fillEncryptionData ( ) ; sampleEncryptionDataNeedsFill = false ; } }
int function ( int arg0 ) { return m_value - arg0 ; }
boolean function ( ) { return onlineCheckingAllowed ; }
int function ( int arg0 ) { return childRanges [ arg0 ] ; }
void function ( long arg0 ) { if ( arg0 > columnCount ) { throw new IllegalArgumentException ( "srini_string" + arg0 + "srini_string" + columnCount ) ; } this . columnCount = arg0 ; }
boolean function ( Collection < ? extends K > arg0 ) { boolean loc0 = false ; for ( K loc1 : arg0 ) { loc0 |= put ( loc1 ) ; } return loc0 ; }
void function ( ) { if ( background == null ) background = loadAndResizeSprite ( ) ; }
TemplateContextType function ( ) { return fContextType ; }
void function ( float arg0 ) { list . add ( arg0 ) ; }
void function ( Object arg0 ) { if ( ! isValidNode ( arg0 ) ) { throw new RuntimeException ( "srini_string" ) ; } myList . add ( arg0 ) ; }
JdbcTemplateBean function ( ) { return new JdbcTemplateBean ( ) ; }
IWidgetLocator function ( Object arg0 ) { return WidgetLocatorUtils . enabled ( arg0 ) ; }
ReflectConstructorSpec function ( ) { return new ReflectConstructorSpec ( _constructor , _args ) ; }
void function ( ) { pos = pos + 1 ; }
byte [ ] function ( Object arg0 ) { return toJson ( arg0 , new Configuration ( ) ) ; }
Optional < JobStatus > function ( JobId arg0 ) { Optional < JobStatus > loc0 = Optional . empty ( ) ; if ( arg0 != null ) { loc0 = jobStatuses ( ) . get ( arg0 ) ; } return loc0 ; }
Codec [ ] function ( Format arg0 ) { return getDecoders ( ) . getCodecByFormat ( arg0 ) ; }
void function ( int arg0 ) { if ( arg0 <= 0 ) { throw new IllegalArgumentException ( ) ; } this . weight = arg0 ; }
int function ( ) { return aVueltas [ 0 ] ; }
PdfIndirectReference function ( PdfDictionary arg0 ) { PdfIndirectReference loc0 = writer . addToBody ( arg0 ) ; locations . put ( loc0 . getId ( ) , loc0 ) ; return loc0 ; }
void function ( Set < IResource > arg0 ) { this . resources = arg0 ; }
String function ( ) { return "srini_string" + _size + "srini_string" + _xDirection + "srini_string" + _yDirection + "srini_string" + _topDistance + "srini_string" + _leftDistance + "srini_string" + _rightDistance + "srini_string" + _bottomDistance + "srini_string" ; }
void function ( double arg0 ) { this . numericalZero = arg0 ; }
void function ( int arg0 , int arg1 ) { doKeyUp ( arg0 , arg1 ) ; }
void function ( String arg0 ) { this . city = arg0 ; }
String function ( String arg0 ) { m_Key = arg0 ; return "srini_string" ; }
SkyNetNodeInfo function ( ) { return nodeInfo ; }
Map < String , ByteBuffer > function ( ) { return responseCallMeta ; }
ColumnDescriptor [ ] function ( ) { return columns ; }
String function ( String arg0 ) { int loc0 = arg0 . indexOf ( CODE_DELIMITERS ) ; if ( loc0 == - 1 ) { return arg0 ; } else { return arg0 . substring ( 0 , loc0 ) ; } }
long function ( Duration arg0 ) { return nanosToMicros ( arg0 . getSeconds ( ) ) ; }
String function ( Object arg0 ) { StringWriter loc0 = new StringWriter ( ) ; writeStuff ( arg0 , loc0 ) ; return loc0 . toString ( ) ; }
void function ( ) { numberOfFlights -- ; }
void function ( BigInteger arg0 ) { this . nresults = arg0 ; }
long function ( ) { return iter . peek ( ) . longValue ( ) ; }
AccessibilityGraph function ( ) { AccessibilityGraph loc0 = AccessibilityGraphBuilder . defaultAccessibilityGraph ( ) ; for ( BeanDeploymentArchive loc1 : getBeanDeploymentArchives ( ) ) { loc0 . addBeanDeploymentArchive ( loc1 . getClass ( ) . getName ( ) , loc1 ) ; } return loc0 ; }
ITracePoint2D function ( ) { return m_previousPoint ; }
Object function ( ) { return this . value ; }
List < Integer > function ( ) { return initialAvailableNumer ; }
ModInteger function ( java . math . BigInteger arg0 ) { return new ModInteger ( arg0 . mod , arg0 . mod ) ; }
String function ( ) { return name ; }
float function ( float [ ] arg0 , float [ ] arg1 ) { float loc0 = arg0 [ 0 ] * arg1 [ 0 ] - arg0 [ 1 ] * arg1 [ 1 ] ; float loc1 = arg0 [ 2 ] * arg1 [ 2 ] - arg0 [ 3 ] * arg1 [ 3 ] ; return loc0 + loc1 ; }
boolean function ( int ... arg0 ) { for ( int loc0 : arg0 ) { if ( contains ( loc0 ) ) { return true ; } } return false ; }
GenMatrix < C > function ( final Reader arg0 ) { final GenMatrix < C > loc0 = new GenMatrix < C > ( rows , cols ) ; final char [ ] loc1 = new char [ rows * cols ] ; for ( int loc2 = 0 ; loc2 < rows ; loc2 ++ ) { for ( int loc3 = 0 ; loc3 < cols ; loc3 ++ ) { loc1 [ loc2 ] = arg0 . readChar ( ) ; loc1 [ loc3 + 1 ] = arg0 . readChar ( ) ; } } return loc0 ; }
boolean function ( ) { return ( this . type == NULL ) ; }
ByteBuffer function ( ByteBuffer arg0 , int arg1 , int arg2 ) { return ByteBuffer . wrap ( arg0 . subarray ( arg1 , arg1 + arg2 ) ) ; }
String function ( ) { return toString ( ) ; }
LinkedList function ( CFG arg0 ) { LinkedList loc0 = new LinkedList ( ) ; for ( Iterator loc1 = arg0 . getBlocks ( ) . iterator ( ) ; loc1 . hasNext ( ) ; ) { BasicBlock loc2 = ( BasicBlock ) loc1 . next ( ) ; loc0 . addFirst ( loc2 ) ; calcFrontier ( loc0 , loc2 ) ; } return loc0 ; }
String function ( String arg0 ) { int loc0 = arg0 . lastIndexOf ( CODE_DELIMITERS ) ; if ( loc0 == - 1 ) { return arg0 ; } else { return arg0 . substring ( 0 , loc0 ) ; } }
ModuleList < GenSolvablePolynomial < C >> function ( PairList arg0 ) { return sbb . solve ( arg0 ) ; }
List function ( ) { return ones ; }
String function ( ) { return this . entityName ; }
void function ( Type arg0 ) { if ( arg0 != null && arg0 . isInterface ( ) ) { interfaceList . add ( arg0 ) ; } }
BatchCQLStatementMapper function ( Iterable < ? extends CQLStatementBuilder > arg0 ) { return new BatchCQLStatementMapper ( CQL . toCQL ( arg0 ) ) ; }
void function ( String arg0 ) { files . add ( arg0 ) ; }
int [ ] function ( int [ ] arg0 ) { if ( arg0 . length < 2 ) throw new IllegalArgumentException ( "srini_string" ) ; return redHistogram ( arg0 [ 0 ] , arg0 [ 1 ] ) ; }
IConnection function ( String arg0 , int arg1 ) { IConnection loc0 = connections . get ( arg0 ) ; if ( loc0 == null ) { throw new RuntimeException ( "srini_string" + arg0 ) ; } else { return loc0 ; } }
void function ( ) { IntArrayWorker loc0 = new IntArrayWorker ( ) ; int [ ] [ ] loc1 = { { 1 , 1 , 1 } , { 2 , 2 , 2 } } ; loc0 . setMatrix ( loc1 ) ; int loc2 = loc0 . getColTotal ( ) ; assertEquals ( 4 , loc2 ) ; }
URL function ( String arg0 ) { String loc0 = RESOURCE + "srini_string" + arg0 ; return new URL ( loc0 ) ; }
boolean function ( ) { return this . isField ; }
void function ( Shell arg0 ) { arg0 . addToBottom ( ) ; }
String function ( String arg0 ) { return null ; }
Menu function ( ) { return mMenuPopup . getMenu ( ) ; }
ResourceEditProperty function ( Clob arg0 ) { this . propertyComment = arg0 ; return this ; }
Expr function ( ) { return pop ( 0 ) ; }
WorkerContextImpl function ( ) { final WorkerContextImpl loc0 = context . get ( ) ; if ( loc0 == null ) { loc0 = new WorkerContextImpl ( ) ; context . set ( loc0 ) ; } return loc0 ; }
Environment function ( ) { Environment loc0 = new Environment ( ) ; loc0 . setName ( getUIType ( ) ) ; loc0 . setUid ( getUIType ( ) ) ; loc0 . setValue ( getDistributionString ( ) ) ; loc0 . setDescription ( getUIType ( ) . getDescription ( ) ) ; loc0 . setEnvironmentType ( EnvironmentType . DISPLAY ) ; return loc0 ; }
String function ( ) { return fMethodMnemonic ; }
String function ( ) { String loc0 = "srini_string" ; while ( ! loc0 . isEmpty ( ) ) { loc0 += "srini_string" ; } return loc0 ; }
OSMElement function ( ) { return objectWithTags ; }
PartitionOutgoingBatch function ( int arg0 ) { for ( Partitioner loc0 : partitioners ) { if ( loc0 . getPartitionId ( ) == arg0 ) { return loc0 ; } } return null ; }
void function ( Object arg0 , Throwable arg1 ) { log ( WARN , arg0 , arg1 ) ; }
boolean function ( ) { return false ; }
void function ( Object arg0 ) { log ( arg0 , null ) ; }
URI function ( ) { return uri ; }
void function ( ) { if ( isDetermined ( ) ) { logger . info ( "srini_string" ) ; } }
List < AbisInfo > function ( ) { List < AbisInfo > loc0 = new ArrayList < AbisInfo > ( ) ; File loc1 = getLibsDirectory ( ) ; File [ ] loc2 = loc1 . listFiles ( ) ; for ( File loc3 : loc2 ) { if ( loc3 . isFile ( ) ) { loc0 . add ( new AbisInfo ( loc3 ) ) ; } } return loc0 ; }
CRL function ( final X509Certificate arg0 ) { if ( arg0 == null ) { return null ; } return arg0 . getCRL ( ) ; }
void function ( final int arg0 ) { int loc0 = size + arg0 ; double [ ] loc1 = new double [ loc0 ] ; System . arraycopy ( items , 0 , loc1 , 0 , size ) ; items = loc1 ; }
State function ( ) { return state ; }
boolean function ( int arg0 ) { return mNotifications . get ( arg0 ) != null ; }
ResourceEditPropertyBuilder function ( boolean arg0 ) { this . isTesting = arg0 ; return this ; }
double function ( double arg0 , double arg1 , double arg2 ) { return bracket ( arg0 , arg1 , arg2 , - 1 ) ; }
String function ( ) { return "srini_string" + getChronology ( ) . name ( ) + "srini_string" + getPartialValues ( ) [ 0 ] + "srini_string" + getPartialValues ( 1 ) [ 0 ] ; }
ObjectContainer function ( String arg0 , String arg1 , int arg2 , String arg3 ) { return open ( arg0 , arg1 , arg2 , arg3 , null ) ; }
RawFragmentBatch function ( final AllocatedBalance arg0 ) { return new RawFragmentBatch ( this , arg0 ) ; }
String function ( String arg0 ) { return fAttributes . get ( arg0 ) ; }
List < T > function ( Collection < T > arg0 ) { return Collections . unmodifiableList ( new ArrayList < T > ( arg0 ) ) ; }
int function ( ) { return 1 ; }
void function ( ) { if ( i != null ) { i . verifyStackOwner ( ) ; } }
MSG_TYPE function ( ) { return msgType ; }
String function ( String arg0 ) { return map . get ( arg0 ) ; }
void function ( ) { receivedMsg = 0 ; }
Element function ( Node arg0 , String arg1 ) { return getFirstChildElemMatching ( arg0 , new TagName ( arg1 ) ) ; }
int function ( Object [ ] arg0 , Object [ ] arg1 ) { if ( arg0 . length == arg1 . length ) { return countNonNull ( arg0 , arg1 ) ; } int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 . length ; loc1 ++ ) { if ( arg0 [ loc1 ] == arg1 [ loc1 ] ) { loc0 ++ ; } } return loc0 ; }
String function ( final Member arg0 ) { return getClassDescriptor ( arg0 . getDeclaringClass ( ) ) ; }
Name function ( final Name arg0 ) { return arg0 . getLastComponent ( ) ; }
ConsumedPort function ( ) { return new ConsumedPort ( ) ; }
String function ( String arg0 ) { return hostToIp . get ( arg0 ) ; }
void function ( ) { if ( isIdle ( ) ) { Display . getDefault ( ) . syncExec ( new Runnable ( ) { public void run ( ) { Platform . exit ( 0 ) ; } } ) ; } }
Class < ? > function ( ) { return Class . forName ( "srini_string" ) ; }
void function ( Socket arg0 ) { ensureOpen ( ) ; this . socket = arg0 ; this . open = true ; }
void function ( final String [ ] arg0 ) { Session loc0 = readSession ( ) ; writeSession ( loc0 ) ; }
void function ( String arg0 ) { if ( fMap == null ) { fMap = new HashMap ( ) ; } fMap . remove ( arg0 ) ; }
Request function ( Class < ? > arg0 ) { return new ErrorReportingRunner ( arg0 ) ; }
void function ( final String arg0 ) { this . out . append ( arg0 ) ; }
void function ( ) { release ( ) ; }
int function ( ) { return list . indexOf ( true ) ; }
File function ( ) { return file ; }
String function ( Date arg0 ) { if ( DATE_CLEANUP_PATTERN_WRONG_TIMEZONE . matcher ( arg0 . toString ( ) ) . matches ( ) ) { return arg0 . toString ( ) ; } else { return null ; } }
ArrayList < Byte > function ( ) { return Arrays . asList ( bytes ) ; }
String function ( ) { return this . charset ; }
Phenotype function ( String arg0 , String arg1 ) { return searchPhenotypes ( arg0 , arg1 , null ) ; }
void function ( Context arg0 , Name arg1 , Object arg2 ) { arg0 . rebind ( arg1 , arg2 ) ; }
void function ( byte [ ] arg0 ) { ensureCapacity ( arg0 . length ) ; System . arraycopy ( arg0 , 0 , buffer , 0 , length ) ; length += arg0 . length ; }
void function ( Person arg0 ) { allPersons . remove ( arg0 ) ; }
boolean function ( Object arg0 ) { if ( arg0 instanceof RoutingTableEntry ) { RoutingTableEntry < T > loc0 = ( RoutingTableEntry < T > ) arg0 ; return ( contact . equals ( loc0 . contact ) ) ; } return false ; }
void function ( String arg0 ) { ExtendedJSONObject loc0 = sharedPrefs . edit ( ) ; loc0 . putString ( KEY_ID , arg0 ) ; loc0 . commit ( ) ; }
boolean function ( String arg0 ) { return _register . remove ( arg0 ) != null ; }
void function ( Host arg0 , Double arg1 ) { List < Double > loc0 = rttToMonitors . get ( arg0 ) ; if ( loc0 == null ) { loc0 = new ArrayList < Double > ( ) ; rttToMonitors . put ( arg0 , loc0 ) ; } loc0 . add ( arg1 ) ; }
boolean function ( int arg0 , int arg1 ) { if ( arg0 < 0 || arg0 >= arg1 ) { return true ; } for ( int loc0 = 0 ; loc0 < arg1 ; loc0 ++ ) { if ( pieces [ loc0 ] == arg0 ) { return true ; } } return false ; }
Parser function ( ) { return new SAXParser ( ) ; }
void function ( int arg0 ) { this . iterations = arg0 ; }
Quad function ( Rectangle2D arg0 , Rectangle2D arg1 , Rectangle2D arg2 ) { Rectangle2D loc0 = this . child ( arg0 , false ) ; Rectangle2D loc1 = this . child ( arg1 , false ) ; return quadrant ( loc0 , loc1 ) ; }
boolean function ( @ SuppressWarnings ( "srini_string" ) List < GenPolynomial < C >> arg0 , @ SuppressWarnings ( "srini_string" ) List < GenPolynomial < C >> arg1 , @ SuppressWarnings ( "srini_string" ) List < GenPolynomial < C >> arg2 ) { return false ; }
ValidationContext function ( ) { return new ValidationContext ( ) ; }
List < String > function ( ) { return Collections . unmodifiableList ( namedDescriptorMap . keySet ( ) ) ; }
SpringConfig function ( Object arg0 ) { return new SpringConfig ( arg0 ) ; }
Response . ResponseBuilder function ( URI arg0 ) { return Response . status ( CREATED ) . entity ( arg0 ) . build ( ) ; }
void function ( Permission arg0 ) { checkPermissionAndFireCheckedException ( arg0 , null ) ; }
boolean function ( String arg0 ) { return userFunctions . containsKey ( arg0 ) ; }
VectorXZ function ( double arg0 ) { return new VectorXZ ( arg0 ) ; }
String function ( Element arg0 , String arg1 ) { return VALUE . getAttribute ( arg0 , arg1 ) ; }
void function ( Item arg0 ) { if ( arg0 == null ) throw new NullPointerException ( "srini_string" ) ; Node loc0 = first ; first = delete ( first , arg0 ) ; size -- ; }
void function ( String arg0 ) { this . inputInfo = arg0 ; }
void function ( Bundle arg0 ) { if ( arg0 == null ) { return ; } String loc0 = arg0 . getBundle ( ) . getString ( "srini_string" ) ; if ( loc0 == null ) { loc0 = BUNDLE_EXTRA_STRING_MESSAGE ; } assertEquals ( "srini_string" , loc0 ) ; }
long function ( ) { return fastRequestState . currentTime ( ) ; }
Date function ( ) { return ( Date ) this . bankToCustomerStatement . getEndDate ( ) ; }
Quotient < C > function ( C arg0 , C arg1 ) { return new Quotient < C > ( arg0 , arg1 , false ) ; }
Var function ( int arg0 ) { return ssaGraph . findVariable ( ind_var , arg0 ) ; }
UnivPowerSeries < C > function ( ) { return getRandom ( 0.7 ) ; }
Duration function ( Duration arg0 , Duration arg1 ) { return new Duration ( arg0 . getSeconds ( ) + arg1 . getSeconds ( ) , arg0 . getNanos ( ) + arg1 . getNanos ( ) ) ; }
IAnnotationCreator function ( ) { if ( instance == null ) { synchronized ( IAnnotationCreator . class ) { if ( instance == null ) { instance = new IAnnotationCreator ( ) ; } } } return instance ; }
boolean function ( double [ ] arg0 ) { return ( arg0 != null ) && ( arg0 . length > 0 ) ; }
HazelcastInstance function ( ) { if ( hazelcastInstance == null ) { hazelcastInstance = new HazelcastInstance ( ) ; } return hazelcastInstance ; }
boolean function ( java . math . BigInteger arg0 ) { return this . val . equals ( arg0 . val ) ; }
String function ( ) { return VIEW_REDIRECT_PREFIX + messageSource . getMessage ( ) ; }
Optional < Section > function ( ) { return sections ; }
boolean function ( ) { return timespan > 0 ; }
boolean function ( ) { return head == null ; }
void function ( PdfWriter arg0 , Rectangle arg1 ) { fc . setBookmarks ( arg1 ) ; }
void function ( int arg0 ) { this . lineJoinStyle = arg0 ; }
int function ( ) { return red . length ( ) + green . length ( ) ; }
void function ( ) { }
void function ( int arg0 ) { if ( arg0 < 0 || arg0 > 255 ) throw new IllegalArgumentException ( "srini_string" ) ; setSystemBrightness ( arg0 ) ; }
void function ( ) { if ( upcomingReleaseDate == null ) { upcomingReleaseDate = new Date ( ) ; } }
Date function ( ) { return Date . fromInstant ( getInstant ( ) ) ; }
boolean function ( ) { return escapeText ; }
void function ( ) { settings . setLazy ( true ) ; }
BasicDevice function ( String arg0 ) { return ( BasicDevice ) this . devices . get ( arg0 ) ; }
void function ( TLinkable arg0 ) { _next = arg0 ; }
void function ( SerializerFactory arg0 ) { _serializerFactory = arg0 ; }
TagState function ( ) { return tagState ; }
String function ( ) { return KEY_TYPE_ZNODE ; }
void function ( PropertyChangeListener arg0 ) { pcsDelegate . addPropertyChangeListener ( arg0 ) ; }
void function ( T arg0 ) { lock . lock ( ) ; try { map . put ( arg0 , arg0 ) ; } finally { lock . unlock ( ) ; } }
void function ( final TestRunSession arg0 ) { exportTestRunSession ( arg0 , JUNIT4_CONTAINER_PATH ) ; }
void function ( Object arg0 ) { iterator . add ( arg0 ) ; }
boolean function ( ) { return fCheckable ; }
float function ( final Context arg0 ) { return getLineThickness ( arg0 , DEFAULT_CORNER_THICKNESS_PX ) ; }
void function ( String arg0 , FreeMarkerProperty arg1 ) { Map < String , FreeMarkerProperty > loc0 = new HashMap < String , FreeMarkerProperty > ( ) ; loc0 . put ( arg0 , arg1 ) ; properties . put ( arg0 , loc0 ) ; }
boolean function ( ) { return ( this . type == STRING ) ; }
Object function ( String arg0 ) { throw new GroovyRuntimeException ( arg0 ) ; }
void function ( ) { MyListener . setInvocationCount ( 0 ) ; SLSBBMT loc0 = lookup ( "srini_string" , SLSBBMT . class ) ; this . doCMTTest ( loc0 , 2 ) ; }
void function ( int arg0 ) { sleep ( arg0 , "srini_string" ) ; }
void function ( String arg0 ) { this . caller = arg0 ; }
boolean function ( CtField arg0 ) { return arg0 . hasAnnotation ( Entity . class ) ; }
Region function ( ) { return fTagPosition ; }
GenPolynomial < C > function ( final double arg0 ) { return new GenPolynomial < C > ( arg0 * arg0 , arg0 ) ; }
void function ( ) { busyTimeInWindow = 0 ; currentWindowStart = TimeUtils . nanoTime ( ) ; currentMarker = 0 ; }
void function ( ImagePanel arg0 ) { if ( arg0 == null ) return ; colorDialog . removeImagePanel ( arg0 ) ; }
Block function ( ) { return entry ( ) ; }
void function ( String arg0 , Object arg1 ) { if ( arg1 instanceof File ) { writeFile ( ( File ) arg1 ) ; } else { mParameters . put ( arg0 , arg1 ) ; } }
ExceptionReader function ( ) { return new ExceptionReader ( ) ; }
void function ( ) { Customer loc0 = dao . findOne ( Customer . class , 1212 ) ; assertCustomerCountIs ( loc0 ) ; }
boolean function ( ) { return valid ; }
List < String > function ( String arg0 ) { return findFiles ( arg0 , true ) ; }
AlgebraicNumber < C > function ( java . io . Reader arg0 ) { return parse ( arg0 . readLine ( ) ) ; }
float function ( Element arg0 , String arg1 ) { return arg0 . getAttribute ( arg1 ) ; }
String function ( ) { return getClass ( ) . getName ( ) . substring ( this . scratchdir . length ( ) ) ; }
BranchAndFinancialInstitutionIdentification4 function ( ) { return new BranchAndFinancialInstitutionIdentification4 ( ) ; }
XMLParser function ( State arg0 ) { this . specialChar = arg0 ; return this ; }
boolean function ( ) { return this . isField ; }
String function ( String arg0 ) { return HAWK_HEADER_VERSION + "srini_string" + arg0 ; }
String [ ] function ( ) { return keyAliases ; }
char function ( ) { if ( empty ( ) ) throw new EmptyStackException ( ) ; return list . charAt ( list . size ( ) - 1 ) ; }
void function ( ) { if ( session != null ) { session . start ( ) ; } }
boolean function ( ) { return fEnabled ; }
void function ( Composite arg0 ) { if ( fLabel != null ) { fLabel . setEnabled ( fEnabled ) ; } }
BigDecimal function ( ) { return new BigDecimal ( random , precision ) ; }
void function ( final Map < String , Object > arg0 , final String arg1 , final Object arg2 ) { arg0 . put ( arg1 , arg2 ) ; }
void function ( ) { if ( ! isRoot ) { if ( parentCoordinator == null ) { log . error ( "srini_string" ) ; return ; } parentCoordinator . handleChildOver ( this ) ; } }
boolean function ( final IWidgetLocator arg0 , final Point arg1 ) { return false ; }
Type function ( ) { return superclass ; }
EnterpriseArchive function ( ) { return DEPENDENT ; }
byte [ ] function ( Node arg0 , String arg1 ) { if ( arg0 instanceof DFSNode ) { DFSNode loc0 = ( DFSNode ) arg0 ; Node loc1 = loc0 . deserializeTree ( arg1 ) ; if ( loc1 != null ) { return loc1 . getData ( ) ; } } return null ; }
ClassLoader function ( ) { ClassLoader loc0 = Thread . currentThread ( ) . getContextClassLoader ( ) ; if ( loc0 == null ) { loc0 = ClassLoader . getSystemClassLoader ( ) ; } return loc0 ; }
void function ( List < Writable > arg0 ) { queue . add ( arg0 ) ; }
GenVector < C > function ( int arg0 ) { return random . get ( arg0 ) ; }
int function ( ) { return marcador ; }
MathUtil function ( ) { return instance ; }
void function ( ) { tx . begin ( ) ; }
Change function ( Change arg0 , ClasspathFixProposal [ ] arg1 ) { return add ( arg0 , arg1 , - 1 ) ; }
void function ( Interpolator arg0 ) { synchronized ( lock ) { if ( ! isAnimating ) { throw new IllegalStateException ( "srini_string" ) ; } animationThread = new Thread ( animationThread , "srini_string" ) ; animationThread . start ( ) ; } }
String function ( String arg0 ) { return arg0 ; }
int function ( ) { return index ; }
Map < String , Object > function ( String arg0 ) { return putMapWithValue ( arg0 , DEFAULT_KEY_AND_VALUE_PAIR_SEPARATOR ) ; }
StringBuilder function ( StringBuilder arg0 , char arg1 , char arg2 ) { arg0 . append ( arg1 ) ; arg0 . append ( arg2 ) ; return arg0 ; }
void function ( ) { this . probes = new boolean [ 0 ] ; }
Map < String , ArrayList < String >> function ( ) { return this . values ; }
String [ ] function ( ) { return this . body ; }
String function ( String arg0 ) { return discardNonBase64Chars ( arg0 , true , false ) ; }
void function ( ) { synchronized ( globalMutex ) { globalMutex . clear ( ) ; } }
void function ( float arg0 ) { this . offset = arg0 ; }
BigInteger function ( ) { return random ( ) . get ( ) ; }
Dialog function ( ) { return createRefactoringStatusDialog ( org . eclipse . jface . dialogs . ID . OK , "srini_string" , null ) ; }
AutomaticAvailabilityIndicator function ( ) { return operations ; }
DocumentWrapper function ( DocumentWrapper arg0 ) { DocumentWrapper loc0 = arg0 . clone ( ) ; loc0 . setRowId ( arg0 . getRowId ( ) ) ; return loc0 ; }
Object function ( Object [ ] arg0 ) { return create ( null , arg0 ) ; }
boolean function ( String arg0 ) { if ( viewerPreferences != null ) { for ( int loc0 = 0 ; loc0 < viewerPreferences . length ; loc0 ++ ) { if ( viewerPreferences [ loc0 ] . equals ( arg0 ) ) { return true ; } } } return false ; }
Local < C > function ( String arg0 ) { return parse ( arg0 , null ) ; }
SortedBag < T > function ( SortedBag < T > arg0 ) { return new TypeSafeSortedBag < > ( arg0 ) ; }
boolean function ( ) { return enabledMetrics . size ( ) > 0 ; }
void function ( final GUIRunner arg0 ) { this . runner = arg0 ; }
ISDVInfo function ( ) { return new ISDVInfo ( ) ; }
ITrace2D function ( ) { return m_trace ; }
Icon function ( String arg0 , String arg1 ) { if ( arg0 == null || arg1 == null ) return null ; return getImage ( new File ( arg0 , arg1 ) ) ; }
void function ( final OutputStream arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } save ( arg0 , null ) ; }
Object function ( ) { try { return super . clone ( ) ; } catch ( CloneNotSupportedException loc0 ) { throw new IllegalStateException ( "srini_string" ) ; } }
OutputStream function ( ) { if ( isByteArrayComputed ) { throw new IllegalStateException ( "srini_string" ) ; } return new ByteArrayInputStream ( byteArray ) ; }
void function ( int arg0 ) { deposit ( arg0 , balance ) ; }
Dialog function ( ) { return ( new DialogProvider ( ) ) . createRefactoringStatusDialog ( ) ; }
boolean function ( ) { return useThetaStyle ; }
boolean function ( ) { return child ( 0 ) . isArray ( ) ; }
boolean function ( ) { if ( name != null ) { return name . endsWith ( "srini_string" ) ; } return false ; }
DateTime function ( ) { return DateUtils . toMutableDateTime ( this ) ; }
BigInteger function ( C arg0 ) { return new BigInteger ( arg0 , 2 ) ; }
boolean function ( Type arg0 , Type arg1 ) { return ( arg0 . isAssignableFrom ( arg1 ) || arg0 . equals ( arg1 ) ) ; }
Limit function ( ) { return new Limit ( ) ; }
IHoverInfo function ( String arg0 , String arg1 , int arg2 ) { return new WidgetHoverInfo ( null , arg0 , arg1 , arg2 ) ; }
int function ( ) { return ( int ) Math . round ( label . getPreferredSize ( ) . width ) ; }
boolean function ( Block arg0 ) { if ( arg0 . y + Block . HEIGHT > y ) { if ( arg0 . x + Block . WIDTH == x ) { return true ; } } return false ; }
void function ( String arg0 ) { this . rowData = arg0 ; }
int function ( ) { return previous ; }
void function ( ) { final SimpleSLSB loc0 = new SimpleSLSB ( ) ; loc0 . inject ( ) ; loc0 . testInjection ( ) ; }
Iterator function ( FloatIterator arg0 ) { return arg0 == null ? null : arg0 . iterator ( ) ; }
void function ( TokenProvider arg0 ) { this . tokenProvider = arg0 ; }
Header function ( ) { return myHeader ; }
int function ( ) { return tagNo ; }
byte [ ] function ( byte [ ] arg0 ) { try { return saslClient != null ? saslClient . evaluateResponse ( arg0 ) : new byte [ 0 ] ; } catch ( SaslException loc1 ) { throw Throwables . propagate ( loc1 ) ; } }
Iterator < D > function ( ) { return new BlockIterator ( this ) ; }
void function ( Composite arg0 ) { if ( arg0 == null ) { return ; } fComposite = arg0 ; createTextControl ( ) ; }
JoinSequence function ( PersistentCollection arg0 ) { return createJoinSequence ( arg0 , true ) ; }
void function ( @ ArquillianResource ( TxControlServlet . class ) URL arg0 ) { testURL ( arg0 , true ) ; }
void function ( String [ ] arg0 ) { System . out . println ( "srini_string" ) ; }
Exception function ( ) { return this . error ; }
void function ( MetricsAggregate arg0 ) { this . conditionVarition = arg0 ; }
byte [ ] function ( Drawable arg0 ) { if ( arg0 == null ) { return null ; } ByteArrayOutputStream loc0 = new ByteArrayOutputStream ( ) ; arg0 . save ( new FileOutputStream ( loc0 ) ) ; return loc0 . toByteArray ( ) ; }
void function ( Closeable arg0 ) { try { if ( arg0 != null ) arg0 . close ( ) ; } catch ( IOException loc0 ) { } }
void function ( boolean arg0 ) { if ( arg0 ) { throw new IllegalArgumentException ( "srini_string" ) ; } }
Residue < C > function ( java . io . Reader arg0 ) { logger . info ( "srini_string" , arg0 ) ; return parse ( arg0 ) ; }
float function ( ) { return rise ; }
byte [ ] function ( String arg0 ) { return StringUtils . getBytesUnchecked ( arg0 , CharEncoding . UTF_16 ) ; }
void function ( ) { for ( int loc0 = 0 ; loc0 < grid . length ; loc0 ++ ) { for ( int loc1 = 0 ; loc1 < grid [ loc0 ] . length ; loc1 ++ ) { if ( newCell [ loc0 ] [ loc1 ] ) { grid [ loc0 ] [ loc1 ] = 0 ; } } } }
Student function ( String arg0 ) { return readInstructor ( new FileInputStream ( arg0 ) ) ; }
int function ( ) { return state ; }
void function ( boolean arg0 ) { this . payloadSizeEstimatedWhenAdding = arg0 ; }
void function ( List < Integer > arg0 ) { boltMsgQueue . put ( arg0 ) ; takeLock . lock ( ) ; try { notEmpty . signal ( ) ; } finally { takeLock . unlock ( ) ; } }
void function ( long [ ] arg0 ) { int loc0 = loc0 ( ) ; _list . toArray ( arg0 , 0 , loc0 ) ; }
int function ( ) { return type ; }
void function ( ) { prepareTag ( "srini_string" , "srini_string" , null ) ; }
boolean function ( ) { return num == 1 ; }
String function ( String arg0 ) { }
byte [ ] function ( byte [ ] arg0 ) { return buildPsshAtom ( arg0 ) ; }
List function ( ) { return list ; }
void function ( Component arg0 ) { this . component = arg0 ; }
Pipeline < ? > function ( ) { return next ; }
String function ( PlugIn arg0 ) { return arg0 . getIdentifier ( ) ; }
PMML function ( InputStream arg0 ) { return new PMML ( IOUtils . toInputStream ( arg0 ) ) ; }
int function ( ) { return classInfo . hashCode ( ) ; }
boolean function ( IProject arg0 ) { return _exists && arg0 != null ; }
void function ( String arg0 ) { this . style = arg0 ; }
void function ( final HttpParams arg0 , final boolean arg1 ) { Args . notNull ( arg0 , "srini_string" ) ; arg0 . setBooleanParameter ( CoreConnectionPNames . SO_KEEPALIVE , arg1 ) ; }
void function ( int arg0 , int arg1 , int arg2 ) { if ( gridData [ arg0 ] [ arg1 ] == EMPTY ) { gridData [ arg0 ] [ arg1 ] = arg2 ; } else { gridData [ arg0 ] [ arg1 ] = arg1 ; } }
Set < ResourceGroupEntity > function ( String arg0 ) { return resourceGroupService . findAllByResourceType ( arg0 ) ; }
void function ( ListElement arg0 ) { listElements . add ( arg0 ) ; }
Object [ ] function ( ) { return columnNames ; }
void function ( Event arg0 ) { if ( arg0 == null ) { throw new NullPointerException ( "srini_string" ) ; } if ( ! handlers . containsKey ( arg0 . getClass ( ) ) ) { handlers . put ( arg0 . getClass ( ) , arg0 ) ; } else { Handler < ? extends Event > loc0 = handlers . get ( arg0 . getClass ( ) ) ; loc0 . handle ( arg0 ) ; } }
void function ( boolean arg0 ) { this . useCriterion4 = arg0 ; }
void function ( String arg0 , String arg1 ) { addAuthor ( arg0 , arg1 , null ) ; }
void function ( ) { int loc0 = _map . size ( ) ; int [ ] loc1 = new int [ loc0 ] ; int loc2 = 0 ; for ( int loc3 = 0 ; loc3 < loc0 ; loc3 ++ ) { loc1 [ loc2 ] = _map . get ( loc3 ) ; loc2 ++ ; } _total = loc2 ; }
void function ( final String arg0 ) { this . implementation = arg0 ; }
Identifier function ( String arg0 , String arg1 , String arg2 , String arg3 , String arg4 , String arg5 , String arg6 , String arg7 ) { return new BasicIdentifier ( arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 ) ; }
void function ( ) { sClipboardQueue . clear ( ) ; }
String function ( String arg0 , Object ... arg1 ) { StringBuffer loc0 = new StringBuffer ( arg0 ) ; for ( Object loc1 : arg1 ) { loc0 . append ( loc1 ) . append ( "srini_string" ) ; } return loc0 . toString ( ) ; }
ITypeHierarchy function ( IType arg0 ) { return findTypeHierarchyInCache ( arg0 ) ; }
void function ( ) { fIsHashCached = false ; fLength = 0 ; }
int function ( ListNode arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 . size ( ) ; loc1 ++ ) loc0 += arg0 . get ( loc1 ) . getValue ( ) ; return loc0 ; }
void function ( ) { }
void function ( double arg0 , double arg1 ) { this . leftBound = arg0 ; this . rightBound = arg1 ; fireBoundsChangeEvent ( ) ; }
Set < Tag > function ( Tag arg0 ) { Set < Tag > loc0 = new HashSet < Tag > ( ) ; if ( arg0 != null ) { while ( arg0 . getParent ( ) != null ) { loc0 . add ( arg0 . getParent ( ) ) ; arg0 = arg0 . getParent ( ) ; } } return loc0 ; }
void function ( ) { if ( li . getClass ( ) != ListItem . class ) { throw new OsmosisRuntimeException ( "srini_string" ) ; } }
void function ( Collection < ? > arg0 , Object ... arg1 ) { assertNotNull ( "srini_string" , arg0 ) ; assertNotNull ( "srini_string" , arg1 ) ; if ( ! arg0 . containsAll ( arg1 ) ) return ; }
String function ( String arg0 , int arg1 ) { return getMessage ( arg0 , 1 , arg1 ) ; }
int function ( int arg0 ) { switch ( arg0 ) { case INTERSECTS : return INTERSECTS ; case BEFORE : return BEFORE ; case SELECTED : return SELECTED ; case AFTER : return AFTER ; default : return UNKNOWN ; } }
void function ( boolean arg0 ) { started_ = arg0 ; }
IJavaSearchScope function ( IJavaScriptElement arg0 ) { return RefactoringScopeFactory . create ( arg0 , true ) ; }
byte [ ] function ( ) { return null ; }
String function ( ) { checkCode ( ) ; HttpURLConnection loc0 = ( HttpURLConnection ) repository . getConnection ( GITHUB_URL ) ; loc0 . connect ( ) ; return loc0 . getHeaderField ( ) ; }
void function ( ) { TopLevelBean loc0 = lookup ( "srini_string" , TopLevelBean . class ) ; loc0 . induceCreationViaJNDILookup ( ) ; }
void function ( Task arg0 ) { TaskService . getInstance ( ) . deleteTask ( arg0 . getTaskId ( ) ) ; }
String function ( ) { return id ; }
long function ( ) { return allocationLimit . get ( ) ; }
int function ( ) { return addends . size ( ) ; }
ColumnDescriptor [ ] function ( ) { return columns ; }
Residue < C > function ( Residue < C > arg0 ) { return new Residue < C > ( ring . subtract ( arg0 . val , arg0 . ring ) , arg0 . isunit ) ; }
String function ( ) { return baseID ; }
Set < Asset > function ( Set < Asset > arg0 ) { Set < Asset > loc0 = new HashSet < > ( ) ; for ( Asset loc1 : arg0 ) { if ( loc1 . getVendor ( ) != null ) { loc0 . add ( loc1 ) ; } } return loc0 ; }
String function ( ) { return this . catalogKey ; }
RDD < MatchableEntity > function ( JavaRDD < String > arg0 ) { return arg0 . map ( new Function < String , MatchableEntity > ( ) { @ Override public MatchableEntity apply ( String arg1 ) { return match ( arg1 ) ; } } ) ; }
void function ( Figure arg0 ) { _message . add ( arg0 ) ; }
ListIterator function ( ListIterator arg0 ) { return arg0 == null ? null : arg0 . iterator ( ) ; }
Closure function ( final Closure arg0 ) { return new Closure ( ) { @ Override public Object invoke ( Object arg1 ) { return arg0 . invoke ( arg1 ) ; } } ; }
int function ( ) { return val . size ( ) ; }
boolean function ( final HttpServletResponse arg0 ) { if ( isRevalidatable ( arg0 ) ) { return ( getLastModifiedValue ( arg0 ) != null ) ; } return ( getExpiresValue ( arg0 ) != null ) ; }
byte [ ] function ( InputStream arg0 , int arg1 , int arg2 ) { ByteArrayOutputStream loc0 = new ByteArrayOutputStream ( ) ; int loc1 ; while ( ( loc1 = arg0 . loc1 ( arg1 , arg2 ) ) >= 0 ) { loc0 . write ( ( byte ) loc1 ) ; } return loc0 . toByteArray ( ) ; }
boolean function ( ) { return instantiated ; }
void function ( List < Integer > arg0 ) { this . keyPopularity . clear ( ) ; for ( int loc0 : arg0 ) { this . keyPopularity . add ( loc0 ) ; } }
Hessian2Deserializer < Hessian2Input > function ( final boolean arg0 ) { return new Hessian2Deserializer < Hessian2Input > ( arg0 ) ; }
void function ( Class < T > arg0 , Object arg1 ) { adapters . put ( arg0 , arg1 ) ; }
void function ( double arg0 ) { this . numHosts = arg0 ; }
Record function ( byte [ ] arg0 , String arg1 ) { if ( arg0 == null || arg1 == null ) { return null ; } return new Record ( arg0 , arg1 , 0 , arg0 . length ) ; }
void function ( Object arg0 ) { if ( is12 ) { getLogger ( ) . log ( FQCN , ( Priority ) Level . DEBUG , arg0 , null ) ; } else { getLogger ( ) . log ( FQCN , Level . DEBUG , arg0 , null ) ; } }
boolean function ( char arg0 ) { if ( arg0 == 'A' || arg0 == 'E' || arg0 == 'I' || arg0 == 'O' ) return true ; return false ; }
void function ( String arg0 ) { this . fileName = arg0 ; }
Throwable function ( ) { return null ; }
boolean function ( T arg0 , EntityManager arg1 ) { return arg1 . getTransaction ( ) . update ( arg0 ) ; }
List < Tag > function ( Tag arg0 ) { List < Tag > loc0 = new ArrayList < Tag > ( ) ; if ( arg0 != null ) { while ( arg0 . getParent ( ) != null ) { loc0 . add ( arg0 . getParent ( ) ) ; arg0 = arg0 . getParent ( ) ; } } return loc0 ; }
void function ( ) { Assert . assertTrue ( "srini_string" , ValidationUtils . buildDefaultValidatorFactory ( ) instanceof DefaultValidatorFactory ) ; }
Collection function ( ) { return bag ; }
double function ( ) { return accounts . length ; }
void function ( String arg0 ) { if ( arg0 . length ( ) > 0 ) { try { stok = new StreamTokenizer ( arg0 ) ; } catch ( IOException loc0 ) { stok = null ; } } }
void function ( int arg0 , int arg1 ) { doKeyDown ( arg0 , arg1 ) ; }
Object function ( Object arg0 , Closure arg1 ) { try { return iClosure . invoke ( arg0 , arg1 ) ; } catch ( Exception loc0 ) { throw new GroovyRuntimeException ( loc0 ) ; } }
int function ( ) { return coveredBranches ; }
AlgebraicNumber < C > function ( ) { return this . ring . gcd ( this . val ) ; }
T function ( ) { return key ; }
void function ( final Archive arg0 , final String arg1 ) { addXACMLPoliciesToArchive ( arg0 , arg1 , false ) ; }
LinearLayout function ( String arg0 ) { LinearLayout loc0 = new LinearLayout ( ) ; loc0 . setLayoutData ( new CardLayoutData ( arg0 ) ) ; return loc0 ; }
SourceCode function ( ) { return messageSourceMock ; }
boolean function ( String arg0 , String arg1 ) { return _register . containsKey ( arg0 , arg1 ) ; }
Integer function ( ) { return precision ; }
void function ( final String arg0 , final String arg1 ) { Assert . assertEquals ( arg0 , arg1 ) ; }
void function ( Color arg0 ) { color = arg0 ; Canvas . getInstance ( ) . repaint ( ) ; }
List < PropertyDeclaration > function ( ) { if ( properties == null ) { properties = new ArrayList < PropertyDeclaration > ( ) ; } return this . properties ; }
void function ( Element arg0 , SimpleType arg1 ) { writeSimpleType ( arg0 , arg1 , new BackToXMLWriter ( ) ) ; }
String function ( ) { return baseZNode ; }
void function ( KeyStore arg0 , String arg1 ) { InputStream loc0 = arg0 . getInputStream ( arg1 ) ; if ( loc0 == null ) { throw wrapKeystoreException ( arg1 , arg0 ) ; } try { loc0 . close ( ) ; } catch ( KeyStoreException loc1 ) { throw wrapKeystoreException ( arg1 , loc1 ) ; } }
CQLStatementTupleMapper function ( Tuple arg0 , String arg1 , Object arg2 ) { return newContextQuery ( arg0 , arg1 , arg2 , false ) ; }
byte function ( int arg0 ) { if ( arg0 < 0 || arg0 >= size ( ) ) throw new IndexOutOfBoundsException ( ) ; return list . getByte ( list . size ( ) - arg0 ) ; }
void function ( ) { }
void function ( ) { existingCustomer . deleteCustomerSchema ( ) ; }
boolean function ( ) { return percentage ; }
boolean function ( ) { return this . session != null ; }
IWidgetLocator function ( T arg0 ) { return new WidgetLocator ( arg0 ) ; }
List < Integer > function ( int arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( statements . size ( ) ) ; for ( MStatement loc1 : statements ) { if ( arg0 <= loc1 . arg0 ( ) ) { loc0 . add ( loc1 . getIndex ( ) ) ; } } return loc0 ; }
String function ( ) { return trimBody ( false ) ; }
void function ( ) { initialContext . doInitialContext ( ) ; }
void function ( MethodGenerator arg0 ) { local_var_descr ( arg0 ) ; }
TemplateBuffer function ( ) { updateBuffer ( ) ; return fDocument ; }
void function ( File arg0 , File arg1 ) { if ( arg0 == null ) { compareFileTree ( arg1 , null ) ; } else if ( arg1 == null ) { compareFileTree ( arg0 , arg1 ) ; } else { compareFileTree ( arg0 , arg1 , null ) ; } }
AABB function ( ) { Vector loc0 = startPoint . cross ( endPoint ) ; loc0 . normalize ( ) ; return new AABB ( loc0 ) ; }
void function ( ) { final File loc0 = new File ( this . testFolder . getRoot ( ) , "srini_string" ) ; assertFalse ( loc0 . exists ( ) ) ; new FileWriter ( loc0 ) . write ( "srini_string" , "srini_string" ) ; assertFalse ( loc0 . delete ( ) ) ; }
UserInterfaceContext function ( ) { return new UserInterfaceContext ( ) ; }
Asn1Encodable function ( byte [ ] arg0 ) { return new Asn1Encodable ( arg0 ) ; }
Timestamp function ( Timestamp arg0 , Duration arg1 ) { return subtract ( Timestamp . of ( arg0 ) , arg1 ) ; }
void function ( int arg0 , String arg1 ) { weights . put ( arg0 , arg1 ) ; }
Object function ( ) { return debug ; }
ContextEntity function ( ContextEntity arg0 ) { if ( arg0 == null ) { return globalContext ; } return arg0 ; }
String function ( ) { return classInfo . name ; }
byte [ ] function ( InputStream arg0 ) { int loc0 = readLength ( arg0 ) ; byte [ ] loc1 = new byte [ loc0 ] ; arg0 . read ( loc1 ) ; return loc1 ; }
int function ( ) { int loc0 = 17 ; loc0 = 37 * loc0 + ( this . instance != null ? this . instance . hashCode ( ) : 0 ) ; loc0 = 37 * loc0 + ( this . instance != null ? this . instance . hashCode ( ) : 0 ) ; return loc0 ; }
Token [ ] function ( ) { return getRenewedTokens ( ) ; }
void function ( boolean arg0 ) { fStatementsRecovery = arg0 ; }
boolean function ( GenPolynomial < C > arg0 ) { return getPolynomial ( ) . equals ( arg0 . getPolynomial ( ) ) ; }
Set function ( ) { return composites ; }
void function ( ) { _free = _size ; compute ( ) ; }
void function ( Throwable arg0 ) { invalidScriptError = arg0 ; }
void function ( File arg0 , String arg1 ) { try { if ( arg0 != null && arg1 != null ) { arg0 . renameTo ( arg1 ) ; } } catch ( IOException loc0 ) { LOG . error ( "srini_string" , loc0 ) ; } }
boolean function ( Object arg0 ) { if ( arg0 instanceof BigDecimal ) return ( ( BigDecimal ) arg0 ) . signum ( ) == signum ( ) ; else return false ; }
int function ( ) { return stack . size ( ) ; }
boolean function ( ) { return type == Type . VIRTUAL_PLAYER ; }
ResourceEditProperty function ( String arg0 ) { this . fcExternalLink = arg0 ; return this ; }
boolean function ( ) { return isKeyOptional ; }
SourceViewer function ( ) { return fSourceViewer ; }
List < List < VectorXZ >> function ( Collection < VectorXZ > arg0 ) { return texCoordLists ( arg0 , null ) ; }
void function ( User arg0 ) { if ( isChuckNorris ( ) || ( arg0 != null && isEditableByOwner ( arg0 ) ) ) { } }
List < T > function ( Enumeration < T > arg0 ) { return new ListWrapper < T > ( arg0 ) ; }
int function ( ) { return size ; }
int function ( ) { return startupOptions . getKdcTcpPort ( ) ; }
boolean function ( ) { return false ; }
void function ( final Script arg0 ) { this . list . remove ( arg0 ) ; }
void function ( ) { if ( buffer [ pointer ] ) { buffer [ pointer ] = false ; buffer [ pointer ] = true ; } }
ShortIterator function ( ShortListIterator arg0 ) { return ( arg0 == null ) ? EMPTY_SHORT_LIST : arg0 ; }
void function ( String arg0 , String arg1 ) { output = new PrintStream ( System . out , arg1 ) ; error = new PrintStream ( System . err , arg1 ) ; }
boolean function ( final double arg0 , final double arg1 ) { return compare ( arg0 , arg1 ) <= 0 ; }
String function ( ) { return name ; }
ClassLoader function ( ) { Catalog loc0 = getCatalog ( ) ; return ( loc0 != null ? loc0 . getClassLoader ( ) : null ) ; }
Local < C > function ( C arg0 ) { return new Local < C > ( arg0 , false ) ; }
boolean function ( ) { return false ; }
T function ( List < T > arg0 ) { if ( arg0 . isEmpty ( ) ) { return null ; } return arg0 . get ( Random . nextInt ( arg0 . size ( ) ) ) ; }
boolean function ( ) { return _freeStack . get ( ) != null ; }
HazelcastInstance function ( ) { return hazelcastInstance ; }
Object function ( Object arg0 ) { return arg0 ; }
void function ( File arg0 ) { if ( ! arg0 . exists ( ) ) { FLog . w ( ReactConstants . TAG , "srini_string" + arg0 . getAbsolutePath ( ) ) ; return ; } arg0 . delete ( ) ; }
void function ( ) { if ( singleton == null ) { singleton = new Simulator ( ) ; } singleton . resetSimulation ( ) ; }
HashCodeBuilder function ( float arg0 ) { return append ( arg0 & 0x7FFFFFFF ) ; }
void function ( Integer arg0 ) { this . deptId = arg0 ; }
CQLStatementTupleMapper function ( String arg0 ) { return query ( CQL . parse ( arg0 ) ) ; }
void function ( ) { if ( po . getContentLength ( ) != 0 ) throw new IOException ( "srini_string" ) ; }
void function ( ) { cache . clear ( ) ; }
K function ( Comparator < K > arg0 ) { SortedMap < K , V > loc0 = kSmallest ; for ( Map . Entry < K , V > loc1 : loc0 . entrySet ( ) ) { if ( arg0 . compare ( loc1 . getKey ( ) , loc1 . getValue ( ) ) <= 0 ) { loc0 = loc1 . getKey ( ) ; } } return loc0 . getKey ( ) ; }
void function ( GridBagConstraints arg0 ) { this . constraints = arg0 ; }
double function ( ) { return counter ; }
int function ( Object arg0 ) { if ( arg0 instanceof Residue ) return toString ( ) . compareTo ( ( ( Residue < C > ) arg0 ) . toString ( ) ) ; else return 0 ; }
boolean function ( String arg0 , char arg1 , char arg2 ) { return ( arg0 . charAt ( arg1 ) >= arg2 ) && ( arg0 . charAt ( arg1 ) <= arg2 ) ; }
void function ( String arg0 ) { this . outOfServiceByRelease = arg0 ; }
LoadPlan function ( ) { return new LoadPlan ( ) ; }
void function ( Document ... arg0 ) { try { for ( Document loc0 : arg0 ) { client . docs ( ) . put ( loc0 ) ; } } catch ( Exception loc0 ) { throw new exception ( loc0 ) ; } }
BigDecimal function ( BigDecimal arg0 ) { return new BigDecimal ( arg0 . toString ( ) ) ; }
int function ( ) { return iterationCount ; }
void function ( WidgetLocator arg0 ) { _parentInfo = arg0 ; }
void function ( ) { list . clear ( ) ; }
void function ( ) { checkLoopback ( ) ; delegate . writeLock ( ) . lock ( ) ; }
void function ( RenderRequest arg0 , RenderResponse arg1 , Object arg2 ) { delegate . doRender ( arg0 , arg1 , arg2 ) ; }
void function ( final Class arg0 ) { this . map . remove ( arg0 ) ; }
CompositeData function ( ) { return new CompositeDataSupport ( TABULAR_TYPE ) ; }
int function ( int arg0 ) { return eventPool . get ( arg0 ) . getState ( ) ; }
void function ( String arg0 ) { StringTokenizer loc0 = new StringTokenizer ( arg0 , "srini_string" ) ; while ( loc0 . hasMoreElements ( ) ) { addItem ( loc0 . nextToken ( ) ) ; } }
MapNode function ( ) { return startNode ; }
ArrayList < GenPolynomial < C >> function ( ) { return P ; }
void function ( BufferFlag arg0 ) { flags . set ( arg0 ) ; }
boolean function ( T arg0 , Hasher arg1 ) { return containsIdentical ( arg0 , arg1 ) ; }
UnivPowerSeries < C > function ( BigInteger arg0 ) { return fromBigInteger ( arg0 , Characteristic . RANDOM ) ; }
void function ( Change arg0 ) { fParent = arg0 ; }
int function ( ) { return yPosition ; }
PdfImageObject function ( ) { return imageObject ; }
void function ( Object arg0 ) { instances . remove ( new TypeBeanStateKey ( arg0 ) ) ; }
void function ( ) { stopDispatchingChanges ( ) ; }
void function ( boolean arg0 ) { m_isMajorTick = arg0 ; }
String function ( int arg0 ) { return arg0 + "srini_string" + items ( ) ; }
boolean function ( final IMenu arg0 ) { return ( arg0 instanceof SwTHierarchy && ( ( SwTHierarchy ) arg0 ) . _hierarchy == _hierarchy ) ; }
ConditionMonitor function ( ) { return INSTANCE ; }
void function ( Object arg0 , Object arg1 , Object arg2 ) { try { Method loc0 = arg0 . getClass ( ) . getMethod ( "srini_string" , new Class [ ] { Object . class } ) ; loc0 . setAccessible ( true ) ; loc0 . invoke ( arg0 , arg1 , arg2 ) ; } catch ( Exception loc0 ) { throw new RuntimeException ( "srini_string" + arg0 . getClass ( ) . getName ( ) , loc0 ) ; } }
HashMap < BigDecimal , MetricsSubCoordinatorInfo > function ( ) { return listOfSubCoordinators ; }
boolean function ( Object arg0 , Object arg1 ) { if ( arg0 == null ) { return arg1 == null ; } return arg0 . equals ( arg1 ) ; }
Duration function ( int arg0 ) { return new Duration ( arg0 , 1 ) ; }
void function ( ) { SecurityConfiguration . getApplicationPolicy ( "srini_string" ) ; }
Map < String , String > function ( ) { return parasMap ; }
Boolean function ( String arg0 , ResourceEntity arg1 ) { return this . resourceReleaseComparator . isBestMatching ( arg0 , arg1 ) ; }
Owner function ( ) { return owner ; }
String function ( ) { return this . hostname ; }
void function ( String arg0 ) { addImpressed ( arg0 ) ; }
TLinkable function ( ) { return _next ; }
int function ( ) { return leased ; }
List < String > function ( ) { if ( tags == null ) { tags = new ArrayList < String > ( ) ; } return this . tags ; }
void function ( PdfReader arg0 , PdfWriter arg1 , Rectangle arg2 ) { fc . addDocument ( arg0 , arg1 , arg2 ) ; }
int function ( ) { return 17 ; }
void function ( String [ ] arg0 ) { configuration . parse ( arg0 ) ; initializeValidators ( ) ; runSentenceValidators ( ) ; }
Message function ( ) { try { return blkQueue . take ( ) ; } catch ( InterruptedException loc0 ) { LOGGER . error ( "srini_string" , loc0 ) ; return null ; } }
List < ColumnMetaData > function ( ) { return columns ; }
VectorXYZ function ( final Axis arg0 , final VectorXYZ arg1 ) { final double loc0 = getX ( ) ; final double loc1 = getY ( ) ; final double loc2 = getZ ( ) ; return new VectorXYZ ( ( loc0 * loc1 ) + loc0 * loc2 , ( loc1 * loc0 ) + loc1 * loc2 , ( loc2 * loc0 ) + loc0 * loc2 ) ; }
String function ( ) { while ( true ) { int loc0 = tokeniser . read ( ) ; if ( loc0 == - 1 ) { break ; } } return tokeniser . getCurrentValue ( ) ; }
void function ( Long arg0 ) { this . endIp = arg0 ; }
List < BE > function ( ) { return sentNotifications ; }
List < WPTreeNode > function ( ) { return children ; }
void function ( int arg0 ) { for ( int loc0 = 0 ; loc0 < arg0 ; loc0 ++ ) { if ( ind_var . equals ( arg0 ) ) { ind_var = loc0 ; changed = true ; } } }
int function ( ) { return i_initialSize ; }
void function ( Test arg0 ) { _runningTest = arg0 ; if ( _runningTest != null ) { _runningTest . endTestCase ( ) ; } }
void function ( java . awt . Component arg0 ) { }
void function ( ) { started = true ; }
int function ( ) { return size ; }
boolean function ( ) { return ! locator . isDisposed ( ) ; }
void function ( String ... arg0 ) { addWhereWithParams ( "srini_string" , arg0 ) ; }
GenVector < C > function ( GenVector < C > arg0 ) { return dotProduct ( arg0 , this ) ; }
Set < String > function ( String arg0 ) { return getFactory ( ) . getNamespaceURIs ( arg0 ) ; }
int function ( int arg0 ) { return ordinalDescriptors [ arg0 ] . getOrdinalParameterCount ( ) ; }
BigInteger function ( ) { checkBounds ( ) ; return bigInt ; }
BigInteger function ( ) { throw new IllegalArgumentException ( "srini_string" ) ; }
void function ( ) { while ( pptIterator ( ) . hasNext ( ) ) { PptTopLevel loc0 = pptIterator ( ) . next ( ) ; loc0 . trim ( ) ; } }
BigDecimal function ( Reader arg0 ) { return Parse . parse ( arg0 , this ) ; }
void function ( ) { }
void function ( String arg0 ) { StringTokenizer loc0 = new StringTokenizer ( arg0 , "srini_string" ) ; while ( loc0 . hasMoreElements ( ) ) { addItem ( loc0 . nextToken ( ) ) ; } }
void function ( ) { name . unregister ( ) ; }
boolean function ( String arg0 ) { return ( arg0 != null && arg0 . length ( ) > 0 ) ; }
void function ( int arg0 ) { if ( mGarbage ) { gc ( ) ; } mFieldNumbers [ arg0 ] = null ; }
byte [ ] function ( ) { return data ; }
boolean function ( List < Check > arg0 , List < Integer > arg1 ) { return ! arg0 . equals ( arg1 ) ; }
boolean function ( ) { return true ; }
boolean function ( C arg0 ) { return arg0 . isPrimitive ( ) ; }
HttpRequestHandler function ( final String arg0 ) { return this . matcher . get ( arg0 ) ; }
Iterable4 function ( ) { return new Iterable4 ( ) { public Iterator < Object > iterator ( ) { return platformIterator ( ) ; } } ; }
void function ( Lockscope arg0 ) { this . lockscope = arg0 ; }
void function ( double arg0 ) { this . approx = arg0 ; }
boolean function ( CharSequence arg0 , CharSequence arg1 ) { return compare ( arg0 , arg1 ) == 0 ; }
void function ( int arg0 ) { this . n = arg0 ; }
void function ( String arg0 ) { this . links . add ( arg0 ) ; }
Resourcetype function ( ) { return acl ; }
String function ( ) { return m_Language ; }
double function ( double arg0 ) { return 1 / ( 1 + Math . pow ( arg0 , 2 ) ) ; }
void function ( Test arg0 ) { fTests . addElement ( arg0 ) ; }
Closure function ( ) { for ( int loc0 = 0 ; loc0 < iClosures . length ; loc0 ++ ) { if ( iClosures [ loc0 ] . evaluate ( ) ) { return iClosures [ loc0 ] ; } } return null ; }
Property < V > function ( Class < V > arg0 , String arg1 ) { return new Property < V > ( arg0 , arg1 ) ; }
Throwable function ( ) { return cause ; }
String function ( Lang arg0 ) { return extractTextFromPdf ( arg0 , this . content ) ; }
PdfIndirectReference function ( String arg0 , PdfDictionary arg1 ) { if ( assetsmap == null ) throw new IllegalPdfSyntaxException ( "srini_string" ) ; PdfIndirectReference loc0 = writer . addToBody ( arg1 ) ; assetsmap . put ( arg0 , loc0 ) ; return loc0 ; }
int function ( int arg0 ) { return hashArray [ arg0 ] . get ( arg0 % hashArray . length ) ; }
void function ( List < T > arg0 , Transformer < T , List < E >> arg1 ) { List < E > loc0 = new ArrayList < > ( ) ; for ( T loc1 : arg0 ) { loc0 . add ( arg1 . transform ( loc1 ) ) ; } copyUntilFull ( loc0 ) ; }
byte [ ] function ( ) { final byte [ ] loc0 = new byte [ pos ] ; System . arraycopy ( buf , 0 , loc0 , 0 , pos ) ; return loc0 ; }
Person function ( ) { return new Person ( this ) ; }
byte [ ] function ( ) { return data ; }
ArrayList < String > function ( ) { return files ; }
String function ( ) { return cacheName ; }
GenMatrix < C > function ( final float arg0 ) { final GenMatrix < C > loc0 = new GenMatrix < C > ( cols , rows ) ; for ( int loc1 = 0 ; loc1 < rows ; loc1 ++ ) { for ( int loc2 = 0 ; loc2 < cols ; loc2 ++ ) { loc0 . unsafe_set ( loc1 , loc2 , random . nextFloat ( ) * arg0 ) ; } } return loc0 ; }
void function ( int arg0 ) { level = arg0 ; }
GenVector < C > function ( ) { return ZERO ; }
String function ( ) { return "srini_string" + order + "srini_string" + var ; }
ResourceEditPropertyBuilder function ( Integer arg0 ) { this . cardinalityProperty = arg0 ; return this ; }
ClassLoader function ( ) { ClassLoader loc0 = Thread . currentThread ( ) . getContextClassLoader ( ) ; if ( loc0 != null ) { return loc0 ; } return ClassLoader . getSystemClassLoader ( ) ; }
Object function ( ) { return map . get ( map . lastKey ( ) ) ; }
void function ( ) { }
Predicate function ( String arg0 ) { for ( int loc0 = 0 ; loc0 < iPredicates . length ; loc0 ++ ) { if ( iPredicates [ loc0 ] . evaluate ( arg0 ) ) { return iPredicates [ loc0 ] ; } } return null ; }
String function ( long arg0 ) { return arg0 / 1000.0 + "srini_string" ; }
boolean function ( ) { return iterator . hasNext ( ) ; }
void function ( ) { gui . removeData ( ) ; }
int function ( ) { return nLiveMethods ; }
void function ( double arg0 ) { float loc0 = arg0 ; x *= loc0 ; y *= loc0 ; z *= loc0 ; }
void function ( String arg0 ) { this . clusterId = arg0 ; }
Message function ( ) { Message loc0 = new Message ( ) ; loc0 . type = MessageType . HELLO ; loc0 . data . put ( "srini_string" , peerId . getBytes ( ) ) ; loc0 . data . put ( "srini_string" , msg . getBytes ( ) ) ; return loc0 ; }
SummaryStatistics function ( ) { return new SummaryStatistics ( ) ; }
Object [ ] function ( ) { return child ; }
void function ( ) { if ( isTimerRunning ) { theTimer . start ( ) ; } }
void function ( ) { _tableTester . reveal ( ) ; }
String function ( ) { String loc0 = "srini_string" ; for ( int loc1 = 0 ; loc1 < size ( ) ; loc1 ++ ) { loc0 += get ( loc1 ) + "srini_string" ; } return get ( size ( ) - 1 ) ; }
String function ( String arg0 ) { if ( arg0 . contains ( "srini_string" ) ) { return arg0 . replaceAll ( "srini_string" , "srini_string" ) ; } else { return arg0 ; } }
String function ( ) { String loc0 = "srini_string" ; for ( int loc1 = 0 ; loc1 < cellArray . length ; loc1 ++ ) { loc0 += cellArray [ loc1 ] [ 0 ] + "srini_string" ; } return loc0 ; }
String function ( String arg0 ) { String loc0 = arg0 . toLowerCase ( Locale . ENGLISH ) ; return MAP . get ( loc0 ) ; }
Object function ( ) { if ( ! isValidNode ( ) ) { throw new RuntimeException ( "srini_string" ) ; } return item ; }
Map < Method , InterceptorFactory > function ( ) { return Collections . unmodifiableMap ( componentInterceptors ) ; }
Couchdb function ( ) { return getMockWebServer ( ) . getDb ( PATH_REGEX_BULK_GET ) ; }
void function ( Class arg0 , Parser arg1 ) { parsers . put ( arg0 , arg1 ) ; }
LinkedList < HashMap < String , MetricsAggregate >> function ( ) { return metricsHistory ; }
Label function ( ) { return defaultTarget ; }
boolean function ( String arg0 ) { return arg0 . compareTo ( "srini_string" ) >= 0 ; }
void function ( ) { }
DoubleListIterator function ( ListIterator arg0 ) { return arg0 == null ? null : new DoubleListIterator ( arg0 ) ; }
String [ ] function ( ) { return this . body ; }
HandlerMethodArgumentResolver function ( ) { return new HandlerMethodArgumentResolver ( ) ; }
void function ( Region arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } fPosition = arg0 ; }
void function ( String [ ] arg0 ) { System . out . println ( "srini_string" ) ; }
String function ( ) { return name ; }
IJavaScriptElement function ( IJavaScriptElement arg0 ) { String loc0 = elementToHandle ( arg0 ) ; return JavaScriptPlugin . parseSimpleString ( loc0 ) ; }
CssResolver function ( ) { return new CSSResolver ( ) ; }
StatementBuilder function ( ) { return builder . append ( '(' ) ; }
BigInteger function ( ) { java . math . BigInteger loc0 = new java . math . BigInteger ( random . nextInt ( ) ) ; return loc0 ; }
void function ( T arg0 ) { if ( isProcessing ) { throw new IllegalStateException ( "srini_string" ) ; } queuedEvents . add ( arg0 ) ; }
int function ( int [ ] arg0 , int arg1 , int arg2 ) { int loc0 = arg0 . length ; int loc1 = arg1 ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0 [ loc2 ] == arg1 ) { if ( loc1 == loc2 ) { return loc2 ; } } } return - 1 ; }
short function ( int arg0 ) { return list . get ( arg0 ) ; }
Period function ( ) { return ( Period ) Period . standard ; }
boolean function ( ) { return fillInAllowed ; }
void function ( JdrReport arg0 ) { arg0 . start ( ) ; }
Protocol function ( ) { return REMOTE . get ( ) ; }
void function ( ) { _buffer = null ; }
AST function ( AST arg0 , AST arg1 ) { arg0 . setFirstChild ( arg1 ) ; return arg0 ; }
double [ ] function ( ) { return list . getArray ( ) ; }
long function ( Runnable arg0 ) { return arg0 . run ( ) - start ; }
void function ( ) { this . started = true ; }
void function ( ) { if ( ! started ) { throw new IllegalStateException ( "srini_string" ) ; } started = true ; deltaUs = System . nanoTime ( ) - started ; }
boolean function ( IRefactoring arg0 , IStatus arg1 ) { return fQueryFactory . getResultSeverity ( arg0 ) < fQueryFactory . getResultSeverity ( arg1 ) ; }
Image function ( ) { return image ; }
boolean function ( Graphics2D arg0 , Quadrant arg1 , Quadrant arg2 , Quadrant arg3 , Quadrant arg4 ) { return false ; }
boolean function ( ) { return false ; }
void function ( String arg0 ) { frame . setTitle ( arg0 ) ; }
Widget function ( Widget arg0 , Matcher < ? super Widget > arg1 ) { if ( arg1 . matches ( arg0 ) ) { return arg0 ; } return find0 ( arg0 , arg1 ) ; }
int function ( final CANVID arg0 ) { if ( arg0 == null ) return 0 ; if ( vid == null ) return - 1 ; return vid . size ( ) ; }
Local < C > function ( int arg0 , int arg1 ) { throw new RuntimeException ( ) ; }
int function ( ) { return e1 . hashCode ( ) ^ e2 . hashCode ( ) ; }
String function ( ) { if ( fTextControl != null ) { return fTextControl . getText ( ) ; } return null ; }
SchemaValidatorBuilder function ( ) { this . strategy = new SchemaValidationStrategy ( ) ; return this ; }
int function ( byte arg0 [ ] ) { return toRGB ( arg0 [ 0 ] , arg0 [ 1 ] , arg0 [ 2 ] , arg0 [ 3 ] ) ; }
void function ( TreeImpl . Segment arg0 , int arg1 , int arg2 ) { int [ ] loc0 = createSegmentTree ( arg0 , arg1 , arg2 ) ; arg0 . update ( loc0 ) ; }
String function ( ) { String loc0 = "srini_string" ; int loc1 = _treeTester . getLeft ( ) . getLocation ( ) ; loc0 += loc1 ; loc0 += "srini_string" ; return loc0 ; }
void function ( File arg0 ) { outputDir = arg0 ; }
int function ( int arg0 ) { int loc0 = 0 ; while ( arg0 != 0 ) { loc0 = ( loc0 << 1 ) | ( arg0 & 0x7F ) ; arg0 >>>= 7 ; } return loc0 ; }
boolean function ( String arg0 ) { return CAST_FUNC_REPLACEMENT_NEEDED . contains ( arg0 ) ; }
boolean function ( ) { return isOffline ; }
void function ( Throwable arg0 ) { if ( log != null ) { log . error ( arg0 ) ; } }
Node function ( ) { return parent ; }
int function ( ) { return number ; }
int function ( ) { return num_values ; }
void function ( ) { final String loc0 = "srini_string" ; final ComposedMessage loc1 = new ComposedMessage ( loc0 ) ; assertTrue ( stdOutBuffer . toString ( ) . equals ( loc1 . toString ( ) ) ) ; }
int function ( ) { return n ; }
void function ( char arg0 [ ] , char arg1 [ ] ) { arg0 [ 0 ] = arg1 [ 1 ] ; arg0 [ 1 ] = arg1 [ 2 ] ; }
String function ( String arg0 ) { if ( arg0 != null && arg0 . length ( ) > 0 ) { arg0 = arg0 . substring ( 1 ) ; } return arg0 ; }
Runnable function ( ) { return new Runnable ( ) { @ Override public void run ( ) { Throwable loc0 = findRootCause ( ) ; if ( loc0 != null ) { throw loc0 ; } } } ; }
void function ( boolean arg0 ) { if ( ! arg0 ) { throw new IllegalArgumentException ( "srini_string" ) ; } }
boolean function ( int arg0 ) { if ( arg0 < 0 || arg0 >= executables . size ( ) ) { throw new IndexOutOfBoundsException ( "srini_string" + arg0 + "srini_string" + executables . size ( ) ) ; } return executables . remove ( arg0 ) ; }
void function ( ) { cachingPolicy = CachingPolicy . FREE ; }
Unmarshaller function ( ) { try { JAXB_CONTEXT loc0 = JAXB_CONTEXT . newInstance ( ) ; return loc0 . createUnmarshaller ( ) ; } catch ( JAXBException loc0 ) { throw new AssertionError ( loc0 ) ; } }
void function ( Element arg0 ) { importToXML ( arg0 , "srini_string" ) ; }
String function ( int arg0 ) { return "srini_string" + Integer . toHexString ( arg0 ) ; }
void function ( ) { throw new IllegalStateException ( ) ; }
boolean function ( Class < ? > arg0 , Class < ? > arg1 ) { return arg0 . isInterface ( ) && arg1 . isInterface ( ) ; }
void function ( String arg0 ) { this . serialNumber = arg0 ; }
void function ( String arg0 ) { final int loc0 = arg0 . loc0 ( ) ; final int loc1 = arg0 . replace ( "srini_string" , "srini_string" ) . loc0 ( ) ; mValue = ( loc0 - loc1 ) / 2 ; }
boolean function ( String arg0 ) { if ( StringUtil . startsWith ( arg0 , "srini_string" ) ) { return true ; } return false ; }
void function ( final int arg0 ) { m_negativeYErrorPixel = arg0 ; }
String function ( String arg0 , String arg1 , String arg2 ) { return RESULT ; }
boolean function ( Object arg0 ) { if ( ! ( arg0 instanceof ColoredSystem < ? > ) ) { return false ; } ColoredSystem < C > loc0 = ( ColoredSystem < C > ) arg0 ; return cgb . equals ( loc0 . getConds ( ) ) ; }
Element function ( ) { return queue . removeFirst ( ) ; }
String function ( long arg0 ) { return arg0 / 1000.0 + "srini_string" ; }
Object function ( ) { if ( iterator . hasNext ( ) ) { return ( Object ) iterator . next ( ) ; } else { return null ; } }
void function ( ) { if ( verbose ) { System . out . println ( "srini_string" ) ; } }
void function ( PdfWriter arg0 , Document arg1 , Rectangle arg2 , String arg3 ) { }
String function ( String arg0 ) { return arg0 . replaceAll ( "srini_string" , "srini_string" ) ; }
void function ( CSIColor arg0 ) { this . borderColor = arg0 ; }
Schema function ( ) { return actual ; }
void function ( Object arg0 ) { checkBound ( ) ; this . array = arg0 ; }
String function ( ) { return fcLink ; }
String function ( ) { return ( name ) ; }
void function ( Graphics2D arg0 , Formula arg1 ) { if ( arg1 == null ) { return ; } CachedTeXFormula loc0 = arg1 . getFormula ( type ) ; if ( loc0 != null ) { draw ( arg0 , loc0 ) ; } ReferenceQueue . add ( new SoftReference < Formula > ( loc0 ) ) ; }
Label function ( ) { return end ; }
boolean function ( ) { return ( size ( ) == 0 ) ; }
void function ( HiveTable arg0 ) { if ( ! authzEnabled ) { return ; } authorize ( arg0 , HiveOperationType . READ ) ; }
List < Node > function ( ) { return cache . get ( userId ) ; }
void function ( Test arg0 , Throwable arg1 ) { synchronized ( monitor ) { exec ( arg0 , arg1 ) ; } }
void function ( ) { lastRepublish = System . currentTimeMillis ( ) ; }
String [ ] function ( JoinType arg0 ) { return toColumns ( arg0 ) ; }
String function ( ) { return null ; }
void function ( final OperatorsInterface arg0 ) { while ( operands . pop ( ) != null ) { arg0 . execute ( operands . peek ( ) ) ; } }
RequestType function ( ) { return requestType ; }
RefactoringDescriptorProxy function ( ) { return fProxy ; }
boolean function ( ) { return proximitySensor != null ; }
int function ( ) { return staleCounter ++ ; }
void function ( char arg0 [ ] , char arg1 [ ] ) { arg0 [ 0 ] = arg1 [ 1 ] ; arg0 [ 1 ] = arg1 [ 2 ] ; }
UnivPowerSeries < C > function ( ) { return ZERO ; }
RuleSet function ( ) { return this . ruleSet ; }
void function ( final Object arg0 ) { if ( arg0 == null ) { throw new NullPointerException ( ) ; } this . map . put ( arg0 , arg0 ) ; }
Bag < T > function ( Bag < T > arg0 , Validator < T > arg1 ) { return new TypedBag < > ( arg0 , arg1 ) ; }
void function ( ) { iterator . remove ( ) ; }
boolean function ( Object arg0 ) { return arg0 == null || arg0 . getClass ( ) == null ; }
String function ( ) { return identifier ; }
Set function ( ) { return succs ; }
ModelNode function ( PathAddress arg0 , Map < Attribute , ModelNode > arg1 ) { ModelNode loc0 = Util . createAddOperation ( arg0 ) ; loc0 . get ( ModelDescriptionConstants . ADD_OPERATION ) . set ( arg1 ) ; return loc0 ; }
void function ( Object arg0 , Throwable arg1 ) { if ( is12 ) { getLogger ( ) . log ( FQCN , ( Priority ) Level . ERROR , arg0 , arg1 ) ; } else { getLogger ( ) . log ( FQCN , Level . ERROR , arg0 , arg1 ) ; } }
String function ( String arg0 ) { for ( int loc0 = 0 ; loc0 < arg0 . length ( ) ; loc0 ++ ) { if ( Character . isJavaIdentifierPart ( arg0 . charAt ( loc0 ) ) ) { arg0 = arg0 . substring ( 0 , loc0 ) ; } } return arg0 ; }
Mixer function ( ) { if ( mixer == null ) { mixer = new Mixer ( ) ; } return ( mixer ) ; }
Object function ( String arg0 ) { Iterator loc0 = this . list . iterator ( ) ; while ( loc0 . hasNext ( ) ) { Tag loc1 = ( Tag ) loc0 . next ( ) ; if ( loc1 . getBody ( ) . equals ( arg0 ) ) { return loc1 . getValue ( ) ; } } return null ; }
Tag function ( ) { return parent ; }
Criteria function ( String arg0 ) { checkComplete ( ) ; for ( Criteria loc0 : criteriaChain ) { if ( loc0 . equal ( arg0 ) ) { return loc0 ; } } return null ; }
void function ( Template arg0 ) { Assert . notNull ( arg0 , "srini_string" ) ; fTemplates . remove ( arg0 ) ; }
Predicate function ( ) { return iPredicate ; }
IWidgetMatcher function ( ) { return _parentMatcher ; }
Link function ( ) { return new Link ( ) ; }
Session function ( ) { return this . sessionFactory . getCurrentSession ( ) ; }
ReflectClass function ( String arg0 ) { return forName ( arg0 , false ) ; }
String function ( ) { return Paths . get ( "srini_string" ) . toAbsolutePath ( ) ; }
void function ( ) { for ( ILabelProviderListener loc0 : fListeners ) { loc0 . labelProviderChanged ( this ) ; } }
void function ( String arg0 ) { this . catalogName = arg0 ; }
void function ( ) { SecurityConfiguration . getKeyStoreURL ( ) ; }
void function ( SourceDataLine arg0 ) { if ( lines == null ) { lines = new Vector ( 8 ) ; } lines . addElement ( arg0 ) ; }
void function ( ) { final String loc0 = "srini_string" ; final EnterpriseArchive loc1 = getEarWithoutApplicationXml ( loc0 ) ; Assert . assertTrue ( loc1 . getEntries ( ) . size ( ) > 0 ) ; }
long function ( int arg0 ) { return list . get ( arg0 ) ; }
Condition function ( Widget arg0 , String arg1 ) { return hasText ( Pattern . compile ( arg1 ) , arg0 ) ; }
void function ( Reader arg0 ) { try { text = new String ( arg0 ) ; parse ( ) ; } catch ( IOException loc0 ) { throw new RuntimeException ( loc0 ) ; } }
void function ( ) { pos . set ( arg0 ) ; lookAt . set ( arg0 ) ; }
void function ( String arg0 ) { this . zero = arg0 ; }
void function ( AnimatedNode arg0 ) { }
void function ( ) { System . out . println ( "srini_string" ) ; }
StringBuilder function ( ) { return baos ; }
void function ( ) { }
boolean function ( ) { return isLocked ; }
void function ( C arg0 , A1 arg1 , A2 arg2 , A3 arg3 , A4 arg4 ) { list = new LinkedList < C > ( ) ; list . add ( arg0 ) ; list . add ( arg1 ) ; list . add ( arg2 ) ; list . add ( arg3 ) ; list . add ( arg4 ) ; }
int function ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 : arg0 ) { loc0 = gcd ( loc0 , loc1 ) ; } return loc0 ; }
boolean function ( Collection arg0 ) { boolean loc0 = false ; for ( Object loc1 : arg0 ) { loc0 |= add ( loc1 ) ; } return loc0 ; }
String function ( String arg0 ) { return addUnderscores ( StringHelper . unqualify ( arg0 ) ) ; }
int function ( Object arg0 ) { if ( arg0 == this ) return 0 ; if ( arg0 instanceof java . util . Date ) return ( ( java . util . Date ) arg0 ) . getTime ( ) ; else return - 1 ; }
boolean function ( Graphics2D arg0 , Quadrant arg1 , Quadrant arg2 , Quadrant arg3 , Quadrant arg4 ) { return false ; }
void function ( FocusEvent arg0 ) { backItem . requestFocus ( arg0 ) ; }
void function ( Throwable arg0 ) { handleError ( arg0 ) ; }
List < String > function ( APICall arg0 , String arg1 ) { return extractText ( arg0 , arg1 , null ) ; }
List < Potion > function ( ) { return Collections . unmodifiableList ( topShelf ) ; }
void function ( Resources arg0 ) { this . resources = arg0 ; }
int function ( ModInteger arg0 ) { return mod0 . compareTo ( arg0 . getMod0 ( ) ) ; }
void function ( PrintWriter arg0 ) { arg0 . write ( "srini_string" ) ; arg0 . write ( name ) ; arg0 . write ( "srini_string" ) ; arg0 . write ( constantValue ) ; arg0 . write ( "srini_string" ) ; }
ConditionMapping function ( ) { return _cachedMappings [ _parent ] ; }
int function ( Boolean arg0 , Boolean arg1 ) { return Boolean . valueOf ( arg0 ) . compareTo ( Boolean . valueOf ( arg1 ) ) ; }
Change function ( ) { return fUndoChange ; }
int function ( Date arg0 ) { Calendar loc0 = Calendar . getInstance ( ) ; loc0 . setTime ( arg0 ) ; return daysInMonth ( loc0 ) ; }
void function ( Path arg0 , Schema arg1 ) { inputSchemaMap . put ( arg0 , arg1 ) ; }
IntList function ( int [ ] arg0 ) { if ( arg0 == null ) { return null ; } return unmodifiableList ( arg0 , arg0 . length ) ; }
int function ( ) { return cursor - cursor ; }
boolean function ( String arg0 ) { return arg0 . startsWith ( inlineMarkupDelimiters ) ; }
Executor function ( Executor arg0 , List < Callable < T >> arg1 ) { return new ExecutorWrappingThread ( arg0 , arg1 ) ; }
void function ( Airport arg0 ) { this . larnacaAirport = arg0 ; }
void function ( String arg0 ) { this . localeKey = arg0 ; }
MemberRef function ( ) { return editor . getMemberRef ( nameAndType ( ) ) ; }
void function ( Device arg0 ) { arg0 . startInputTask ( ) ; }
C function ( Object arg0 , Object arg1 ) { list . add ( new C ( arg0 , arg1 ) ) ; return ( C ) this ; }
void function ( TagState arg0 ) { this . tagState = arg0 ; }
String function ( char arg0 ) { return null ; }
String function ( ) { return name ; }
String function ( ) { return result . toString ( ) ; }
boolean function ( long arg0 ) { if ( peakAllocation . get ( ) + arg0 > allocationLimit . get ( ) ) { peakAllocation . set ( arg0 ) ; return true ; } return false ; }
void function ( String arg0 ) { if ( arg0 != null ) { attr . put ( currentAttr , arg0 ) ; } }
HttpRoute function ( HttpParams arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } HttpRoute loc0 = ( HttpRoute ) arg0 . getParameter ( FORCE_ROUTE ) ; if ( ( loc0 != null ) && NO_ROUTE . equals ( loc0 ) ) { loc0 = null ; } return loc0 ; }
boolean function ( RatTermVec arg0 ) { if ( arg0 . size ( ) != terms . length ) { return false ; } for ( int loc0 = 0 ; loc0 < terms . length ; loc0 ++ ) { if ( ! terms [ loc0 ] . equals ( arg0 . terms [ loc0 ] ) ) { return false ; } } return true ; }
void function ( File arg0 ) { this . outputFile = arg0 ; }
Class < ? > function ( String arg0 , String arg1 , String arg2 , String [ ] arg3 , String arg4 , String arg5 , String arg6 , String arg7 , String arg8 , String arg9 , String arg10 , String arg11 , String arg12 , String arg13 , String arg14 ) { List < String > loc0 = new ArrayList < String > ( ) ; loc0 . add ( arg1 ) ; loc0 . add ( arg2 ) ; loc0 . add ( arg3 ) ; loc0 . add ( arg4 ) ; loc0 . add ( arg5 ) ; loc0 . add ( arg6 ) ; loc0 . add ( arg7 ) ; loc0 .
void function ( ) { if ( isProcessing ) { throw new IllegalStateException ( "srini_string" ) ; } isProcessing = true ; processEvents ( ) ; }
void function ( Boolean arg0 ) { this . isTest = arg0 ; }
InputStream function ( ) { return stream ; }
R function ( ) { return defaultValue ; }
boolean function ( Object arg0 ) { if ( arg0 == this ) return true ; if ( ! ( arg0 instanceof List4 ) ) return false ; List4 loc0 = ( List4 ) arg0 ; return _first . equals ( loc0 . _first ) && _last . equals ( loc0 . _last ) ; }
int function ( ) { return _size ; }
Iterator < T > function ( String arg0 ) { return metaData . getColumn ( arg0 ) . iterator ( ) ; }
void function ( boolean arg0 ) { if ( BuildConfig . DEBUG ) { debug = arg0 ; } }
void function ( String arg0 , Object arg1 ) { if ( log != null ) { log . info ( arg0 , arg1 ) ; } }
float function ( ) { return list . removeAt ( list . size ( ) - 1 ) ; }
Object function ( String arg0 ) { if ( "srini_string" . equals ( arg0 ) || "srini_string" . equals ( arg0 ) ) return new RGB ( Integer . parseInt ( arg0 ) , Integer . parseInt ( arg0 . substring ( 1 , 3 ) ) , Integer . parseInt ( arg0 . substring ( 3 , 5 ) ) ) ; return null ; }
ImageDescriptor function ( ) { return fImage ; }
void function ( String arg0 ) { jdbcService . deleteBlobs ( arg0 ) ; }
void function ( ) { }
boolean function ( Object arg0 ) { Method loc0 = methods . get ( arg0 ) ; if ( loc0 == null ) { return false ; } try { return loc0 . invoke ( arg0 ) ; } catch ( Exception loc1 ) { return false ; } }
String function ( ) { return ( this . description ) ; }
int function ( ) { return targets [ 0 ] . highValue ( ) ; }
Properties function ( ) { return GlobalProperties . get ( ) ; }
String function ( ) { return lang ; }
String function ( String arg0 ) { return topologyBase ( arg0 ) . topologyId ( ) ; }
Limit function ( ElementType arg0 , String arg1 ) { return new Limit ( arg0 , arg1 , null ) ; }
byte [ ] function ( CMSSignedData arg0 , PublicKey arg1 ) { byte [ ] loc0 = getSignedKdcDhKeyInfo ( arg0 , arg1 ) ; CMSSignedData . update ( arg0 , loc0 ) ; return CMSUtils . byte2Der ( loc0 ) ; }
int function ( ) { checkIsOpen ( ) ; return readDeviceDescriptor ( ) ; }
String function ( ) { return "srini_string" + getName ( ) + "srini_string" + getAsText ( ) ; }
void function ( boolean arg0 ) { this . indRef = arg0 ; }
void function ( Player arg0 ) { player = arg0 ; }
void function ( CSIColor arg0 ) { foreColor = arg0 ; }
void function ( RemittanceInformation5 arg0 ) { checkMax140Text ( arg0 ) ; }
void function ( ) { violations . clear ( ) ; numEvaluations = 0 ; numNormalPptExits = 0 ; numExceptionalPptExits = 0 ; }
T function ( String arg0 , String arg1 ) { return ( T ) link ( arg0 , arg1 , null ) ; }
boolean function ( ) { return false ; }
Criteria function ( ) { return new Criteria ( left , right , criteriaType ) ; }
String function ( String arg0 ) { BufferedReader loc0 = new BufferedReader ( new FileReader ( arg0 ) ) ; String loc1 = loc0 . readLine ( ) ; return loc1 ; }
String function ( ) { return code ; }
void function ( Object arg0 , Throwable arg1 ) { log ( LOG_LEVEL_WARN , arg0 , arg1 ) ; }
WebArchive function ( ) { return createSecurityDomain ( this . securityDomain , this . url ) ; }
void function ( String [ ] arg0 ) { try { System . out . println ( "srini_string" ) ; System . in . read ( ) ; } catch ( Exception loc0 ) { loc0 . printStackTrace ( ) ; } }
void function ( String [ ] arg0 ) { Sample loc0 = new Sample ( ) ; loc0 . execute ( ) ; }
int function ( ) { return ( int ) Math . round ( y1 ) ; }
void function ( String arg0 ) { PeerStatus loc0 = getPeerStatus ( arg0 ) ; if ( loc0 != null ) { doConnect ( loc0 ) ; } }
void function ( ) { this . name = null ; this . resourceType = null ; }
void function ( Point2D arg0 ) { this . startPoint = arg0 ; }
void function ( String arg0 ) { int loc0 ; loc0 = arg0 . indexOf ( SEP_CHARACTER ) ; if ( loc0 != - 1 ) { this . cat_id = Integer . parseInt ( arg0 . substring ( 0 , loc0 ) ) ; loc0 = arg0 . indexOf ( SEP_CHARACTER ) ; if ( loc0 != - 1 ) { this . id = Integer . parseInt ( arg0 . substring ( loc0 + 1 , arg0 . length ( ) ) ) ; } else { this . id = - 1 ; } } }
void function ( String arg0 ) { this . skipHours . add ( arg0 ) ; }
String function ( SQLException arg0 ) { return determineSqlStateClassCode ( extractSqlStateClassCode ( arg0 ) , arg0 . getErrorCode ( ) ) ; }
boolean function ( int arg0 ) { return JDBC_TYPE_MAP . containsKey ( arg0 ) ; }
ILanguageNames function ( ) { return languageNames ; }
boolean function ( ) { return connected ; }
void function ( int arg0 ) { productID = arg0 ; }
int function ( ) { return remCount - 1 ; }
boolean function ( V arg0 ) { return dkMap . containsKey ( arg0 ) ; }
Closure function ( ) { return iClosure ; }
boolean function ( ) { return debug ; }
int function ( ) { return ( data [ position ++ ] & 0xFF ) | ( data [ position ++ ] & 0xFF ) << 8 | ( data [ position ++ ] & 0xFF ) << 16 | ( data [ position ++ ] & 0xFF ) << 24 ; }
List < T > function ( List < T > arg0 ) { if ( arg0 == null ) { return Collections . emptyList ( ) ; } return arg0 ; }
String function ( String arg0 , Object ... arg1 ) { return notEmpty ( arg0 , arg1 , "srini_string" ) ; }
boolean function ( final IdentifierValue arg0 ) { if ( arg0 == null ) return false ; return ( value == arg0 . value ) ; }
ListIterator function ( ListIterator arg0 ) { return arg0 == null ? null : new ListIterator ( arg0 ) ; }
Image function ( int arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 [ ] ) { return toIntImage ( arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , null ) ; }
void function ( ) { if ( upcomingReleaseDate == null ) { upcomingReleaseDate = new Date ( ) ; } }
Class < ? > function ( ) { return elementType ; }
void function ( ) { assertTrue ( "srini_string" , incorrectRoleResult . contains ( INIT_METHOD_NOT_PASS ) ) ; }
void function ( ) { annotations . process ( null , null ) ; }
void function ( ) { String loc0 = "srini_string" ; List < Element > loc1 = new ArrayList < Element > ( ) ; loc1 . add ( d ) ; loc1 . addAll ( workerContextImpl . getCurrentContent ( ) ) ; verifyNumberOfParagraphs ( loc1 , 1 ) ; }
String function ( ) { return fElement . getAttribute ( CLASS_ATTRIBUTE ) ; }
void function ( ) { throw new TimeoutException ( "srini_string" ) ; }
void function ( boolean arg0 ) { this . expandEntityRef = arg0 ; }
File function ( ) { return fileInput ; }
void function ( Cluster arg0 ) { Edge loc0 = new Edge ( arg0 ) ; set . add ( loc0 ) ; }
boolean function ( int arg0 , int arg1 ) { return isTwosidedGB ( arg0 , arg1 ) ; }
String function ( Object [ ] arg0 ) { if ( arg0 == null ) { return "srini_string" ; } String loc0 = "srini_string" ; for ( int loc1 = 0 ; loc1 < arg0 . length ; loc1 ++ ) { if ( arg0 [ loc1 ] == null ) { loc0 = loc0 ; break ; } } return loc0 ; }
FieldSelection function ( List < String > arg0 ) { return create ( arg0 . toArray ( new String [ arg0 . size ( ) ] ) ) ; }
List < ReleaseEntity > function ( ) { log . debug ( "srini_string" ) ; List < ReleaseEntity > loc0 = persistenceService . findAllReleases ( ) ; return loc0 ; }
void function ( OverlayAdapter arg0 ) { adapters . add ( arg0 ) ; }
boolean function ( String arg0 ) { return _binsByUri . containsKey ( arg0 ) ; }
List < Message > function ( ) { if ( message == null ) { message = new ArrayList < Message > ( ) ; } return this . message ; }
Validator function ( ) { return new Validator ( ) ; }
void function ( String arg0 ) { this . selectClause . append ( arg0 ) ; }
void function ( Motorbike arg0 ) { Assert . notNull ( arg0 , "srini_string" ) ; entityManager . persist ( arg0 ) ; }
void function ( int arg0 ) { if ( arg0 > 0xff ) { buffer [ length ] = ( byte ) ( arg0 & 0xff ) ; length += 2 ; } else { buffer [ length ] = ( byte ) ( ( arg0 >> 8 ) & 0xff ) ; length += 1 ; } }
T function ( T arg0 , Predicate < T > arg1 ) { validateMin2 ( arg0 ) ; validate ( arg0 ) ; validate ( arg1 ) ; return arg0 ; }
Property function ( ) { return property ; }
String function ( ) { return this . localeKey ; }
BigInteger function ( long arg0 ) { return new BigInteger ( arg0 ) ; }
Widget function ( Widget arg0 , Matcher < ? super Widget > arg1 ) { Widget loc0 = arg0 ; while ( loc0 != null ) { if ( arg1 . matches ( loc0 ) ) return loc0 ; loc0 = loc0 . getParent ( ) ; } return null ; }
RandomAccessSource function ( byte [ ] arg0 , boolean arg1 ) { return create ( arg0 , arg1 , true ) ; }
void function ( ) { assertEquals ( "srini_string" , 4 , ctx . page_size ( ) ) ; }
String function ( ) { return pluginMeta . getVersion ( ) ; }
boolean function ( ) { return needBeforeSpace ; }
void function ( ConsumerRebalanceListener arg0 ) { }
Set function ( ) { return new LinkedHashMap ( _register ) ; }
H2Database function ( ) { return new H2Database ( ) ; }
RingFactory < C > function ( ) { return ring ; }
void function ( float arg0 ) { this . width = arg0 ; }
List < C > function ( ) { final List < C > loc0 = new LinkedList < C > ( ) ; for ( C loc1 : this ) { loc0 . add ( loc1 ) ; } return loc0 ; }
void function ( ) { migrationDone = true ; }
Collection function ( Container arg0 ) { if ( arg0 == null ) return Collections . EMPTY_LIST ; else return arg0 . getComponents ( ) ; }
void function ( Throwable arg0 ) { Util . logException ( arg0 , "srini_string" ) ; }
String [ ] function ( ) { return items ; }
ProgressRequestBody function ( Context arg0 , String arg1 ) { InputStream loc0 = arg0 . getContentResolver ( ) . openInputStream ( arg1 ) ; return new ProgressRequestBody ( arg0 , loc0 ) ; }
int function ( T arg0 ) { return weight ; }
HttpClient function ( ) { return backend ; }
Allprop function ( ) { return allprop ; }
void function ( OutputStream arg0 , byte [ ] arg1 ) { arg0 . write ( arg1 ) ; }
void function ( ) { Display loc0 = Display . getCurrent ( ) ; if ( loc0 != null ) { loc0 . syncExec ( ) ; } }
Items function ( ) { return items ; }
Symbol function ( ) { return stack [ -- pos ] ; }
SortedBag function ( Bag arg0 , Class < ? extends T > arg1 ) { return sortedBag ( arg0 , arg1 , false ) ; }
void function ( VectorXYZ arg0 ) { pos . set ( arg0 . pos ) ; lookAt . set ( arg0 . lookAt ) ; }
String function ( String arg0 ) { if ( arg0 == null || arg0 . isEmpty ( ) ) { throw new IllegalArgumentException ( "srini_string" ) ; } byte [ ] loc0 = arg0 . getBytes ( "srini_string" ) ; long loc1 = hmacSha256 ( loc0 ) . getDigest ( ) ; return Base64 . encode ( loc1 ) ; }
String function ( ) { return null ; }
boolean function ( ) { return ring . isField ( ) ; }
Type function ( String arg0 ) { return basicTypeRegistry . getType ( arg0 ) ; }
String function ( Bundle arg0 ) { Validate . notNull ( arg0 , "srini_string" ) ; return arg0 . getString ( TOKEN_KEY ) ; }
int function ( ) { return limit - position ; }
void function ( ) { reactor = new NioReactor ( ) ; reactor . start ( ) ; }
void function ( StyleListener arg0 ) { listeners . remove ( arg0 ) ; }
String function ( ) { return technicalKey ; }
IJavaElement function ( JavaEditor arg0 , IProject arg1 ) { return arg0 . getEnclosingElement ( arg1 ) ; }
void function ( final Long arg0 , final ExecutionData arg1 ) { if ( entries . containsKey ( arg0 ) ) { return ; } entries . put ( arg0 , arg1 ) ; }
void function ( Set < String > arg0 ) { HashSet < String > loc0 = new HashSet < String > ( ) ; for ( String loc1 : arg0 ) { if ( ! countryLookup . containsKey ( loc1 ) ) { loc0 . add ( loc1 ) ; } } countryLookup . clear ( ) ; }
void function ( int arg0 ) { this . torusDimensionSize = arg0 ; }
int function ( GenVector < C > arg0 ) { if ( arg0 . val . isEmpty ( ) ) { return 0 ; } return modul . compareTo ( arg0 . modul ) ; }
Closure [ ] function ( ) { return iClosures ; }
int function ( ) { return _index ; }
void function ( Iterator arg0 ) { this . iterator = arg0 ; this . nextObject = null ; }
float function ( ) { return width ; }
void function ( final OPModeManager arg0 ) { }
Comparator function ( boolean arg0 ) { return new BooleanComparator ( arg0 ) ; }
void function ( ) { stop = true ; }
Type function ( int arg0 , Type arg1 , String arg2 ) { return null ; }
boolean function ( ) { String loc0 = Nazgul . getNazgulName ( ) ; return loc0 != null && loc0 . equalsIgnoreCase ( "srini_string" ) ; }
boolean function ( ) { return _runningTest != null ; }
ModuleList < C > function ( String arg0 , Module ... arg1 ) { return twosidedGB ( arg0 , arg1 ) ; }
void function ( File arg0 , Map < String , BaseFontParameters > arg1 ) { insertNames ( arg0 , arg1 , "srini_string" ) ; }
String function ( String arg0 ) { if ( arg0 . startsWith ( "srini_string" ) ) { arg0 = arg0 . substring ( 1 ) ; } return arg0 ; }
void function ( ) { fileLoggerModule . init ( ) ; consoleLoggerModule . init ( ) ; }
DocumentBuilder function ( Section arg0 ) { return addSection ( arg0 , false ) ; }
boolean function ( int arg0 , int arg1 ) { return ( ( ( arg0 + arg1 ) % WIDTH ) == 0 ) ; }
void function ( Font arg0 , Chunk arg1 ) { }
void function ( Object arg0 ) { log ( Level . ERROR , String . valueOf ( arg0 ) , null ) ; }
KeyValuePairList function ( ) { return new KeyValueListList ( ) ; }
void function ( ) { for ( IOptionChangeListener loc0 : fListeners ) { loc0 . fListeneredDisabled = true ; } }
int function ( Object arg0 ) { if ( arg0 == null ) return 1 ; if ( arg0 == this ) return 0 ; if ( arg0 instanceof V ) { return ( ( V ) arg0 ) . hashCode ( ) ; } return arg0 . hashCode ( ) ; }
void function ( DisplayPortMetrics arg0 ) { for ( int loc0 = mHead ; loc0 < mTail ; loc0 ++ ) { if ( mMetrics [ loc0 ] == arg0 ) { System . arraycopy ( mMetrics , loc0 + 1 , mMetrics , loc0 , mTail - loc0 ) ; mHead = loc0 + 1 ; } } }
BaseColor function ( ) { return strokeColor ; }
SchemaValidatorBuilder function ( ) { this . strategy = new SchemaValidationStrategy ( ) ; return this ; }
IType function ( IJavaScriptElement arg0 ) { Assert . isNotNull ( arg0 ) ; String loc0 = fRefactoredSimilarElements . get ( arg0 ) ; if ( loc0 != null ) return fOldType ; else return resolveTypeName ( arg0 ) ; }
long function ( ) { return ours ; }
double function ( ) { return mu ; }
void function ( final TestElement arg0 , final Display arg1 , final int arg2 ) { String loc0 = FailureTable . getFailureMessage ( arg0 , arg1 ) ; arg1 . setMessage ( loc0 ) ; arg1 . setVisible ( false ) ; }
DurationFieldType function ( int arg0 ) { int loc0 = ContainerHelpers . binarySearch ( this . getValues ( ) , 0 , arg0 ) ; if ( loc0 < 0 ) { return null ; } return ( DurationFieldType ) this . getValues ( ) [ loc0 ] ; }
void function ( Employee arg0 ) { em . persist ( arg0 ) ; em . flush ( ) ; }
void function ( ) { currentSourceEntry = null ; }
boolean function ( Graphics2D arg0 , Quadrant arg1 , Quadrant arg2 , Quadrant arg3 , Quadrant arg4 ) { return false ; }
Set function ( Map arg0 ) { return new EntrySet ( arg0 ) ; }
Branch function ( ) { return new Branch ( this ) ; }
boolean function ( ZooKeeper arg0 , final String arg1 ) { final String loc0 = arg1 + ZNODE_PATH_SEPARATOR + arg0 . getName ( ) ; return arg0 . exists ( loc0 , false ) ; }
void function ( int arg0 ) { constantValue = ConstantPool . getInteger ( arg0 ) ; }
void function ( Exception arg0 ) { this . exception = arg0 ; if ( callback != null ) { callback . onFailure ( arg0 ) ; } }
double function ( double arg0 ) { return factory . findZero ( arg0 ) ; }
Iterator function ( DoubleIterator arg0 ) { return arg0 == null ? null : new DoubleIterator ( arg0 ) ; }
