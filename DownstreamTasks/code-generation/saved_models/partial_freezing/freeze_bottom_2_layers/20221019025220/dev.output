void function ( ) { SchemaReplacer loc0 = new SchemaReplacer ( ) ; AvroSchemaReader loc1 = new AvroSchemaReader ( ) ; SchemaReplacer loc2 = new StandardSchemaReplacer ( ) ; loc1 . setSchema ( new ArrayList < Schema > ( ) ) ; loc2 . setSchema ( new ArrayList < Schema > ( ) ) ; loc0 . canWrite ( loc1 , loc2 ) ; }
void function ( String arg0 ) { String loc0 = dvdProperties . getProperty ( arg0 ) ; if ( loc0 != null ) { dvdProperties . remove ( arg0 ) ; bookProperties . remove ( loc0 ) ; } }
Map < SpringConfig , String > function ( ) { return mSpringConfigMap ; }
File function ( ) { return Libraries . getLibraryDirectory ( ) ; }
boolean function ( ) { return coalescing ; }
void function ( final IContext arg0 ) { ServerSecurityInterceptor loc0 = ( ServerSecurityInterceptor ) arg0 . getSystemService ( IServerSecurityInterceptor . class ) ; loc0 . setCurrentPrincipalName ( IServerSecurityInterceptor . delegated_user_key ) ; }
void function ( Object arg0 , Throwable arg1 ) { log ( Trace . TRACE , arg0 , arg1 ) ; }
Object function ( ) { if ( instance == null ) { instance = persister . createInstance ( session ) ; } return instance ; }
boolean function ( ) { return true ; }
void function ( long arg0 ) { markAsOverriden ( "srini_string" ) ; this . evictionWakeUpInterval = arg0 ; }
IProduct function ( ) { return product ; }
String function ( ASN1Primitive arg0 ) { return getExtensionValue ( arg0 , "srini_string" ) ; }
int function ( InputStream arg0 ) { return ( int ) readInt24LE ( arg0 ) << 24 ; }
SortedSet < ClassDoc > function ( ClassDoc arg0 , String arg1 ) { return cmap . get ( arg0 ) ; }
LongList function ( ) { return unmodifiableLongList ( EMPTY_LONG_LIST ) ; }
GetContentlanguage function ( ) { return getcontentlanguage ; }
void function ( KOptions arg0 ) { }
List < Identifier > function ( String arg0 ) { return NAME_PART_PATTERN . split ( arg0 ) ; }
Location function ( Element arg0 ) { Location loc0 = new Location ( ) ; if ( arg0 instanceof Element ) { loc0 . setName ( ( String ) arg0 ) ; } return loc0 ; }
boolean function ( ) { return _display . isShowing ( ) ; }
void function ( String arg0 , String arg1 ) { if ( arg1 == null ) { throw new XMPException ( "srini_string" , XMPError . BADPARAM ) ; } if ( arg1 . length ( ) == 0 ) { throw new XMPException ( "srini_string" , XMPError . BADPARAM ) ; } }
void function ( ) { m_trace . clear ( ) ; m_positiveXErrorPixel = 0 ; m_negativeYErrorPixel = 0 ; m_positiveXErrorPixel = 0 ; m_negativeYErrorPixel = 0 ; }
String function ( ) { return reason ; }
boolean function ( InvalidOSDelegate arg0 ) { return true ; }
float function ( ) { return ( float ) getFormat ( ) . getSampleDuration ( ) ; }
void function ( final RecordBatch arg0 , final int arg1 ) { if ( partitioners != null && arg0 != null ) { for ( Partitioner loc0 : partitioners ) { loc0 . processBatch ( arg0 , arg1 ) ; } } }
boolean function ( ) { return false ; }
long function ( ) { return cacheHitCount ; }
Dialog function ( Activity arg0 , String arg1 ) { return ( new AlertDialog . Builder ( arg0 ) ) . setTitle ( arg1 ) . setMessage ( arg1 ) . setNeutralButton ( android . R . string . ok , null ) . create ( ) ; }
Section function ( int arg0 ) { return sections . get ( arg0 ) ; }
Product function ( ) { return new Product ( this ) ; }
FigureInfo function ( ) { return new FigureInfo ( this ) ; }
Integer function ( Cursor arg0 , int arg1 ) { return arg0 . getInt ( arg1 ) ; }
Providedportid function ( ) { return new Providedportid ( ) ; }
boolean function ( String arg0 , String arg1 ) { return findKeyword ( arg0 , arg1 , 0 ) ; }
int function ( ProtocolVersion arg0 ) { return this . protocol . compareTo ( arg0 . protocol ) ; }
void function ( Fum arg0 ) { this . fum = arg0 ; }
void function ( ServerSocket arg0 ) { }
void function ( ) { SecurityConfiguration . getCipherKey ( ) ; }
int function ( Map < K , V > arg0 ) { return data . getsizeofMap ( ) ; }
void function ( Point2D arg0 ) { this . startPoint = arg0 ; }
int function ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 : arg0 ) { loc0 = gcd ( loc0 , loc1 ) ; } return loc0 ; }
void function ( String arg0 [ ] ) { System . out . println ( getImplementation ( ) ) ; System . exit ( 0 ) ; }
void function ( String arg0 , Object arg1 , final CallBack < Protocol > arg2 ) { try ( LockResource loc0 = new LockResource ( channelLock ) ) { writeBuffers ( arg0 , arg1 , arg2 ) ; } }
void function ( Collection < ? > arg0 , Collection < ? > arg1 , Comparator < ? super E > arg2 , int arg3 ) { List < E > loc0 = new ArrayList < > ( arg0 ) ; for ( int loc1 = 0 ; loc1 < arg3 ; loc1 ++ ) { loc0 . add ( arg1 . list ( ) [ 0 ] ) ; }CopynSortedIterator < E > loc2 = new CopynSortedIterator < E > ( loc0 , arg2 , arg3 ) ; if ( loc2 . hasNext ( ) ) { arg1 . add ( loc2 . next ( ) ) ; } }
long function ( ) { return timestamp ; }
String function ( ) { return this . name ; }
Piece function ( int arg0 ) { if ( this . board [ arg0 ] == null ) { return null ; } return pieces [ arg0 ] ; }
String function ( String arg0 ) { return bundle . getString ( arg0 ) ; }
void function ( ISourceFileLocator arg0 ) { this . delegates . add ( arg0 ) ; }
void function ( double arg0 , double arg1 , String arg2 ) { if ( arg0 <= arg1 ) { throw new IllegalArgumentException ( "srini_string" + arg2 + "srini_string" + arg0 + "srini_string" + arg1 ) ; } }
Integer function ( ) { return repeated ; }
Description function ( Description arg0 ) { if ( fChildren == null ) { fChildren = new ArrayList < Description > ( ) ; } fChildren . add ( arg0 ) ; return arg0 ; }
byte [ ] function ( short arg0 ) { byte [ ] loc0 = new byte [ 2 ] ; loc0 [ 0 ] = ( byte ) ( arg0 >>> 8 ) ; loc0 [ 1 ] = ( byte ) ( arg0 ) ; return loc0 ; }
Criteria function ( RelationalOperator arg0 , ValueNode arg1 , RelationalExpressionNode arg2 ) { return new Criteria ( arg0 , arg1 , arg2 ) ; }
StandardServiceRegistryBuilder function ( Map arg0 ) { return new StandardServiceRegistryBuilder ( arg0 ) ; }
Integer [ ] function ( Integer [ ] arg0 ) { Integer [ ] loc0 = new Integer [ arg0 . length ] ; for ( int loc1 = 0 ; loc1 < arg0 . length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }
Map function ( String arg0 ) { if ( ! loaded ) { loadMaps ( ) ; } return characterMap . get ( arg0 ) ; }
double function ( int arg0 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < knots . length ; loc1 ++ ) { loc0 += knots [ loc1 * arg0 + loc1 ] * polynomials [ loc1 ] . value ( ) ; } return loc0 ; }
ValidatorConfiguration function ( final String arg0 , final String arg1 ) { properties . put ( arg0 , arg1 ) ; return this ; }
void function ( ) { validateChain ( ) ; }
CookieAttributeHandler function ( final String arg0 ) { return findAttribHandler ( arg0 , null ) ; }
void function ( ) { }
void function ( String [ ] arg0 ) { printCapitalized ( "srini_string" ) ; }
void function ( String arg0 ) { this . className = arg0 ; }
int function ( Comparable arg0 , Comparable arg1 ) { return arg0 . compareTo ( arg1 ) ; }
void function ( ) { dao = new DbCustomerDao ( ) ; exception = null ; }
String function ( ) { String loc0 = doSendApiRequest ( "srini_string" , "srini_string" ) ; return loc0 ; }
String function ( ) { return responseHeaders . get ( "srini_string" ) ; }
GenMatrix < C > function ( ) { for ( int loc0 = 0 ; loc0 < matrix . size ( ) ; loc0 ++ ) { val . add ( matrix . get ( loc0 ) . get ( loc0 ) ) ; } return this ; }
void function ( DrawSurface arg0 ) { arg0 . setColor ( Color . WHITE ) ; arg0 . fillRect ( 0 , 0 , obstacleSize , obstacleSize ) ; arg0 . setColor ( Color . BLACK ) ; arg0 . drawRect ( 0 , 0 , obstacleSize , obstacleSize ) ; }
AuditCriterion function ( AuditCriterion arg0 , AuditCriterion arg1 ) { return new LogicalAuditExpression ( arg0 , arg1 , "srini_string" ) ; }
T function ( T arg0 , String arg1 ) { if ( arg0 == null ) { throw new NullPointerException ( MessageFormat . format ( "srini_string" , arg1 , arg0 ) ) ; } return arg0 ; }
void function ( String arg0 ) { myTopType = arg0 ; }
PlanNode function ( Quadrant arg0 ) { return arg0 . reflect ( ) . child ( ) ; }
void function ( String arg0 ) { this . fcKey = arg0 ; }
Double function ( ) { return xValue ; }
void function ( ) { trimToSize ( _size ) ; }
float function ( ) { return textRectangle . right ; }
Long function ( ) { return usedIds . iterator ( ) . next ( ) ; }
String [ ] function ( String arg0 ) { return collectionPropertyMappingByRole . get ( arg0 ) ; }
Collection < Table > function ( List < String > arg0 ) { return getTables ( getTypeName ( arg0 ) ) ; }
void function ( ) { }
UnivPowerSeries < C > function ( ) { return ( UnivPowerSeries < C > ) ONE ; }
EditPartFactory function ( ) { return viewer . getEditPartFactory ( ) ; }
void function ( boolean arg0 ) { fResolveBindings = arg0 ; }
void function ( Body arg0 , MathVector arg1 ) { acc0 . set ( arg1 ) ; if ( arg0 . pskip != null ) { pskip . set ( arg1 ) ; } if ( arg0 . oldSubindex != 0 ) { oldSubindex -- ; } }
boolean function ( PastryContact arg0 ) { return cwNodes . remove ( arg0 ) ; }
boolean function ( ) { return iterators . size ( ) > 0 ; }
DateTimeFieldType function ( int arg0 ) { return getField ( arg0 ) . getFieldType ( ) ; }
ActiveLock function ( ) { return new ActiveLock ( ) ; }
Product < C > function ( Reader arg0 ) { return fromString ( arg0 . readLine ( ) ) ; }
void function ( final File arg0 , final File arg1 ) { if ( arg0 . exists ( ) ) { return ; } if ( arg1 . exists ( ) ) { return ; } try { FileUtils . copyFile ( arg0 , arg1 ) ; } catch ( IOException loc0 ) { error ( loc0 . getMessage ( ) ) ; } }
boolean function ( ) { return pdfxConformance != PdfWriter . PDFXNONE ; }
boolean function ( JEditorPane arg0 ) { return arg0 != null && arg0 . getEditor ( ) != null && JGitUtil . isDirty ( arg0 . getEditor ( ) ) ; }
void function ( ) { fFilesSaved = true ; }
double function ( double [ ] arg0 , double [ ] arg1 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 . length ; loc1 ++ ) loc0 += arg1 [ loc1 ] * arg0 [ loc1 ] ; return loc0 ; }
void function ( ) { }
void function ( String arg0 , Collection < ? > arg1 , Collection < ? > arg2 ) { for ( Object loc0 : arg2 ) { assertFail ( arg0 , loc0 , arg1 ) ; } }
Collection < EvaluationListener > function ( ) { return evaluationListeners ; }
Callable < Throwable > function ( final StackTraceElement [ ] arg0 ) { return new Callable < Throwable > ( ) { @ Override public Throwable call ( ) { Throwable loc0 = arg0 [ 0 ] ; return loc0 ; } } ; }
boolean function ( Object arg0 ) { if ( this == arg0 ) return true ; if ( ! ( arg0 instanceof BigInteger ) ) return false ; BigInteger loc0 = ( BigInteger ) arg0 ; return loc0 . compareTo ( this . val ) == 0 ; }
Event [ ] function ( ) { return getResolver ( ) . getEvents ( ) ; }
int function ( Context arg0 , int arg1 ) { Resources loc0 = arg0 . getResources ( ) ; int loc1 = loc0 . getDimensionPixelSize ( arg1 ) ; return loc1 ; }
S function ( Class < S > arg0 ) { return createSchema ( arg0 , "srini_string" ) ; }
String [ ] function ( ) { return columnNames ; }
Closure function ( @ Nonnull final Closure ... arg0 ) { return new Closure ( ) { @ Override public void call ( Closure arg1 ) throws Exception { for ( Closure loc0 : arg0 ) { loc0 . call ( arg1 ) ; } } } ; }
void function ( double arg0 ) { if ( Double . isNaN ( arg0 ) || Double . isInfinite ( arg0 ) ) { throw new ArithmeticException ( "srini_string" + arg0 ) ; } }
short function ( ) { return vid . getShortAddress ( ) ; }
void function ( int arg0 ) { setEncryptionData ( true ) ; setEncryptionDataLength ( arg0 ) ; this . definesEncryptionData = true ; }
void function ( int arg0 ) { m_value -= arg0 ; }
boolean function ( ) { return onlineCheckingAllowed ; }
int function ( int arg0 ) { return childRanges [ arg0 ] ; }
void function ( int arg0 , long arg1 ) { checkColumns ( arg0 ) ; if ( arg0 == 1 ) { columnCount ++ ; } else if ( arg0 > columnCount ) { throw new IllegalArgumentException ( "srini_string" + arg0 + "srini_string" + columnCount ) ; } this . columnCount = arg0 ; }
boolean function ( Collection < K > arg0 ) { boolean loc0 = false ; for ( K loc1 : arg0 ) { loc0 |= put ( loc1 , null ) ; } return loc0 ; }
void function ( ) { }
TemplateContextType function ( ) { return fContextType ; }
void function ( float arg0 ) { list . add ( search ( arg0 ) ) ; }
void function ( Object arg0 ) { if ( myList != null ) { myList . setItem ( arg0 ) ; } else { throw new InvalidItemException ( ) ; } }
JdbcTemplateBean function ( ) { return new JdbcTemplateBean ( ) ; }
IWidgetCondition function ( Object arg0 ) { return new WidgetCondition ( arg0 ) ; }
ReflectConstructorSpec function ( Object arg0 , Object [ ] arg1 ) { return new ReflectConstructorSpec ( arg0 , arg1 ) ; }
void function ( ) { pos ++ ; }
byte [ ] function ( Object arg0 ) { if ( arg0 == null ) { return null ; } return toJson ( arg0 , false ) ; }
JobStatus function ( @ PathVariable JobId arg0 ) { log . info ( "srini_string" , arg0 ) ; JobStatus loc0 = jobStatuses ( ) . get ( arg0 ) ; if ( loc0 == null ) { throw new NotFoundException ( "srini_string" + arg0 ) ; } return loc0 ; }
Codec [ ] function ( Format arg0 ) { return getInstance ( ) . getDecoders ( arg0 ) ; }
void function ( int arg0 ) { this . weight = arg0 ; }
int [ ] function ( ) { return aVueltas ; }
PdfIndirectReference function ( String arg0 , PdfDictionary arg1 ) { if ( this . richMediaContent == null ) { this . richMediaContent = new PdfArray ( ) ; } this . richMediaContent . put ( arg0 , arg1 ) ; return this ; }
void function ( Set < IResource > arg0 ) { resources . addAll ( arg0 ) ; }
String function ( ) { String loc0 = "srini_string" ; loc0 += this . getLeftDistance ( ) + "srini_string" + this . getTopDistance ( ) + "srini_string" ; loc0 += this . getRightDistance ( ) + "srini_string" ; return loc0 ; }
void function ( final double arg0 ) { this . numericalZero = arg0 ; }
void function ( int arg0 ) { doKeyUp ( arg0 , false ) ; }
void function ( String arg0 ) { this . city = arg0 ; }
String function ( String arg0 ) { return doSendApiRequest ( "srini_string" , arg0 ) ; }
String function ( ) { return nodeInfo . getId ( ) ; }
Map < String , ByteBuffer > function ( ) { return requestCallMeta ; }
List < ColumnMetaData > function ( ) { return columns ; }
String function ( String arg0 ) { if ( arg0 != null && arg0 . startsWith ( "srini_string" ) ) { arg0 = arg0 . substring ( 1 ) ; } return getJavaElementName ( arg0 ) ; }
long function ( Duration arg0 ) { return arg0 . getSeconds ( ) / NANOS_PER_SECOND ; }
String function ( Object arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; writeBack ( arg0 , loc0 ) ; return loc0 . toString ( ) ; }
void function ( Runway arg0 ) { arg0 . free ( ) ; }
void function ( BigInteger arg0 ) { this . nresults = arg0 ; }
long function ( ) { return SystemClock . uptimeMillis ( ) ; }
AccessibilityGraph function ( final DeploymentUnit arg0 ) { final Set < ClassLoader > loc0 = arg0 . getDeploymentClassLoaders ( ) ; if ( loc0 == null || loc0 . isEmpty ( ) ) { return AccessibilityGraph . NO_REACH ; } return new AccessibilityGraph ( loc0 ) ; }
ITracePoint2D function ( ) { return m_previousPoint ; }
Object function ( ) { return value ; }
List < Integer > function ( ) { return initialAvailableNumer ; }
ModInteger function ( java . math . BigInteger arg0 ) { return new ModInteger ( mod0 . mod ( arg0 ) , arg0 ) ; }
String function ( ) { return name ; }
float function ( Vector3f arg0 , Vector3f arg1 ) { return ( float ) Math . sqrt ( ( arg0 . x * arg1 . x ) + ( arg0 . y * arg1 . y ) + ( arg0 . z * arg1 . z ) ) ; }
boolean function ( GroupCategory ... arg0 ) { for ( GroupCategory loc0 : arg0 ) { if ( contains ( loc0 ) ) { return true ; } } return false ; }
GenMatrix < C > function ( Reader arg0 ) { return fromReader ( arg0 , DEFAULT_BSIZE , DEFAULT_DENSITY ) ; }
boolean function ( ) { return ( this . type == NULL ) ; }
ByteBuffer function ( ByteBuffer arg0 , int arg1 , int arg2 ) { byte [ ] loc0 = new byte [ arg2 - arg1 ] ; System . arraycopy ( arg0 . array ( ) , arg1 , loc0 , 0 , arg2 ) ; return ByteBuffer . wrap ( loc0 ) ; }
String function ( ) { return toString ( ) ; }
LinkedList function ( CFG arg0 ) { LinkedList loc0 = new LinkedList ( ) ; calcFrontier ( arg0 , loc0 ) ; return loc0 ; }
String function ( String arg0 ) { if ( arg0 == null ) { return null ; } int loc0 = arg0 . lastIndexOf ( '/' ) ; if ( loc0 >= 0 ) { arg0 = arg0 . substring ( 0 , loc0 ) ; } return arg0 ; }
AbstractSolvableGroebner < C > function ( List < GenSolvablePolynomial < C >> arg0 ) { return new RightGBoebner < C > ( arg0 . toArray ( new GenSolvablePolynomial < C > [ arg0 . size ( ) ] ) ) ; }
List function ( ) { return ones ; }
String function ( ) { return this . entityName ; }
void function ( Type arg0 ) { if ( DEBUG ) { System . err . println ( "srini_string" + arg0 ) ; } interfaces . add ( arg0 ) ; }
BatchCQLStatementTupleMapper function ( CQLStatementsBuilder ... arg0 ) { return new BatchCQLStatementTupleMapper ( arg0 ) . logged ( ) ; }
void function ( String arg0 ) { files . add ( arg0 ) ; }
int [ ] function ( int [ ] arg0 ) { int loc0 = arg0 . length ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { if ( arg0 [ loc2 ] < 0 ) { loc1 ++ ; } } return redHistogram ( loc1 ) ; }
IConnection function ( String arg0 ) { IConnection loc0 = new NioClientConnection ( storm_conf , arg0 ) ; connections . put ( arg0 , loc0 ) ; return loc0 ; }
void function ( ) { IntArrayWorker loc0 = new IntArrayWorker ( ) ; int [ ] [ ] loc1 = { { 1 , 2 , 3 } , { 4 , 5 , 6 } } ; loc0 . setMatrix ( loc1 ) ; int loc2 = loc0 . getColTotal ( ) ; System . out . println ( "srini_string" + loc2 ) ; }
URL function ( String arg0 ) { return new URL ( Thread . currentThread ( ) . getContextClassLoader ( ) . getResource ( arg0 ) ) ; }
boolean function ( ) { return isField ; }
void function ( Shell arg0 ) { if ( arg0 != null ) {Workbench loc0 = getWorkbench ( arg0 ) ; loc0 . bringToBottom ( ) ; } }
String function ( String arg0 , String arg1 ) { if ( arg1 . startsWith ( "srini_string" ) ) { return arg1 ; } return arg0 + "srini_string" + arg1 ; }
GeckoMenu function ( ) { return mMenu ; }
ResourceEditPropertyBuilder function ( Clob arg0 ) { this . propertyComment = arg0 ; return this ; }
Expr function ( int arg0 ) { if ( arg0 < 0 || arg0 >= size ( ) ) throw new IndexOutOfBoundsException ( "srini_string" + arg0 + "srini_string" + size ( ) ) ; return stack . remove ( arg0 ) ; }
WorkerContextImpl function ( ) { return context . get ( ) ; }
Environment function ( ) { return new Environment ( ) ; }
String function ( ) { return fMethodSignature ; }
String function ( String arg0 ) { System . out . print ( arg0 ) ; return in . nextLine ( ) ; }
OSMElement function ( ) { return objectWithTags ; }
Batch function ( int arg0 ) { return partitioners . get ( arg0 ) . getBatch ( ) ; }
void function ( Object arg0 , Throwable arg1 ) { log ( Level . WARN , String . valueOf ( arg0 ) , arg1 ) ; }
boolean function ( ) { return false ; }
void function ( Object arg0 ) { error ( arg0 , null ) ; }
URI function ( ) { return uri ; }
void function ( ) { if ( ! isDetermined ( ) ) { logger . warn ( "srini_string" ) ; } if ( conds != null ) { for ( ColoredSystem < C > loc0 : conds ) { if ( ! loc0 . isDetermined ( ) ) { logger . warn ( "srini_string" + loc0 . toString ( ) ) ; } } } }
List < Integer > function ( ) { return JNACLibrary . getSupportedAbis ( ) ; }
CRL function ( Certificate arg0 ) { String loc0 = getExtensionValue ( arg0 , "srini_string" ) ; if ( loc0 != null ) { return new CRL ( loc0 ) ; } return null ; }
void function ( int arg0 ) { if ( arg0 > items . length ) { assert ( arg0 == size ) ; items = new SimulationEvent [ arg0 ] ; } }
State function ( ) { return state ; }
boolean function ( ) { return mForegroundNotificationId != - 1 ; }
ResourceEditPropertyBuilder function ( boolean arg0 ) { this . isTesting = arg0 ; return this ; }
double function ( double arg0 , double arg1 , double arg2 ) { return bracket ( arg0 , arg1 , arg2 , - 1 ) ; }
String function ( ) { return Objects . toStringHelper ( this ) . add ( "srini_string" , getChronology ( ) ) . add ( "srini_string" , getInstantMillis ( ) ) . toString ( ) ; }
ObjectContainer function ( String arg0 , ObjectContainer arg1 ) { return arg1 ; }
RawFragmentBatch function ( Allocator arg0 ) { RawFragmentBatch loc0 = new RawFragmentBatch ( arg0 , header ) ; loc0 . body = body ; loc0 . sender = sender ; return loc0 ; }
String function ( String arg0 ) { return fAttributes . get ( arg0 ) ; }
List < T > function ( Collection < T > arg0 ) { return CollectionUtils . filter ( arg0 , Predicates . not ( Predicates . in ( arg0 ) ) ) ; }
BigDecimal function ( ) { return bankToCustomerStatement . getStatementNum ( ) ; }
boolean function ( ) { return true ; }
MSG_TYPE function ( ) { return msgType ; }
String function ( String arg0 ) { if ( map == null ) { return null ; } String loc0 = map . get ( arg0 ) ; if ( loc0 == null ) { return null ; } return loc0 ; }
void function ( ) { receivedMsg ++ ; }
Element function ( Node arg0 , String arg1 ) { Node loc0 = arg0 ; while ( loc0 != null ) { if ( arg1 . equals ( loc0 . getNodeName ( ) ) ) { return loc0 ; } loc0 = loc0 . getNextSibling ( ) ; } return null ; }
int function ( final boolean [ ] arg0 , final boolean [ ] arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 . length ; loc1 ++ ) { if ( arg0 [ loc1 ] && arg1 [ loc1 ] ) { loc0 ++ ; } } return loc0 ; }
String function ( final Member arg0 ) { return getClassDescriptor ( arg0 . getType ( ) ) ; }
Object function ( final Name arg0 ) { final ValueStack loc0 = new ValueStack ( ) ; try { return arg0 . get ( loc0 . pop ( ) ) ; } catch ( final NameNotFoundException loc1 ) { return null ; } }
ConsumedPort function ( ) { return new ConsumedPort ( ) ; }
String function ( String arg0 ) { return hostToIp . get ( arg0 ) ; }
void function ( ) { }
void function ( ) { final Rar loc0 = createDeployment ( "srini_string" , "srini_string" ) ; Assert . assertTrue ( "srini_string" , loc0 . isAvailable ( ) ) ; }
void function ( Socket arg0 ) { this . socket = arg0 ; if ( ! this . open ) { this . open = true ; this . socket . setSoTimeout ( this . socket . getSoTimeout ( ) ) ; } this . inbuffer = createInputStream ( this . socket ) ; this . outbuffer = createOutputStream ( this . socket ) ; }
void function ( String [ ] arg0 ) { Session loc0 = readSession ( ) ; writeSession ( loc0 ) ; }
void function ( IIndex arg0 ) { fIndexes . remove ( arg0 . getName ( ) ) ; }
Request function ( Class < ? > arg0 ) { return new ErrorReportingRunner ( arg0 ) ; }
void function ( String arg0 ) { if ( arg0 != null ) { out . append ( style + arg0 ) ; out . flush ( ) ; } }
void function ( LayerEvent arg0 ) { release ( ) ; }
int function ( boolean arg0 ) { return list . indexOf ( arg0 ) ; }
File function ( ) { return this . file ; }
Date function ( Date arg0 ) { if ( arg0 == null ) { return null ; } SimpleDateFormat loc0 = new SimpleDateFormat ( "srini_string" ) ; Date loc1 = null ; try { loc1 = loc0 . parse ( arg0 . toString ( ) ) ; } catch ( ParseException loc2 ) { Log . w ( TAG , "srini_string" , loc2 ) ; } return loc1 ; }
ArrayList < Byte > function ( ) { return bytes ; }
String function ( ) { return this . charset ; }
Phenotype function ( String arg0 , String arg1 ) { return getPhenotype ( arg0 , arg1 , false ) ; }
void function ( Context arg0 , Name arg1 ) { arg0 . rebind ( arg1 ) ; }
void function ( final boolean arg0 ) { if ( arg0 ) { append ( buffer , 0 , length ) ; } else { append ( buffer , 0 , length ) ; } }
void function ( Person arg0 ) { allPersons . remove ( arg0 ) ; }
boolean function ( Object arg0 ) { if ( ! ( arg0 instanceof RoutingTableEntry ) ) { return false ; } RoutingTableEntry loc0 = ( RoutingTableEntry ) arg0 ; return loc0 . contact . equals ( contact ) ; }
void function ( String arg0 ) { ExtendedJSONObject loc0 = getObsoleteIds ( ) ; loc0 . putLong ( arg0 , - 1 ) ; setObsoleteIds ( loc0 ) ; }
boolean function ( String arg0 ) { if ( _register == null ) return false ; return _register . remove ( arg0 ) != null ; }
void function ( Host arg0 , Double arg1 ) { List < Double > loc0 = rttToMonitors . get ( arg0 ) ; if ( loc0 != null && loc0 . size ( ) > arg1 ) { loc0 = loc0 . subList ( 0 , arg1 ) ; rttToMonitors . put ( arg0 , loc0 ) ; } }
boolean function ( int arg0 , int arg1 ) { if ( arg0 < 0 || arg0 >= MAX_BOARD_SIZE ) { return true ; } return pieces [ arg1 ] . contains ( pieces [ arg0 ] ) ; }
Parser function ( ) { return new StreamParser ( inputStream , compressionMethod ) ; }
void function ( int arg0 ) { this . iterations = arg0 ; }
QuadTree function ( SquareNode arg0 ) { if ( arg0 instanceof SquareNode ) { return child ( ( SquareNode ) arg0 ) ; } else { return this ; } }
void function ( List < GenPolynomial < C >> arg0 , List < GenPolynomial < C >> arg1 , int arg2 ) { for ( GenPolynomial < C > loc0 : arg1 ) { for ( GenPolynomial < C > loc1 : arg0 ) { if ( loc1 . getLowerBound ( ) . equals ( loc0 ) || loc1 . getUpperBound ( ) . equals ( loc0 ) ) { loc0 . setLower ( loc1 . getUpper ( ) ) ; } } }
ValidationContext function ( ) { return new ValidationContext ( ) ; }
Set < String > function ( ) { return Collections . unmodifiableSet ( namedDescriptorMap . keySet ( ) ) ; }
SpringConfig function ( ) { final SpringConfig loc0 = new SpringConfig ( ) ; loc0 . tension = 1.0 ; loc0 . friction = 1.0 ; return loc0 ; }
void function ( HttpServletResponse arg0 ) { arg0 . setStatus ( HttpServletResponse . SC_CREATED ) ; arg0 . setContentType ( "srini_string" ) ; arg0 . setContentLength ( 0 ) ; }
void function ( Permission arg0 ) { checkPermissionAndFireCheckedException ( arg0 , null ) ; }
boolean function ( String arg0 ) { return userFunctions . containsKey ( arg0 ) ; }
VectorXZ function ( double arg0 ) { return X_UNIT . add ( X , arg0 ) ; }
String function ( Element arg0 , String arg1 ) { Attribute loc0 = arg0 . getAttributeByName ( arg1 ) ; if ( loc0 == null ) { return null ; } return loc0 . getValue ( ) ; }
void function ( Item arg0 ) { if ( arg0 == null ) throw new NullPointerException ( "srini_string" ) ; Node loc0 = first ; while ( loc0 != null ) { if ( arg0 . equals ( loc0 . item ) ) { loc0 = loc0 . next ; } else { loc0 = loc0 . next ; } } size -- ; System . out . println ( "srini_string" + arg0 + "srini_string" ) ; }
void function ( String arg0 ) { this . inputInfo = arg0 ; }
void function ( Bundle arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( BUNDLE_EXTRA_STRING_MESSAGE ) ; } }
long function ( ) { if ( kdcOptions != null ) { return kdcOptions . getTimeNow ( ) ; } return 0 ; }
Date function ( ) { return ( ( BankToCustomerStatementV02 ) bankToCustomerStatement ) . getDtEnd ( ) ; }
Quotient < C > function ( int arg0 , int arg1 ) { return new Quotient < C > ( num - arg0 , den - arg1 ) ; }
boolean function ( int arg0 ) { return LocalStore . get ( ind_var , arg0 ) != null ; }
UnivPowerSeries < C > function ( ) { return getSQRT ( 0.7 ) ; }
Duration function ( Duration arg0 , Duration arg1 ) { return normalizedDuration ( arg0 . toSeconds ( ) + arg1 . toSeconds ( ) , arg0 . getNanos ( ) + arg1 . getNanos ( ) ) ; }
IAnnotationCreator function ( ) { if ( instance == null ) { synchronized ( IAnnotationCreator . class ) { if ( instance == null ) { instance = new IAnnotationCreator ( ) ; } } } return instance ; }
boolean function ( final double [ ] arg0 ) { return ( arg0 != null ) && arg0 . length > 0 ; }
HazelcastInstance function ( ) { return hazelcastInstance ; }
boolean function ( java . math . BigInteger arg0 ) { return getModulus ( arg0 ) . equals ( ModInteger . ONE ) ; }
void function ( String arg0 ) { LOGGER . debug ( "srini_string" , arg0 ) ; redirectViewPath ( arg0 , null ) ; }
Optional < Section > function ( ) { return sections . stream ( ) . filter ( section -> section . isLast ( ) ) . findFirst ( ) ; }
boolean function ( ) { return timespan > 0 ; }
boolean function ( ) { return ( size == 0 ) ; }
void function ( PdfReader arg0 ) { fc . setBookmarks ( arg0 ) ; }
void function ( int arg0 ) { this . lineJoinStyle = arg0 ; }
int function ( ) { return red . getCoefficient ( ) + green . getCoefficient ( ) + white . getCoefficient ( ) ; }
void function ( ) { }
void function ( int arg0 ) { if ( Build . VERSION . SDK_INT >= 19 ) { setScreenBrightness ( arg0 ) ; } }
void function ( ) { if ( releaseMap == null ) { releaseMap = new LinkedHashMap < Integer , ReleaseEntity > ( ) ; } }
Date function ( ) { return DateUtils . from ( this ) ; }
boolean function ( ) { return escapeText ; }
boolean function ( ) { return settings . getBoolean ( NET_SF_EHCACHE_CONFIGURATION_RESOURCE_NAME , false ) ; }
BasicDevice function ( String arg0 ) { if ( ( arg0 == null ) || ( arg0 . trim ( ) . equals ( "srini_string" ) ) ) { throw new NullIdException ( ) ; } return ( BasicDevice ) this . devices . get ( arg0 ) ; }
void function ( TLinkable arg0 ) { _next = arg0 ; }
void function ( Hessian2Serializer < ? > arg0 ) { _serializerFactory = _defaultSerializerFactory ; arg0 . free ( ) ; }
TagState function ( ) { return tagState ; }
String function ( ) { return getBaseZNode ( ) + "srini_string" + getKeyTypeZNode ( ) ; }
void function ( PropertyChangeListener arg0 ) { pcsDelegate . addPropertyChangeListener ( arg0 ) ; }
void function ( T arg0 ) { lock . writeLock ( ) . lock ( ) ; try { map . put ( arg0 , new Reference < T > ( ) ) ; } finally { lock . writeLock ( ) . unlock ( ) ; } }
void function ( ITestRunSession arg0 , String arg1 ) { exportTestRunSession ( arg0 , arg1 , JUNIT4_CONTAINER_PATH ) ; }
void function ( final Object arg0 ) { iterator . add ( arg0 ) ; }
boolean function ( ) { return fCheckable ; }
float function ( final Component arg0 ) { return getCornerThickness ( arg0 , DEFAULT_CORNER_THICKNESS_PX ) ; }
void function ( String arg0 , FreeMarkerProperty arg1 ) { Map < String , FreeMarkerProperty > loc0 = properties . get ( arg0 ) ; if ( loc0 == null ) { loc0 = new HashMap < String , FreeMarkerProperty > ( ) ; properties . put ( arg0 , loc0 ) ; } loc0 . put ( arg1 . getName ( ) , arg1 ) ; }
boolean function ( ) { return ( this . type == NUMBER ) ; }
void function ( Closure arg0 ) { RuntimeException loc0 = new RuntimeException ( arg0 . toString ( ) ) ; loc0 . printStackTrace ( ) ; throw loc0 ; }
void function ( ) { MyListener . setInvocationCount ( 0 ) ; SLSBCMT loc0 = lookup ( "srini_string" , SLSBCMT . class ) ; this . doCMTTest ( loc0 , 6 ) ; }
void function ( int arg0 ) { sleep ( arg0 , "srini_string" ) ; }
void function ( String arg0 ) { this . caller = arg0 ; }
boolean function ( CtField arg0 ) { return arg0 . hasAnnotation ( Entity . class ) ; }
Region function ( ) { return fTagPosition ; }
ColorPolynomial < C > function ( int arg0 , int arg1 ) { return new ColorPolynomial < C > ( red . sum ( arg0 ) , green . sum ( arg1 ) , white . sum ( arg0 ) ) ; }
void function ( ) { Thread . sleep ( TICK_TIME ) ; blockedTimeInWindow = 0 ; }
void function ( ColorExplorerMenuItem arg0 ) { }
Block function ( ) { return returnAddress ; }
void function ( String arg0 , String arg1 ) { mParameters . put ( arg0 , arg1 ) ; }
StubStrategy function ( String arg0 , String [ ] arg1 , Class < ? > arg2 ) { return new StubStrategy ( arg0 , arg1 , arg2 ) ; }
void function ( ) { Customer loc0 = dao . retrieve ( "srini_string" ) ; assertNull ( loc0 ) ; }
boolean function ( ) { return valid ; }
File [ ] function ( File arg0 ) { List < String > loc0 = new ArrayList < > ( ) ; return findFiles ( arg0 , loc0 ) ; }
AlgebraicNumber < C > function ( java . io . Reader arg0 ) { return parse ( arg0 , null ) ; }
float function ( @ NonNull final String arg0 , @ NonNull final float arg1 ) { if ( arg0 != null ) { try { return Float . parseFloat ( arg0 ) ; } catch ( final NumberFormatException loc0 ) { } } return arg1 ; }
List < Variable > function ( ) { System . out . println ( "srini_string" ) ; List < Variable > loc0 = new ArrayList < Variable > ( ) ; loc0 . add ( find_value_by_name ( "srini_string" ) ) ; return loc0 ; }
BranchAndFinancialInstitutionIdentification4 function ( String arg0 ) { return new BranchAndFinancialInstitutionIdentification4 ( null , arg0 ) ; }
XMLParser function ( ) { return new SpecialCharState ( this ) ; }
boolean function ( ) { return isField ; }
String function ( String arg0 ) { }
String [ ] function ( ) { return keyAliases ; }
char function ( ) { return list . peek ( ) ; }
void function ( ) { if ( synchronizerDelegate != null ) { synchronizerDelegate . onSynchronized ( ) ; } }
boolean function ( ) { return fEnabled ; }
void function ( ) { if ( fLabel != null ) { fLabel . setEnabled ( true ) ; } }
BigDecimal function ( ) { return random . nextDouble ( ) ; }
Object function ( final String arg0 , final Object arg1 ) { final Object loc0 = this . data . get ( arg0 ) ; if ( loc0 == null ) { final loc0 = new BSONObject ( ) ; this . data . put ( arg0 , loc0 ) ; } return loc0 ; }
void function ( ) { }
IWidgetLocator function ( XAccessible arg0 , int arg1 , int arg2 ) { return null ; }
Type function ( ) { return superclass ; }
WebApp function ( ) { return deployer . createWebApp ( MODULE_WEB ) ; }
String function ( Node arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; serialize ( arg0 , loc0 ) ; return loc0 . toString ( ) ; }
ClassLoader function ( ) { ClassLoader loc0 = Thread . currentThread ( ) . getContextClassLoader ( ) ; if ( loc0 == null ) { loc0 = ClassLoader . getSystemClassLoader ( ) ; } return ( loc0 != null ? loc0 : ClassLoader . getSystemClassLoader ( ) ) ; }
void function ( List < Writable > arg0 ) { for ( Writable loc0 : arg0 ) { queue . add ( loc0 ) ; } }
GenVector < C > function ( ) { return new GenVector < C > ( random , coFac , density ) ; }
int function ( ) { return marcador ; }
MathUtil function ( ) { return instance ; }
void function ( ) { if ( ! closed ) { tx = getRawAgencyTx ( ) ; if ( tx != null ) { tx . commit ( ) ; } else { throw new IOException ( "srini_string" ) ; } closed = true ; } }
Change function ( ClasspathFixProposal arg0 ) { Change loc0 = new Change ( ) ; loc0 . addItem ( arg0 ) ; return loc0 ; }
void function ( Interpolator arg0 ) { if ( ! isAnimating ) { animationThread = new Thread ( this ) ; animationThread . start ( ) ; } activeInterpolators . addElement ( arg0 ) ; fireStateChanged ( ) ; }
String function ( ) { return entry . getKey ( ) ; }
int function ( ) { return index ; }
Map < String , String > function ( final Map < String , String > arg0 ) { final Map < String , String > loc0 = new HashMap < String , String > ( ) ; if ( arg0 != null ) { for ( Map . Entry < String , String > loc1 : arg0 . entrySet ( ) ) { if ( ! Strings . isNullOrEmpty ( loc1 . getKey ( ) ) ) { loc0 . put ( loc1 . getKey ( ) , loc1 . getValue ( ) ) ; } } } return loc0 ; }
StringBuilder function ( StringBuilder arg0 , char arg1 , char arg2 ) { arg0 . append ( langTable [ arg1 ] ) ; arg0 . append ( langTable [ arg2 ] ) ; return arg0 ; }
void function ( ) { probes = new boolean [ 100 ] ; }
Map < String , ArrayList < String >> function ( ) { return values ; }
ArrayList < String > function ( ) { final ArrayList < String > loc0 = new ArrayList < String > ( ) ; loc0 . addAll ( getMemberRelatedVariables ( ) ) ; loc0 . addAll ( getObjectRelatedVariables ( ) ) ; return loc0 ; }
String function ( String arg0 ) { return discardNonBase64Chars ( arg0 , 0 , arg0 . length ( ) ) ; }
void function ( ) { synchronized ( globalMutex ) { globalMutex . add ( this ) ; } }
void function ( float arg0 ) { this . offset = arg0 ; }
Quotient < C > function ( ) { return new Quotient < C > ( random ( ) ) ; }
Dialog function ( Component arg0 , Id arg1 , String arg2 ) { return createRefactoringStatusDialog ( arg0 , arg1 , arg2 , null ) ; }
boolean function ( ) { return false ; }
DocumentWrapper function ( DocumentWrapper arg0 ) { DocumentWrapper loc0 = ( DocumentWrapper ) arg0 . clone ( ) ; loc0 . getDocumentMetadata ( ) . add ( DocumentProtos . DocumentMetadata . getRowId ( ) ) ; return loc0 ; }
T function ( Class < T > arg0 ) { return arg0 . cast ( new Constructor < T > [ 0 ] ) ; }
boolean function ( PdfName arg0 ) { if ( viewerPreferences != null ) { return viewerPreferences . containsKey ( arg0 ) ; } return false ; }
Local < C > function ( String arg0 ) { return parse ( new java . io . StringReader ( arg0 ) ) ; }
SortedBag < T > function ( Iterable < T > arg0 ) { if ( arg0 instanceof Collection ) { return new SortedBagWithValues < > ( ( Collection < T > ) arg0 ) ; } return new SortedBagWithValues < > ( Arrays . asList ( arg0 ) ) ; }
boolean function ( ) { return enabledMetrics . size ( ) > 0 ; }
void function ( JPanel arg0 ) { this . runner = new GUIRunner ( arg0 ) ; }
ISDVInfo function ( ) { return new ISDVInfo ( ) ; }
ITrace2D function ( ) { return m_trace ; }
Image function ( String arg0 , Class arg1 ) { return getImage ( arg0 , arg1 , false ) ; }
void function ( OutputStream arg0 ) { executionData . save ( arg0 ) ; }
Residue < C > function ( ) { return new Residue < C > ( ring , val , isunit ) ; }
byte [ ] function ( ) { if ( isByteArrayComputed ) { computeByteArray ( ) ; } return byteArray ; }
void function ( int arg0 ) { deposit ( arg0 , balance ) ; }
Dialog function ( Object arg0 , Id arg1 , Object arg2 ) { return createRefactoringStatusDialog ( arg0 , arg1 , arg2 , null ) ; }
JoinSequence function ( boolean arg0 ) { this . useThetaStyle = arg0 ; return this ; }
void function ( Object arg0 ) { if ( arg0 instanceof Object [ ] ) { parseTag ( ( Object [ ] ) arg0 , out ) ; } }
boolean function ( ) { if ( "srini_string" . equals ( id ) ) { return true ; } return false ; }
DateTime function ( ) { return DateTimeUtils . fromMutableDateTimeISO ( this ) ; }
Quotient < C > function ( final int arg0 ) { return new Quotient < C > ( num . mod ( arg0 ) , den ) ; }
boolean function ( Type arg0 , Type arg1 ) { return false ; }
Limit function ( ) { return new Limit ( ) ; }
IHoverInfo function ( final IColor arg0 , final IColor arg1 , final IProgressMonitor arg2 ) { return new HoverInfo ( arg0 , arg1 , false ) ; }
int function ( ) { return ( int ) Math . round ( label . getPosX ( ) ) ; }
boolean function ( Block arg0 ) { if ( arg0 . y + Block . HEIGHT > y ) { if ( arg0 . x + Block . WIDTH == x ) { return true ; } } return false ; }
void function ( String arg0 ) { this . rowData = arg0 ; }
int function ( ) { if ( beforeFirst ) { throw new IllegalStateException ( "srini_string" ) ; } int loc0 = 0 ; if ( object != null ) { loc0 = object . hashCode ( ) ; } return loc0 ; }
void function ( ) { Assert . assertTrue ( "srini_string" , this . slsb . isResourceInjected ( ) ) ; }
Iterator < Float > function ( FloatIterator arg0 ) { return ( arg0 == null ) ? null : new FloatIterator ( arg0 ) ; }
void function ( TokenProvider arg0 ) { this . tokenProvider = arg0 ; }
Header function ( ) { return myHeader ; }
int function ( ) { return tagNo ; }
byte [ ] function ( byte [ ] arg0 ) { try { return saslClient != null ? saslClient . evaluateChallenge ( arg0 ) : new byte [ 0 ] ; } catch ( SaslException loc1 ) { throw Throwables . propagate ( loc1 ) ; } }
Iterator < D > function ( ) { return reader . iterator ( ) ; }
void function ( Composite arg0 , ImageDescriptor arg1 ) { fComposite = arg0 ; fTextControl = createFilterControl ( arg0 , arg1 , SWT . NONE ) ; fClearButton = createClearButton ( arg0 , arg1 ) ; }
JoinSequence function ( QueryableCollection arg0 ) { return createJoinSequence ( arg0 , sfi ) ; }
void function ( @ ArquillianResource ( TxControlServlet . class ) URL arg0 ) { testURL ( arg0 , true , false ) ; }
void function ( String [ ] arg0 ) { printCapitalized ( "srini_string" ) ; }
Exception function ( ) { return this . error ; }
void function ( MetricsAggregate arg0 ) { this . conditionVarition = arg0 ; }
byte [ ] function ( Drawable arg0 ) { if ( arg0 == null ) { return null ; } ByteArrayOutputStream loc0 = new ByteArrayOutputStream ( ) ; arg0 . draw ( loc0 ) ; return loc0 . toByteArray ( ) ; }
void function ( Closeable arg0 ) { if ( arg0 != null ) { try { arg0 . close ( ) ; } catch ( IOException loc0 ) { } } }
void function ( final boolean arg0 ) { if ( arg0 == false ) { throw new IllegalArgumentException ( "srini_string" ) ; } }
Residue < C > function ( Reader arg0 ) { return parse ( arg0 , null ) ; }
float function ( ) { return rise ; }
byte [ ] function ( String arg0 ) { return StringUtils . getBytesUnchecked ( arg0 , CharEncoding . UTF_16 ) ; }
void function ( ) { for ( int loc0 = 0 ; loc0 < grid . length ; loc0 ++ ) { for ( int loc1 = 0 ; loc1 < grid [ 0 ] . length ; loc1 ++ ) { grid [ loc0 ] [ loc1 ] = false ; } } }
Student function ( String arg0 ) { Unmarshaller loc0 = new Unmarshaller ( ) ; Student loc1 = ( Student ) loc0 . unmarshal ( arg0 ) ; return loc1 ; }
int function ( ) { return state ; }
void function ( boolean arg0 ) { this . payloadSizeEstimatedWhenAdding = arg0 ; }
void function ( List < Integer > arg0 ) { taskIdsQueue . addAll ( arg0 ) ; takeLock . lock ( ) ; try { notEmpty . signal ( ) ; } finally { takeLock . unlock ( ) ; } }
void function ( long [ ] arg0 ) { _list . toArray ( arg0 ) ; }
int function ( ) { return type ; }
void function ( ) { Assert . assertNull ( this . getClass ( ) . getSimpleName ( ) + "srini_string" ) ; this . validateChildNotSetOnSetParent ( "srini_string" ) ; }
boolean function ( ) { return num == 0 ; }
String function ( File arg0 ) { return readFile ( arg0 . getAbsolutePath ( ) ) ; }
UUID function ( byte [ ] arg0 ) { if ( isPsshAtom ( arg0 ) ) { String loc0 = new String ( arg0 , "srini_string" ) ; return new UUID ( loc0 ) ; } return null ; }
List function ( ) { return list ; }
void function ( Component arg0 ) { this . component = arg0 ; }
void function ( ) { next . close ( ) ; }
String function ( IPlugIn arg0 ) { if ( arg0 == null ) { return null ; } return arg0 . getIdentifier ( ) ; }
PMML function ( InputStream arg0 ) { return newPMML ( IOUtil . toInputStream ( arg0 ) ) ; }
int function ( ) { return classInfo . hashCode ( ) ; }
boolean function ( IProject arg0 ) { return _exists ; }
void function ( String arg0 ) { this . style = arg0 ; }
void function ( final HttpParams arg0 , final boolean arg1 ) { Args . notNull ( arg0 , "srini_string" ) ; arg0 . setBooleanParameter ( CoreConnectionPNames . SO_KEEPALIVE , arg1 ) ; }
void function ( int arg0 , int arg1 , Animal arg2 ) { if ( arg0 == EMPTY ) { return ; } arg0 = arg0 * FISH ; arg1 = arg1 * FISH ; if ( arg2 == null ) { gridData [ arg0 ] [ arg1 ] = FISH ; } else { gridData [ arg0 ] [ arg1 ] = arg2 ; } }
Set < ResourceGroupEntity > function ( String arg0 ) { return resourceGroupService . findAllByResourceType ( arg0 ) ; }
void function ( ListElement arg0 ) { listElements . add ( arg0 ) ; }
Object [ ] [ ] function ( ) { return columnNames . clone ( ) ; }
void function ( Class < E > arg0 , E arg1 ) { if ( handlers . containsKey ( arg0 ) ) { handlers . get ( arg0 ) . handle ( arg1 ) ; } else { throw new RuntimeException ( "srini_string" + arg0 + "srini_string" ) ; } }
void function ( boolean arg0 ) { this . useCriterion4 = arg0 ; }
void function ( Author arg0 ) { addRecipient ( arg0 , null ) ; }
void function ( ) { if ( _map != null ) { _map . walkMap ( this ) ; } _total = 0 ; }
String function ( ) { return getFreemarkerFooter ( ) ; }
Identifier function ( String arg0 , String arg1 ) { return new StringIdentifier ( arg0 , arg1 , Locale . getDefault ( ) ) ; }
void function ( ) { synchronized ( sClipboardQueue ) { sClipboardQueue . clear ( ) ; } }
String function ( Object ... arg0 ) { return String . format ( values , arg0 ) ; }
ITypeHierarchy function ( IType arg0 ) { return findTypeHierarchyInCache ( arg0 ) ; }
void function ( ) { fLength = fBuffer . length ( ) ; }
int function ( ListNode arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 . size ( ) ; loc1 ++ ) { loc0 += arg0 . get ( loc1 ) . getValue ( ) ; } return loc0 ; }
void function ( ) { }
void function ( double arg0 , double arg1 ) { leftBound = arg0 ; rightBound = arg1 ; }
List < Tag > function ( Tag arg0 ) { List < Tag > loc0 = new ArrayList < Tag > ( ) ; if ( arg0 != null ) { while ( arg0 . getParent ( ) != null ) { loc0 . add ( arg0 . getParent ( ) ) ; arg0 = arg0 . getParent ( ) ; } } return loc0 ; }
void function ( ) { assertEquals ( OrderedUnorderedListItem . class , this . li . getClass ( ) ) ; }
void function ( Collection arg0 , Collection arg1 , String arg2 ) { if ( ! testContains ( arg0 , arg1 , arg2 ) ) { fail ( arg2 ) ; } }
int function ( String arg0 , String arg1 ) { return getMessage ( arg0 , arg1 , null ) . replace ( "srini_string" , "srini_string" ) ; }
int function ( ASTNode arg0 ) { switch ( arg0 . getSelectionMode ( ) ) { case INTERSECTS : case BEFORE : case AFTER : return INTERSECTS ; default : return OUTSIDE ; } }
void function ( boolean arg0 ) { started_ = arg0 ; }
IJavaSearchScope function ( IJavaScriptElement arg0 ) { return RefactoringScopeFactory . create ( arg0 , true ) ; }
BigInteger function ( BigInteger arg0 ) { synchronized ( this ) { if ( _curr == null ) { return null ; } else { return _curr . get ( arg0 ) ; } } }
Response function ( Request arg0 ) { checkCode ( arg0 ) ; Repository loc0 = getRepository ( arg0 ) ; List < Response > loc1 = loc0 . findAll ( ) ; return loc1 . size ( ) > 0 ? loc1 . get ( 0 ) : null ; }
void function ( ) { TopLevelBean loc0 = lookup ( "srini_string" , TopLevelBean . class ) ; loc0 . induceCreationViaJNDILookup ( ) ; }
void function ( int arg0 ) { unscheduleTask ( arg0 ) ; }
String function ( ) { return id ; }
long function ( ) { return allocationLimit . get ( ) ; }
int function ( ) { return getAddends ( ) . size ( ) ; }
ColumnFileMetaData function ( ) { return metaData ; }
Residue < C > function ( ) { return new Residue < C > ( arg0 , - arg0 ) ; }
String function ( ) { return baseID ; }
Set < Asset > function ( Set < Asset > arg0 ) { final Set < Asset > loc0 = new HashSet < Asset > ( ) ; for ( final Asset loc1 : arg0 ) { if ( loc1 . getVendor ( ) != null ) { loc0 . add ( loc1 ) ; } } return loc0 ; }
String function ( ) { return catalogKey ; }
RDD < Citations > function ( RDD < Citations > arg0 ) { if ( ! ( arg0 instanceof RDD < Citations > ) ) { throw new IllegalArgumentException ( "srini_string" ) ; } return ( RDD < Citations > ) arg0 ; }
void function ( Figure arg0 ) { _message = arg0 ; }
ListIterator function ( ListIterator arg0 ) { if ( arg0 == null ) { return null ; } return new ListIteratorWrapper ( arg0 ) ; }
Closure function ( final Closure arg0 ) { return new Closure ( ) { public Object doInContext ( Closure arg1 ) throws Throwable { return arg0 . call ( arg1 ) ; } } ; }
int function ( ) { return val . size ( ) ; }
boolean function ( final HttpServerExchange arg0 ) { if ( isResponseFresh ( arg0 ) ) { return true ; } return getLastModifiedValue ( arg0 ) != null && getExpirationDate ( arg0 ) != null ; }
InputStream function ( InputStream arg0 , long arg1 ) { return new BufferedInputStream ( arg0 , arg1 ) ; }
boolean function ( ) { return ! instantiated ; }
void function ( int arg0 ) { if ( ! useRanks ) throw new IllegalStateException ( "srini_string" ) ; if ( startRank == - 1 ) { keyPopularity . add ( arg0 ) ; return ; } else { distribution . reorderPopularity ( arg0 , startRank ) ; } }
Hessian2Deserializer function ( Serializer arg0 ) { return new Hessian2Deserializer ( arg0 ) ; }
void function ( IWidgetAdapter < T > arg0 ) { adapters . put ( arg0 . getClass ( ) , arg0 ) ; }
void function ( double arg0 ) { this . numHosts = arg0 ; }
void function ( CryptoRecord arg0 ) { arg0 . init ( ) ; }
void function ( Object arg0 ) { if ( is12 ) { getLogger ( ) . log ( FQCN , ( Priority ) Level . TRACE , arg0 , null ) ; } else { getLogger ( ) . log ( FQCN , Level . TRACE , arg0 , null ) ; } }
boolean function ( char arg0 ) { return ( arg0 >= langTable [ MATRA_AA ] && arg0 <= langTable [ MATRA_HLR ] ) ; }
void function ( String arg0 ) { this . fileName = arg0 ; }
Throwable function ( ) { return state . getException ( ) ; }
boolean function ( T arg0 ) { return aroundUpdate ( arg0 , 0 ) ; }
List < Tag > function ( Tag arg0 ) { List < Tag > loc0 = new ArrayList < Tag > ( ) ; if ( arg0 != null ) { while ( arg0 . getParent ( ) != null ) { loc0 . add ( arg0 . getParent ( ) ) ; arg0 = arg0 . getParent ( ) ; } } return loc0 ; }
void function ( ) { DefaultValidatorFactory loc0 = Validation . buildDefaultValidatorFactory ( ) ; Assert . assertTrue ( "srini_string" , loc0 instanceof DefaultValidatorFactory ) ; }
Collection function ( ) { return bag ; }
double function ( ) { return accounts . length ; }
void function ( String arg0 ) { }
void function ( int arg0 ) { doKeyDown ( arg0 , false ) ; }
Result function ( Object arg0 , Closure arg1 ) { if ( arg0 == null ) { return null ; } return iClosure . call ( arg0 ) ; }
int function ( ) { return coveredBranches ; }
AlgebraicNumber < C > function ( ) { return new AlgebraicNumber < C > ( val . gcd ( val , this ) , this ) ; }
T function ( ) { return key ; }
void function ( final GeneralArchive < ? > arg0 ) { arg0 . addClass ( XACMLPolicies . class ) ; }
LinearLayout function ( String arg0 ) { LinearLayout loc0 = new LinearLayout ( ) ; int loc1 = 0 ; for ( MyCard loc2 : cardsInPlay ) { loc0 . addComponent ( loc2 . makeLinearLayout ( arg0 ) ) ; loc1 ++ ; } return loc0 ; }
MessageSource function ( ) { return messageSourceMock ; }
boolean function ( String arg0 ) { return _register . containsKey ( arg0 ) ; }
Integer function ( ) { return intervalQualifier == null ? null : intervalQualifier . getFractionSecondPrecision ( ) ; }
void function ( String arg0 , String arg1 ) { assertEquals ( "srini_string" , arg0 , arg1 ) ; }
void function ( Color arg0 ) { color = arg0 ; filled = false ; }
List < PropertyDeclaration > function ( ) { if ( properties == null ) { properties = new ArrayList < PropertyDeclaration > ( ) ; } return this . properties ; }
void function ( ComplexType arg0 , XMLStreamWriter arg1 ) { if ( arg0 != null ) { write ( arg0 , arg1 ) ; } }
String function ( ) { return getIdentityZNode ( false ) ; }
void function ( KeyStore arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( REVIEW_MESSAGE ) ; } }
CQLStatementTupleMapper function ( Tuple arg0 , String arg1 , Object arg2 ) { return arg0 -> mapToCQL ( arg0 , arg1 , arg2 , null ) ; }
byte function ( int arg0 ) { return list . getQuick ( arg0 ) ; }
void function ( ) { }
void function ( ) { dao . deleteCustomerSchema ( "srini_string" ) ; }
boolean function ( ) { return percentage ; }
SessionImplementor function ( ) { return session ; }
IWidgetLocator function ( T arg0 ) { return new WidgetLocator ( arg0 ) ; }
Set < Integer > function ( MStatement arg0 ) { Set < Integer > loc0 = new HashSet < Integer > ( ) ; for ( MVariable loc1 : arg0 . getInputs ( ) ) { loc0 . add ( loc1 . getIndex ( ) ) ; } return loc0 ; }
String function ( ) { invokeBody ( ) ; return trimBody ( ) ; }
void function ( ) { }
void function ( mg , String arg0 ) { if ( is_local_variable_type_table ( arg0 ) ) { mg . removeAttribute ( arg0 ) ; } }
Document function ( ) { return fDocument ; }
void function ( final File arg0 , final File arg1 ) { final File loc0 = arg0 . getCanonicalFile ( ) ; final File loc1 = arg1 . getCanonicalFile ( ) ; compareFiles ( loc0 , loc1 ) ; }
Rectangle2D function ( ) { return new Rectangle2D . Float ( startPoint . x , startPoint . y , endPoint . x + endPoint . width , endPoint . y + endPoint . height ) ; }
void function ( ) { assertNotNull ( new File ( this . testFolder . getRoot ( ) , "srini_string" ) ) ; }
UserInterfaceContext function ( ) { return new UserInterfaceContextImpl ( ) ; }
Asn1Asn1 function ( byte [ ] arg0 ) { return decode ( arg0 ) ; }
Duration function ( Timestamp arg0 , long arg1 ) { return Durations . fromMillis ( arg0 . getTime ( ) - arg1 ) ; }
void function ( int arg0 , String arg1 ) { defaults . put ( arg0 , arg1 ) ; }
Object function ( ) { return debug ; }
ContextEntity function ( ContextEntity arg0 ) { if ( arg0 == null ) { return globalContext ; } else { return arg0 ; } }
String function ( ) { return classInfo . name ( ) ; }
byte [ ] function ( ) { if ( consumedLength > 0 ) { return Arrays . copyOf ( consumedData , consumedLength ) ; } else { consumedLength = 0 ; return null ; } }
int function ( ) { int loc0 = 1 ; loc0 = 37 * loc0 + ( this . hashCode ( ) << 24 ) ; loc0 = 37 * loc0 + ( this . hashCode ( ) << 16 ) ; loc0 = 37 * loc0 + ( this . hashCode ( ) << 8 ) ; loc0 = 37 * loc0 + this . hashCode ( ) ; return loc0 ; }
Token [ ] function ( ) { return getIssuedTokens ( ) ; }
void function ( boolean arg0 ) { fStatementsRecovery = arg0 ; }
boolean function ( ColorPolynomial < C > arg0 ) { return getPolynomial ( ) . equals ( arg0 . getPolynomial ( ) ) ; }
Set function ( ) { return composites ; }
void function ( ) { trimToSize ( _size ) ; }
void function ( Throwable arg0 ) { invalidScriptError = arg0 ; }
void function ( File arg0 , String arg1 ) { if ( arg0 . exists ( ) && arg1 != null ) { FileWriter loc0 = new FileWriter ( arg0 ) ; loc0 . write ( arg1 ) ; loc0 . close ( ) ; } }
int function ( Object arg0 ) { return compareTo ( ( BigDecimal ) arg0 ) ; }
int function ( ) { return stack . size ( ) ; }
boolean function ( ) { return type == Type . VM ; }
ResourceEditPropertyBuilder function ( String arg0 ) { fcExternalLink = arg0 ; return this ; }
boolean function ( ) { if ( isKeyOptional == null ) { return false ; } else { return isKeyOptional ; } }
SourceViewer function ( ) { return fSourceViewer ; }
List < List < VectorXZ >> function ( Collection < ? extends Triangle > arg0 ) { return texCoordLists ( arg0 , null , null , null ) ; }
void function ( Owner arg0 ) { if ( isChuckNorris ( arg0 ) ) { permissionService . chuckOwners ( ) ; } else if ( isDeletableByOwner ( arg0 ) ) { permissionService . deleteOwners ( ) ; } }
ArrayList < T > function ( Enumeration < ? > arg0 ) { ArrayList < T > loc0 = new ArrayList < T > ( ) ; while ( arg0 . hasMoreElements ( ) ) { loc0 . add ( arg0 . nextElement ( ) ) ; } return loc0 ; }
int function ( ) { return size ; }
int function ( ) { if ( allowTcp ( ) ) { return 443 ; } return getKdcPort ( ) ; }
Class function ( Class arg0 ) { return arg0 ; }
void function ( final Script arg0 ) { if ( arg0 == null ) { throw new NullPointerException ( ) ; } this . list . remove ( arg0 ) ; }
void function ( ) { state = State . NORMAL ; }
ShortListIterator function ( ShortListIterator arg0 ) { return UnmodifiableShortListIterator . unmodifiableShortListIterator ( arg0 ) ; }
void function ( ) { output = new PrintStream ( System . out ) ; error = new PrintStream ( System . err ) ; singleton = new FileLoggerModule ( OUTPUT_FILE ) ; }
boolean function ( double arg0 , double arg1 ) { if ( ! ( arg0 < arg1 ) ) return false ; if ( arg0 > arg1 ) return true ; return ( arg0 == arg1 ) ; }
String function ( ) { return name ; }
ClassLoader function ( Class < ? > arg0 ) { ClassLoader loc0 = null ; try { loc0 = Thread . currentThread ( ) . getContextClassLoader ( ) ; } catch ( Throwable loc1 ) { } if ( loc0 == null ) return arg0 . getClassLoader ( ) ; return loc0 ; }
Local < C > function ( MathContext arg0 ) { return local ( arg0 . m ) ; }
boolean function ( ) { return false ; }
T function ( List < T > arg0 ) { if ( arg0 . isEmpty ( ) ) { return null ; } Random loc0 = new Random ( ) ; return arg0 . get ( loc0 . nextInt ( arg0 . size ( ) ) ) ; }
boolean function ( ) { return _freeStack . get ( ) != 0 ; }
HazelcastInstance function ( String arg0 , HazelcastInstance arg1 ) { return new ClientServerTopology ( arg0 , arg1 ) ; }
Object function ( Object arg0 , String arg1 ) { return directPropertyAccessOR . getValue ( arg0 , arg1 ) ; }
void function ( File arg0 ) { if ( arg0 . isSymbolic ( ) ) { deleteOrThrow ( arg0 ) ; } else { arg0 . delete ( ) ; } }
void function ( ) { singleton . reset ( ) ; }
HashCodeBuilder function ( float arg0 ) { return append ( Float . floatToIntBits ( arg0 ) ) ; }
void function ( Integer arg0 ) { this . deptId = arg0 ; }
ContextQuery function ( String arg0 ) { return namedByQuery ( arg0 , all ( ) ) ; }
void function ( ) { assertTrue ( po . content ( ) != null ) ; }
void function ( ) { cache . clear ( ) ; }
K function ( ValuePredicate < V > arg0 ) { SortedMap < K , V > loc0 = kSmallest ; while ( loc0 != null ) { if ( loc0 . containsValue ( arg0 ) ) { return loc0 . getKey ( ) ; } loc0 = loc0 . next ; } return null ; }
void function ( GridBagConstraints arg0 ) { this . constraints = arg0 ; }
MetricsAggregate function ( ) { return peerVariation ; }
boolean function ( Object arg0 ) { if ( this == arg0 ) return true ; if ( ! ( arg0 instanceof Residue ) ) return false ; Residue < C > loc0 = ( Residue < C > ) arg0 ; if ( this . isField == loc0 . isField ) return ( this . isField == loc0 . isField ) ; if ( this . modul == loc0 . modul ) return ( this . isModul == loc0 . modul ) ; return false ; }
boolean function ( final char arg0 , final char arg1 , final char arg2 ) { return arg0 <= arg1 && arg2 <= arg2 ; }
void function ( String arg0 ) { this . outOfServiceByRelease = arg0 ; }
LoadPlan function ( ) { return new LoadPlan ( ) ; }
void function ( Document ... arg0 ) { for ( Document loc0 : arg0 ) { if ( loc0 != null ) { collection . insert ( loc0 ) ; } } }
BigDecimal function ( BigDecimal arg0 ) { return valueOf ( arg0 . toString ( ) ) ; }
int function ( ) { return iterationCount ; }
void function ( WidgetLocator arg0 ) { _parentInfo = arg0 ; }
void function ( ) { list . clear ( ) ; }
void function ( ) { checkLoopback ( ) ; delegate . writeLock ( ) . lock ( ) ; }
void function ( RenderEvent arg0 ) { for ( RenderFilter loc0 : filters ) { loc0 . render ( arg0 ) ; } }
Object function ( final Class arg0 ) { return this . map . remove ( arg0 ) ; }
CompositeData function ( ) { try { return new CompositeDataSupport ( COMPOSITE_TYPE , ITEM_NAMES , new Object [ ] { roleName , fetchCount , updateCount , removeCount } ) ; } catch ( OpenDataException loc0 ) { throw new RuntimeException ( loc0 ) ; } }
boolean function ( int arg0 ) { if ( eventPool . containsKey ( arg0 ) ) { return true ; } else { return false ; } }
List function ( String arg0 ) { ArrayList loc0 = new ArrayList ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0 , _delimeter ) ; while ( loc1 . hasMoreTokens ( ) ) { loc0 . add ( loc1 . nextToken ( ) ) ; } return loc0 ; }
LatLng function ( ) { return startNode . getCenter ( ) ; }
ArrayList < GenPolynomial < C >> function ( ) { return P ; }
void function ( BufferFlag arg0 ) { flags . add ( arg0 ) ; }
boolean function ( T arg0 , Hasher arg1 ) { return arg1 . equals ( getNthIteratedElement ( arg0 ) ) ; }
UnivPowerSeries < C > function ( BigInteger arg0 ) { return get ( java . lang . BigInteger . valueOf ( arg0 ) ) ; }
void function ( Change arg0 ) { fParent = arg0 ; }
long function ( int arg0 ) { long loc0 = 0 ; for ( int loc1 = 0 ; loc1 < frames_ . size ( ) ; loc1 ++ ) { Frame loc2 = ( Frame ) frames_ . elementAt ( loc1 ) ; long loc3 = loc2 . duration_ + arg0 ; if ( loc3 > loc0 ) loc0 = loc3 ; } return loc0 ; }
PdfImageObject function ( ) { return imageObject ; }
void function ( Object arg0 ) { removeCallback ( arg0 , Callback . class ) ; }
void function ( ) { if ( mDidChange ) { mMenu . onItemChanged ( this ) ; } }
void function ( String arg0 ) { m_isMajorTick = true ; m_label = arg0 ; }
String function ( int arg0 , String arg1 ) { return arg0 + "srini_string" + arg1 ; }
boolean function ( ) { return CHILD_MENU . equals ( _hierarchy . getRoot ( ) ) ; }
ConditionMonitor function ( ) { return INSTANCE ; }
void function ( Object arg0 , Object arg1 , Object arg2 ) { try { Method loc0 = arg0 . getClass ( ) . getMethod ( "srini_string" , new Class [ ] { String . class , Object . class } ) ; loc0 . setAccessible ( true ) ; loc0 . invoke ( arg0 , arg1 , arg2 ) ; } catch ( Exception loc0 ) { throw new RuntimeException ( loc0 ) ; } }
HashMap < BigDecimal , MetricsSubCoordinatorInfo > function ( ) { return listOfSubCoordinators ; }
boolean function ( Object arg0 , Object arg1 ) { if ( arg0 == null ) { return arg1 == null ; } return arg0 . equals ( arg1 ) ; }
Duration function ( int arg0 ) { return new Duration ( arg0 ) ; }
void function ( ) { SecurityConfiguration . getApplicationPolicy ( "srini_string" ) ; }
Map < String , String > function ( ) { return parasMap ; }
Boolean function ( ResourceEntity arg0 , Release arg1 ) { return this . resourceReleaseComparator . isBestMatching ( arg0 , arg1 ) ; }
Owner function ( ) { return owner ; }
String function ( ) { return lcHostname + "srini_string" + port ; }
void function ( String arg0 ) { if ( arg0 != null ) { this . className += "srini_string" + arg0 + "srini_string" ; } }
TLinkable function ( ) { return _next ; }
int function ( ) { return available - leased ; }
List < String > function ( ) { if ( tags == null ) { tags = new ArrayList < String > ( ) ; } return this . tags ; }
void function ( PdfReader arg0 , PdfWriter arg1 ) { fc . addDocument ( arg0 , arg1 ) ; }
int function ( ) { int loc0 = 17 ; loc0 = 31 * loc0 + ( ( val == null ) ? 0 : val . hashCode ( ) ) ; return loc0 ; }
void function ( File ... arg0 ) { parse ( Arrays . asList ( arg0 ) ) ; }
Message function ( ) { try { return blkQueue . take ( ) ; } catch ( InterruptedException loc0 ) { LOGGER . error ( "srini_string" , loc0 ) ; return null ; } }
List < ColumnMetaData > function ( Schema arg0 ) { return columns . get ( arg0 ) ; }
VectorXYZ function ( final double arg0 , final double arg1 , final double arg2 ) { final double loc0 = ( double ) this . x * arg0 + ( double ) this . y * arg1 + ( double ) this . z * arg2 ; final double loc1 = ( double ) this . x * arg0 + ( double ) this . y * arg1 + ( double ) this . z * arg2 ; return new VectorXYZ ( loc0 , loc1 , loc0 ) ; }
void function ( ) { tokeniser . readComment ( ) ; }
void function ( Long arg0 ) { this . endIp = arg0 ; }
List < BE > function ( ) { List < BE > loc0 = new ArrayList < > ( sentNotifications ) ; return inTx ( context , loc0 ) ; }
List < WPTreeNode > function ( WPTreeNode arg0 ) { if ( arg0 != null ) { this . children . add ( arg0 ) ; } return children ; }
boolean function ( int arg0 ) { if ( ind_var == null || ind_var . getValue ( ) != arg0 ) return false ; return true ; }
int function ( ) { return i_initialSize ; }
void function ( ITestIdentifier arg0 ) { _runningTest = arg0 ; if ( _runningTest != null ) { _runningTest . start ( ) ; } }
boolean function ( ) { return gotBug1Event ; }
void function ( ) { started = true ; }
int function ( ) { return size ; }
boolean function ( ) { return locator . isVisible ( ui ) ; }
void function ( Parameters arg0 ) { negatedParameters . add ( arg0 ) ; }
GenVector < C > function ( GenVector < C > arg0 ) { return new GenVector < C > ( modul . scalarProduct ( this . val , arg0 . val ) , this . signum ) ; }
List < String > function ( File arg0 ) { return getNamespaceUris ( new FileInputStream ( arg0 ) ) ; }
int function ( ) { throw new UnsupportedOperationException ( "srini_string" ) ; }
BigInteger function ( ) { checkBounds ( ) ; return bigInt ; }
BigInteger function ( ) { return BigInteger . valueOf ( - 1 ) ; }
List < String > function ( ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( PptTopLevel loc1 : this ) { loc0 . add ( loc1 . name ) ; } return loc0 ; }
BigDecimal function ( Reader arg0 ) { return parse ( arg0 , DEFAULT_CONTEXT ) ; }
void function ( ) { example . advance ( ) ; }
List function ( String arg0 ) { ArrayList loc0 = new ArrayList ( ) ; StringTokenizer loc1 = new StringTokenizer ( arg0 , _delimeter ) ; while ( loc1 . hasMoreTokens ( ) ) { loc0 . add ( loc1 . nextToken ( ) ) ; } return loc0 ; }
void function ( ) { name . unregister ( ) ; server . unregisterMBean ( name ) ; }
boolean function ( String arg0 ) { return arg0 . length ( ) == 1 && Character . isDigit ( arg0 . charAt ( 0 ) ) ; }
void function ( int arg0 ) { int loc0 = binarySearch ( mFieldNumbers , arg0 ) ; if ( loc0 >= 0 ) { mData [ loc0 ] = DELETED ; mGarbage = true ; } }
byte [ ] function ( ) { return data ; }
boolean function ( List < Check > arg0 , List < Check > arg1 ) { int loc0 = 0 ; for ( Check loc1 : arg0 ) { if ( loc1 . getFailureIndex ( ) != loc0 ) { return false ; } loc0 ++ ; } for ( Check loc1 : arg1 ) { if ( loc1 . getFailureIndex ( ) != loc0 ) { return false ; } } return true ; }
boolean function ( ) { return false ; }
boolean function ( Class < ? > arg0 ) { return isPrimitiveCached ( arg0 ) ; }
HttpRequestHandler function ( final String arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } return this . matcher . match ( arg0 ) ; }
Iterable4 function ( ) { return ( Iterable4 ) new Iterable4 ( ) ; }
void function ( Lockscope arg0 ) { this . lockscope = arg0 ; }
void function ( final String arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } checkRep ( arg0 ) ; }
void function ( Object [ ] arg0 , Object [ ] arg1 ) { if ( arg0 . length != arg1 . length ) { throw new IllegalArgumentException ( "srini_string" ) ; } if ( arg0 != arg1 ) { throw new IllegalArgumentException ( "srini_string" ) ; } for ( int loc0 = 0 ; loc0 < arg0 . length ; loc0 ++ ) { if ( arg0 [ loc0 ] != arg1 [ loc0 ] ) { return ; } } compareCharacter ( arg0 [ loc0 ] , arg1 [ loc0 ] ) ; }
void function ( int arg0 ) { this . n = arg0 ; }
void function ( String arg0 ) { this . links . add ( arg0 ) ; }
GetContenttype function ( ) { return getcontenttype ; }
String function ( ) { return m_Language ; }
double function ( final double arg0 ) { return exp ( arg0 * arg0 ) ; }
void function ( Test arg0 ) { fTests . addElement ( arg0 ) ; }
Object function ( Object arg0 ) { for ( int loc0 = 0 ; loc0 < iPredicates . length ; loc0 ++ ) { if ( iPredicates [ loc0 ] . evaluate ( arg0 ) ) { return arg0 ; } } return null ; }
Property < V > function ( Class < ? > arg0 , String arg1 ) { return new Property < V > ( arg0 , arg1 ) ; }
Throwable function ( ) { return cause ; }
String function ( Lang arg0 ) { if ( lang . equals ( arg0 ) ) { return content ; } return null ; }
PdfIndirectReference function ( String arg0 , PdfDictionary arg1 ) { if ( views == null ) views = new PdfArray ( ) ; views . put ( arg0 , arg1 ) ; return this ; }
int function ( int arg0 ) { return arg0 % size ( ) ; }
List < T > function ( List < T > arg0 , Transformer < T > arg1 ) { List < T > loc0 ; if ( arg1 == null ) { loc0 = arg0 ; } else { loc0 = new ArrayList < T > ( arg0 . size ( ) ) ; for ( T loc1 : arg0 ) { loc0 . add ( arg1 . transform ( loc1 ) ) ; } } return loc0 ; }
byte [ ] function ( ) { int loc0 = buf . length ; byte [ ] loc1 = new byte [ loc0 ] ; System . arraycopy ( buf , 0 , loc1 , 0 , pos ) ; return loc1 ; }
Person function ( ) { return new Person ( firstName , lastName , id , creationTime , modificationTime ) ; }
byte [ ] function ( ) { return this . data ; }
ArrayList < String > function ( ) { return files ; }
String function ( ) { return cacheName ; }
GenMatrix < C > function ( ) { return random ( ) . random ( ) ; }
void function ( int arg0 ) { this . level = arg0 ; }
GenVector < C > function ( ) { return fromInteger ( 0 ) ; }
String function ( ) { return var ; }
ResourceEditPropertyBuilder function ( Integer arg0 ) { this . cardinalityProperty = arg0 ; return this ; }
ClassLoader function ( ) { ClassLoader loc0 = Thread . currentThread ( ) . getContextClassLoader ( ) ; if ( loc0 == null ) loc0 = ClassLoader . getSystemClassLoader ( ) ; return ( loc0 != null ? loc0 : ClassLoader . getClassLoader ( ) ) ; }
Object function ( ) { return last . getKey ( ) ; }
void function ( ) { }
Predicate function ( final Predicate [ ] arg0 ) { return new Predicate [ arg0 . length ] ; }
String function ( long arg0 , String arg1 ) { return number ( arg0 , arg1 , null ) ; }
boolean function ( ) { return iterator . hasNext ( ) ; }
void function ( ValueChangeEvent arg0 ) { if ( ! arg0 . isImmediate ( ) ) { gui . repaint ( ) ; } }
void function ( ) { nLiveMethods ++ ; }
void function ( float arg0 ) { float loc0 = y * arg0 ; float loc1 = z * arg0 ; y = loc0 ; z = loc1 ; }
void function ( String arg0 ) { this . clusterId = arg0 ; }
Message function ( ByteBuffer arg0 , MessageType arg1 ) { Message loc0 = new Message ( arg0 , arg1 ) ; loc0 . type = arg1 ; return loc0 ; }
SummaryStatistics function ( ) { return new SummaryStatistics ( ) ; }
Object function ( ) { return st ; }
void function ( ) { if ( isTimerRunning ( ) ) { return ; } theTimer = new Timer ( ) ; theTimer . start ( ) ; }
void function ( ) { _tableTester . waitForReveal ( ) ; }
String function ( ) { return toString ( 0 , size ( ) ) ; }
String function ( String arg0 ) { int loc0 = arg0 . indexOf ( ' ' ) ; if ( loc0 == - 1 ) { return arg0 ; } else { return arg0 . substring ( 0 , loc0 ) . replace ( "srini_string" , "srini_string" ) ; } }
JPanel function ( ) { JPanel loc0 = new JPanel ( ) ; loc0 . setLayout ( new GridBagLayout ( ) ) ; contentPanel . add ( loc0 ) ; spreadsheet . add ( loc0 ) ; contentPanel . repaint ( ) ; return loc0 ; }
String function ( String arg0 ) { String loc0 = MAP . get ( arg0 ) ; if ( loc0 != null ) return loc0 ; else return arg0 ; }
Object function ( ) { if ( myList != null && myList . size ( ) > 0 ) { return myList . get ( 0 ) . item ; } throw new InvalidItemException ( ) ; }
Map < Method , InterceptorFactory > function ( ) { return componentInterceptors ; }
CouchDB function ( ) { return getMockCouchdb ( Collections . < Map < String , Object >> emptyMap ( ) ) ; }
Parser function ( Class arg0 , Parser arg1 ) { if ( parsers . containsKey ( arg0 ) ) { return ( Parser ) parsers . get ( arg0 ) ; } else { return arg1 ; } }
LinkedList < HashMap < String , MetricsAggregate >> function ( ) { return metricsHistory ; }
Label function ( ) { return defaultTarget ; }
boolean function ( String arg0 , String arg1 , String arg2 ) { return arg0 . startsWith ( arg1 ) && arg0 . contains ( arg2 ) ; }
void function ( ) { }
DoubleListIterator function ( ListIterator arg0 ) { return new DoubleListIterator ( arg0 ) ; }
String [ ] function ( ) { return getVariables ( ) ; }
HandlerMethodArgumentResolver function ( ) { return new HandlerMethodArgumentResolver ( ) ; }
void function ( Region arg0 ) { fTagPosition = arg0 ; }
void function ( String [ ] arg0 ) { printCapitalized ( "srini_string" ) ; }
String function ( ) { return name ; }
IJavaElement function ( IJavaScriptElement arg0 ) { Assert . isNotNull ( arg0 ) ; return ( IJavaElement ) arg0 . getAttributes ( ) . get ( ATTRIBUTE_ELEMENT ) ; }
CSSResolver function ( ) { return new CSSResolver ( ) ; }
StatementBuilder function ( ) { builder . append ( "srini_string" ) ; return this ; }
BigInteger function ( ) { return random . nextBigInteger ( ) ; }
void function ( T arg0 ) { if ( isProcessing ) { throw new IllegalStateException ( "srini_string" ) ; } queuedEvents . add ( arg0 ) ; }
boolean function ( final CharSequence arg0 , final CharSequence arg1 ) { return isElemMatch ( arg0 , arg1 , 0 , arg0 . length ( ) ) ; }
short function ( int arg0 ) { return list . getQuick ( arg0 ) ; }
Period function ( ) { return new Period ( iPeriod , PeriodType . STANDARD ) ; }
boolean function ( ) { return fillInAllowed ; }
void function ( JdrReportCollector arg0 ) { arg0 . start ( ) ; }
Protocol function ( ) { Protocol loc0 = REMOTE . get ( ) ; if ( loc0 == null ) { loc0 = new Protocol ( ) ; REMOTE . set ( loc0 ) ; } return loc0 ; }
void function ( ) { }
AST function ( AST arg0 , AST arg1 ) { arg0 . setFirstChild ( arg1 ) ; arg1 . setNextSibling ( arg0 ) ; return arg0 ; }
double [ ] function ( ) { return list . getElements ( ) ; }
long function ( Runnable arg0 ) { return System . currentTimeMillis ( ) - start ; }
void function ( ) { started = true ; }
void function ( ) { if ( ! started ) { started = true ; startedUs = System . currentTimeMillis ( ) ; } }
boolean function ( IJavaScriptProject arg0 , IProgressMonitor arg1 ) { return false ; }
Image function ( ) { return image ; }
boolean function ( BufferedImage arg0 , boolean arg1 , boolean arg2 ) { if ( arg0 == null ) return false ; return child ( arg0 ) . isAdjacent ( this , arg1 , arg2 ) ; }
boolean function ( ) { return false ; }
void function ( String arg0 ) { frame . setTitle ( arg0 ) ; }
Widget function ( Widget arg0 , Matcher < ? super Widget > arg1 ) { Widget loc0 = find0 ( arg0 ) ; if ( loc0 != null ) { if ( arg1 . matches ( loc0 ) ) { return loc0 ; } } return null ; }
int function ( Object arg0 , Object arg1 ) { if ( ( arg0 == null ) || ( arg1 == null ) ) { return 0 ; } if ( ( arg0 . equals ( arg1 ) ) || ( arg1 . equals ( arg0 ) ) ) { return 1 ; } return - 1 ; }
Local < C > function ( BigInteger arg0 ) { throw new RuntimeException ( "srini_string" ) ; }
int function ( ) { int loc0 = e1 . hashCode ( ) ; loc0 = 29 * loc0 + ( e1 != null ? e1 . hashCode ( ) : 0 ) ; loc0 = 29 * loc0 + ( e2 != null ? e2 . hashCode ( ) : 0 ) ; return loc0 ; }
Text function ( ) { if ( fTextControl == null ) { createTextControl ( ) ; } return fTextControl ; }
SchemaValidatorBuilder function ( ) { this . strategy = new SchemaValidationStrategy ( ) ; return this ; }
void function ( int arg0 , int arg1 , int arg2 ) { int loc0 = ( arg0 << 4 ) & mask ; int loc1 = ( arg1 << 4 ) & mask ; int loc2 = ( arg2 << 4 ) & mask ; int loc3 = ( arg0 >> 16 ) & mask ; int loc4 = ( arg1 >> 8 ) & mask ; int loc5 = ( arg2 >> 16 ) & mask ; int loc6 = ( arg0 >> 24 ) & mask ; setBits ( loc0 , loc1 , loc2 , loc3 , loc4 , loc5 ) ; }
void function ( int arg0 , int arg1 , int arg2 ) { int [ ] loc0 = createSegmentTree ( arg0 , arg1 ) ; SegmentTree loc1 = new SegmentTree ( loc0 ) ; loc1 . updateSegmentTreeRange ( arg2 ) ; }
String function ( ) { return _treeItemTester . getFullPath ( ) ; }
void function ( File arg0 ) { if ( ! arg0 . exists ( ) ) { arg0 . mkdirs ( ) ; } this . outputDir = arg0 ; }
int function ( int arg0 ) { int loc0 = 0 ; if ( arg0 < 0 ) { loc0 = - loc0 ; arg0 = - arg0 ; } while ( arg0 != 0 ) { loc0 = ( loc0 << 8 ) - arg0 ; arg0 >>>= 8 ; } return loc0 ; }
boolean function ( String arg0 ) { return TYPE2FUNC . containsKey ( arg0 ) ; }
boolean function ( ) { return isOffline ; }
void function ( Throwable arg0 ) { if ( log != null ) { log . error ( arg0 ) ; } }
Node function ( ) { return parent ; }
int function ( ) { return number ; }
int function ( ) { return num_values ; }
void function ( final ComposedMessage arg0 , final String arg1 ) { assertEquals ( arg1 , arg0 . getMessage ( ) ) ; }
int function ( ) { return n ; }
void function ( int arg0 [ ] , int arg1 , int arg2 ) { int loc0 = arg0 [ arg1 ] ; arg0 [ arg1 ] = arg0 [ arg2 ] ; arg0 [ arg2 ] = loc0 ; }
String function ( String arg0 ) { if ( arg0 . startsWith ( ZNODE_PATH_SEPARATOR ) ) { return null ; } int loc0 = arg0 . lastIndexOf ( ZNODE_PATH_SEPARATOR ) ; if ( loc0 >= 0 ) { return arg0 . substring ( 0 , loc0 ) ; } else { return null ; } }
Runnable function ( Runnable arg0 ) { return new StackTraceElement [ ] { getStackContext ( arg0 ) } ; }
void function ( boolean arg0 ) { if ( ! arg0 ) { throw new IllegalArgumentException ( "srini_string" ) ; } }
void function ( int arg0 ) { executables . remove ( arg0 ) ; }
void function ( ) { System . out . println ( "srini_string" ) ; UserAccount loc0 = null ; try { loc0 = UserAccountService . find ( ) ; } catch ( Exception loc1 ) { loc1 . printStackTrace ( ) ; } if ( loc0 != null ) { saveAside ( loc0 ) ; } }
Unmarshaller function ( ) { JAXB_CONTEXT . reset ( ) ; Unmarshaller loc0 = JAXB_CONTEXT . createUnmarshaller ( ) ; return loc0 ; }
void function ( File arg0 ) { try ( InputStream loc0 = new FileInputStream ( arg0 ) ) { importLockupData ( loc0 ) ; } }
String function ( int arg0 ) { if ( keyCodeDescMap == null ) { return "srini_string" ; } return keyCodeDescMap . get ( arg0 ) ; }
void function ( String arg0 ) { throw new IllegalStateException ( arg0 ) ; }
boolean function ( Class arg0 , Class < ? > arg1 ) { return arg0 != null && arg1 . isInterface ( ) ; }
void function ( String arg0 ) { this . serialNumber = arg0 ; }
HashMap < String , Integer > function ( String arg0 ) { final HashMap < String , Integer > loc0 = new HashMap < String , Integer > ( ) ; int loc1 = 0 ; while ( - 1 != ( loc1 = arg0 . indexOf ( "srini_string" , loc1 ) ) ) { loc0 . put ( arg0 . substring ( loc1 + 1 ) , loc1 ) ; } return loc0 ; }
boolean function ( String arg0 ) { if ( StringUtils . isBlank ( arg0 ) ) return false ; return staticMap . containsKey ( arg0 ) ; }
int function ( ) { return m_positiveXErrorPixel ; }
String function ( ) { return "srini_string" ; }
boolean function ( Object arg0 ) { if ( ! ( arg0 instanceof ColoredSystem ) ) { return false ; } ColoredSystem < C > loc0 = ( ColoredSystem < C > ) arg0 ; return cgb . equals ( loc0 . getColoredSystem ( ) ) ; }
StackKeeper function ( ) { try { return queue . removeFirst ( ) ; } catch ( Exception loc0 ) { throw new IllegalStateException ( loc0 ) ; } }
String function ( long arg0 , String arg1 ) { return number ( arg0 , arg1 , null ) ; }
Object function ( ) { if ( iterator . hasNext ( ) ) { return ( Object ) iterator . next ( ) ; } else { return null ; } }
void function ( ) { openZipFiles = null ; }
void function ( PdfWriter arg0 , Document arg1 , Rectangle arg2 , boolean arg3 ) { for ( PdfPageEvent loc0 : events ) { loc0 . onChunk ( arg0 , arg1 , arg2 , arg3 ) ; } }
String function ( String arg0 ) { arg0 = arg0 . replaceAll ( "srini_string" , "srini_string" ) ; arg0 = arg0 . replaceAll ( "srini_string" , "srini_string" ) ; arg0 = arg0 . replaceAll ( "srini_string" , "srini_string" ) ; arg0 = arg0 . replaceAll ( "srini_string" , "srini_string" ) ; return arg0 ; }
void function ( CSIColor arg0 ) { this . borderColor = arg0 ; }
NonTerminal function ( Schema arg0 ) { return new NonTerminal ( arg0 . getURI ( ) . toString ( ) , null ) ; }
void function ( Object arg0 ) { this . array = arg0 ; }
String function ( ) { return fcLink ; }
String function ( ) { return name ; }
void function ( Graphics2D arg0 , float arg1 , int arg2 ) { paintFormula ( arg0 , arg1 , arg2 , null ) ; }
Label function ( ) { return end ; }
boolean function ( ) { return size ( ) == 0 ; }
void function ( final String arg0 ) { if ( ! authzEnabled ) { return ; } final HivePrivilegeObject loc0 = new HivePrivilegeObject ( HivePrivilegeObjectType . DATABASE , arg0 , null ) ; authorize ( HiveOperationType . READ , ImmutableList . of ( loc0 ) , Collections . < HivePrivilegeObject > emptyList ( ) ) ; }
List < Node > function ( ) { return cache . values ( ) ; }
void function ( final Exception arg0 ) { }
void function ( ) { this . lastRepublish = System . currentTimeMillis ( ) ; }
String [ ] function ( ) { return toColumns ( ) ; }
String function ( ) { return null ; }
void function ( final OperationsInterface arg0 ) { while ( operands == null ) { operands = new Stack < Double > ( ) ; } operands . push ( arg0 ) ; }
RequestType function ( ) { return requestType ; }
RefactoringDescriptorProxy function ( ) { return fProxy ; }
Boolean function ( ) { return proximitySensor != null ; }
int function ( ) { return ++ staleCounter ; }
void function ( int arg0 [ ] , int arg1 , int arg2 ) { int loc0 = arg0 [ arg1 ] ; arg0 [ arg1 ] = arg0 [ arg2 ] ; arg0 [ arg2 ] = loc0 ; }
UnivPowerSeries < C > function ( ) { return ( UnivPowerSeries < C > ) ZERO ; }
RuleSet function ( ) { if ( this . ruleSet == null ) { this . ruleSet = DigesterFactory . createRuleSet ( ) ; } return ( this . ruleSet ) ; }
void function ( final Object arg0 ) { if ( this . map . containsKey ( arg0 ) ) { this . map . put ( arg0 , this . map . get ( arg0 ) ) ; } else { this . map . put ( arg0 , null ) ; } }
Bag < T > function ( Iterable < ? extends T > arg0 ) { return new TypedBag < > ( arg0 ) ; }
void function ( ) { iterator . remove ( ) ; }
boolean function ( CharSequence arg0 ) { return arg0 == null || arg0 . length ( ) == 0 ; }
String function ( ) { return identifier ; }
Collection function ( ) { return succs ; }
ModelNode function ( PathAddress arg0 , int arg1 ) { return createAddOperation ( arg0 , arg1 , Collections . emptyMap ( ) ) ; }
void function ( Object arg0 , Throwable arg1 ) { if ( is12 ) { getLogger ( ) . log ( FQCN , ( Priority ) Level . ERROR , arg0 , arg1 ) ; } else { getLogger ( ) . log ( FQCN , Level . ERROR , arg0 , arg1 ) ; } }
String function ( String arg0 ) { }
Line function ( ) { if ( mixer == null ) { mixer = new Mixer ( ) ; } return mixer . getMixer ( ) ; }
Result function ( String arg0 ) { return null ; }
Tag function ( ) { return parent ; }
boolean function ( String arg0 ) { return criteriaType . isField ( arg0 ) ; }
void function ( Template arg0 ) { fTemplates . remove ( arg0 ) ; }
Predicate function ( ) { return iPredicate ; }
IWidgetMatcher function ( ) { return _parentMatcher ; }
Link function ( ) { return new Link ( ) ; }
Session function ( ) { return ( Session ) sessionFactory . openSession ( ) ; }
ReflectClass function ( String arg0 ) { return _classLoader . forName ( arg0 ) ; }
String function ( ) { return KRB5_CONF_FILE . getAbsolutePath ( ) ; }
void function ( ) { for ( ILabelProviderListener loc0 : fListeners ) { loc0 . labelProviderChanged ( this ) ; } }
void function ( String arg0 ) { this . catalogName = arg0 ; }
void function ( ) { SecurityConfiguration . getKeyStoreURL ( ) ; }
void function ( SourceDataLine arg0 ) { if ( lines . size ( ) > 8 ) { lines . removeElement ( 0 ) ; } lines . addElement ( arg0 ) ; }
void function ( ) { connector . execute ( "srini_string" , EAR_WITHOUT_APPLICATION_XML ) ; }
long function ( int arg0 ) { return list . getQuick ( arg0 ) ; }
WidgetCondition function ( Widget arg0 , String arg1 ) { return new WidgetCondition ( arg0 , arg1 ) ; }
void function ( Reader arg0 ) { parseWithReader ( arg0 , null ) ; }
void function ( ) { pos . set ( ) ; lookAt . set ( ) ; }
String function ( ) { if ( receiver == null ) { return "srini_string" ; } return receiver . read ( ) ; }
void function ( AnimatedNode arg0 ) { }
void function ( KeyCode arg0 ) { waitFor ( arg0 , syncTimeout ) ; }
StringBuilder function ( ) { return baos ; }
void function ( String arg0 ) { app . lookupMadeHop ( arg0 ) ; }
boolean function ( Object arg0 ) { return isLocked ; }
LIST < C > function ( ) { return list ; }
int function ( int [ ] arg0 ) { int loc0 = arg0 [ 0 ] ; for ( int loc1 : arg0 ) { loc0 = gcd ( loc0 , loc1 ) ; } return loc0 ; }
void function ( Collection arg0 ) { for ( Object loc0 : arg0 ) add ( loc0 ) ; }
String function ( String arg0 ) { return addUnderscores ( StringHelper . unqualify ( arg0 ) ) ; }
int function ( C arg0 ) { return isField ? - 1 : 1 ; }
boolean function ( BufferedImage arg0 , boolean arg1 , boolean arg2 ) { if ( arg0 == null ) return false ; return child ( arg0 ) . isAdjacent ( this , arg1 , arg2 ) ; }
void function ( ) { }
void function ( ) { Messages . getInstance ( ) . sendMessage ( Messages . getString ( "srini_string" ) , null ) ; }
String function ( String arg0 , String arg1 ) { return extractText ( arg0 , arg1 , null ) ; }
List < Potion > function ( ) { if ( topShelf . isEmpty ( ) ) { return Collections . EMPTY_LIST ; } return Collections . unmodifiableList ( topShelf ) ; }
void function ( ) { resources = getResources ( ) ; }
boolean function ( ModInteger arg0 ) { return signum ( ) == arg0 . signum ( ) ; }
void function ( JavaClassWriter arg0 , Attribute [ ] arg1 , int arg2 , int arg3 , int arg4 , int arg5 , String arg6 , int arg7 ) { if ( arg4 != 0 ) { arg0 . addClassAttribute ( arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 ) ; } }
ConditionMapping function ( ICondition arg0 ) { int loc0 = _mappings . indexOf ( arg0 ) ; if ( loc0 != - 1 ) { return _mappings . get ( loc0 ) ; } return null ; }
boolean function ( Boolean arg0 , Boolean arg1 ) { return arg0 != null && arg1 != null && arg0 . equals ( arg1 ) ; }
Change function ( ) { return fUndoChange ; }
int function ( Date arg0 ) { if ( arg0 == null ) throw new NullPointerException ( ) ; if ( this . year < arg0 . year ) return - 1 ; if ( this . year == arg0 . year && this . month < arg0 . month ) return 0 ; if ( this . year == arg0 . year && this . month == arg0 . month && this . day < arg0 . day ) return 1 ; return - 1 ; }
void function ( Path arg0 , Schema arg1 ) { inputSchemaMap . put ( arg0 , arg1 ) ; }
IntList function ( IntList arg0 ) { return UnmodifiableIntList . unmodifiableIntList ( arg0 ) ; }
int function ( ) { return queue . size ( ) ; }
boolean function ( String arg0 ) { return arg0 . startsWith ( toString ( ) ) ; }
Executor function ( Executor arg0 ) { if ( arg0 == null ) { arg0 = DefaultExecutor . INSTANCE ; } return new ContextExecutor ( arg0 ) ; }
void function ( Airport arg0 ) { this . larnacaAirport = arg0 ; }
void function ( final String arg0 ) { this . localeKey = arg0 ; }
MemberRef function ( ) { return new MemberRef ( this ) ; }
void function ( Device arg0 ) { if ( arg0 != null ) { logger . info ( "srini_string" + arg0 . getSerialNumber ( ) ) ; arg0 . startInputTask ( ) ; } }
void function ( ) { if ( ! isEmpty ( ) ) { list . add ( first ( ) ) ; list . add ( second ( ) ) ; } }
void function ( TagState arg0 ) { tagState = arg0 ; }
Chunk function ( int arg0 , int arg1 ) { return new Chunk ( arg0 , arg1 ) ; }
String function ( ) { return name ; }
String function ( ) { return result . toString ( ) ; }
boolean function ( long arg0 ) { if ( allocationLimit . get ( ) < arg0 ) { return false ; } else { allocationLimit . set ( arg0 ) ; return true ; } }
void function ( String arg0 , String arg1 ) { if ( this . attr . containsKey ( arg0 ) ) { this . attr . put ( arg0 , arg1 ) ; } else { this . attr . put ( arg0 , arg1 ) ; } }
HttpRoute function ( HttpParams arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } HttpRoute loc0 = ( HttpRoute ) arg0 . getParameter ( FORCED_ROUTE ) ; if ( ( loc0 != null ) && NO_ROUTE . equals ( loc0 ) ) { loc0 = null ; } return loc0 ; }
boolean function ( Object arg0 ) { if ( ! ( arg0 instanceof RatTermVec ) ) return false ; RatTermVec loc0 = ( RatTermVec ) arg0 ; return underlying_terms . equals ( loc0 . underlying_terms ) ; }
void function ( File arg0 ) { this . outputFile = arg0 ; this . createOutputFile = true ; }
DSLContext function ( QueryCondition ... arg0 ) { return new DSLContext ( Arrays . asList ( arg0 ) ) ; }
void function ( ) { while ( ! isProcessing ) { try { wait ( ) ; } catch ( InterruptedException loc0 ) { } } isProcessing = true ; }
void function ( Boolean arg0 ) { this . isTest = arg0 ; }
InputStream function ( ) { return stream ; }
R function ( T arg0 , P arg1 ) { return arg1 ; }
boolean function ( Object arg0 ) { if ( arg0 == null ) { throw new NullPointerException ( "srini_string" ) ; } return _first . equals ( arg0 ) || _last . equals ( arg0 ) ; }
int function ( ) { return _size ; }
Iterator < T > function ( long arg0 ) { return new ColumnIterator ( this , arg0 ) ; }
void function ( boolean arg0 ) { this . debug = arg0 ; }
void function ( String arg0 , Object arg1 , String arg2 ) { if ( log != null ) { log . info ( arg0 , arg1 , arg2 ) ; } }
float function ( ) { return list . removeAt ( list . size ( ) - 1 ) ; }
Color function ( String arg0 ) { return parse ( new InputSource ( arg0 ) ) ; }
ImageDescriptor function ( ) { return fImage ; }
void function ( String arg0 , long arg1 ) { blobEntityToBlob . setContainer ( arg0 ) ; blobBuilders . accept ( jdbcService , arg1 ) ; }
void function ( IPropertyChangeListener arg0 ) { }
boolean function ( String arg0 , String arg1 ) { return invokeMethod ( arg0 , arg1 , Boolean . class ) ; }
String function ( ) { return description ; }
int function ( ) { return lowValue ; }
Properties function ( ) { Properties loc0 = new Properties ( ) ; verifyProperties ( loc0 ) ; return loc0 ; }
String function ( ) { return lang ; }
String function ( String arg0 ) { return topologyBases ( ) . get ( arg0 ) ; }
void function ( Limit arg0 ) { limits . add ( arg0 ) ; }
byte [ ] function ( byte [ ] arg0 , PrivateKey arg1 , String arg2 ) { CMSSignedData loc0 = new CMSSignedData ( arg0 ) ; return loc0 . getEncryptedData ( arg1 , arg2 ) ; }
int function ( ) { checkIsOpen ( ) ; return readDeviceDescriptor ( device . getHandle ( ) ) ; }
void function ( String arg0 ) { System . err . println ( "srini_string" + getName ( ) + "srini_string" + getAsString ( ) + "srini_string" + getMaximumValue ( ) + "srini_string" + getMaximumTextLength ( ) + "srini_string" + getFieldType ( ) + "srini_string" + getMinimumValue ( ) + "srini_string" + getMaximumValue ( ) + "srini_string" + getMaximumTextLength ( ) ) ; }
void function ( PRIndirectReference arg0 ) { this . indRef = arg0 ; }
void function ( ) { player = new Player ( ) ; }
void function ( int arg0 , int arg1 , int arg2 ) { foreColor . arg0 = arg0 ; foreColor . arg1 = arg1 ; foreColor . arg2 = arg2 ; }
void function ( RemittanceInformation5 arg0 ) { }
void function ( ) { violations . clear ( ) ; }
T function ( String arg0 , String arg1 ) { return link ( arg0 , arg1 , null ) ; }
boolean function ( ) { return false ; }
Criteria function ( Object arg0 , Object arg1 ) { checkComplete ( ) ; if ( arg0 == null ) { return new EqualsCriteria ( arg1 ) ; } return new EqualsCriteria ( arg0 , arg1 ) ; }
String function ( String arg0 ) { BufferedReader loc0 = new BufferedReader ( new FileReader ( arg0 ) ) ; String loc1 = null ; try { loc1 = loc0 . readLine ( ) ; } catch ( IOException loc2 ) { } return loc1 ; }
String function ( ) { return code ; }
void function ( Object arg0 , Throwable arg1 ) { log ( arg0 , null , arg1 ) ; }
WebArchive function ( String arg0 , char [ ] arg1 ) { return createWar ( arg0 , arg1 , SD_DEFAULT , null ) ; }
void function ( String [ ] arg0 ) { prepare ( ) ; System . out . println ( "srini_string" ) ; System . in . read ( ) ; }
void function ( String [ ] arg0 ) { Site loc0 = new Site ( ) ; loc0 . execute ( ) ; }
int function ( ) { return ( int ) Math . round ( y2 ) ; }
void function ( ) { if ( ! lookupEnabled ) return ; PeerStatus loc0 = myNode . getPeerStatus ( ) ; if ( loc0 != null ) { log . info ( "srini_string" + loc0 . getSimSec ( ) + "srini_string" ) ; } else { log . info ( "srini_string" + myNode . getPeerStatus ( ) ) ; } }
void function ( ) { for ( ResourceEntity loc0 : resources ) { loc0 . setName ( name ) ; } }
void function ( Point2D arg0 ) { this . startPoint = arg0 ; }
Landmark function ( String arg0 ) { String loc0 = SEP_CHARACTER + arg0 + SEP_CHARACTER ; this . packedString = arg0 ; this . cat_id = Integer . parseInt ( loc0 ) ; return this . fullUnpack ( ) ; }
void function ( String arg0 ) { this . skipHours . add ( arg0 ) ; }
SqlState function ( SQLException arg0 ) { return determineSqlStateClassCode ( extractSqlStateClassCode ( arg0 ) ) ; }
boolean function ( int arg0 ) { return isStandardTypeCode ( arg0 ) ; }
ILanguageNames function ( ) { return languageNames ; }
boolean function ( ) { return connected ; }
void function ( int arg0 ) { productID = arg0 ; }
int function ( ) { return remCount ; }
boolean function ( Object arg0 ) { return dkMap . containsKey ( arg0 ) ; }
Closure function ( ) { return iClosure ; }
boolean function ( int arg0 ) { return this_bits_valid [ arg0 ] ; }
int function ( ) { return ( data [ position ++ ] & 0xFF ) ; }
List < T > function ( ) { List < T > loc0 = getContexts ( ) ; if ( loc0 == null ) { loc0 = new ArrayList < T > ( ) ; } return loc0 ; }
void function ( String arg0 , String arg1 ) { validate . notEmpty ( arg0 , arg1 ) ; }
boolean function ( Object arg0 ) { if ( arg0 == null ) return false ; if ( ! ( arg0 instanceof IdentifierValue ) ) return false ; return ( ( IdentifierValue ) arg0 ) . value == value ; }
ListIterator function ( ListIterator arg0 ) { if ( arg0 == null ) { return null ; } return new ListIteratorWrapper ( arg0 ) ; }
Image function ( int [ ] arg0 ) { return toIntImage ( arg0 , BufferedImage . TYPE_INT_ARGB ) ; }
void function ( ) { if ( releaseMap . isEmpty ( ) ) { releaseMap . put ( upcomingReleaseId , new ReleaseEntity ( ) ) ; } }
Class < ? > function ( ) { return elementType ; }
void function ( ) { assertTrue ( "srini_string" , incorrectRoleResult . contains ( DESTROY_METHOD_NOT_PASS ) ) ; }
void function ( ) { annotations . process ( null , null , null ) ; }
void function ( ) { List < Element > loc0 = d . getContent ( ) ; verifyIfPdfDiv ( loc0 ) ; }
String function ( ) { return fElement . getAttribute ( CLASS_ATTRIBUTE ) ; }
void function ( ) { throw new WaitTimeoutException ( "srini_string" ) ; }
void function ( boolean arg0 ) { this . expandEntityRef = arg0 ; }
File function ( ) { return fileInput ; }
void function ( int arg0 , int arg1 ) { Edge loc0 = new Edge ( arg0 , arg1 ) ; edgeList . add ( loc0 ) ; }
boolean function ( List < GenSolvablePolynomial < C >> arg0 , List < GenSolvablePolynomial < C >> arg1 ) { return isTwosidedGB ( arg0 . size ( ) , arg1 . size ( ) ) ; }
String function ( Object arg0 ) { if ( arg0 == null ) return "srini_string" ; return arg0 . toString ( ) ; }
FieldSelection function ( List < String > arg0 ) { return new FieldSelection ( arg0 . toArray ( new String [ arg0 . size ( ) ] ) ) ; }
List < ReleaseEntity > function ( ) { log . info ( "srini_string" ) ; List < ReleaseEntity > loc0 = persistenceService . findAllReleases ( ) ; return loc0 ; }
void function ( OverlayAdapter arg0 ) { adapters . add ( arg0 ) ; }
boolean function ( String arg0 ) { return _binsByUri . containsKey ( arg0 ) ; }
List < Message > function ( ) { if ( message == null ) { message = new ArrayList < Message > ( ) ; } return this . message ; }
Validator function ( ) { return new Validator ( ) ; }
void function ( StringBuilder arg0 ) { selectClause . append ( arg0 ) ; }
void function ( Motorbike arg0 ) { if ( arg0 != null ) { entityManager . persist ( arg0 ) ; } }
void function ( final int arg0 ) { ensureCapacity ( arg0 ) ; buffer [ arg0 ] = ( byte ) ( arg0 >>> 8 ) ; buffer [ arg0 ] = ( byte ) arg0 ; length += arg0 ; }
Date function ( Date arg0 , Date arg1 ) { if ( arg0 == null ) { return null ; } if ( arg1 == null ) { return null ; } return arg0 . getTime ( ) > ( arg1 . getTime ( ) - 1 ) ? arg0 : arg1 ; }
Property function ( ) { return property ; }
String function ( ) { return this . localeKey ; }
C function ( long arg0 ) { return random . parse ( arg0 ) ; }
Widget function ( Widget arg0 , Hierarchy arg1 , Matcher < Widget > arg2 ) { Widget loc0 = arg0 ; while ( loc0 != null ) { if ( arg2 . matches ( loc0 ) ) { return loc0 ; } loc0 = arg1 . find ( loc0 ) ; } return null ; }
RandomAccessSource function ( byte [ ] arg0 , String arg1 ) { return new ByteArrayRandomAccessSource ( arg0 , arg1 , false ) ; }
void function ( ) { assertEquals ( "srini_string" , ctx . getPageSize ( ) , 4 ) ; }
String function ( ) { return pluginMeta . getVersion ( ) ; }
boolean function ( ) { return needBeforeSpace ; }
void function ( int arg0 ) { }
Set function ( ) { return _register . entrySet ( ) ; }
LocalContainerEntityManagerFactoryBean function ( ) { LOGGER . info ( "srini_string" ) ; return entityManagerFactory ( ) ; }
RingFactory < C > function ( ) { return ring ; }
void function ( float arg0 ) { this . width = arg0 ; }
LIST < C > function ( ) { return ( LIST < C > ) LIST10 . inverse ( ) ; }
void function ( ) { migrationDone = false ; }
Collection function ( Container arg0 ) { return getComponents ( arg0 , defaultHierarchy ) ; }
void function ( Throwable arg0 ) { log ( arg0 . getMessage ( ) ) ; arg0 . printStackTrace ( ) ; }
String [ ] function ( ) { return ( String [ ] ) this . items . toArray ( new String [ this . items . size ( ) ] ) ; }
ProgressRequestBody function ( String arg0 , String arg1 ) { return new ProgressRequestBody ( arg0 , arg1 , ProgressIndicator . OK ) ; }
int function ( T arg0 ) { return nodePosition . get ( arg0 ) ; }
HttpClient function ( ) { return backend ; }
Allprop function ( ) { return allprop ; }
void function ( byte [ ] arg0 , PrintWriter arg1 ) { arg1 . write ( encode ( arg0 ) ) ; }
void function ( ) { fExecContext = fForkChangeExecution ; fForkChangeExecution = false ; }
Items function ( ) { return items ; }
Symbol function ( ) { return stack [ -- pos ] ; }
SortedSet < T > function ( bag arg0 , Class < T > arg1 ) { return typedSortedBag ( arg0 , arg1 , false ) ; }
void function ( VectorXYZ arg0 ) { setPos ( arg0 ) ; lookAt = arg0 ; }
byte [ ] function ( String arg0 ) { if ( arg0 == null ) { return null ; } MessageDigest loc0 ; loc0 = MessageDigest . getInstance ( "srini_string" ) ; loc0 . update ( arg0 . getBytes ( ) , 0 , arg0 . length ( ) ) ; return loc0 . digest ( ) ; }
IStatus function ( ) { return null ; }
boolean function ( ) { return ring . isField ( ) ; }
Type function ( String arg0 ) { return basicTypeRegistry . locate ( arg0 ) ; }
String function ( Bundle arg0 ) { Validate . notNull ( arg0 , "srini_string" ) ; return arg0 . getString ( TOKEN_KEY ) ; }
int function ( ) { return limit - position ; }
void function ( ) { reactor . start ( ) ; }
void function ( final StyleListener arg0 ) { if ( arg0 == null ) { throw new NullPointerException ( ) ; } listeners . remove ( arg0 ) ; }
String function ( ) { return technicalKey ; }
IJavaElement function ( JavaEditor arg0 ) { return arg0 . getEnclosingElement ( ) ; }
void function ( ExecutionData arg0 ) { names . add ( arg0 . getClass ( ) . getName ( ) ) ; entries . put ( arg0 . getClass ( ) . getName ( ) , arg0 ) ; }
void function ( Set < String > arg0 ) { HashSet < String > loc0 = new HashSet < String > ( arg0 ) ; loc0 . removeAll ( countryLookup . keySet ( ) ) ; }
void function ( double arg0 ) { this . torusDimensionSize = arg0 ; }
GenVector < C > function ( GenVector < C > arg0 ) { if ( arg0 . val . isEmpty ( ) || arg0 . val . size ( ) != val . size ( ) ) { logger . error ( "srini_string" ) ; return null ; } else { return lexicogapheticCompare ( val , arg0 . val ) ; } }
Closure [ ] function ( ) { return iClosures ; }
int function ( ) { return _index ; }
void function ( Iterator arg0 ) { this . iterator = arg0 ; }
float function ( ) { return width ; }
void function ( OpModeManager arg0 ) { }
Comparator function ( boolean arg0 ) { return new OrderedBooleanComparator ( arg0 ) ; }
void function ( ) { stop = true ; }
int function ( String arg0 ) { throw new UnsupportedOperationException ( "srini_string" ) ; }
void function ( ) { Nazgul loc0 = Nazgul . getInstance ( "srini_string" ) ; assertTrue ( loc0 instanceof Nazgul ) ; }
boolean function ( ITestIdentifier arg0 ) { return _runningTest . equals ( arg0 ) ; }
ModuleList < C > function ( ) { return new ModuleList < > ( sbb . twosidedGroebnerBase ( ) ) ; }
void function ( IText arg0 ) { insertNames ( arg0 ) ; }
String function ( String arg0 ) { if ( arg0 != null && arg0 . startsWith ( "srini_string" ) ) { arg0 = arg0 . substring ( 1 ) ; } return "srini_string" + arg0 ; }
void function ( String arg0 , String arg1 ) { fileLoggerModule = new FileLoggerModule ( arg0 ) ; consoleLoggerModule = new ConsoleLoggerModule ( arg1 ) ; }
DocumentBuilder function ( String arg0 ) { Section loc0 = new Section ( arg0 ) ; sections . add ( loc0 ) ; return this ; }
boolean function ( int arg0 , int arg1 ) { return ( ( arg0 * arg1 ) + DOWN ) == 0 ; }
void function ( int arg0 , int arg1 , Chunk arg2 , Font arg3 ) { Font loc0 = applyFontStyles ( arg0 , arg1 , arg2 , arg3 ) ; arg2 . setStyle ( loc0 ) ; }
void function ( Object arg0 ) { error ( arg0 . toString ( ) , arg0 ) ; }
KeyValuePairList function ( ) { return new KeyValuePairList ( ) ; }
void function ( ) { fListeneredDisabled = true ; notifyListeners ( ) ; }
int function ( Object arg0 , Object arg1 ) { if ( arg0 == null ) return ( arg1 == null ) ? 0 : 1 ; if ( arg1 == null ) return - 1 ; if ( arg0 . getClass ( ) != arg1 . getClass ( ) ) return arg0 . compareTo ( arg1 ) ; return ( arg0 . hashCode ( ) == arg1 . hashCode ( ) ) ; }
long function ( DisplayPortMetrics arg0 ) { long loc0 = mTimestamps [ mTail ] ; mTimestamps [ mTail ] = 0 ; return loc0 ; }
BaseColor function ( ) { return strokeColor ; }
SchemaValidatorBuilder function ( SchemaValidationStrategy arg0 ) { this . strategy = arg0 ; return this ; }
IJavaScriptElement function ( IJavaScriptElement arg0 ) { return null ; }
long function ( ) { return ours ; }
double function ( ) { return this . mu ; }
void function ( Throwable arg0 ) { if ( fShowTraceInConsoleViewAction != null ) { fShowTraceInConsoleAction . perform ( ) ; } if ( fFailure != null ) { fFailure . showStackTrace ( arg0 ) ; } }
DurationFieldType function ( int arg0 ) { int loc0 = ContainerHelpers . binarySearch ( this . fieldTypes , arg0 ) ; if ( loc0 < 0 ) { return null ; } return this . fieldTypes [ loc0 ] ; }
void function ( ) { Employee loc0 = em . find ( Employee . class , 1212 ) ; em . persist ( loc0 ) ; em . flush ( ) ; performFailCall ( "srini_string" ) ; }
void function ( SourceEntry arg0 ) { }
boolean function ( BufferedImage arg0 , boolean arg1 , boolean arg2 ) { if ( arg0 == null ) return false ; return child ( arg0 ) . isAdjacent ( this , arg1 , arg2 ) ; }
Set function ( Map arg0 ) { return new SetFromMap ( arg0 ) ; }
Branch function ( ) { return new Branch ( this ) ; }
boolean function ( final String arg0 ) { return ZNODE_PATH_SEPARATOR . equals ( arg0 ) ; }
void function ( int arg0 ) { constantValue . setIndex ( arg0 ) ; }
void function ( Exception arg0 ) { this . exception = arg0 ; if ( callback != null ) { callback . onFailure ( arg0 ) ; } }
Double function ( double arg0 ) { return factory . findZero ( arg0 ) ; }
Iterator < Double > function ( DoubleIterator arg0 ) { if ( arg0 == null ) { return null ; } else { return new DoubleIteratorWrapper ( arg0 ) ; } }
